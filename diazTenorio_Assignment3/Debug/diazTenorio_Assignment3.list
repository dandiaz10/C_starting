
diazTenorio_Assignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08007dc0  08007dc0  00017dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008108  08008108  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008110  08008110  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080082f4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080082f4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edca  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd0  00000000  00000000  0002efd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023240  00000000  00000000  00032790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a70a  00000000  00000000  000559d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2df0  00000000  00000000  000600da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132eca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  00132f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007da8 	.word	0x08007da8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007da8 	.word	0x08007da8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f002 fac8 	bl	8003450 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f002 fab8 	bl	8003450 <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000efc:	2110      	movs	r1, #16
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f00:	f7ff ffd2 	bl	8000ea8 <GPIO_SetBits>
 8000f04:	e003      	b.n	8000f0e <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000f06:	2110      	movs	r1, #16
 8000f08:	481e      	ldr	r0, [pc, #120]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f0a:	f7ff ffdd 	bl	8000ec8 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000f18:	2120      	movs	r1, #32
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f1c:	f7ff ffc4 	bl	8000ea8 <GPIO_SetBits>
 8000f20:	e003      	b.n	8000f2a <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000f22:	2120      	movs	r1, #32
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f26:	f7ff ffcf 	bl	8000ec8 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f38:	f7ff ffb6 	bl	8000ea8 <GPIO_SetBits>
 8000f3c:	e003      	b.n	8000f46 <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000f3e:	2140      	movs	r1, #64	; 0x40
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f42:	f7ff ffc1 	bl	8000ec8 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da04      	bge.n	8000f58 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f52:	f7ff ffa9 	bl	8000ea8 <GPIO_SetBits>
 8000f56:	e003      	b.n	8000f60 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f5c:	f7ff ffb4 	bl	8000ec8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8000f60:	2201      	movs	r2, #1
 8000f62:	2102      	movs	r1, #2
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f66:	f002 fa73 	bl	8003450 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f000 feca 	bl	8001d04 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000f70:	2200      	movs	r2, #0
 8000f72:	2102      	movs	r1, #2
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <hd44780_wr_hi_nibble+0x9c>)
 8000f76:	f002 fa6b 	bl	8003450 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	48000400 	.word	0x48000400

08000f88 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000fa0:	f7ff ff82 	bl	8000ea8 <GPIO_SetBits>
 8000fa4:	e003      	b.n	8000fae <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	481e      	ldr	r0, [pc, #120]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000faa:	f7ff ff8d 	bl	8000ec8 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000fb8:	2120      	movs	r1, #32
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000fbc:	f7ff ff74 	bl	8000ea8 <GPIO_SetBits>
 8000fc0:	e003      	b.n	8000fca <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000fc6:	f7ff ff7f 	bl	8000ec8 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000fd8:	f7ff ff66 	bl	8000ea8 <GPIO_SetBits>
 8000fdc:	e003      	b.n	8000fe6 <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000fde:	2140      	movs	r1, #64	; 0x40
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000fe2:	f7ff ff71 	bl	8000ec8 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000ff4:	f7ff ff58 	bl	8000ea8 <GPIO_SetBits>
 8000ff8:	e003      	b.n	8001002 <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8000ffe:	f7ff ff63 	bl	8000ec8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001002:	2201      	movs	r2, #1
 8001004:	2102      	movs	r1, #2
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8001008:	f002 fa22 	bl	8003450 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800100c:	2002      	movs	r0, #2
 800100e:	f000 fe79 	bl	8001d04 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001012:	2200      	movs	r2, #0
 8001014:	2102      	movs	r1, #2
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <hd44780_wr_lo_nibble+0x9c>)
 8001018:	f002 fa1a 	bl	8003450 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	48000400 	.word	0x48000400

08001028 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff57 	bl	8000ee8 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffa3 	bl	8000f88 <hd44780_wr_lo_nibble>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <hd44780_wr_cmd+0x24>)
 800105c:	f002 f9f8 	bl	8003450 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffe0 	bl	8001028 <hd44780_write>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	48000400 	.word	0x48000400

08001074 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 800107e:	2201      	movs	r2, #1
 8001080:	2101      	movs	r1, #1
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <hd44780_wr_data+0x24>)
 8001084:	f002 f9e4 	bl	8003450 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ffcc 	bl	8001028 <hd44780_write>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	48000400 	.word	0x48000400

0800109c <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HD44780_Init+0xbc>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <HD44780_Init+0xbc>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HD44780_Init+0xbc>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 80010ba:	23f0      	movs	r3, #240	; 0xf0
 80010bc:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4823      	ldr	r0, [pc, #140]	; (800115c <HD44780_Init+0xc0>)
 80010d0:	f002 f854 	bl	800317c <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80010d4:	230b      	movs	r3, #11
 80010d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	481c      	ldr	r0, [pc, #112]	; (800115c <HD44780_Init+0xc0>)
 80010ea:	f002 f847 	bl	800317c <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80010ee:	2200      	movs	r2, #0
 80010f0:	2102      	movs	r1, #2
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <HD44780_Init+0xc0>)
 80010f4:	f002 f9ac 	bl	8003450 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80010f8:	2200      	movs	r2, #0
 80010fa:	2101      	movs	r1, #1
 80010fc:	4817      	ldr	r0, [pc, #92]	; (800115c <HD44780_Init+0xc0>)
 80010fe:	f002 f9a7 	bl	8003450 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8001102:	2200      	movs	r2, #0
 8001104:	2108      	movs	r1, #8
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <HD44780_Init+0xc0>)
 8001108:	f002 f9a2 	bl	8003450 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 800110c:	2010      	movs	r0, #16
 800110e:	f000 fdf9 	bl	8001d04 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8001112:	2030      	movs	r0, #48	; 0x30
 8001114:	f7ff fee8 	bl	8000ee8 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8001118:	2005      	movs	r0, #5
 800111a:	f000 fdf3 	bl	8001d04 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800111e:	2030      	movs	r0, #48	; 0x30
 8001120:	f7ff fee2 	bl	8000ee8 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8001124:	2001      	movs	r0, #1
 8001126:	f000 fded 	bl	8001d04 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800112a:	2030      	movs	r0, #48	; 0x30
 800112c:	f7ff fedc 	bl	8000ee8 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8001130:	2020      	movs	r0, #32
 8001132:	f7ff fed9 	bl	8000ee8 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8001136:	2028      	movs	r0, #40	; 0x28
 8001138:	f7ff ff88 	bl	800104c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 800113c:	200c      	movs	r0, #12
 800113e:	f7ff ff85 	bl	800104c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff ff82 	bl	800104c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8001148:	2006      	movs	r0, #6
 800114a:	f7ff ff7f 	bl	800104c <hd44780_wr_cmd>

}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400

08001160 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff81 	bl	8001074 <hd44780_wr_data>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	d901      	bls.n	800119a <HD44780_GotoXY+0x1e>
		x = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d901      	bls.n	80011a4 <HD44780_GotoXY+0x28>
		y = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d816      	bhi.n	80011d8 <HD44780_GotoXY+0x5c>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <HD44780_GotoXY+0x34>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011c7 	.word	0x080011c7
 80011b8:	080011cd 	.word	0x080011cd
 80011bc:	080011d3 	.word	0x080011d3
	case 0:
		copy_y = 0x80;
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	73fb      	strb	r3, [r7, #15]
		break;
 80011c4:	e008      	b.n	80011d8 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 80011c6:	23c0      	movs	r3, #192	; 0xc0
 80011c8:	73fb      	strb	r3, [r7, #15]
		break;
 80011ca:	e005      	b.n	80011d8 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 80011cc:	2394      	movs	r3, #148	; 0x94
 80011ce:	73fb      	strb	r3, [r7, #15]
		break;
 80011d0:	e002      	b.n	80011d8 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 80011d2:	23d4      	movs	r3, #212	; 0xd4
 80011d4:	73fb      	strb	r3, [r7, #15]
		break;
 80011d6:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	4413      	add	r3, r2
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff33 	bl	800104c <hd44780_wr_cmd>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffab 	bl	8001160 <HD44780_PutChar>
		i++;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ef      	bne.n	80011fc <HD44780_PutStr+0xc>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <readSensor>:
  * PARAMETERS		   : ADC_HandleTypeDef *hadc1: the adc configured to be used.
  *
  * RETURN			   : int digitalVoltage: digital voltage read
  */
uint16_t readSensor(ADC_HandleTypeDef *hadc1)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	uint16_t digitalVoltage = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	81fb      	strh	r3, [r7, #14]

	HAL_ADC_Start(&*hadc1);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f001 f8d7 	bl	80023e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&*hadc1, 1000);
 8001236:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 f968 	bl	8002510 <HAL_ADC_PollForConversion>
	digitalVoltage = HAL_ADC_GetValue(&*hadc1);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 f9ed 	bl	8002620 <HAL_ADC_GetValue>
 8001246:	4603      	mov	r3, r0
 8001248:	81fb      	strh	r3, [r7, #14]
	HAL_Delay(2000);
 800124a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800124e:	f000 fd59 	bl	8001d04 <HAL_Delay>
	HAL_ADC_Stop(&*hadc1);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f001 f929 	bl	80024aa <HAL_ADC_Stop>

	return digitalVoltage;
 8001258:	89fb      	ldrh	r3, [r7, #14]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <getAnalogVoltage>:
  * 					adcResolution = 0.87890625
  *
  * RETURN			   : float analogVoltage: equivalent analogVoltage
  */
float getAnalogVoltage(const float adcResolution)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t digitalVoltage = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	81fb      	strh	r3, [r7, #14]
	float analogVoltage = 0;
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]

	digitalVoltage = readSensor(&hadc1);
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <getAnalogVoltage+0x44>)
 800127a:	f7ff ffd3 	bl	8001224 <readSensor>
 800127e:	4603      	mov	r3, r0
 8001280:	81fb      	strh	r3, [r7, #14]
	analogVoltage = adcResolution * digitalVoltage;
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	edc7 7a02 	vstr	s15, [r7, #8]

	return analogVoltage;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	ee07 3a90 	vmov	s15, r3
}
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000204 	.word	0x20000204

080012ac <getTemperature>:
  * 					 after testing the sensor several times the best value is -8
  *
  * RETURN			   : float temperature: the equivalent temperature in Celsius.
  */
float getTemperature(const float adcResolution, const int8_t callibration)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b6:	4603      	mov	r3, r0
 80012b8:	70fb      	strb	r3, [r7, #3]
	float analogVoltage = 0;
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
	float temperature = 0;
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]

	analogVoltage = getAnalogVoltage(adcResolution);
 80012c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80012ca:	f7ff ffcb 	bl	8001264 <getAnalogVoltage>
 80012ce:	ed87 0a03 	vstr	s0, [r7, #12]
	temperature = (analogVoltage / 10) - 50 - callibration;
 80012d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80012da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012de:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800130c <getTemperature+0x60>
 80012e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	edc7 7a02 	vstr	s15, [r7, #8]

	return temperature;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	ee07 3a90 	vmov	s15, r3
}
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	42480000 	.word	0x42480000

08001310 <printLcdVcn>:
  * PARAMETERS		   : float temperature: the temperature.
  *
  * RETURN			   : no return.
  */
void printLcdVcn(float temperature)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	ed87 0a01 	vstr	s0, [r7, #4]
	char printBuffer [16] = { 0 };
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]

	//print on vcn
	printf("Temperature is %.2f Celsius \n", temperature);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff f90d 	bl	8000548 <__aeabi_f2d>
 800132e:	4603      	mov	r3, r0
 8001330:	460c      	mov	r4, r1
 8001332:	461a      	mov	r2, r3
 8001334:	4623      	mov	r3, r4
 8001336:	4811      	ldr	r0, [pc, #68]	; (800137c <printLcdVcn+0x6c>)
 8001338:	f004 fcb0 	bl	8005c9c <iprintf>

	// print on display
	HD44780_GotoXY(0, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff ff1c 	bl	800117c <HD44780_GotoXY>
	HD44780_PutStr("Temperature is ");
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <printLcdVcn+0x70>)
 8001346:	f7ff ff53 	bl	80011f0 <HD44780_PutStr>
	sprintf(printBuffer, " %.2f Celsius", temperature);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff f8fc 	bl	8000548 <__aeabi_f2d>
 8001350:	4603      	mov	r3, r0
 8001352:	460c      	mov	r4, r1
 8001354:	f107 0008 	add.w	r0, r7, #8
 8001358:	461a      	mov	r2, r3
 800135a:	4623      	mov	r3, r4
 800135c:	4909      	ldr	r1, [pc, #36]	; (8001384 <printLcdVcn+0x74>)
 800135e:	f004 fcb5 	bl	8005ccc <siprintf>
	HD44780_GotoXY(0, 1);
 8001362:	2101      	movs	r1, #1
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ff09 	bl	800117c <HD44780_GotoXY>
	HD44780_PutStr(printBuffer);
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff3e 	bl	80011f0 <HD44780_PutStr>
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	08007dc0 	.word	0x08007dc0
 8001380:	08007de0 	.word	0x08007de0
 8001384:	08007df0 	.word	0x08007df0

08001388 <rgbLed>:
  * PARAMETERS		   : float temperature: the temperature.
  *
  * RETURN			   : no return.
  */
void rgbLed(float temperature)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temperature <= 20.5)
 8001392:	edd7 7a01 	vldr	s15, [r7, #4]
 8001396:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80014d8 <rgbLed+0x150>
 800139a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d819      	bhi.n	80013d8 <rgbLed+0x50>
	{ // flash Blue
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f002 f84f 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f002 f848 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f002 f841 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80013ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d2:	f000 fc97 	bl	8001d04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // flash Red
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_Delay(1000);
	}
}
 80013d6:	e075      	b.n	80014c4 <rgbLed+0x13c>
	else if (temperature > 20.5 && temperature <= 37.3)
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80014d8 <rgbLed+0x150>
 80013e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	dd24      	ble.n	8001434 <rgbLed+0xac>
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	a337      	add	r3, pc, #220	; (adr r3, 80014d0 <rgbLed+0x148>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff fb7b 	bl	8000af0 <__aeabi_dcmple>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d019      	beq.n	8001434 <rgbLed+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f002 f821 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f002 f81a 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f002 f813 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142e:	f000 fc69 	bl	8001d04 <HAL_Delay>
 8001432:	e047      	b.n	80014c4 <rgbLed+0x13c>
	else if (temperature > 37.3 && temperature <= 39.5)
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff f887 	bl	8000548 <__aeabi_f2d>
 800143a:	a325      	add	r3, pc, #148	; (adr r3, 80014d0 <rgbLed+0x148>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff fb6a 	bl	8000b18 <__aeabi_dcmpgt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d022      	beq.n	8001490 <rgbLed+0x108>
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
 800144e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80014dc <rgbLed+0x154>
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d819      	bhi.n	8001490 <rgbLed+0x108>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f001 fff3 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f001 ffec 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f001 ffe5 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f000 fc3b 	bl	8001d04 <HAL_Delay>
 800148e:	e019      	b.n	80014c4 <rgbLed+0x13c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // flash Red
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f001 ffd9 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f001 ffd2 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b6:	f001 ffcb 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80014ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014be:	f000 fc21 	bl	8001d04 <HAL_Delay>
}
 80014c2:	e7ff      	b.n	80014c4 <rgbLed+0x13c>
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	f3af 8000 	nop.w
 80014d0:	66666666 	.word	0x66666666
 80014d4:	4042a666 	.word	0x4042a666
 80014d8:	41a40000 	.word	0x41a40000
 80014dc:	421e0000 	.word	0x421e0000

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f000 fb9c 	bl	8001c22 <HAL_Init>

  /* USER CODE BEGIN Init */
  HD44780_Init();
 80014ea:	f7ff fdd7 	bl	800109c <HD44780_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f821 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 f949 	bl	8001788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014f6:	f000 f917 	bl	8001728 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014fa:	f000 f8af 	bl	800165c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  const float adcResolution = 0.87890625; // (VrefMax - VrefMin)/(2pow(12))
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <main+0x50>)
 8001500:	60fb      	str	r3, [r7, #12]
  const int8_t callibration = -8; // temperature sensor callibration value
 8001502:	23f8      	movs	r3, #248	; 0xf8
 8001504:	72fb      	strb	r3, [r7, #11]
  float temperature = 0;
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 temperature = getTemperature(adcResolution,callibration); //get temperature from the thermistor
 800150c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001510:	4618      	mov	r0, r3
 8001512:	ed97 0a03 	vldr	s0, [r7, #12]
 8001516:	f7ff fec9 	bl	80012ac <getTemperature>
 800151a:	ed87 0a01 	vstr	s0, [r7, #4]
	 printLcdVcn(temperature); // print temperature values
 800151e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001522:	f7ff fef5 	bl	8001310 <printLcdVcn>
	 rgbLed(temperature); // flash the Led following the color code temperatures ranges
 8001526:	ed97 0a01 	vldr	s0, [r7, #4]
 800152a:	f7ff ff2d 	bl	8001388 <rgbLed>
	 temperature = getTemperature(adcResolution,callibration); //get temperature from the thermistor
 800152e:	e7ed      	b.n	800150c <main+0x2c>
 8001530:	3f610000 	.word	0x3f610000

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ac      	sub	sp, #176	; 0xb0
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800153e:	2244      	movs	r2, #68	; 0x44
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ff46 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2254      	movs	r2, #84	; 0x54
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 ff38 	bl	80053d4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001564:	f001 ff8c 	bl	8003480 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <SystemClock_Config+0x124>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <SystemClock_Config+0x124>)
 8001570:	f023 0318 	bic.w	r3, r3, #24
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001578:	2314      	movs	r3, #20
 800157a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001580:	2301      	movs	r3, #1
 8001582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001598:	2301      	movs	r3, #1
 800159a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80015a4:	2310      	movs	r3, #16
 80015a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 ffd1 	bl	8003568 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015cc:	f000 f93e 	bl	800184c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2303      	movs	r3, #3
 80015d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015e8:	2101      	movs	r1, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fbdc 	bl	8003da8 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015f6:	f000 f929 	bl	800184c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80015fa:	f244 0302 	movw	r3, #16386	; 0x4002
 80015fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800160a:	2301      	movs	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001612:	2310      	movs	r3, #16
 8001614:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001616:	2307      	movs	r3, #7
 8001618:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001626:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4618      	mov	r0, r3
 800162c:	f002 fdc0 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001636:	f000 f909 	bl	800184c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800163a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800163e:	f001 ff3d 	bl	80034bc <HAL_PWREx_ControlVoltageScaling>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001648:	f000 f900 	bl	800184c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800164c:	f002 ffa2 	bl	8004594 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001650:	bf00      	nop
 8001652:	37b0      	adds	r7, #176	; 0xb0
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_ADC1_Init+0xc0>)
 8001674:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <MX_ADC1_Init+0xc4>)
 8001676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_ADC1_Init+0xc0>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <MX_ADC1_Init+0xc0>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_ADC1_Init+0xc0>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <MX_ADC1_Init+0xc0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_ADC1_Init+0xc0>)
 8001692:	2204      	movs	r2, #4
 8001694:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_ADC1_Init+0xc0>)
 8001698:	2200      	movs	r2, #0
 800169a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ADC1_Init+0xc0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_ADC1_Init+0xc0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_ADC1_Init+0xc0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_ADC1_Init+0xc0>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_ADC1_Init+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_ADC1_Init+0xc0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_ADC1_Init+0xc0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_ADC1_Init+0xc0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_ADC1_Init+0xc0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <MX_ADC1_Init+0xc0>)
 80016da:	f000 fd3d 	bl	8002158 <HAL_ADC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f8b2 	bl	800184c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_ADC1_Init+0xc8>)
 80016ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ec:	2306      	movs	r3, #6
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016f4:	237f      	movs	r3, #127	; 0x7f
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f8:	2304      	movs	r3, #4
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_ADC1_Init+0xc0>)
 8001706:	f000 ff99 	bl	800263c <HAL_ADC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001710:	f000 f89c 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000204 	.word	0x20000204
 8001720:	50040000 	.word	0x50040000
 8001724:	19200040 	.word	0x19200040

08001728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_USART2_UART_Init+0x58>)
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <MX_USART2_UART_Init+0x5c>)
 8001730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_USART2_UART_Init+0x58>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART2_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_USART2_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART2_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART2_UART_Init+0x58>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART2_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART2_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART2_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART2_UART_Init+0x58>)
 800176c:	f003 f812 	bl	8004794 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001776:	f000 f869 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000268 	.word	0x20000268
 8001784:	40004400 	.word	0x40004400

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a28      	ldr	r2, [pc, #160]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_GPIO_Init+0xbc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 80017e6:	2200      	movs	r2, #0
 80017e8:	21fb      	movs	r1, #251	; 0xfb
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <MX_GPIO_Init+0xc0>)
 80017ec:	f001 fe30 	bl	8003450 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f001 fe29 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 80017fe:	23fb      	movs	r3, #251	; 0xfb
 8001800:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_GPIO_Init+0xc0>)
 8001816:	f001 fcb1 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800181a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 fca1 	bl	800317c <HAL_GPIO_Init>

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	48000400 	.word	0x48000400

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_MspInit+0x44>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_MspInit+0x44>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6613      	str	r3, [r2, #96]	; 0x60
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_MspInit+0x44>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x44>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x44>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6593      	str	r3, [r2, #88]	; 0x58
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x44>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_ADC_MspInit+0x74>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d124      	bne.n	8001910 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018fa:	230b      	movs	r3, #11
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f001 fc36 	bl	800317c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	50040000 	.word	0x50040000
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <HAL_UART_MspInit+0xa0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d13a      	bne.n	80019b8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6593      	str	r3, [r2, #88]	; 0x58
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001972:	2304      	movs	r3, #4
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001982:	2307      	movs	r3, #7
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f001 fbf4 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80019a6:	2303      	movs	r3, #3
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f001 fbe2 	bl	800317c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40004400 	.word	0x40004400
 80019c4:	40021000 	.word	0x40021000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f954 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001a30:	2301      	movs	r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <_read+0x38>)
 8001a40:	f002 ff89 	bl	8004956 <HAL_UART_Receive>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	607b      	str	r3, [r7, #4]

	return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000268 	.word	0x20000268

08001a60 <_write>:

int _write(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <_write+0x40>)
 8001a7c:	f002 fed8 	bl	8004830 <HAL_UART_Transmit>
 8001a80:	4603      	mov	r3, r0
 8001a82:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d002      	beq.n	8001a90 <_write+0x30>
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d101      	bne.n	8001a94 <_write+0x34>
	{
		Error_Handler();
 8001a90:	f7ff fedc 	bl	800184c <Error_Handler>
	}

	return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000268 	.word	0x20000268

08001aa4 <_close>:



int _close(int file)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001acc:	605a      	str	r2, [r3, #4]
	return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_isatty>:

int _isatty(int file)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <_sbrk+0x50>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x16>
		heap_end = &end;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <_sbrk+0x50>)
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <_sbrk+0x54>)
 8001b20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <_sbrk+0x50>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <_sbrk+0x50>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	466a      	mov	r2, sp
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d907      	bls.n	8001b46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b36:	f003 fc23 	bl	8005380 <__errno>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	e006      	b.n	8001b54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <_sbrk+0x50>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <_sbrk+0x50>)
 8001b50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200001f8 	.word	0x200001f8
 8001b60:	200002f0 	.word	0x200002f0

08001b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <SystemInit+0x64>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <SystemInit+0x64>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <SystemInit+0x68>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <SystemInit+0x68>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <SystemInit+0x68>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <SystemInit+0x68>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <SystemInit+0x68>)
 8001b90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <SystemInit+0x68>)
 8001b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <SystemInit+0x68>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <SystemInit+0x68>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <SystemInit+0x68>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SystemInit+0x64>)
 8001bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bba:	609a      	str	r2, [r3, #8]
#endif
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bd6:	e003      	b.n	8001be0 <LoopCopyDataInit>

08001bd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bde:	3104      	adds	r1, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001be4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001be6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001be8:	d3f6      	bcc.n	8001bd8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bec:	e002      	b.n	8001bf4 <LoopFillZerobss>

08001bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bf0:	f842 3b04 	str.w	r3, [r2], #4

08001bf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <LoopForever+0x16>)
	cmp	r2, r3
 8001bf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bf8:	d3f9      	bcc.n	8001bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bfa:	f7ff ffb3 	bl	8001b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f003 fbc5 	bl	800538c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c02:	f7ff fc6d 	bl	80014e0 <main>

08001c06 <LoopForever>:

LoopForever:
    b LoopForever
 8001c06:	e7fe      	b.n	8001c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c08:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001c0c:	08008118 	.word	0x08008118
	ldr	r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c14:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001c18:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001c1c:	200002f0 	.word	0x200002f0

08001c20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_IRQHandler>

08001c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f001 fa71 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f80e 	bl	8001c54 <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	e001      	b.n	8001c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c44:	f7ff fe0a 	bl	800185c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_InitTick+0x68>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d022      	beq.n	8001cae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_InitTick+0x6c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_InitTick+0x68>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fa70 	bl	8003162 <HAL_SYSTICK_Config>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d809      	bhi.n	8001ca2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295
 8001c96:	f001 fa48 	bl	800312a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_InitTick+0x70>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e004      	b.n	8001cb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_IncTick+0x1c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x1c>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	200002e8 	.word	0x200002e8
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200002e8 	.word	0x200002e8

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d004      	beq.n	8001d28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_Delay+0x40>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d28:	bf00      	nop
 8001d2a:	f7ff ffdf 	bl	8001cec <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d8f7      	bhi.n	8001d2a <HAL_Delay+0x26>
  {
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008

08001d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db0:	b490      	push	{r4, r7}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3360      	adds	r3, #96	; 0x60
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <LL_ADC_SetOffset+0x40>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001de2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc90      	pop	{r4, r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	03fff000 	.word	0x03fff000

08001df4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001df4:	b490      	push	{r4, r7}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3360      	adds	r3, #96	; 0x60
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc90      	pop	{r4, r7}
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e1c:	b490      	push	{r4, r7}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3360      	adds	r3, #96	; 0x60
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc90      	pop	{r4, r7}
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e72:	b490      	push	{r4, r7}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3330      	adds	r3, #48	; 0x30
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	4413      	add	r3, r2
 8001e90:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	211f      	movs	r1, #31
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 011f 	and.w	r1, r3, #31
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc90      	pop	{r4, r7}
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ec4:	b490      	push	{r4, r7}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3314      	adds	r3, #20
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0e5b      	lsrs	r3, r3, #25
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	4413      	add	r3, r2
 8001ee2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ee4:	6822      	ldr	r2, [r4, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	0d1b      	lsrs	r3, r3, #20
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2107      	movs	r1, #7
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	0d1b      	lsrs	r3, r3, #20
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc90      	pop	{r4, r7}
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0318 	and.w	r3, r3, #24
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f38:	40d9      	lsrs	r1, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	431a      	orrs	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	0007ffff 	.word	0x0007ffff

08001f5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6093      	str	r3, [r2, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <LL_ADC_IsEnabled+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_IsEnabled+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsDisableOngoing+0x18>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsDisableOngoing+0x1a>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d0:	f043 0210 	orr.w	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d101      	bne.n	80020fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211e:	f043 0220 	orr.w	r2, r3, #32
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d101      	bne.n	800214a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e12a      	b.n	80023c8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fb8f 	bl	80018a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fef1 	bl	8001f80 <LL_ADC_IsDeepPowerDownEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fed7 	bl	8001f5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff0c 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d113      	bne.n	80021e6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fef0 	bl	8001fa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021c8:	4b81      	ldr	r3, [pc, #516]	; (80023d0 <HAL_ADC_Init+0x278>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	4a81      	ldr	r2, [pc, #516]	; (80023d4 <HAL_ADC_Init+0x27c>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f9      	bne.n	80021da <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fef0 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff64 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 800221c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 80c5 	bne.w	80023b6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 80c1 	bne.w	80023b6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800223c:	f043 0202 	orr.w	r2, r3, #2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fefd 	bl	8002048 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002254:	4860      	ldr	r0, [pc, #384]	; (80023d8 <HAL_ADC_Init+0x280>)
 8002256:	f7ff fef7 	bl	8002048 <LL_ADC_IsEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4619      	mov	r1, r3
 8002266:	485d      	ldr	r0, [pc, #372]	; (80023dc <HAL_ADC_Init+0x284>)
 8002268:	f7ff fd6e 	bl	8001d48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7e5b      	ldrb	r3, [r3, #25]
 8002270:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002276:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800227c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002282:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	3b01      	subs	r3, #1
 80022a0:	045b      	lsls	r3, r3, #17
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4b45      	ldr	r3, [pc, #276]	; (80023e0 <HAL_ADC_Init+0x288>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff01 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 80022e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff22 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 80022ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d13d      	bne.n	8002372 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d13a      	bne.n	8002372 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002300:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002308:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002318:	f023 0302 	bic.w	r3, r3, #2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	69b9      	ldr	r1, [r7, #24]
 8002322:	430b      	orrs	r3, r1
 8002324:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800232c:	2b01      	cmp	r3, #1
 800232e:	d118      	bne.n	8002362 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800233a:	f023 0304 	bic.w	r3, r3, #4
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002346:	4311      	orrs	r1, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002352:	430a      	orrs	r2, r1
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	611a      	str	r2, [r3, #16]
 8002360:	e007      	b.n	8002372 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d10c      	bne.n	8002394 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f023 010f 	bic.w	r1, r3, #15
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
 8002392:	e007      	b.n	80023a4 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 020f 	bic.w	r2, r2, #15
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f023 0303 	bic.w	r3, r3, #3
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
 80023b4:	e007      	b.n	80023c6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000000 	.word	0x20000000
 80023d4:	053e2d63 	.word	0x053e2d63
 80023d8:	50040000 	.word	0x50040000
 80023dc:	50040300 	.word	0x50040300
 80023e0:	fff0c007 	.word	0xfff0c007

080023e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fe77 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d14f      	bne.n	800249c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADC_Start+0x26>
 8002406:	2302      	movs	r3, #2
 8002408:	e04b      	b.n	80024a2 <HAL_ADC_Start+0xbe>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fd1a 	bl	8002e4c <ADC_Enable>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d137      	bne.n	8002492 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002442:	d106      	bne.n	8002452 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f023 0206 	bic.w	r2, r3, #6
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58
 8002450:	e002      	b.n	8002458 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	221c      	movs	r2, #28
 800245e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800247e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fe02 	bl	8002094 <LL_ADC_REG_StartConversion>
 8002490:	e006      	b.n	80024a0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800249a:	e001      	b.n	80024a0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800249c:	2302      	movs	r3, #2
 800249e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_Stop+0x16>
 80024bc:	2302      	movs	r3, #2
 80024be:	e023      	b.n	8002508 <HAL_ADC_Stop+0x5e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80024c8:	2103      	movs	r1, #3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fc0a 	bl	8002ce4 <ADC_ConversionStop>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d111      	bne.n	80024fe <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fd10 	bl	8002f00 <ADC_Disable>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d102      	bne.n	8002528 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002522:	2308      	movs	r3, #8
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e010      	b.n	800254a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e068      	b.n	8002618 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002546:	2304      	movs	r3, #4
 8002548:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800254a:	f7ff fbcf 	bl	8001cec <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002550:	e01a      	b.n	8002588 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d016      	beq.n	8002588 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800255a:	f7ff fbc7 	bl	8001cec <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <HAL_ADC_PollForConversion+0x60>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f043 0204 	orr.w	r2, r3, #4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e047      	b.n	8002618 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0dd      	beq.n	8002552 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc50 	bl	8001e4c <LL_ADC_REG_IsTriggerSourceSWStart>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01c      	beq.n	80025ec <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7e5b      	ldrb	r3, [r3, #25]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d118      	bne.n	80025ec <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d111      	bne.n	80025ec <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d104      	bne.n	8002604 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2208      	movs	r2, #8
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e008      	b.n	8002616 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0a6      	sub	sp, #152	; 0x98
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x22>
 800265a:	2302      	movs	r3, #2
 800265c:	e338      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x694>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fd3a 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 831d 	bne.w	8002cb2 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d824      	bhi.n	80026ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	3b02      	subs	r3, #2
 8002686:	2b03      	cmp	r3, #3
 8002688:	d81b      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x86>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_ADC_ConfigChannel+0x54>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026a9 	.word	0x080026a9
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026b9 	.word	0x080026b9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	220c      	movs	r2, #12
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e011      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2212      	movs	r2, #18
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	e00d      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2218      	movs	r2, #24
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	e009      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	e004      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2206      	movs	r2, #6
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	e000      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026ca:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f7ff fbca 	bl	8001e72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fcfe 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 80026e8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fd1e 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 80026f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8148 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 8143 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	461a      	mov	r2, r3
 800271c:	f7ff fbd2 	bl	8001ec4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00a      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002752:	f7ff fb2d 	bl	8001db0 <LL_ADC_SetOffset>
 8002756:	e11d      	b.n	8002994 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fb48 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x148>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb3d 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 021f 	and.w	r2, r3, #31
 8002782:	e012      	b.n	80027aa <HAL_ADC_ConfigChannel+0x16e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fb32 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x186>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	e00a      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x19c>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80027d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fb19 	bl	8001e1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff faff 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x1da>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff faf4 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	e010      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1fc>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fae9 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x214>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	e00a      	b.n	8002866 <HAL_ADC_ConfigChannel+0x22a>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800285e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	429a      	cmp	r2, r3
 8002868:	d106      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fad2 	bl	8001e1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fab8 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x268>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2102      	movs	r1, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff faad 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 021f 	and.w	r2, r3, #31
 80028a2:	e010      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x28a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2102      	movs	r1, #2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff faa2 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 80028b0:	4603      	mov	r3, r0
 80028b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80028bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <HAL_ADC_ConfigChannel+0x2a2>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	e00a      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x2b8>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fa8b 	bl	8001e1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fa71 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x2f6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2103      	movs	r1, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fa66 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	e010      	b.n	8002954 <HAL_ADC_ConfigChannel+0x318>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2103      	movs	r1, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fa5b 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_ConfigChannel+0x330>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	e00a      	b.n	8002982 <HAL_ADC_ConfigChannel+0x346>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800297a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	429a      	cmp	r2, r3
 8002984:	d106      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	2103      	movs	r1, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fa44 	bl	8001e1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fb55 	bl	8002048 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 810c 	bne.w	8002bbe <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff faae 	bl	8001f14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4aa8      	ldr	r2, [pc, #672]	; (8002c60 <HAL_ADC_ConfigChannel+0x624>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	f040 80fd 	bne.w	8002bbe <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x3b0>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e012      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x3d6>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d064      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x3f6>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	3301      	adds	r3, #1
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a30:	e00e      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x414>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x434>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	e010      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x456>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	ea42 0103 	orr.w	r1, r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x47c>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	051b      	lsls	r3, r3, #20
 8002ab6:	e011      	b.n	8002adc <HAL_ADC_ConfigChannel+0x4a0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002adc:	430b      	orrs	r3, r1
 8002ade:	e069      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x4c0>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	3301      	adds	r3, #1
 8002af4:	069b      	lsls	r3, r3, #26
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	e00e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x4de>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	61fb      	str	r3, [r7, #28]
  return result;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x4fe>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	e010      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x520>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	617b      	str	r3, [r7, #20]
  return result;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	ea42 0103 	orr.w	r1, r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x54c>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b1e      	subs	r3, #30
 8002b80:	051b      	lsls	r3, r3, #20
 8002b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b86:	e014      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x576>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	60fb      	str	r3, [r7, #12]
  return result;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b1e      	subs	r3, #30
 8002bac:	051b      	lsls	r3, r3, #20
 8002bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7ff f983 	bl	8001ec4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_ADC_ConfigChannel+0x628>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d07c      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bca:	4827      	ldr	r0, [pc, #156]	; (8002c68 <HAL_ADC_ConfigChannel+0x62c>)
 8002bcc:	f7ff f8e2 	bl	8001d94 <LL_ADC_GetCommonPathInternalCh>
 8002bd0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_ADC_ConfigChannel+0x630>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d126      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x5f0>
 8002bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d120      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a20      	ldr	r2, [pc, #128]	; (8002c70 <HAL_ADC_ConfigChannel+0x634>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d167      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	481a      	ldr	r0, [pc, #104]	; (8002c68 <HAL_ADC_ConfigChannel+0x62c>)
 8002c00:	f7ff f8b5 	bl	8001d6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_ADC_ConfigChannel+0x638>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <HAL_ADC_ConfigChannel+0x63c>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099a      	lsrs	r2, r3, #6
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c2a:	e04b      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <HAL_ADC_ConfigChannel+0x640>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d124      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x644>
 8002c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11e      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_ADC_ConfigChannel+0x634>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d13b      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c54:	4619      	mov	r1, r3
 8002c56:	4804      	ldr	r0, [pc, #16]	; (8002c68 <HAL_ADC_ConfigChannel+0x62c>)
 8002c58:	f7ff f889 	bl	8001d6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5c:	e032      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
 8002c5e:	bf00      	nop
 8002c60:	407f0000 	.word	0x407f0000
 8002c64:	80080000 	.word	0x80080000
 8002c68:	50040300 	.word	0x50040300
 8002c6c:	c7520000 	.word	0xc7520000
 8002c70:	50040000 	.word	0x50040000
 8002c74:	20000000 	.word	0x20000000
 8002c78:	053e2d63 	.word	0x053e2d63
 8002c7c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <HAL_ADC_ConfigChannel+0x69c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d11c      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <HAL_ADC_ConfigChannel+0x6a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002cac:	f7ff f85f 	bl	8001d6e <LL_ADC_SetCommonPathInternalCh>
 8002cb0:	e008      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3798      	adds	r7, #152	; 0x98
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	80000001 	.word	0x80000001
 8002cdc:	50040000 	.word	0x50040000
 8002ce0:	50040300 	.word	0x50040300

08002ce4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f9f2 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002d00:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fa13 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 8002d0c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8090 	beq.w	8002e3c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02a      	beq.n	8002d80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7e5b      	ldrb	r3, [r3, #25]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d126      	bne.n	8002d80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7e1b      	ldrb	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d122      	bne.n	8002d80 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d3e:	e014      	b.n	8002d6a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4a41      	ldr	r2, [pc, #260]	; (8002e48 <ADC_ConversionStop+0x164>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d90d      	bls.n	8002d64 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0210 	orr.w	r2, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e06c      	b.n	8002e3e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d1e3      	bne.n	8002d40 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2240      	movs	r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d014      	beq.n	8002db0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f9aa 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00c      	beq.n	8002db0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f967 	bl	800206e <LL_ADC_IsDisableOngoing>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f986 	bl	80020bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d014      	beq.n	8002de0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f9b9 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f94f 	bl	800206e <LL_ADC_IsDisableOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f995 	bl	800210a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d004      	beq.n	8002df0 <ADC_ConversionStop+0x10c>
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d105      	bne.n	8002df6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002dea:	230c      	movs	r3, #12
 8002dec:	617b      	str	r3, [r7, #20]
        break;
 8002dee:	e005      	b.n	8002dfc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002df0:	2308      	movs	r3, #8
 8002df2:	617b      	str	r3, [r7, #20]
        break;
 8002df4:	e002      	b.n	8002dfc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002df6:	2304      	movs	r3, #4
 8002df8:	617b      	str	r3, [r7, #20]
        break;
 8002dfa:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe ff76 	bl	8001cec <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e02:	e014      	b.n	8002e2e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e04:	f7fe ff72 	bl	8001cec <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d90d      	bls.n	8002e2e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e3      	bne.n	8002e04 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	a33fffff 	.word	0xa33fffff

08002e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f8f5 	bl	8002048 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d146      	bne.n	8002ef2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <ADC_Enable+0xb0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e032      	b.n	8002ef4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f8b0 	bl	8001ff8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e98:	f7fe ff28 	bl	8001cec <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e9e:	e021      	b.n	8002ee4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f8cf 	bl	8002048 <LL_ADC_IsEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f89f 	bl	8001ff8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eba:	f7fe ff17 	bl	8001cec <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d90d      	bls.n	8002ee4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0210 	orr.w	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d1d6      	bne.n	8002ea0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	8000003f 	.word	0x8000003f

08002f00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f8ae 	bl	800206e <LL_ADC_IsDisableOngoing>
 8002f12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff f895 	bl	8002048 <LL_ADC_IsEnabled>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d040      	beq.n	8002fa6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d13d      	bne.n	8002fa6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030d 	and.w	r3, r3, #13
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff f86f 	bl	8002020 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2203      	movs	r2, #3
 8002f48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fecf 	bl	8001cec <HAL_GetTick>
 8002f4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f50:	e022      	b.n	8002f98 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01c      	b.n	8002fa8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f6e:	f7fe febd 	bl	8001cec <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d90d      	bls.n	8002f98 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e3      	bne.n	8002f6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff47 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff5c 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffb0 	bl	80030d0 <SysTick_Config>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318a:	e148      	b.n	800341e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 813a 	beq.w	8003418 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d00b      	beq.n	80031c4 <HAL_GPIO_Init+0x48>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d007      	beq.n	80031c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031b8:	2b11      	cmp	r3, #17
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b12      	cmp	r3, #18
 80031c2:	d130      	bne.n	8003226 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fa:	2201      	movs	r2, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 0201 	and.w	r2, r3, #1
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0xea>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b12      	cmp	r3, #18
 8003264:	d123      	bne.n	80032ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	08da      	lsrs	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3208      	adds	r2, #8
 800326e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	6939      	ldr	r1, [r7, #16]
 80032aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2203      	movs	r2, #3
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8094 	beq.w	8003418 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f0:	4b52      	ldr	r3, [pc, #328]	; (800343c <HAL_GPIO_Init+0x2c0>)
 80032f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f4:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_GPIO_Init+0x2c0>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6613      	str	r3, [r2, #96]	; 0x60
 80032fc:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_GPIO_Init+0x2c0>)
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003308:	4a4d      	ldr	r2, [pc, #308]	; (8003440 <HAL_GPIO_Init+0x2c4>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003332:	d00d      	beq.n	8003350 <HAL_GPIO_Init+0x1d4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a43      	ldr	r2, [pc, #268]	; (8003444 <HAL_GPIO_Init+0x2c8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <HAL_GPIO_Init+0x1d0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a42      	ldr	r2, [pc, #264]	; (8003448 <HAL_GPIO_Init+0x2cc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_GPIO_Init+0x1cc>
 8003344:	2302      	movs	r3, #2
 8003346:	e004      	b.n	8003352 <HAL_GPIO_Init+0x1d6>
 8003348:	2307      	movs	r3, #7
 800334a:	e002      	b.n	8003352 <HAL_GPIO_Init+0x1d6>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_GPIO_Init+0x1d6>
 8003350:	2300      	movs	r3, #0
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	f002 0203 	and.w	r2, r2, #3
 8003358:	0092      	lsls	r2, r2, #2
 800335a:	4093      	lsls	r3, r2
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003362:	4937      	ldr	r1, [pc, #220]	; (8003440 <HAL_GPIO_Init+0x2c4>)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_GPIO_Init+0x2d0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003394:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_GPIO_Init+0x2d0>)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800339a:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_GPIO_Init+0x2d0>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033be:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_GPIO_Init+0x2d0>)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_GPIO_Init+0x2d0>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_GPIO_Init+0x2d0>)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_GPIO_Init+0x2d0>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003412:	4a0e      	ldr	r2, [pc, #56]	; (800344c <HAL_GPIO_Init+0x2d0>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	f47f aeaf 	bne.w	800318c <HAL_GPIO_Init+0x10>
  }
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40010000 	.word	0x40010000
 8003444:	48000400 	.word	0x48000400
 8003448:	48000800 	.word	0x48000800
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800346c:	e002      	b.n	8003474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007000 	.word	0x40007000

080034a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000

080034bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ca:	d130      	bne.n	800352e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d8:	d038      	beq.n	800354c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2232      	movs	r2, #50	; 0x32
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003500:	e002      	b.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b01      	subs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	d102      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f2      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	d110      	bne.n	800354c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d007      	beq.n	800354c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003544:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800354a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40007000 	.word	0x40007000
 8003560:	20000000 	.word	0x20000000
 8003564:	431bde83 	.word	0x431bde83

08003568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f000 bc11 	b.w	8003d9e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357c:	4ba0      	ldr	r3, [pc, #640]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003586:	4b9e      	ldr	r3, [pc, #632]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80e4 	beq.w	8003766 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4c>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	f040 808b 	bne.w	80036c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 8087 	bne.w	80036c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b4:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_OscConfig+0x64>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e3e8      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	4b8b      	ldr	r3, [pc, #556]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <HAL_RCC_OscConfig+0x7e>
 80035dc:	4b88      	ldr	r3, [pc, #544]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e4:	e005      	b.n	80035f2 <HAL_RCC_OscConfig+0x8a>
 80035e6:	4b86      	ldr	r3, [pc, #536]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d223      	bcs.n	800363e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd78 	bl	80040f0 <RCC_SetFlashLatencyFromMSIRange>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e3c9      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360a:	4b7d      	ldr	r3, [pc, #500]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7c      	ldr	r2, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4977      	ldr	r1, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003628:	4b75      	ldr	r3, [pc, #468]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	4972      	ldr	r1, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	e025      	b.n	800368a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363e:	4b70      	ldr	r3, [pc, #448]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a6f      	ldr	r2, [pc, #444]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b6d      	ldr	r3, [pc, #436]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	496a      	ldr	r1, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	4965      	ldr	r1, [pc, #404]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd38 	bl	80040f0 <RCC_SetFlashLatencyFromMSIRange>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e389      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800368a:	f000 fc6f 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 800368e:	4601      	mov	r1, r0
 8003690:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x29c>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	fa21 f303 	lsr.w	r3, r1, r3
 80036a6:	4a58      	ldr	r2, [pc, #352]	; (8003808 <HAL_RCC_OscConfig+0x2a0>)
 80036a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036aa:	4b58      	ldr	r3, [pc, #352]	; (800380c <HAL_RCC_OscConfig+0x2a4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fad0 	bl	8001c54 <HAL_InitTick>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d052      	beq.n	8003764 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	e36d      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d032      	beq.n	8003730 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ca:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036d6:	f7fe fb09 	bl	8001cec <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036de:	f7fe fb05 	bl	8001cec <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e356      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	493a      	ldr	r1, [pc, #232]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	4b39      	ldr	r3, [pc, #228]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	4935      	ldr	r1, [pc, #212]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
 800372e:	e01a      	b.n	8003766 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003730:	4b33      	ldr	r3, [pc, #204]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a32      	ldr	r2, [pc, #200]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800373c:	f7fe fad6 	bl	8001cec <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003744:	f7fe fad2 	bl	8001cec <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e323      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1dc>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d073      	beq.n	800385a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d005      	beq.n	8003784 <HAL_RCC_OscConfig+0x21c>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d10e      	bne.n	800379c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d10b      	bne.n	800379c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d063      	beq.n	8003858 <HAL_RCC_OscConfig+0x2f0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d15f      	bne.n	8003858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e300      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x24c>
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0x288>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x270>
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0x288>
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a08      	ldr	r2, [pc, #32]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a05      	ldr	r2, [pc, #20]	; (8003800 <HAL_RCC_OscConfig+0x298>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fa78 	bl	8001cec <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fe:	e010      	b.n	8003822 <HAL_RCC_OscConfig+0x2ba>
 8003800:	40021000 	.word	0x40021000
 8003804:	08007e00 	.word	0x08007e00
 8003808:	20000000 	.word	0x20000000
 800380c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe fa6c 	bl	8001cec <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e2bd      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003822:	4baf      	ldr	r3, [pc, #700]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x2a8>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fa5c 	bl	8001cec <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fe fa58 	bl	8001cec <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e2a9      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384a:	4ba5      	ldr	r3, [pc, #660]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x2d0>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d060      	beq.n	8003928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x310>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d119      	bne.n	80038a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d116      	bne.n	80038a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003878:	4b99      	ldr	r3, [pc, #612]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_OscConfig+0x328>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e286      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b93      	ldr	r3, [pc, #588]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	4990      	ldr	r1, [pc, #576]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	e040      	b.n	8003928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d023      	beq.n	80038f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ae:	4b8c      	ldr	r3, [pc, #560]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a8b      	ldr	r2, [pc, #556]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fe fa17 	bl	8001cec <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fe fa13 	bl	8001cec <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e264      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d4:	4b82      	ldr	r3, [pc, #520]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b7f      	ldr	r3, [pc, #508]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	497c      	ldr	r1, [pc, #496]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
 80038f4:	e018      	b.n	8003928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f6:	4b7a      	ldr	r3, [pc, #488]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a79      	ldr	r2, [pc, #484]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80038fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe f9f3 	bl	8001cec <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe f9ef 	bl	8001cec <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e240      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800391c:	4b70      	ldr	r3, [pc, #448]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03c      	beq.n	80039ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01c      	beq.n	8003976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393c:	4b68      	ldr	r3, [pc, #416]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 800393e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003942:	4a67      	ldr	r2, [pc, #412]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe f9ce 	bl	8001cec <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003954:	f7fe f9ca 	bl	8001cec <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e21b      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003966:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <HAL_RCC_OscConfig+0x3ec>
 8003974:	e01b      	b.n	80039ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003976:	4b5a      	ldr	r3, [pc, #360]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe f9b1 	bl	8001cec <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe f9ad 	bl	8001cec <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e1fe      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80a6 	beq.w	8003b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039c0:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b44      	ldr	r3, [pc, #272]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6593      	str	r3, [r2, #88]	; 0x58
 80039d8:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_OscConfig+0x57c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d118      	bne.n	8003a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCC_OscConfig+0x57c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3a      	ldr	r2, [pc, #232]	; (8003ae4 <HAL_RCC_OscConfig+0x57c>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a00:	f7fe f974 	bl	8001cec <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fe f970 	bl	8001cec <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1c1      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1a:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCC_OscConfig+0x57c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4d8>
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	4a2a      	ldr	r2, [pc, #168]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3e:	e024      	b.n	8003a8a <HAL_RCC_OscConfig+0x522>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d110      	bne.n	8003a6a <HAL_RCC_OscConfig+0x502>
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a68:	e00f      	b.n	8003a8a <HAL_RCC_OscConfig+0x522>
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fe f92b 	bl	8001cec <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fe f927 	bl	8001cec <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e176      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ed      	beq.n	8003a9a <HAL_RCC_OscConfig+0x532>
 8003abe:	e01a      	b.n	8003af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fe f914 	bl	8001cec <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac6:	e00f      	b.n	8003ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe f910 	bl	8001cec <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d906      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e15f      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae8:	4baa      	ldr	r3, [pc, #680]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e8      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af6:	7ffb      	ldrb	r3, [r7, #31]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afc:	4ba5      	ldr	r3, [pc, #660]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	4aa4      	ldr	r2, [pc, #656]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d03c      	beq.n	8003b8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01c      	beq.n	8003b56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b1c:	4b9d      	ldr	r3, [pc, #628]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b22:	4a9c      	ldr	r2, [pc, #624]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fe f8de 	bl	8001cec <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b34:	f7fe f8da 	bl	8001cec <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e12b      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b46:	4b93      	ldr	r3, [pc, #588]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ef      	beq.n	8003b34 <HAL_RCC_OscConfig+0x5cc>
 8003b54:	e01b      	b.n	8003b8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b56:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5c:	4a8d      	ldr	r2, [pc, #564]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fe f8c1 	bl	8001cec <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6e:	f7fe f8bd 	bl	8001cec <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e10e      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ef      	bne.n	8003b6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8102 	beq.w	8003d9c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	f040 80c5 	bne.w	8003d2c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ba2:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0203 	and.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d12c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d123      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d11b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d113      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d067      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d062      	beq.n	8003cdc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c16:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0bb      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c32:	f7fe f85b 	bl	8001cec <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe f857 	bl	8001cec <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0a8      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c58:	4b4e      	ldr	r3, [pc, #312]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <HAL_RCC_OscConfig+0x830>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	4311      	orrs	r1, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c72:	0212      	lsls	r2, r2, #8
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c7a:	0852      	lsrs	r2, r2, #1
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0552      	lsls	r2, r2, #21
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c86:	0852      	lsrs	r2, r2, #1
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0652      	lsls	r2, r2, #25
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c92:	06d2      	lsls	r2, r2, #27
 8003c94:	430a      	orrs	r2, r1
 8003c96:	493f      	ldr	r1, [pc, #252]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3c      	ldr	r2, [pc, #240]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cb4:	f7fe f81a 	bl	8001cec <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fe f816 	bl	8001cec <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e067      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cda:	e05f      	b.n	8003d9c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e05e      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d157      	bne.n	8003d9c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d04:	f7fd fff2 	bl	8001cec <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd ffee 	bl	8001cec <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e03f      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x7a4>
 8003d2a:	e037      	b.n	8003d9c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d02d      	beq.n	8003d8e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d50:	f023 0303 	bic.w	r3, r3, #3
 8003d54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4a0e      	ldr	r2, [pc, #56]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fd ffc1 	bl	8001cec <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fd ffbd 	bl	8001cec <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e00e      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <HAL_RCC_OscConfig+0x82c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x806>
 8003d8c:	e006      	b.n	8003d9c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e005      	b.n	8003d9e <HAL_RCC_OscConfig+0x836>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0c8      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b66      	ldr	r3, [pc, #408]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d910      	bls.n	8003dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 0207 	bic.w	r2, r3, #7
 8003dd2:	4961      	ldr	r1, [pc, #388]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0b0      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d04c      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e00:	4b56      	ldr	r3, [pc, #344]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d121      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e09e      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e18:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d115      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e092      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e30:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e086      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e40:	4b46      	ldr	r3, [pc, #280]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e07e      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 0203 	bic.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	493f      	ldr	r1, [pc, #252]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fd ff43 	bl	8001cec <HAL_GetTick>
 8003e66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6a:	f7fd ff3f 	bl	8001cec <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e066      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e80:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 020c 	and.w	r2, r3, #12
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d1eb      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	492c      	ldr	r1, [pc, #176]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d210      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4924      	ldr	r1, [pc, #144]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_RCC_ClockConfig+0x1b0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e036      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4918      	ldr	r1, [pc, #96]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4910      	ldr	r1, [pc, #64]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f1e:	f000 f825 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8003f22:	4601      	mov	r1, r0
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_RCC_ClockConfig+0x1b4>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	5cd3      	ldrb	r3, [r2, r3]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	fa21 f303 	lsr.w	r3, r1, r3
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fe86 	bl	8001c54 <HAL_InitTick>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40022000 	.word	0x40022000
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08007e00 	.word	0x08007e00
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000004 	.word	0x20000004

08003f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f84:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d121      	bne.n	8003fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d11e      	bne.n	8003fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fa0:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fac:	4b30      	ldr	r3, [pc, #192]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	e005      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d102      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d133      	bne.n	8004062 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d002      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0xa4>
 800400a:	2b03      	cmp	r3, #3
 800400c:	d003      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0xaa>
 800400e:	e005      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004012:	617b      	str	r3, [r7, #20]
      break;
 8004014:	e005      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_GetSysClockFreq+0x110>)
 8004018:	617b      	str	r3, [r7, #20]
      break;
 800401a:	e002      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	617b      	str	r3, [r7, #20]
      break;
 8004020:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	3301      	adds	r3, #1
 800402e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	fb02 f203 	mul.w	r2, r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_GetSysClockFreq+0x104>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0e5b      	lsrs	r3, r3, #25
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004062:	69bb      	ldr	r3, [r7, #24]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3724      	adds	r7, #36	; 0x24
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40021000 	.word	0x40021000
 8004074:	08007e18 	.word	0x08007e18
 8004078:	00f42400 	.word	0x00f42400
 800407c:	007a1200 	.word	0x007a1200

08004080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4601      	mov	r1, r0
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	08007e10 	.word	0x08007e10

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040c8:	f7ff ffda 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040cc:	4601      	mov	r1, r0
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0adb      	lsrs	r3, r3, #11
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	08007e10 	.word	0x08007e10

080040f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004108:	f7ff f9ca 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 800410c:	6178      	str	r0, [r7, #20]
 800410e:	e014      	b.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	6593      	str	r3, [r2, #88]	; 0x58
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004128:	f7ff f9ba 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 800412c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004138:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d10b      	bne.n	800415a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d919      	bls.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2ba0      	cmp	r3, #160	; 0xa0
 800414c:	d902      	bls.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800414e:	2302      	movs	r3, #2
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	e013      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004154:	2301      	movs	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e010      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d902      	bls.n	8004166 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004160:	2303      	movs	r3, #3
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	e00a      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d102      	bne.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800416c:	2302      	movs	r3, #2
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e004      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b70      	cmp	r3, #112	; 0x70
 8004176:	d101      	bne.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004178:	2301      	movs	r3, #1
 800417a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 0207 	bic.w	r2, r3, #7
 8004184:	4909      	ldr	r1, [pc, #36]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	429a      	cmp	r2, r3
 8004198:	d001      	beq.n	800419e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40022000 	.word	0x40022000

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041b8:	2300      	movs	r3, #0
 80041ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041bc:	2300      	movs	r3, #0
 80041be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02f      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d4:	d005      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80041d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041da:	d015      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80041e0:	e00f      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80041e2:	4bac      	ldr	r3, [pc, #688]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	4aab      	ldr	r2, [pc, #684]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ee:	e00c      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f9dc 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	74fb      	strb	r3, [r7, #19]
      break;
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004210:	4ba0      	ldr	r3, [pc, #640]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	499d      	ldr	r1, [pc, #628]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004226:	e001      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8099 	beq.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800423e:	4b95      	ldr	r3, [pc, #596]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004254:	4b8f      	ldr	r3, [pc, #572]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	4a8e      	ldr	r2, [pc, #568]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425e:	6593      	str	r3, [r2, #88]	; 0x58
 8004260:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426c:	2301      	movs	r3, #1
 800426e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004270:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a88      	ldr	r2, [pc, #544]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427c:	f7fd fd36 	bl	8001cec <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004282:	e009      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004284:	f7fd fd32 	bl	8001cec <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	74fb      	strb	r3, [r7, #19]
        break;
 8004296:	e005      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004298:	4b7f      	ldr	r3, [pc, #508]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d155      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042aa:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01e      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d019      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042c6:	4b73      	ldr	r3, [pc, #460]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d2:	4b70      	ldr	r3, [pc, #448]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a6e      	ldr	r2, [pc, #440]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e2:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	4a6a      	ldr	r2, [pc, #424]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f2:	4a68      	ldr	r2, [pc, #416]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fcf2 	bl	8001cec <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430a:	e00b      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fd fcee 	bl	8001cec <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d902      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	74fb      	strb	r3, [r7, #19]
            break;
 8004322:	e006      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004324:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ec      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004338:	4b56      	ldr	r3, [pc, #344]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	4953      	ldr	r1, [pc, #332]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800434e:	e004      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
 8004354:	e001      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435a:	7c7b      	ldrb	r3, [r7, #17]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b4c      	ldr	r3, [pc, #304]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	4a4b      	ldr	r2, [pc, #300]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004378:	4b46      	ldr	r3, [pc, #280]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 0203 	bic.w	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4943      	ldr	r1, [pc, #268]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800439a:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f023 020c 	bic.w	r2, r3, #12
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	493a      	ldr	r1, [pc, #232]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	4932      	ldr	r1, [pc, #200]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043de:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	4929      	ldr	r1, [pc, #164]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	4921      	ldr	r1, [pc, #132]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4918      	ldr	r1, [pc, #96]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4910      	ldr	r1, [pc, #64]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02c      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	4907      	ldr	r1, [pc, #28]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004484:	d10a      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004486:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4a02      	ldr	r2, [pc, #8]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800448c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004490:	60d3      	str	r3, [r2, #12]
 8004492:	e015      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2101      	movs	r1, #1
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 f881 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d028      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044cc:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	492d      	ldr	r1, [pc, #180]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ea:	d106      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
 80044f8:	e011      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004502:	d10c      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f852 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01c      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452a:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004538:	4915      	ldr	r1, [pc, #84]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	2102      	movs	r1, #2
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f82f 	bl	80045b4 <RCCEx_PLLSAI1_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	4904      	ldr	r1, [pc, #16]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004586:	7cbb      	ldrb	r3, [r7, #18]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000

08004594 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800459e:	f043 0304 	orr.w	r3, r3, #4
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000

080045b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045c2:	4b73      	ldr	r3, [pc, #460]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d018      	beq.n	8004600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045ce:	4b70      	ldr	r3, [pc, #448]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10d      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
       ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045e6:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
       ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d044      	beq.n	8004684 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e041      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d00c      	beq.n	8004622 <RCCEx_PLLSAI1_Config+0x6e>
 8004608:	2b03      	cmp	r3, #3
 800460a:	d013      	beq.n	8004634 <RCCEx_PLLSAI1_Config+0x80>
 800460c:	2b01      	cmp	r3, #1
 800460e:	d120      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004610:	4b5f      	ldr	r3, [pc, #380]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11d      	bne.n	8004658 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004620:	e01a      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004622:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004632:	e013      	b.n	800465c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004634:	4b56      	ldr	r3, [pc, #344]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004650:	e006      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      break;
 8004656:	e004      	b.n	8004662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004658:	bf00      	nop
 800465a:	e002      	b.n	8004662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004660:	bf00      	nop
    }

    if(status == HAL_OK)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10d      	bne.n	8004684 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004668:	4b49      	ldr	r3, [pc, #292]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	3b01      	subs	r3, #1
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	430b      	orrs	r3, r1
 800467e:	4944      	ldr	r1, [pc, #272]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d17c      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800468a:	4b41      	ldr	r3, [pc, #260]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a40      	ldr	r2, [pc, #256]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fd fb29 	bl	8001cec <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800469c:	e009      	b.n	80046b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800469e:	f7fd fb25 	bl	8001cec <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	73fb      	strb	r3, [r7, #15]
        break;
 80046b0:	e005      	b.n	80046be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ef      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d15f      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d110      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80046d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6892      	ldr	r2, [r2, #8]
 80046da:	0211      	lsls	r1, r2, #8
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68d2      	ldr	r2, [r2, #12]
 80046e0:	06d2      	lsls	r2, r2, #27
 80046e2:	430a      	orrs	r2, r1
 80046e4:	492a      	ldr	r1, [pc, #168]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	610b      	str	r3, [r1, #16]
 80046ea:	e027      	b.n	800473c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d112      	bne.n	8004718 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046f2:	4b27      	ldr	r3, [pc, #156]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	0211      	lsls	r1, r2, #8
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6912      	ldr	r2, [r2, #16]
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	0552      	lsls	r2, r2, #21
 800470e:	430a      	orrs	r2, r1
 8004710:	491f      	ldr	r1, [pc, #124]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	610b      	str	r3, [r1, #16]
 8004716:	e011      	b.n	800473c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	0211      	lsls	r1, r2, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6952      	ldr	r2, [r2, #20]
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	430a      	orrs	r2, r1
 8004736:	4916      	ldr	r1, [pc, #88]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd fad0 	bl	8001cec <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004750:	f7fd facc 	bl	8001cec <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
          break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e040      	b.n	8004828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd f8b2 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f98c 	bl	8004af0 <UART_SetConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fc66 	bl	80050bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fced 	bl	8005200 <UART_CheckIdleState>
 8004826:	4603      	mov	r3, r0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	2b20      	cmp	r3, #32
 8004846:	f040 8081 	bne.w	800494c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Transmit+0x26>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e079      	b.n	800494e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit+0x38>
 8004864:	2302      	movs	r3, #2
 8004866:	e072      	b.n	800494e <HAL_UART_Transmit+0x11e>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2221      	movs	r2, #33	; 0x21
 800487a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800487c:	f7fd fa36 	bl	8001cec <HAL_GetTick>
 8004880:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	d108      	bne.n	80048ae <HAL_UART_Transmit+0x7e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	e003      	b.n	80048b6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80048be:	e02d      	b.n	800491c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fcdd 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e039      	b.n	800494e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	881a      	ldrh	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ec:	b292      	uxth	r2, r2
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3302      	adds	r3, #2
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e008      	b.n	800490a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	b292      	uxth	r2, r2
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	3301      	adds	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1cb      	bne.n	80048c0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fca9 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e005      	b.n	800494e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08a      	sub	sp, #40	; 0x28
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	2b20      	cmp	r3, #32
 800496c:	f040 80bb 	bne.w	8004ae6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_UART_Receive+0x26>
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0b3      	b.n	8004ae8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_UART_Receive+0x38>
 800498a:	2302      	movs	r3, #2
 800498c:	e0ac      	b.n	8004ae8 <HAL_UART_Receive+0x192>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2222      	movs	r2, #34	; 0x22
 80049a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049a2:	f7fd f9a3 	bl	8001cec <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c0:	d10e      	bne.n	80049e0 <HAL_UART_Receive+0x8a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <HAL_UART_Receive+0x80>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d4:	e02d      	b.n	8004a32 <HAL_UART_Receive+0xdc>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049de:	e028      	b.n	8004a32 <HAL_UART_Receive+0xdc>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_UART_Receive+0xae>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <HAL_UART_Receive+0xa4>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	22ff      	movs	r2, #255	; 0xff
 80049f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049f8:	e01b      	b.n	8004a32 <HAL_UART_Receive+0xdc>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	227f      	movs	r2, #127	; 0x7f
 80049fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a02:	e016      	b.n	8004a32 <HAL_UART_Receive+0xdc>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a0c:	d10d      	bne.n	8004a2a <HAL_UART_Receive+0xd4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Receive+0xca>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	227f      	movs	r2, #127	; 0x7f
 8004a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a1e:	e008      	b.n	8004a32 <HAL_UART_Receive+0xdc>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	223f      	movs	r2, #63	; 0x3f
 8004a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a28:	e003      	b.n	8004a32 <HAL_UART_Receive+0xdc>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a38:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	d108      	bne.n	8004a56 <HAL_UART_Receive+0x100>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e003      	b.n	8004a5e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a66:	e033      	b.n	8004ad0 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2120      	movs	r1, #32
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fc09 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e032      	b.n	8004ae8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	8a7b      	ldrh	r3, [r7, #18]
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e00d      	b.n	8004abe <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	8a7b      	ldrh	r3, [r7, #18]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1c5      	bne.n	8004a68 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004af4:	b08a      	sub	sp, #40	; 0x28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4bb3      	ldr	r3, [pc, #716]	; (8004df4 <UART_SetConfig+0x304>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4aa9      	ldr	r2, [pc, #676]	; (8004df8 <UART_SetConfig+0x308>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4aa0      	ldr	r2, [pc, #640]	; (8004dfc <UART_SetConfig+0x30c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d126      	bne.n	8004bce <UART_SetConfig+0xde>
 8004b80:	4b9f      	ldr	r3, [pc, #636]	; (8004e00 <UART_SetConfig+0x310>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d81a      	bhi.n	8004bc4 <UART_SetConfig+0xd4>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0xa4>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bbd 	.word	0x08004bbd
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e080      	b.n	8004cae <UART_SetConfig+0x1be>
 8004bac:	2302      	movs	r3, #2
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e07c      	b.n	8004cae <UART_SetConfig+0x1be>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e078      	b.n	8004cae <UART_SetConfig+0x1be>
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e074      	b.n	8004cae <UART_SetConfig+0x1be>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bca:	bf00      	nop
 8004bcc:	e06f      	b.n	8004cae <UART_SetConfig+0x1be>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a8c      	ldr	r2, [pc, #560]	; (8004e04 <UART_SetConfig+0x314>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d138      	bne.n	8004c4a <UART_SetConfig+0x15a>
 8004bd8:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <UART_SetConfig+0x310>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d82c      	bhi.n	8004c40 <UART_SetConfig+0x150>
 8004be6:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0xfc>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e042      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e03e      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c30:	2304      	movs	r3, #4
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e03a      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c38:	2308      	movs	r3, #8
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e036      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	bf00      	nop
 8004c48:	e031      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6a      	ldr	r2, [pc, #424]	; (8004df8 <UART_SetConfig+0x308>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d129      	bne.n	8004ca8 <UART_SetConfig+0x1b8>
 8004c54:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <UART_SetConfig+0x310>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d014      	beq.n	8004c8e <UART_SetConfig+0x19e>
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d802      	bhi.n	8004c70 <UART_SetConfig+0x180>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <UART_SetConfig+0x18e>
 8004c6e:	e016      	b.n	8004c9e <UART_SetConfig+0x1ae>
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c74:	d007      	beq.n	8004c86 <UART_SetConfig+0x196>
 8004c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c7a:	d00c      	beq.n	8004c96 <UART_SetConfig+0x1a6>
 8004c7c:	e00f      	b.n	8004c9e <UART_SetConfig+0x1ae>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c84:	e013      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c86:	2302      	movs	r3, #2
 8004c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8c:	e00f      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c8e:	2304      	movs	r3, #4
 8004c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c94:	e00b      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c96:	2308      	movs	r3, #8
 8004c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9c:	e007      	b.n	8004cae <UART_SetConfig+0x1be>
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca4:	bf00      	nop
 8004ca6:	e002      	b.n	8004cae <UART_SetConfig+0x1be>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a51      	ldr	r2, [pc, #324]	; (8004df8 <UART_SetConfig+0x308>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	f040 80fa 	bne.w	8004eae <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d823      	bhi.n	8004d0a <UART_SetConfig+0x21a>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x1d8>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004d0b 	.word	0x08004d0b
 8004cd0:	08004cf5 	.word	0x08004cf5
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004cfb 	.word	0x08004cfb
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004d0b 	.word	0x08004d0b
 8004ce8:	08004d03 	.word	0x08004d03
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004cec:	f7ff f9d4 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cf2:	e00d      	b.n	8004d10 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004cf4:	4b44      	ldr	r3, [pc, #272]	; (8004e08 <UART_SetConfig+0x318>)
 8004cf6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cf8:	e00a      	b.n	8004d10 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7ff f937 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8004cfe:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d00:	e006      	b.n	8004d10 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d06:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d08:	e002      	b.n	8004d10 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	76fb      	strb	r3, [r7, #27]
        break;
 8004d0e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 81c6 	beq.w	80050a4 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4413      	add	r3, r2
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d305      	bcc.n	8004d34 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d902      	bls.n	8004d3a <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	76fb      	strb	r3, [r7, #27]
 8004d38:	e1b4      	b.n	80050a4 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8004d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	f200 80a2 	bhi.w	8004e88 <UART_SetConfig+0x398>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x25c>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004e89 	.word	0x08004e89
 8004d54:	08004dbf 	.word	0x08004dbf
 8004d58:	08004e89 	.word	0x08004e89
 8004d5c:	08004e11 	.word	0x08004e11
 8004d60:	08004e89 	.word	0x08004e89
 8004d64:	08004e89 	.word	0x08004e89
 8004d68:	08004e89 	.word	0x08004e89
 8004d6c:	08004e5f 	.word	0x08004e5f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d70:	f7ff f992 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004d74:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	0214      	lsls	r4, r2, #8
 8004d88:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d8c:	020b      	lsls	r3, r1, #8
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6852      	ldr	r2, [r2, #4]
 8004d92:	0852      	lsrs	r2, r2, #1
 8004d94:	4611      	mov	r1, r2
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	eb13 0b01 	adds.w	fp, r3, r1
 8004d9e:	eb44 0c02 	adc.w	ip, r4, r2
 8004da2:	4658      	mov	r0, fp
 8004da4:	4661      	mov	r1, ip
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f04f 0400 	mov.w	r4, #0
 8004dae:	461a      	mov	r2, r3
 8004db0:	4623      	mov	r3, r4
 8004db2:	f7fb fef9 	bl	8000ba8 <__aeabi_uldivmod>
 8004db6:	4603      	mov	r3, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004dbc:	e067      	b.n	8004e8e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	f04f 0400 	mov.w	r4, #0
 8004dc8:	4910      	ldr	r1, [pc, #64]	; (8004e0c <UART_SetConfig+0x31c>)
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	eb13 0b01 	adds.w	fp, r3, r1
 8004dd2:	eb44 0c02 	adc.w	ip, r4, r2
 8004dd6:	4658      	mov	r0, fp
 8004dd8:	4661      	mov	r1, ip
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f04f 0400 	mov.w	r4, #0
 8004de2:	461a      	mov	r2, r3
 8004de4:	4623      	mov	r3, r4
 8004de6:	f7fb fedf 	bl	8000ba8 <__aeabi_uldivmod>
 8004dea:	4603      	mov	r3, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004df0:	e04d      	b.n	8004e8e <UART_SetConfig+0x39e>
 8004df2:	bf00      	nop
 8004df4:	efff69f3 	.word	0xefff69f3
 8004df8:	40008000 	.word	0x40008000
 8004dfc:	40013800 	.word	0x40013800
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40004400 	.word	0x40004400
 8004e08:	00f42400 	.word	0x00f42400
 8004e0c:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004e10:	f7ff f8ac 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8004e14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	f04f 0400 	mov.w	r4, #0
 8004e26:	0214      	lsls	r4, r2, #8
 8004e28:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e2c:	020b      	lsls	r3, r1, #8
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6852      	ldr	r2, [r2, #4]
 8004e32:	0852      	lsrs	r2, r2, #1
 8004e34:	4611      	mov	r1, r2
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	eb13 0b01 	adds.w	fp, r3, r1
 8004e3e:	eb44 0c02 	adc.w	ip, r4, r2
 8004e42:	4658      	mov	r0, fp
 8004e44:	4661      	mov	r1, ip
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f04f 0400 	mov.w	r4, #0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4623      	mov	r3, r4
 8004e52:	f7fb fea9 	bl	8000ba8 <__aeabi_uldivmod>
 8004e56:	4603      	mov	r3, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e5c:	e017      	b.n	8004e8e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	f04f 0400 	mov.w	r4, #0
 8004e68:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004e6c:	f144 0100 	adc.w	r1, r4, #0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f04f 0400 	mov.w	r4, #0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	f7fb fe94 	bl	8000ba8 <__aeabi_uldivmod>
 8004e80:	4603      	mov	r3, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e86:	e002      	b.n	8004e8e <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	76fb      	strb	r3, [r7, #27]
            break;
 8004e8c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e94:	d308      	bcc.n	8004ea8 <UART_SetConfig+0x3b8>
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9c:	d204      	bcs.n	8004ea8 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e0fd      	b.n	80050a4 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	76fb      	strb	r3, [r7, #27]
 8004eac:	e0fa      	b.n	80050a4 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb6:	f040 8083 	bne.w	8004fc0 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8004eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d85e      	bhi.n	8004f80 <UART_SetConfig+0x490>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0x3d8>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f2d 	.word	0x08004f2d
 8004ed4:	08004f81 	.word	0x08004f81
 8004ed8:	08004f49 	.word	0x08004f49
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08004f81 	.word	0x08004f81
 8004ee4:	08004f81 	.word	0x08004f81
 8004ee8:	08004f69 	.word	0x08004f69
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7ff f8d4 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	005a      	lsls	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	441a      	add	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f0a:	e03c      	b.n	8004f86 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7ff f8da 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004f10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	005a      	lsls	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f2a:	e02c      	b.n	8004f86 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004f36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6852      	ldr	r2, [r2, #4]
 8004f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f46:	e01e      	b.n	8004f86 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f48:	f7ff f810 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8004f4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	005a      	lsls	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f66:	e00e      	b.n	8004f86 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f7e:	e002      	b.n	8004f86 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	76fb      	strb	r3, [r7, #27]
        break;
 8004f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d916      	bls.n	8004fba <UART_SetConfig+0x4ca>
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f92:	d212      	bcs.n	8004fba <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f023 030f 	bic.w	r3, r3, #15
 8004f9c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	89fb      	ldrh	r3, [r7, #14]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	89fa      	ldrh	r2, [r7, #14]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	e074      	b.n	80050a4 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e071      	b.n	80050a4 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d85c      	bhi.n	8005082 <UART_SetConfig+0x592>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x4e0>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005031 	.word	0x08005031
 8004fdc:	08005083 	.word	0x08005083
 8004fe0:	0800504d 	.word	0x0800504d
 8004fe4:	08005083 	.word	0x08005083
 8004fe8:	08005083 	.word	0x08005083
 8004fec:	08005083 	.word	0x08005083
 8004ff0:	0800506b 	.word	0x0800506b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff4:	f7ff f850 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	085a      	lsrs	r2, r3, #1
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	441a      	add	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005010:	e03a      	b.n	8005088 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005012:	f7ff f857 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8005016:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085a      	lsrs	r2, r3, #1
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800502e:	e02b      	b.n	8005088 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800503a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6852      	ldr	r2, [r2, #4]
 8005042:	fbb3 f3f2 	udiv	r3, r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800504a:	e01d      	b.n	8005088 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504c:	f7fe ff8e 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8005050:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085a      	lsrs	r2, r3, #1
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005068:	e00e      	b.n	8005088 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005080:	e002      	b.n	8005088 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	76fb      	strb	r3, [r7, #27]
        break;
 8005086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b0f      	cmp	r3, #15
 800508c:	d908      	bls.n	80050a0 <UART_SetConfig+0x5b0>
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d204      	bcs.n	80050a0 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e001      	b.n	80050a4 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050b0:	7efb      	ldrb	r3, [r7, #27]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080050bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ba:	d10a      	bne.n	80051d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800520e:	f7fc fd6d 	bl	8001cec <HAL_GetTick>
 8005212:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b08      	cmp	r3, #8
 8005220:	d10e      	bne.n	8005240 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005222:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f82a 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e020      	b.n	8005282 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b04      	cmp	r3, #4
 800524c:	d10e      	bne.n	800526c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800524e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f814 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e00a      	b.n	8005282 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529a:	e05d      	b.n	8005358 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d059      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a4:	f7fc fd22 	bl	8001cec <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <UART_WaitOnFlagUntilTimeout+0x30>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11b      	bne.n	80052f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e042      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d02b      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530e:	d123      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005318:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005328:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e00f      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69da      	ldr	r2, [r3, #28]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	429a      	cmp	r2, r3
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	429a      	cmp	r2, r3
 8005374:	d092      	beq.n	800529c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <__errno>:
 8005380:	4b01      	ldr	r3, [pc, #4]	; (8005388 <__errno+0x8>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	2000000c 	.word	0x2000000c

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4e0d      	ldr	r6, [pc, #52]	; (80053c4 <__libc_init_array+0x38>)
 8005390:	4c0d      	ldr	r4, [pc, #52]	; (80053c8 <__libc_init_array+0x3c>)
 8005392:	1ba4      	subs	r4, r4, r6
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	2500      	movs	r5, #0
 8005398:	42a5      	cmp	r5, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	4e0b      	ldr	r6, [pc, #44]	; (80053cc <__libc_init_array+0x40>)
 800539e:	4c0c      	ldr	r4, [pc, #48]	; (80053d0 <__libc_init_array+0x44>)
 80053a0:	f002 fd02 	bl	8007da8 <_init>
 80053a4:	1ba4      	subs	r4, r4, r6
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	2500      	movs	r5, #0
 80053aa:	42a5      	cmp	r5, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053b4:	4798      	blx	r3
 80053b6:	3501      	adds	r5, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053be:	4798      	blx	r3
 80053c0:	3501      	adds	r5, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	08008110 	.word	0x08008110
 80053c8:	08008110 	.word	0x08008110
 80053cc:	08008110 	.word	0x08008110
 80053d0:	08008114 	.word	0x08008114

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <__cvt>:
 80053e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	ec55 4b10 	vmov	r4, r5, d0
 80053ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80053ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	460e      	mov	r6, r1
 80053f6:	4691      	mov	r9, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	bfb8      	it	lt
 80053fc:	4622      	movlt	r2, r4
 80053fe:	462b      	mov	r3, r5
 8005400:	f027 0720 	bic.w	r7, r7, #32
 8005404:	bfbb      	ittet	lt
 8005406:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800540a:	461d      	movlt	r5, r3
 800540c:	2300      	movge	r3, #0
 800540e:	232d      	movlt	r3, #45	; 0x2d
 8005410:	bfb8      	it	lt
 8005412:	4614      	movlt	r4, r2
 8005414:	2f46      	cmp	r7, #70	; 0x46
 8005416:	700b      	strb	r3, [r1, #0]
 8005418:	d004      	beq.n	8005424 <__cvt+0x40>
 800541a:	2f45      	cmp	r7, #69	; 0x45
 800541c:	d100      	bne.n	8005420 <__cvt+0x3c>
 800541e:	3601      	adds	r6, #1
 8005420:	2102      	movs	r1, #2
 8005422:	e000      	b.n	8005426 <__cvt+0x42>
 8005424:	2103      	movs	r1, #3
 8005426:	ab03      	add	r3, sp, #12
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	ab02      	add	r3, sp, #8
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4632      	mov	r2, r6
 8005430:	4653      	mov	r3, sl
 8005432:	ec45 4b10 	vmov	d0, r4, r5
 8005436:	f000 fcf7 	bl	8005e28 <_dtoa_r>
 800543a:	2f47      	cmp	r7, #71	; 0x47
 800543c:	4680      	mov	r8, r0
 800543e:	d102      	bne.n	8005446 <__cvt+0x62>
 8005440:	f019 0f01 	tst.w	r9, #1
 8005444:	d026      	beq.n	8005494 <__cvt+0xb0>
 8005446:	2f46      	cmp	r7, #70	; 0x46
 8005448:	eb08 0906 	add.w	r9, r8, r6
 800544c:	d111      	bne.n	8005472 <__cvt+0x8e>
 800544e:	f898 3000 	ldrb.w	r3, [r8]
 8005452:	2b30      	cmp	r3, #48	; 0x30
 8005454:	d10a      	bne.n	800546c <__cvt+0x88>
 8005456:	2200      	movs	r2, #0
 8005458:	2300      	movs	r3, #0
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fb fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005462:	b918      	cbnz	r0, 800546c <__cvt+0x88>
 8005464:	f1c6 0601 	rsb	r6, r6, #1
 8005468:	f8ca 6000 	str.w	r6, [sl]
 800546c:	f8da 3000 	ldr.w	r3, [sl]
 8005470:	4499      	add	r9, r3
 8005472:	2200      	movs	r2, #0
 8005474:	2300      	movs	r3, #0
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f7fb fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800547e:	b938      	cbnz	r0, 8005490 <__cvt+0xac>
 8005480:	2230      	movs	r2, #48	; 0x30
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	454b      	cmp	r3, r9
 8005486:	d205      	bcs.n	8005494 <__cvt+0xb0>
 8005488:	1c59      	adds	r1, r3, #1
 800548a:	9103      	str	r1, [sp, #12]
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e7f8      	b.n	8005482 <__cvt+0x9e>
 8005490:	f8cd 900c 	str.w	r9, [sp, #12]
 8005494:	9b03      	ldr	r3, [sp, #12]
 8005496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005498:	eba3 0308 	sub.w	r3, r3, r8
 800549c:	4640      	mov	r0, r8
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	b004      	add	sp, #16
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080054a6 <__exponent>:
 80054a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054a8:	2900      	cmp	r1, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	bfba      	itte	lt
 80054ae:	4249      	neglt	r1, r1
 80054b0:	232d      	movlt	r3, #45	; 0x2d
 80054b2:	232b      	movge	r3, #43	; 0x2b
 80054b4:	2909      	cmp	r1, #9
 80054b6:	f804 2b02 	strb.w	r2, [r4], #2
 80054ba:	7043      	strb	r3, [r0, #1]
 80054bc:	dd20      	ble.n	8005500 <__exponent+0x5a>
 80054be:	f10d 0307 	add.w	r3, sp, #7
 80054c2:	461f      	mov	r7, r3
 80054c4:	260a      	movs	r6, #10
 80054c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80054ca:	fb06 1115 	mls	r1, r6, r5, r1
 80054ce:	3130      	adds	r1, #48	; 0x30
 80054d0:	2d09      	cmp	r5, #9
 80054d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054d6:	f103 32ff 	add.w	r2, r3, #4294967295
 80054da:	4629      	mov	r1, r5
 80054dc:	dc09      	bgt.n	80054f2 <__exponent+0x4c>
 80054de:	3130      	adds	r1, #48	; 0x30
 80054e0:	3b02      	subs	r3, #2
 80054e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80054e6:	42bb      	cmp	r3, r7
 80054e8:	4622      	mov	r2, r4
 80054ea:	d304      	bcc.n	80054f6 <__exponent+0x50>
 80054ec:	1a10      	subs	r0, r2, r0
 80054ee:	b003      	add	sp, #12
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f2:	4613      	mov	r3, r2
 80054f4:	e7e7      	b.n	80054c6 <__exponent+0x20>
 80054f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054fa:	f804 2b01 	strb.w	r2, [r4], #1
 80054fe:	e7f2      	b.n	80054e6 <__exponent+0x40>
 8005500:	2330      	movs	r3, #48	; 0x30
 8005502:	4419      	add	r1, r3
 8005504:	7083      	strb	r3, [r0, #2]
 8005506:	1d02      	adds	r2, r0, #4
 8005508:	70c1      	strb	r1, [r0, #3]
 800550a:	e7ef      	b.n	80054ec <__exponent+0x46>

0800550c <_printf_float>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	b08d      	sub	sp, #52	; 0x34
 8005512:	460c      	mov	r4, r1
 8005514:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005518:	4616      	mov	r6, r2
 800551a:	461f      	mov	r7, r3
 800551c:	4605      	mov	r5, r0
 800551e:	f001 fb05 	bl	8006b2c <_localeconv_r>
 8005522:	6803      	ldr	r3, [r0, #0]
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fa fe52 	bl	80001d0 <strlen>
 800552c:	2300      	movs	r3, #0
 800552e:	930a      	str	r3, [sp, #40]	; 0x28
 8005530:	f8d8 3000 	ldr.w	r3, [r8]
 8005534:	9005      	str	r0, [sp, #20]
 8005536:	3307      	adds	r3, #7
 8005538:	f023 0307 	bic.w	r3, r3, #7
 800553c:	f103 0208 	add.w	r2, r3, #8
 8005540:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005544:	f8d4 b000 	ldr.w	fp, [r4]
 8005548:	f8c8 2000 	str.w	r2, [r8]
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005554:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005558:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800555c:	9307      	str	r3, [sp, #28]
 800555e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	4ba7      	ldr	r3, [pc, #668]	; (8005804 <_printf_float+0x2f8>)
 8005568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800556c:	f7fb fade 	bl	8000b2c <__aeabi_dcmpun>
 8005570:	bb70      	cbnz	r0, 80055d0 <_printf_float+0xc4>
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	4ba3      	ldr	r3, [pc, #652]	; (8005804 <_printf_float+0x2f8>)
 8005578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557c:	f7fb fab8 	bl	8000af0 <__aeabi_dcmple>
 8005580:	bb30      	cbnz	r0, 80055d0 <_printf_float+0xc4>
 8005582:	2200      	movs	r2, #0
 8005584:	2300      	movs	r3, #0
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fb faa7 	bl	8000adc <__aeabi_dcmplt>
 800558e:	b110      	cbz	r0, 8005596 <_printf_float+0x8a>
 8005590:	232d      	movs	r3, #45	; 0x2d
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005596:	4a9c      	ldr	r2, [pc, #624]	; (8005808 <_printf_float+0x2fc>)
 8005598:	4b9c      	ldr	r3, [pc, #624]	; (800580c <_printf_float+0x300>)
 800559a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800559e:	bf8c      	ite	hi
 80055a0:	4690      	movhi	r8, r2
 80055a2:	4698      	movls	r8, r3
 80055a4:	2303      	movs	r3, #3
 80055a6:	f02b 0204 	bic.w	r2, fp, #4
 80055aa:	6123      	str	r3, [r4, #16]
 80055ac:	6022      	str	r2, [r4, #0]
 80055ae:	f04f 0900 	mov.w	r9, #0
 80055b2:	9700      	str	r7, [sp, #0]
 80055b4:	4633      	mov	r3, r6
 80055b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80055b8:	4621      	mov	r1, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f9e6 	bl	800598c <_printf_common>
 80055c0:	3001      	adds	r0, #1
 80055c2:	f040 808d 	bne.w	80056e0 <_printf_float+0x1d4>
 80055c6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ca:	b00d      	add	sp, #52	; 0x34
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fb faa8 	bl	8000b2c <__aeabi_dcmpun>
 80055dc:	b110      	cbz	r0, 80055e4 <_printf_float+0xd8>
 80055de:	4a8c      	ldr	r2, [pc, #560]	; (8005810 <_printf_float+0x304>)
 80055e0:	4b8c      	ldr	r3, [pc, #560]	; (8005814 <_printf_float+0x308>)
 80055e2:	e7da      	b.n	800559a <_printf_float+0x8e>
 80055e4:	6861      	ldr	r1, [r4, #4]
 80055e6:	1c4b      	adds	r3, r1, #1
 80055e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80055ec:	a80a      	add	r0, sp, #40	; 0x28
 80055ee:	d13e      	bne.n	800566e <_printf_float+0x162>
 80055f0:	2306      	movs	r3, #6
 80055f2:	6063      	str	r3, [r4, #4]
 80055f4:	2300      	movs	r3, #0
 80055f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80055fa:	ab09      	add	r3, sp, #36	; 0x24
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	ec49 8b10 	vmov	d0, r8, r9
 8005602:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005606:	6022      	str	r2, [r4, #0]
 8005608:	f8cd a004 	str.w	sl, [sp, #4]
 800560c:	6861      	ldr	r1, [r4, #4]
 800560e:	4628      	mov	r0, r5
 8005610:	f7ff fee8 	bl	80053e4 <__cvt>
 8005614:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005618:	2b47      	cmp	r3, #71	; 0x47
 800561a:	4680      	mov	r8, r0
 800561c:	d109      	bne.n	8005632 <_printf_float+0x126>
 800561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005620:	1cd8      	adds	r0, r3, #3
 8005622:	db02      	blt.n	800562a <_printf_float+0x11e>
 8005624:	6862      	ldr	r2, [r4, #4]
 8005626:	4293      	cmp	r3, r2
 8005628:	dd47      	ble.n	80056ba <_printf_float+0x1ae>
 800562a:	f1aa 0a02 	sub.w	sl, sl, #2
 800562e:	fa5f fa8a 	uxtb.w	sl, sl
 8005632:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005638:	d824      	bhi.n	8005684 <_printf_float+0x178>
 800563a:	3901      	subs	r1, #1
 800563c:	4652      	mov	r2, sl
 800563e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005642:	9109      	str	r1, [sp, #36]	; 0x24
 8005644:	f7ff ff2f 	bl	80054a6 <__exponent>
 8005648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800564a:	1813      	adds	r3, r2, r0
 800564c:	2a01      	cmp	r2, #1
 800564e:	4681      	mov	r9, r0
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	dc02      	bgt.n	800565a <_printf_float+0x14e>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	07d1      	lsls	r1, r2, #31
 8005658:	d501      	bpl.n	800565e <_printf_float+0x152>
 800565a:	3301      	adds	r3, #1
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0a5      	beq.n	80055b2 <_printf_float+0xa6>
 8005666:	232d      	movs	r3, #45	; 0x2d
 8005668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566c:	e7a1      	b.n	80055b2 <_printf_float+0xa6>
 800566e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005672:	f000 8177 	beq.w	8005964 <_printf_float+0x458>
 8005676:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800567a:	d1bb      	bne.n	80055f4 <_printf_float+0xe8>
 800567c:	2900      	cmp	r1, #0
 800567e:	d1b9      	bne.n	80055f4 <_printf_float+0xe8>
 8005680:	2301      	movs	r3, #1
 8005682:	e7b6      	b.n	80055f2 <_printf_float+0xe6>
 8005684:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005688:	d119      	bne.n	80056be <_printf_float+0x1b2>
 800568a:	2900      	cmp	r1, #0
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	dd0c      	ble.n	80056aa <_printf_float+0x19e>
 8005690:	6121      	str	r1, [r4, #16]
 8005692:	b913      	cbnz	r3, 800569a <_printf_float+0x18e>
 8005694:	6822      	ldr	r2, [r4, #0]
 8005696:	07d2      	lsls	r2, r2, #31
 8005698:	d502      	bpl.n	80056a0 <_printf_float+0x194>
 800569a:	3301      	adds	r3, #1
 800569c:	440b      	add	r3, r1
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80056a4:	f04f 0900 	mov.w	r9, #0
 80056a8:	e7d9      	b.n	800565e <_printf_float+0x152>
 80056aa:	b913      	cbnz	r3, 80056b2 <_printf_float+0x1a6>
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	07d0      	lsls	r0, r2, #31
 80056b0:	d501      	bpl.n	80056b6 <_printf_float+0x1aa>
 80056b2:	3302      	adds	r3, #2
 80056b4:	e7f3      	b.n	800569e <_printf_float+0x192>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e7f1      	b.n	800569e <_printf_float+0x192>
 80056ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80056be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056c2:	4293      	cmp	r3, r2
 80056c4:	db05      	blt.n	80056d2 <_printf_float+0x1c6>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	07d1      	lsls	r1, r2, #31
 80056cc:	d5e8      	bpl.n	80056a0 <_printf_float+0x194>
 80056ce:	3301      	adds	r3, #1
 80056d0:	e7e5      	b.n	800569e <_printf_float+0x192>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfd4      	ite	le
 80056d6:	f1c3 0302 	rsble	r3, r3, #2
 80056da:	2301      	movgt	r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	e7de      	b.n	800569e <_printf_float+0x192>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	055a      	lsls	r2, r3, #21
 80056e4:	d407      	bmi.n	80056f6 <_printf_float+0x1ea>
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	4642      	mov	r2, r8
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	d12b      	bne.n	800574c <_printf_float+0x240>
 80056f4:	e767      	b.n	80055c6 <_printf_float+0xba>
 80056f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80056fa:	f240 80dc 	bls.w	80058b6 <_printf_float+0x3aa>
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005706:	f7fb f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800570a:	2800      	cmp	r0, #0
 800570c:	d033      	beq.n	8005776 <_printf_float+0x26a>
 800570e:	2301      	movs	r3, #1
 8005710:	4a41      	ldr	r2, [pc, #260]	; (8005818 <_printf_float+0x30c>)
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f af54 	beq.w	80055c6 <_printf_float+0xba>
 800571e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005722:	429a      	cmp	r2, r3
 8005724:	db02      	blt.n	800572c <_printf_float+0x220>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	07d8      	lsls	r0, r3, #31
 800572a:	d50f      	bpl.n	800574c <_printf_float+0x240>
 800572c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	f43f af45 	beq.w	80055c6 <_printf_float+0xba>
 800573c:	f04f 0800 	mov.w	r8, #0
 8005740:	f104 091a 	add.w	r9, r4, #26
 8005744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005746:	3b01      	subs	r3, #1
 8005748:	4543      	cmp	r3, r8
 800574a:	dc09      	bgt.n	8005760 <_printf_float+0x254>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	079b      	lsls	r3, r3, #30
 8005750:	f100 8103 	bmi.w	800595a <_printf_float+0x44e>
 8005754:	68e0      	ldr	r0, [r4, #12]
 8005756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005758:	4298      	cmp	r0, r3
 800575a:	bfb8      	it	lt
 800575c:	4618      	movlt	r0, r3
 800575e:	e734      	b.n	80055ca <_printf_float+0xbe>
 8005760:	2301      	movs	r3, #1
 8005762:	464a      	mov	r2, r9
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af2b 	beq.w	80055c6 <_printf_float+0xba>
 8005770:	f108 0801 	add.w	r8, r8, #1
 8005774:	e7e6      	b.n	8005744 <_printf_float+0x238>
 8005776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	dc2b      	bgt.n	80057d4 <_printf_float+0x2c8>
 800577c:	2301      	movs	r3, #1
 800577e:	4a26      	ldr	r2, [pc, #152]	; (8005818 <_printf_float+0x30c>)
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	f43f af1d 	beq.w	80055c6 <_printf_float+0xba>
 800578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578e:	b923      	cbnz	r3, 800579a <_printf_float+0x28e>
 8005790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005792:	b913      	cbnz	r3, 800579a <_printf_float+0x28e>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	07d9      	lsls	r1, r3, #31
 8005798:	d5d8      	bpl.n	800574c <_printf_float+0x240>
 800579a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f af0e 	beq.w	80055c6 <_printf_float+0xba>
 80057aa:	f04f 0900 	mov.w	r9, #0
 80057ae:	f104 0a1a 	add.w	sl, r4, #26
 80057b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b4:	425b      	negs	r3, r3
 80057b6:	454b      	cmp	r3, r9
 80057b8:	dc01      	bgt.n	80057be <_printf_float+0x2b2>
 80057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057bc:	e794      	b.n	80056e8 <_printf_float+0x1dc>
 80057be:	2301      	movs	r3, #1
 80057c0:	4652      	mov	r2, sl
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f aefc 	beq.w	80055c6 <_printf_float+0xba>
 80057ce:	f109 0901 	add.w	r9, r9, #1
 80057d2:	e7ee      	b.n	80057b2 <_printf_float+0x2a6>
 80057d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057d8:	429a      	cmp	r2, r3
 80057da:	bfa8      	it	ge
 80057dc:	461a      	movge	r2, r3
 80057de:	2a00      	cmp	r2, #0
 80057e0:	4691      	mov	r9, r2
 80057e2:	dd07      	ble.n	80057f4 <_printf_float+0x2e8>
 80057e4:	4613      	mov	r3, r2
 80057e6:	4631      	mov	r1, r6
 80057e8:	4642      	mov	r2, r8
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f aee9 	beq.w	80055c6 <_printf_float+0xba>
 80057f4:	f104 031a 	add.w	r3, r4, #26
 80057f8:	f04f 0b00 	mov.w	fp, #0
 80057fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005800:	9306      	str	r3, [sp, #24]
 8005802:	e015      	b.n	8005830 <_printf_float+0x324>
 8005804:	7fefffff 	.word	0x7fefffff
 8005808:	08007e50 	.word	0x08007e50
 800580c:	08007e4c 	.word	0x08007e4c
 8005810:	08007e58 	.word	0x08007e58
 8005814:	08007e54 	.word	0x08007e54
 8005818:	08007e5c 	.word	0x08007e5c
 800581c:	2301      	movs	r3, #1
 800581e:	9a06      	ldr	r2, [sp, #24]
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f aecd 	beq.w	80055c6 <_printf_float+0xba>
 800582c:	f10b 0b01 	add.w	fp, fp, #1
 8005830:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005834:	ebaa 0309 	sub.w	r3, sl, r9
 8005838:	455b      	cmp	r3, fp
 800583a:	dcef      	bgt.n	800581c <_printf_float+0x310>
 800583c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005840:	429a      	cmp	r2, r3
 8005842:	44d0      	add	r8, sl
 8005844:	db15      	blt.n	8005872 <_printf_float+0x366>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	07da      	lsls	r2, r3, #31
 800584a:	d412      	bmi.n	8005872 <_printf_float+0x366>
 800584c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800584e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005850:	eba3 020a 	sub.w	r2, r3, sl
 8005854:	eba3 0a01 	sub.w	sl, r3, r1
 8005858:	4592      	cmp	sl, r2
 800585a:	bfa8      	it	ge
 800585c:	4692      	movge	sl, r2
 800585e:	f1ba 0f00 	cmp.w	sl, #0
 8005862:	dc0e      	bgt.n	8005882 <_printf_float+0x376>
 8005864:	f04f 0800 	mov.w	r8, #0
 8005868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800586c:	f104 091a 	add.w	r9, r4, #26
 8005870:	e019      	b.n	80058a6 <_printf_float+0x39a>
 8005872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	d1e5      	bne.n	800584c <_printf_float+0x340>
 8005880:	e6a1      	b.n	80055c6 <_printf_float+0xba>
 8005882:	4653      	mov	r3, sl
 8005884:	4642      	mov	r2, r8
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	d1e9      	bne.n	8005864 <_printf_float+0x358>
 8005890:	e699      	b.n	80055c6 <_printf_float+0xba>
 8005892:	2301      	movs	r3, #1
 8005894:	464a      	mov	r2, r9
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f ae92 	beq.w	80055c6 <_printf_float+0xba>
 80058a2:	f108 0801 	add.w	r8, r8, #1
 80058a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	eba3 030a 	sub.w	r3, r3, sl
 80058b0:	4543      	cmp	r3, r8
 80058b2:	dcee      	bgt.n	8005892 <_printf_float+0x386>
 80058b4:	e74a      	b.n	800574c <_printf_float+0x240>
 80058b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b8:	2a01      	cmp	r2, #1
 80058ba:	dc01      	bgt.n	80058c0 <_printf_float+0x3b4>
 80058bc:	07db      	lsls	r3, r3, #31
 80058be:	d53a      	bpl.n	8005936 <_printf_float+0x42a>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4642      	mov	r2, r8
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	f43f ae7b 	beq.w	80055c6 <_printf_float+0xba>
 80058d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f108 0801 	add.w	r8, r8, #1
 80058e0:	f43f ae71 	beq.w	80055c6 <_printf_float+0xba>
 80058e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e6:	2200      	movs	r2, #0
 80058e8:	f103 3aff 	add.w	sl, r3, #4294967295
 80058ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058f0:	2300      	movs	r3, #0
 80058f2:	f7fb f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f6:	b9c8      	cbnz	r0, 800592c <_printf_float+0x420>
 80058f8:	4653      	mov	r3, sl
 80058fa:	4642      	mov	r2, r8
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	47b8      	blx	r7
 8005902:	3001      	adds	r0, #1
 8005904:	d10e      	bne.n	8005924 <_printf_float+0x418>
 8005906:	e65e      	b.n	80055c6 <_printf_float+0xba>
 8005908:	2301      	movs	r3, #1
 800590a:	4652      	mov	r2, sl
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f ae57 	beq.w	80055c6 <_printf_float+0xba>
 8005918:	f108 0801 	add.w	r8, r8, #1
 800591c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591e:	3b01      	subs	r3, #1
 8005920:	4543      	cmp	r3, r8
 8005922:	dcf1      	bgt.n	8005908 <_printf_float+0x3fc>
 8005924:	464b      	mov	r3, r9
 8005926:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800592a:	e6de      	b.n	80056ea <_printf_float+0x1de>
 800592c:	f04f 0800 	mov.w	r8, #0
 8005930:	f104 0a1a 	add.w	sl, r4, #26
 8005934:	e7f2      	b.n	800591c <_printf_float+0x410>
 8005936:	2301      	movs	r3, #1
 8005938:	e7df      	b.n	80058fa <_printf_float+0x3ee>
 800593a:	2301      	movs	r3, #1
 800593c:	464a      	mov	r2, r9
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	f43f ae3e 	beq.w	80055c6 <_printf_float+0xba>
 800594a:	f108 0801 	add.w	r8, r8, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	4543      	cmp	r3, r8
 8005956:	dcf0      	bgt.n	800593a <_printf_float+0x42e>
 8005958:	e6fc      	b.n	8005754 <_printf_float+0x248>
 800595a:	f04f 0800 	mov.w	r8, #0
 800595e:	f104 0919 	add.w	r9, r4, #25
 8005962:	e7f4      	b.n	800594e <_printf_float+0x442>
 8005964:	2900      	cmp	r1, #0
 8005966:	f43f ae8b 	beq.w	8005680 <_printf_float+0x174>
 800596a:	2300      	movs	r3, #0
 800596c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005970:	ab09      	add	r3, sp, #36	; 0x24
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	ec49 8b10 	vmov	d0, r8, r9
 8005978:	6022      	str	r2, [r4, #0]
 800597a:	f8cd a004 	str.w	sl, [sp, #4]
 800597e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005982:	4628      	mov	r0, r5
 8005984:	f7ff fd2e 	bl	80053e4 <__cvt>
 8005988:	4680      	mov	r8, r0
 800598a:	e648      	b.n	800561e <_printf_float+0x112>

0800598c <_printf_common>:
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	4691      	mov	r9, r2
 8005992:	461f      	mov	r7, r3
 8005994:	688a      	ldr	r2, [r1, #8]
 8005996:	690b      	ldr	r3, [r1, #16]
 8005998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800599c:	4293      	cmp	r3, r2
 800599e:	bfb8      	it	lt
 80059a0:	4613      	movlt	r3, r2
 80059a2:	f8c9 3000 	str.w	r3, [r9]
 80059a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059aa:	4606      	mov	r6, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	b112      	cbz	r2, 80059b6 <_printf_common+0x2a>
 80059b0:	3301      	adds	r3, #1
 80059b2:	f8c9 3000 	str.w	r3, [r9]
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	0699      	lsls	r1, r3, #26
 80059ba:	bf42      	ittt	mi
 80059bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059c0:	3302      	addmi	r3, #2
 80059c2:	f8c9 3000 	strmi.w	r3, [r9]
 80059c6:	6825      	ldr	r5, [r4, #0]
 80059c8:	f015 0506 	ands.w	r5, r5, #6
 80059cc:	d107      	bne.n	80059de <_printf_common+0x52>
 80059ce:	f104 0a19 	add.w	sl, r4, #25
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	f8d9 2000 	ldr.w	r2, [r9]
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	42ab      	cmp	r3, r5
 80059dc:	dc28      	bgt.n	8005a30 <_printf_common+0xa4>
 80059de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059e2:	6822      	ldr	r2, [r4, #0]
 80059e4:	3300      	adds	r3, #0
 80059e6:	bf18      	it	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	0692      	lsls	r2, r2, #26
 80059ec:	d42d      	bmi.n	8005a4a <_printf_common+0xbe>
 80059ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f2:	4639      	mov	r1, r7
 80059f4:	4630      	mov	r0, r6
 80059f6:	47c0      	blx	r8
 80059f8:	3001      	adds	r0, #1
 80059fa:	d020      	beq.n	8005a3e <_printf_common+0xb2>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	68e5      	ldr	r5, [r4, #12]
 8005a00:	f8d9 2000 	ldr.w	r2, [r9]
 8005a04:	f003 0306 	and.w	r3, r3, #6
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	bf08      	it	eq
 8005a0c:	1aad      	subeq	r5, r5, r2
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	6922      	ldr	r2, [r4, #16]
 8005a12:	bf0c      	ite	eq
 8005a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a18:	2500      	movne	r5, #0
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bfc4      	itt	gt
 8005a1e:	1a9b      	subgt	r3, r3, r2
 8005a20:	18ed      	addgt	r5, r5, r3
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	341a      	adds	r4, #26
 8005a28:	454d      	cmp	r5, r9
 8005a2a:	d11a      	bne.n	8005a62 <_printf_common+0xd6>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e008      	b.n	8005a42 <_printf_common+0xb6>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4652      	mov	r2, sl
 8005a34:	4639      	mov	r1, r7
 8005a36:	4630      	mov	r0, r6
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d103      	bne.n	8005a46 <_printf_common+0xba>
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	3501      	adds	r5, #1
 8005a48:	e7c3      	b.n	80059d2 <_printf_common+0x46>
 8005a4a:	18e1      	adds	r1, r4, r3
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	2030      	movs	r0, #48	; 0x30
 8005a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a54:	4422      	add	r2, r4
 8005a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a5e:	3302      	adds	r3, #2
 8005a60:	e7c5      	b.n	80059ee <_printf_common+0x62>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4622      	mov	r2, r4
 8005a66:	4639      	mov	r1, r7
 8005a68:	4630      	mov	r0, r6
 8005a6a:	47c0      	blx	r8
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d0e6      	beq.n	8005a3e <_printf_common+0xb2>
 8005a70:	f109 0901 	add.w	r9, r9, #1
 8005a74:	e7d8      	b.n	8005a28 <_printf_common+0x9c>
	...

08005a78 <_printf_i>:
 8005a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a80:	460c      	mov	r4, r1
 8005a82:	7e09      	ldrb	r1, [r1, #24]
 8005a84:	b085      	sub	sp, #20
 8005a86:	296e      	cmp	r1, #110	; 0x6e
 8005a88:	4617      	mov	r7, r2
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	4698      	mov	r8, r3
 8005a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a90:	f000 80b3 	beq.w	8005bfa <_printf_i+0x182>
 8005a94:	d822      	bhi.n	8005adc <_printf_i+0x64>
 8005a96:	2963      	cmp	r1, #99	; 0x63
 8005a98:	d036      	beq.n	8005b08 <_printf_i+0x90>
 8005a9a:	d80a      	bhi.n	8005ab2 <_printf_i+0x3a>
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	f000 80b9 	beq.w	8005c14 <_printf_i+0x19c>
 8005aa2:	2958      	cmp	r1, #88	; 0x58
 8005aa4:	f000 8083 	beq.w	8005bae <_printf_i+0x136>
 8005aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ab0:	e032      	b.n	8005b18 <_printf_i+0xa0>
 8005ab2:	2964      	cmp	r1, #100	; 0x64
 8005ab4:	d001      	beq.n	8005aba <_printf_i+0x42>
 8005ab6:	2969      	cmp	r1, #105	; 0x69
 8005ab8:	d1f6      	bne.n	8005aa8 <_printf_i+0x30>
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	6813      	ldr	r3, [r2, #0]
 8005abe:	0605      	lsls	r5, r0, #24
 8005ac0:	f103 0104 	add.w	r1, r3, #4
 8005ac4:	d52a      	bpl.n	8005b1c <_printf_i+0xa4>
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6011      	str	r1, [r2, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da03      	bge.n	8005ad6 <_printf_i+0x5e>
 8005ace:	222d      	movs	r2, #45	; 0x2d
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ad6:	486f      	ldr	r0, [pc, #444]	; (8005c94 <_printf_i+0x21c>)
 8005ad8:	220a      	movs	r2, #10
 8005ada:	e039      	b.n	8005b50 <_printf_i+0xd8>
 8005adc:	2973      	cmp	r1, #115	; 0x73
 8005ade:	f000 809d 	beq.w	8005c1c <_printf_i+0x1a4>
 8005ae2:	d808      	bhi.n	8005af6 <_printf_i+0x7e>
 8005ae4:	296f      	cmp	r1, #111	; 0x6f
 8005ae6:	d020      	beq.n	8005b2a <_printf_i+0xb2>
 8005ae8:	2970      	cmp	r1, #112	; 0x70
 8005aea:	d1dd      	bne.n	8005aa8 <_printf_i+0x30>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f043 0320 	orr.w	r3, r3, #32
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	e003      	b.n	8005afe <_printf_i+0x86>
 8005af6:	2975      	cmp	r1, #117	; 0x75
 8005af8:	d017      	beq.n	8005b2a <_printf_i+0xb2>
 8005afa:	2978      	cmp	r1, #120	; 0x78
 8005afc:	d1d4      	bne.n	8005aa8 <_printf_i+0x30>
 8005afe:	2378      	movs	r3, #120	; 0x78
 8005b00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b04:	4864      	ldr	r0, [pc, #400]	; (8005c98 <_printf_i+0x220>)
 8005b06:	e055      	b.n	8005bb4 <_printf_i+0x13c>
 8005b08:	6813      	ldr	r3, [r2, #0]
 8005b0a:	1d19      	adds	r1, r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6011      	str	r1, [r2, #0]
 8005b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e08c      	b.n	8005c36 <_printf_i+0x1be>
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6011      	str	r1, [r2, #0]
 8005b20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b24:	bf18      	it	ne
 8005b26:	b21b      	sxthne	r3, r3
 8005b28:	e7cf      	b.n	8005aca <_printf_i+0x52>
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	6825      	ldr	r5, [r4, #0]
 8005b2e:	1d18      	adds	r0, r3, #4
 8005b30:	6010      	str	r0, [r2, #0]
 8005b32:	0628      	lsls	r0, r5, #24
 8005b34:	d501      	bpl.n	8005b3a <_printf_i+0xc2>
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <_printf_i+0xc8>
 8005b3a:	0668      	lsls	r0, r5, #25
 8005b3c:	d5fb      	bpl.n	8005b36 <_printf_i+0xbe>
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	4854      	ldr	r0, [pc, #336]	; (8005c94 <_printf_i+0x21c>)
 8005b42:	296f      	cmp	r1, #111	; 0x6f
 8005b44:	bf14      	ite	ne
 8005b46:	220a      	movne	r2, #10
 8005b48:	2208      	moveq	r2, #8
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b50:	6865      	ldr	r5, [r4, #4]
 8005b52:	60a5      	str	r5, [r4, #8]
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	f2c0 8095 	blt.w	8005c84 <_printf_i+0x20c>
 8005b5a:	6821      	ldr	r1, [r4, #0]
 8005b5c:	f021 0104 	bic.w	r1, r1, #4
 8005b60:	6021      	str	r1, [r4, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d13d      	bne.n	8005be2 <_printf_i+0x16a>
 8005b66:	2d00      	cmp	r5, #0
 8005b68:	f040 808e 	bne.w	8005c88 <_printf_i+0x210>
 8005b6c:	4665      	mov	r5, ip
 8005b6e:	2a08      	cmp	r2, #8
 8005b70:	d10b      	bne.n	8005b8a <_printf_i+0x112>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	07db      	lsls	r3, r3, #31
 8005b76:	d508      	bpl.n	8005b8a <_printf_i+0x112>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	6862      	ldr	r2, [r4, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	bfde      	ittt	le
 8005b80:	2330      	movle	r3, #48	; 0x30
 8005b82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b8a:	ebac 0305 	sub.w	r3, ip, r5
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	f8cd 8000 	str.w	r8, [sp]
 8005b94:	463b      	mov	r3, r7
 8005b96:	aa03      	add	r2, sp, #12
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff fef6 	bl	800598c <_printf_common>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d14d      	bne.n	8005c40 <_printf_i+0x1c8>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	b005      	add	sp, #20
 8005baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bae:	4839      	ldr	r0, [pc, #228]	; (8005c94 <_printf_i+0x21c>)
 8005bb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	6821      	ldr	r1, [r4, #0]
 8005bb8:	1d1d      	adds	r5, r3, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6015      	str	r5, [r2, #0]
 8005bbe:	060a      	lsls	r2, r1, #24
 8005bc0:	d50b      	bpl.n	8005bda <_printf_i+0x162>
 8005bc2:	07ca      	lsls	r2, r1, #31
 8005bc4:	bf44      	itt	mi
 8005bc6:	f041 0120 	orrmi.w	r1, r1, #32
 8005bca:	6021      	strmi	r1, [r4, #0]
 8005bcc:	b91b      	cbnz	r3, 8005bd6 <_printf_i+0x15e>
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	f022 0220 	bic.w	r2, r2, #32
 8005bd4:	6022      	str	r2, [r4, #0]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	e7b7      	b.n	8005b4a <_printf_i+0xd2>
 8005bda:	064d      	lsls	r5, r1, #25
 8005bdc:	bf48      	it	mi
 8005bde:	b29b      	uxthmi	r3, r3
 8005be0:	e7ef      	b.n	8005bc2 <_printf_i+0x14a>
 8005be2:	4665      	mov	r5, ip
 8005be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be8:	fb02 3311 	mls	r3, r2, r1, r3
 8005bec:	5cc3      	ldrb	r3, [r0, r3]
 8005bee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d1f5      	bne.n	8005be4 <_printf_i+0x16c>
 8005bf8:	e7b9      	b.n	8005b6e <_printf_i+0xf6>
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	6825      	ldr	r5, [r4, #0]
 8005bfe:	6961      	ldr	r1, [r4, #20]
 8005c00:	1d18      	adds	r0, r3, #4
 8005c02:	6010      	str	r0, [r2, #0]
 8005c04:	0628      	lsls	r0, r5, #24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	d501      	bpl.n	8005c0e <_printf_i+0x196>
 8005c0a:	6019      	str	r1, [r3, #0]
 8005c0c:	e002      	b.n	8005c14 <_printf_i+0x19c>
 8005c0e:	066a      	lsls	r2, r5, #25
 8005c10:	d5fb      	bpl.n	8005c0a <_printf_i+0x192>
 8005c12:	8019      	strh	r1, [r3, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	4665      	mov	r5, ip
 8005c1a:	e7b9      	b.n	8005b90 <_printf_i+0x118>
 8005c1c:	6813      	ldr	r3, [r2, #0]
 8005c1e:	1d19      	adds	r1, r3, #4
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	681d      	ldr	r5, [r3, #0]
 8005c24:	6862      	ldr	r2, [r4, #4]
 8005c26:	2100      	movs	r1, #0
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f7fa fad9 	bl	80001e0 <memchr>
 8005c2e:	b108      	cbz	r0, 8005c34 <_printf_i+0x1bc>
 8005c30:	1b40      	subs	r0, r0, r5
 8005c32:	6060      	str	r0, [r4, #4]
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c3e:	e7a7      	b.n	8005b90 <_printf_i+0x118>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	462a      	mov	r2, r5
 8005c44:	4639      	mov	r1, r7
 8005c46:	4630      	mov	r0, r6
 8005c48:	47c0      	blx	r8
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d0aa      	beq.n	8005ba4 <_printf_i+0x12c>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	079b      	lsls	r3, r3, #30
 8005c52:	d413      	bmi.n	8005c7c <_printf_i+0x204>
 8005c54:	68e0      	ldr	r0, [r4, #12]
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	4298      	cmp	r0, r3
 8005c5a:	bfb8      	it	lt
 8005c5c:	4618      	movlt	r0, r3
 8005c5e:	e7a3      	b.n	8005ba8 <_printf_i+0x130>
 8005c60:	2301      	movs	r3, #1
 8005c62:	464a      	mov	r2, r9
 8005c64:	4639      	mov	r1, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	47c0      	blx	r8
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d09a      	beq.n	8005ba4 <_printf_i+0x12c>
 8005c6e:	3501      	adds	r5, #1
 8005c70:	68e3      	ldr	r3, [r4, #12]
 8005c72:	9a03      	ldr	r2, [sp, #12]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	42ab      	cmp	r3, r5
 8005c78:	dcf2      	bgt.n	8005c60 <_printf_i+0x1e8>
 8005c7a:	e7eb      	b.n	8005c54 <_printf_i+0x1dc>
 8005c7c:	2500      	movs	r5, #0
 8005c7e:	f104 0919 	add.w	r9, r4, #25
 8005c82:	e7f5      	b.n	8005c70 <_printf_i+0x1f8>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1ac      	bne.n	8005be2 <_printf_i+0x16a>
 8005c88:	7803      	ldrb	r3, [r0, #0]
 8005c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c92:	e76c      	b.n	8005b6e <_printf_i+0xf6>
 8005c94:	08007e5e 	.word	0x08007e5e
 8005c98:	08007e6f 	.word	0x08007e6f

08005c9c <iprintf>:
 8005c9c:	b40f      	push	{r0, r1, r2, r3}
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <iprintf+0x2c>)
 8005ca0:	b513      	push	{r0, r1, r4, lr}
 8005ca2:	681c      	ldr	r4, [r3, #0]
 8005ca4:	b124      	cbz	r4, 8005cb0 <iprintf+0x14>
 8005ca6:	69a3      	ldr	r3, [r4, #24]
 8005ca8:	b913      	cbnz	r3, 8005cb0 <iprintf+0x14>
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 feb4 	bl	8006a18 <__sinit>
 8005cb0:	ab05      	add	r3, sp, #20
 8005cb2:	9a04      	ldr	r2, [sp, #16]
 8005cb4:	68a1      	ldr	r1, [r4, #8]
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f001 fc65 	bl	8007588 <_vfiprintf_r>
 8005cbe:	b002      	add	sp, #8
 8005cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc4:	b004      	add	sp, #16
 8005cc6:	4770      	bx	lr
 8005cc8:	2000000c 	.word	0x2000000c

08005ccc <siprintf>:
 8005ccc:	b40e      	push	{r1, r2, r3}
 8005cce:	b500      	push	{lr}
 8005cd0:	b09c      	sub	sp, #112	; 0x70
 8005cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	9006      	str	r0, [sp, #24]
 8005cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cdc:	4809      	ldr	r0, [pc, #36]	; (8005d04 <siprintf+0x38>)
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	9104      	str	r1, [sp, #16]
 8005ce2:	4909      	ldr	r1, [pc, #36]	; (8005d08 <siprintf+0x3c>)
 8005ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	a902      	add	r1, sp, #8
 8005cf0:	f001 fb28 	bl	8007344 <_svfiprintf_r>
 8005cf4:	9b02      	ldr	r3, [sp, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	b01c      	add	sp, #112	; 0x70
 8005cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d00:	b003      	add	sp, #12
 8005d02:	4770      	bx	lr
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	ffff0208 	.word	0xffff0208

08005d0c <quorem>:
 8005d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	6903      	ldr	r3, [r0, #16]
 8005d12:	690c      	ldr	r4, [r1, #16]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	4680      	mov	r8, r0
 8005d18:	f2c0 8082 	blt.w	8005e20 <quorem+0x114>
 8005d1c:	3c01      	subs	r4, #1
 8005d1e:	f101 0714 	add.w	r7, r1, #20
 8005d22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d26:	f100 0614 	add.w	r6, r0, #20
 8005d2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d32:	eb06 030c 	add.w	r3, r6, ip
 8005d36:	3501      	adds	r5, #1
 8005d38:	eb07 090c 	add.w	r9, r7, ip
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d42:	b395      	cbz	r5, 8005daa <quorem+0x9e>
 8005d44:	f04f 0a00 	mov.w	sl, #0
 8005d48:	4638      	mov	r0, r7
 8005d4a:	46b6      	mov	lr, r6
 8005d4c:	46d3      	mov	fp, sl
 8005d4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d52:	b293      	uxth	r3, r2
 8005d54:	fb05 a303 	mla	r3, r5, r3, sl
 8005d58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ebab 0303 	sub.w	r3, fp, r3
 8005d62:	0c12      	lsrs	r2, r2, #16
 8005d64:	f8de b000 	ldr.w	fp, [lr]
 8005d68:	fb05 a202 	mla	r2, r5, r2, sl
 8005d6c:	fa13 f38b 	uxtah	r3, r3, fp
 8005d70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d74:	fa1f fb82 	uxth.w	fp, r2
 8005d78:	f8de 2000 	ldr.w	r2, [lr]
 8005d7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8a:	4581      	cmp	r9, r0
 8005d8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d90:	f84e 3b04 	str.w	r3, [lr], #4
 8005d94:	d2db      	bcs.n	8005d4e <quorem+0x42>
 8005d96:	f856 300c 	ldr.w	r3, [r6, ip]
 8005d9a:	b933      	cbnz	r3, 8005daa <quorem+0x9e>
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	429e      	cmp	r6, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	d330      	bcc.n	8005e08 <quorem+0xfc>
 8005da6:	f8c8 4010 	str.w	r4, [r8, #16]
 8005daa:	4640      	mov	r0, r8
 8005dac:	f001 f8f4 	bl	8006f98 <__mcmp>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	db25      	blt.n	8005e00 <quorem+0xf4>
 8005db4:	3501      	adds	r5, #1
 8005db6:	4630      	mov	r0, r6
 8005db8:	f04f 0c00 	mov.w	ip, #0
 8005dbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8005dc0:	f8d0 e000 	ldr.w	lr, [r0]
 8005dc4:	b293      	uxth	r3, r2
 8005dc6:	ebac 0303 	sub.w	r3, ip, r3
 8005dca:	0c12      	lsrs	r2, r2, #16
 8005dcc:	fa13 f38e 	uxtah	r3, r3, lr
 8005dd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dde:	45b9      	cmp	r9, r7
 8005de0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005de4:	f840 3b04 	str.w	r3, [r0], #4
 8005de8:	d2e8      	bcs.n	8005dbc <quorem+0xb0>
 8005dea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005dee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005df2:	b92a      	cbnz	r2, 8005e00 <quorem+0xf4>
 8005df4:	3b04      	subs	r3, #4
 8005df6:	429e      	cmp	r6, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	d30b      	bcc.n	8005e14 <quorem+0x108>
 8005dfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e00:	4628      	mov	r0, r5
 8005e02:	b003      	add	sp, #12
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d1ca      	bne.n	8005da6 <quorem+0x9a>
 8005e10:	3c01      	subs	r4, #1
 8005e12:	e7c5      	b.n	8005da0 <quorem+0x94>
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	3b04      	subs	r3, #4
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d1ef      	bne.n	8005dfc <quorem+0xf0>
 8005e1c:	3c01      	subs	r4, #1
 8005e1e:	e7ea      	b.n	8005df6 <quorem+0xea>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7ee      	b.n	8005e02 <quorem+0xf6>
 8005e24:	0000      	movs	r0, r0
	...

08005e28 <_dtoa_r>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	ec57 6b10 	vmov	r6, r7, d0
 8005e30:	b097      	sub	sp, #92	; 0x5c
 8005e32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e34:	9106      	str	r1, [sp, #24]
 8005e36:	4604      	mov	r4, r0
 8005e38:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e3a:	9312      	str	r3, [sp, #72]	; 0x48
 8005e3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e40:	e9cd 6700 	strd	r6, r7, [sp]
 8005e44:	b93d      	cbnz	r5, 8005e56 <_dtoa_r+0x2e>
 8005e46:	2010      	movs	r0, #16
 8005e48:	f000 fe7e 	bl	8006b48 <malloc>
 8005e4c:	6260      	str	r0, [r4, #36]	; 0x24
 8005e4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e52:	6005      	str	r5, [r0, #0]
 8005e54:	60c5      	str	r5, [r0, #12]
 8005e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	b151      	cbz	r1, 8005e72 <_dtoa_r+0x4a>
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	604a      	str	r2, [r1, #4]
 8005e60:	2301      	movs	r3, #1
 8005e62:	4093      	lsls	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 feb5 	bl	8006bd6 <_Bfree>
 8005e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	1e3b      	subs	r3, r7, #0
 8005e74:	bfbb      	ittet	lt
 8005e76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e7a:	9301      	strlt	r3, [sp, #4]
 8005e7c:	2300      	movge	r3, #0
 8005e7e:	2201      	movlt	r2, #1
 8005e80:	bfac      	ite	ge
 8005e82:	f8c8 3000 	strge.w	r3, [r8]
 8005e86:	f8c8 2000 	strlt.w	r2, [r8]
 8005e8a:	4baf      	ldr	r3, [pc, #700]	; (8006148 <_dtoa_r+0x320>)
 8005e8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e90:	ea33 0308 	bics.w	r3, r3, r8
 8005e94:	d114      	bne.n	8005ec0 <_dtoa_r+0x98>
 8005e96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e98:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	9b00      	ldr	r3, [sp, #0]
 8005ea0:	b923      	cbnz	r3, 8005eac <_dtoa_r+0x84>
 8005ea2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f000 8542 	beq.w	8006930 <_dtoa_r+0xb08>
 8005eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800615c <_dtoa_r+0x334>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8544 	beq.w	8006940 <_dtoa_r+0xb18>
 8005eb8:	f10b 0303 	add.w	r3, fp, #3
 8005ebc:	f000 bd3e 	b.w	800693c <_dtoa_r+0xb14>
 8005ec0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ed0:	4681      	mov	r9, r0
 8005ed2:	b168      	cbz	r0, 8005ef0 <_dtoa_r+0xc8>
 8005ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8524 	beq.w	800692a <_dtoa_r+0xb02>
 8005ee2:	4b9a      	ldr	r3, [pc, #616]	; (800614c <_dtoa_r+0x324>)
 8005ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ee6:	f103 3bff 	add.w	fp, r3, #4294967295
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f000 bd28 	b.w	8006940 <_dtoa_r+0xb18>
 8005ef0:	aa14      	add	r2, sp, #80	; 0x50
 8005ef2:	a915      	add	r1, sp, #84	; 0x54
 8005ef4:	ec47 6b10 	vmov	d0, r6, r7
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f001 f8c4 	bl	8007086 <__d2b>
 8005efe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	2d00      	cmp	r5, #0
 8005f06:	d07c      	beq.n	8006002 <_dtoa_r+0x1da>
 8005f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005f10:	46b2      	mov	sl, r6
 8005f12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4b8b      	ldr	r3, [pc, #556]	; (8006150 <_dtoa_r+0x328>)
 8005f22:	4650      	mov	r0, sl
 8005f24:	4659      	mov	r1, fp
 8005f26:	f7fa f9af 	bl	8000288 <__aeabi_dsub>
 8005f2a:	a381      	add	r3, pc, #516	; (adr r3, 8006130 <_dtoa_r+0x308>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	a380      	add	r3, pc, #512	; (adr r3, 8006138 <_dtoa_r+0x310>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f9a7 	bl	800028c <__adddf3>
 8005f3e:	4606      	mov	r6, r0
 8005f40:	4628      	mov	r0, r5
 8005f42:	460f      	mov	r7, r1
 8005f44:	f7fa faee 	bl	8000524 <__aeabi_i2d>
 8005f48:	a37d      	add	r3, pc, #500	; (adr r3, 8006140 <_dtoa_r+0x318>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fb53 	bl	80005f8 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f7fa f997 	bl	800028c <__adddf3>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460f      	mov	r7, r1
 8005f62:	f7fa fdf9 	bl	8000b58 <__aeabi_d2iz>
 8005f66:	2200      	movs	r2, #0
 8005f68:	4682      	mov	sl, r0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f7fa fdb4 	bl	8000adc <__aeabi_dcmplt>
 8005f74:	b148      	cbz	r0, 8005f8a <_dtoa_r+0x162>
 8005f76:	4650      	mov	r0, sl
 8005f78:	f7fa fad4 	bl	8000524 <__aeabi_i2d>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	f7fa fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f84:	b908      	cbnz	r0, 8005f8a <_dtoa_r+0x162>
 8005f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f8a:	f1ba 0f16 	cmp.w	sl, #22
 8005f8e:	d859      	bhi.n	8006044 <_dtoa_r+0x21c>
 8005f90:	4970      	ldr	r1, [pc, #448]	; (8006154 <_dtoa_r+0x32c>)
 8005f92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9e:	f7fa fdbb 	bl	8000b18 <__aeabi_dcmpgt>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d050      	beq.n	8006048 <_dtoa_r+0x220>
 8005fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005faa:	2300      	movs	r3, #0
 8005fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fb0:	1b5d      	subs	r5, r3, r5
 8005fb2:	f1b5 0801 	subs.w	r8, r5, #1
 8005fb6:	bf49      	itett	mi
 8005fb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8005fbc:	2300      	movpl	r3, #0
 8005fbe:	9305      	strmi	r3, [sp, #20]
 8005fc0:	f04f 0800 	movmi.w	r8, #0
 8005fc4:	bf58      	it	pl
 8005fc6:	9305      	strpl	r3, [sp, #20]
 8005fc8:	f1ba 0f00 	cmp.w	sl, #0
 8005fcc:	db3e      	blt.n	800604c <_dtoa_r+0x224>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	44d0      	add	r8, sl
 8005fd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005fd6:	9307      	str	r3, [sp, #28]
 8005fd8:	9b06      	ldr	r3, [sp, #24]
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	f200 8090 	bhi.w	8006100 <_dtoa_r+0x2d8>
 8005fe0:	2b05      	cmp	r3, #5
 8005fe2:	bfc4      	itt	gt
 8005fe4:	3b04      	subgt	r3, #4
 8005fe6:	9306      	strgt	r3, [sp, #24]
 8005fe8:	9b06      	ldr	r3, [sp, #24]
 8005fea:	f1a3 0302 	sub.w	r3, r3, #2
 8005fee:	bfcc      	ite	gt
 8005ff0:	2500      	movgt	r5, #0
 8005ff2:	2501      	movle	r5, #1
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	f200 808f 	bhi.w	8006118 <_dtoa_r+0x2f0>
 8005ffa:	e8df f003 	tbb	[pc, r3]
 8005ffe:	7f7d      	.short	0x7f7d
 8006000:	7131      	.short	0x7131
 8006002:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006006:	441d      	add	r5, r3
 8006008:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800600c:	2820      	cmp	r0, #32
 800600e:	dd13      	ble.n	8006038 <_dtoa_r+0x210>
 8006010:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	fa08 f800 	lsl.w	r8, r8, r0
 800601a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800601e:	fa23 f000 	lsr.w	r0, r3, r0
 8006022:	ea48 0000 	orr.w	r0, r8, r0
 8006026:	f7fa fa6d 	bl	8000504 <__aeabi_ui2d>
 800602a:	2301      	movs	r3, #1
 800602c:	4682      	mov	sl, r0
 800602e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006032:	3d01      	subs	r5, #1
 8006034:	9313      	str	r3, [sp, #76]	; 0x4c
 8006036:	e772      	b.n	8005f1e <_dtoa_r+0xf6>
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	f1c0 0020 	rsb	r0, r0, #32
 800603e:	fa03 f000 	lsl.w	r0, r3, r0
 8006042:	e7f0      	b.n	8006026 <_dtoa_r+0x1fe>
 8006044:	2301      	movs	r3, #1
 8006046:	e7b1      	b.n	8005fac <_dtoa_r+0x184>
 8006048:	900f      	str	r0, [sp, #60]	; 0x3c
 800604a:	e7b0      	b.n	8005fae <_dtoa_r+0x186>
 800604c:	9b05      	ldr	r3, [sp, #20]
 800604e:	eba3 030a 	sub.w	r3, r3, sl
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	f1ca 0300 	rsb	r3, sl, #0
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	2300      	movs	r3, #0
 800605c:	930e      	str	r3, [sp, #56]	; 0x38
 800605e:	e7bb      	b.n	8005fd8 <_dtoa_r+0x1b0>
 8006060:	2301      	movs	r3, #1
 8006062:	930a      	str	r3, [sp, #40]	; 0x28
 8006064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd59      	ble.n	800611e <_dtoa_r+0x2f6>
 800606a:	9302      	str	r3, [sp, #8]
 800606c:	4699      	mov	r9, r3
 800606e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006070:	2200      	movs	r2, #0
 8006072:	6072      	str	r2, [r6, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	f102 0014 	add.w	r0, r2, #20
 800607a:	4298      	cmp	r0, r3
 800607c:	6871      	ldr	r1, [r6, #4]
 800607e:	d953      	bls.n	8006128 <_dtoa_r+0x300>
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fd74 	bl	8006b6e <_Balloc>
 8006086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006088:	6030      	str	r0, [r6, #0]
 800608a:	f1b9 0f0e 	cmp.w	r9, #14
 800608e:	f8d3 b000 	ldr.w	fp, [r3]
 8006092:	f200 80e6 	bhi.w	8006262 <_dtoa_r+0x43a>
 8006096:	2d00      	cmp	r5, #0
 8006098:	f000 80e3 	beq.w	8006262 <_dtoa_r+0x43a>
 800609c:	ed9d 7b00 	vldr	d7, [sp]
 80060a0:	f1ba 0f00 	cmp.w	sl, #0
 80060a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80060a8:	dd74      	ble.n	8006194 <_dtoa_r+0x36c>
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <_dtoa_r+0x32c>)
 80060ac:	f00a 030f 	and.w	r3, sl, #15
 80060b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060b4:	ed93 7b00 	vldr	d7, [r3]
 80060b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80060bc:	06f0      	lsls	r0, r6, #27
 80060be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80060c2:	d565      	bpl.n	8006190 <_dtoa_r+0x368>
 80060c4:	4b24      	ldr	r3, [pc, #144]	; (8006158 <_dtoa_r+0x330>)
 80060c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060ce:	f7fa fbbd 	bl	800084c <__aeabi_ddiv>
 80060d2:	e9cd 0100 	strd	r0, r1, [sp]
 80060d6:	f006 060f 	and.w	r6, r6, #15
 80060da:	2503      	movs	r5, #3
 80060dc:	4f1e      	ldr	r7, [pc, #120]	; (8006158 <_dtoa_r+0x330>)
 80060de:	e04c      	b.n	800617a <_dtoa_r+0x352>
 80060e0:	2301      	movs	r3, #1
 80060e2:	930a      	str	r3, [sp, #40]	; 0x28
 80060e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e6:	4453      	add	r3, sl
 80060e8:	f103 0901 	add.w	r9, r3, #1
 80060ec:	9302      	str	r3, [sp, #8]
 80060ee:	464b      	mov	r3, r9
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bfb8      	it	lt
 80060f4:	2301      	movlt	r3, #1
 80060f6:	e7ba      	b.n	800606e <_dtoa_r+0x246>
 80060f8:	2300      	movs	r3, #0
 80060fa:	e7b2      	b.n	8006062 <_dtoa_r+0x23a>
 80060fc:	2300      	movs	r3, #0
 80060fe:	e7f0      	b.n	80060e2 <_dtoa_r+0x2ba>
 8006100:	2501      	movs	r5, #1
 8006102:	2300      	movs	r3, #0
 8006104:	9306      	str	r3, [sp, #24]
 8006106:	950a      	str	r5, [sp, #40]	; 0x28
 8006108:	f04f 33ff 	mov.w	r3, #4294967295
 800610c:	9302      	str	r3, [sp, #8]
 800610e:	4699      	mov	r9, r3
 8006110:	2200      	movs	r2, #0
 8006112:	2312      	movs	r3, #18
 8006114:	920b      	str	r2, [sp, #44]	; 0x2c
 8006116:	e7aa      	b.n	800606e <_dtoa_r+0x246>
 8006118:	2301      	movs	r3, #1
 800611a:	930a      	str	r3, [sp, #40]	; 0x28
 800611c:	e7f4      	b.n	8006108 <_dtoa_r+0x2e0>
 800611e:	2301      	movs	r3, #1
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	4699      	mov	r9, r3
 8006124:	461a      	mov	r2, r3
 8006126:	e7f5      	b.n	8006114 <_dtoa_r+0x2ec>
 8006128:	3101      	adds	r1, #1
 800612a:	6071      	str	r1, [r6, #4]
 800612c:	0052      	lsls	r2, r2, #1
 800612e:	e7a2      	b.n	8006076 <_dtoa_r+0x24e>
 8006130:	636f4361 	.word	0x636f4361
 8006134:	3fd287a7 	.word	0x3fd287a7
 8006138:	8b60c8b3 	.word	0x8b60c8b3
 800613c:	3fc68a28 	.word	0x3fc68a28
 8006140:	509f79fb 	.word	0x509f79fb
 8006144:	3fd34413 	.word	0x3fd34413
 8006148:	7ff00000 	.word	0x7ff00000
 800614c:	08007e5d 	.word	0x08007e5d
 8006150:	3ff80000 	.word	0x3ff80000
 8006154:	08007f18 	.word	0x08007f18
 8006158:	08007ef0 	.word	0x08007ef0
 800615c:	08007e89 	.word	0x08007e89
 8006160:	07f1      	lsls	r1, r6, #31
 8006162:	d508      	bpl.n	8006176 <_dtoa_r+0x34e>
 8006164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616c:	f7fa fa44 	bl	80005f8 <__aeabi_dmul>
 8006170:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006174:	3501      	adds	r5, #1
 8006176:	1076      	asrs	r6, r6, #1
 8006178:	3708      	adds	r7, #8
 800617a:	2e00      	cmp	r6, #0
 800617c:	d1f0      	bne.n	8006160 <_dtoa_r+0x338>
 800617e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006186:	f7fa fb61 	bl	800084c <__aeabi_ddiv>
 800618a:	e9cd 0100 	strd	r0, r1, [sp]
 800618e:	e01a      	b.n	80061c6 <_dtoa_r+0x39e>
 8006190:	2502      	movs	r5, #2
 8006192:	e7a3      	b.n	80060dc <_dtoa_r+0x2b4>
 8006194:	f000 80a0 	beq.w	80062d8 <_dtoa_r+0x4b0>
 8006198:	f1ca 0600 	rsb	r6, sl, #0
 800619c:	4b9f      	ldr	r3, [pc, #636]	; (800641c <_dtoa_r+0x5f4>)
 800619e:	4fa0      	ldr	r7, [pc, #640]	; (8006420 <_dtoa_r+0x5f8>)
 80061a0:	f006 020f 	and.w	r2, r6, #15
 80061a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061b0:	f7fa fa22 	bl	80005f8 <__aeabi_dmul>
 80061b4:	e9cd 0100 	strd	r0, r1, [sp]
 80061b8:	1136      	asrs	r6, r6, #4
 80061ba:	2300      	movs	r3, #0
 80061bc:	2502      	movs	r5, #2
 80061be:	2e00      	cmp	r6, #0
 80061c0:	d17f      	bne.n	80062c2 <_dtoa_r+0x49a>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e1      	bne.n	800618a <_dtoa_r+0x362>
 80061c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8087 	beq.w	80062dc <_dtoa_r+0x4b4>
 80061ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061d2:	2200      	movs	r2, #0
 80061d4:	4b93      	ldr	r3, [pc, #588]	; (8006424 <_dtoa_r+0x5fc>)
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa fc7f 	bl	8000adc <__aeabi_dcmplt>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d07c      	beq.n	80062dc <_dtoa_r+0x4b4>
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	d079      	beq.n	80062dc <_dtoa_r+0x4b4>
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd35      	ble.n	800625a <_dtoa_r+0x432>
 80061ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061f2:	9308      	str	r3, [sp, #32]
 80061f4:	4639      	mov	r1, r7
 80061f6:	2200      	movs	r2, #0
 80061f8:	4b8b      	ldr	r3, [pc, #556]	; (8006428 <_dtoa_r+0x600>)
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7fa f9fc 	bl	80005f8 <__aeabi_dmul>
 8006200:	e9cd 0100 	strd	r0, r1, [sp]
 8006204:	9f02      	ldr	r7, [sp, #8]
 8006206:	3501      	adds	r5, #1
 8006208:	4628      	mov	r0, r5
 800620a:	f7fa f98b 	bl	8000524 <__aeabi_i2d>
 800620e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006212:	f7fa f9f1 	bl	80005f8 <__aeabi_dmul>
 8006216:	2200      	movs	r2, #0
 8006218:	4b84      	ldr	r3, [pc, #528]	; (800642c <_dtoa_r+0x604>)
 800621a:	f7fa f837 	bl	800028c <__adddf3>
 800621e:	4605      	mov	r5, r0
 8006220:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006224:	2f00      	cmp	r7, #0
 8006226:	d15d      	bne.n	80062e4 <_dtoa_r+0x4bc>
 8006228:	2200      	movs	r2, #0
 800622a:	4b81      	ldr	r3, [pc, #516]	; (8006430 <_dtoa_r+0x608>)
 800622c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006230:	f7fa f82a 	bl	8000288 <__aeabi_dsub>
 8006234:	462a      	mov	r2, r5
 8006236:	4633      	mov	r3, r6
 8006238:	e9cd 0100 	strd	r0, r1, [sp]
 800623c:	f7fa fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 8288 	bne.w	8006756 <_dtoa_r+0x92e>
 8006246:	462a      	mov	r2, r5
 8006248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800624c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006250:	f7fa fc44 	bl	8000adc <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 827c 	bne.w	8006752 <_dtoa_r+0x92a>
 800625a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800625e:	e9cd 2300 	strd	r2, r3, [sp]
 8006262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006264:	2b00      	cmp	r3, #0
 8006266:	f2c0 8150 	blt.w	800650a <_dtoa_r+0x6e2>
 800626a:	f1ba 0f0e 	cmp.w	sl, #14
 800626e:	f300 814c 	bgt.w	800650a <_dtoa_r+0x6e2>
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <_dtoa_r+0x5f4>)
 8006274:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006278:	ed93 7b00 	vldr	d7, [r3]
 800627c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006284:	f280 80d8 	bge.w	8006438 <_dtoa_r+0x610>
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	f300 80d4 	bgt.w	8006438 <_dtoa_r+0x610>
 8006290:	f040 825e 	bne.w	8006750 <_dtoa_r+0x928>
 8006294:	2200      	movs	r2, #0
 8006296:	4b66      	ldr	r3, [pc, #408]	; (8006430 <_dtoa_r+0x608>)
 8006298:	ec51 0b17 	vmov	r0, r1, d7
 800629c:	f7fa f9ac 	bl	80005f8 <__aeabi_dmul>
 80062a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062a4:	f7fa fc2e 	bl	8000b04 <__aeabi_dcmpge>
 80062a8:	464f      	mov	r7, r9
 80062aa:	464e      	mov	r6, r9
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f040 8234 	bne.w	800671a <_dtoa_r+0x8f2>
 80062b2:	2331      	movs	r3, #49	; 0x31
 80062b4:	f10b 0501 	add.w	r5, fp, #1
 80062b8:	f88b 3000 	strb.w	r3, [fp]
 80062bc:	f10a 0a01 	add.w	sl, sl, #1
 80062c0:	e22f      	b.n	8006722 <_dtoa_r+0x8fa>
 80062c2:	07f2      	lsls	r2, r6, #31
 80062c4:	d505      	bpl.n	80062d2 <_dtoa_r+0x4aa>
 80062c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ca:	f7fa f995 	bl	80005f8 <__aeabi_dmul>
 80062ce:	3501      	adds	r5, #1
 80062d0:	2301      	movs	r3, #1
 80062d2:	1076      	asrs	r6, r6, #1
 80062d4:	3708      	adds	r7, #8
 80062d6:	e772      	b.n	80061be <_dtoa_r+0x396>
 80062d8:	2502      	movs	r5, #2
 80062da:	e774      	b.n	80061c6 <_dtoa_r+0x39e>
 80062dc:	f8cd a020 	str.w	sl, [sp, #32]
 80062e0:	464f      	mov	r7, r9
 80062e2:	e791      	b.n	8006208 <_dtoa_r+0x3e0>
 80062e4:	4b4d      	ldr	r3, [pc, #308]	; (800641c <_dtoa_r+0x5f4>)
 80062e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d047      	beq.n	8006384 <_dtoa_r+0x55c>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	2000      	movs	r0, #0
 80062fa:	494e      	ldr	r1, [pc, #312]	; (8006434 <_dtoa_r+0x60c>)
 80062fc:	f7fa faa6 	bl	800084c <__aeabi_ddiv>
 8006300:	462a      	mov	r2, r5
 8006302:	4633      	mov	r3, r6
 8006304:	f7f9 ffc0 	bl	8000288 <__aeabi_dsub>
 8006308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800630c:	465d      	mov	r5, fp
 800630e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006312:	f7fa fc21 	bl	8000b58 <__aeabi_d2iz>
 8006316:	4606      	mov	r6, r0
 8006318:	f7fa f904 	bl	8000524 <__aeabi_i2d>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006324:	f7f9 ffb0 	bl	8000288 <__aeabi_dsub>
 8006328:	3630      	adds	r6, #48	; 0x30
 800632a:	f805 6b01 	strb.w	r6, [r5], #1
 800632e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006332:	e9cd 0100 	strd	r0, r1, [sp]
 8006336:	f7fa fbd1 	bl	8000adc <__aeabi_dcmplt>
 800633a:	2800      	cmp	r0, #0
 800633c:	d163      	bne.n	8006406 <_dtoa_r+0x5de>
 800633e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006342:	2000      	movs	r0, #0
 8006344:	4937      	ldr	r1, [pc, #220]	; (8006424 <_dtoa_r+0x5fc>)
 8006346:	f7f9 ff9f 	bl	8000288 <__aeabi_dsub>
 800634a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800634e:	f7fa fbc5 	bl	8000adc <__aeabi_dcmplt>
 8006352:	2800      	cmp	r0, #0
 8006354:	f040 80b7 	bne.w	80064c6 <_dtoa_r+0x69e>
 8006358:	eba5 030b 	sub.w	r3, r5, fp
 800635c:	429f      	cmp	r7, r3
 800635e:	f77f af7c 	ble.w	800625a <_dtoa_r+0x432>
 8006362:	2200      	movs	r2, #0
 8006364:	4b30      	ldr	r3, [pc, #192]	; (8006428 <_dtoa_r+0x600>)
 8006366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800636a:	f7fa f945 	bl	80005f8 <__aeabi_dmul>
 800636e:	2200      	movs	r2, #0
 8006370:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006374:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <_dtoa_r+0x600>)
 8006376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800637a:	f7fa f93d 	bl	80005f8 <__aeabi_dmul>
 800637e:	e9cd 0100 	strd	r0, r1, [sp]
 8006382:	e7c4      	b.n	800630e <_dtoa_r+0x4e6>
 8006384:	462a      	mov	r2, r5
 8006386:	4633      	mov	r3, r6
 8006388:	f7fa f936 	bl	80005f8 <__aeabi_dmul>
 800638c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006390:	eb0b 0507 	add.w	r5, fp, r7
 8006394:	465e      	mov	r6, fp
 8006396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800639a:	f7fa fbdd 	bl	8000b58 <__aeabi_d2iz>
 800639e:	4607      	mov	r7, r0
 80063a0:	f7fa f8c0 	bl	8000524 <__aeabi_i2d>
 80063a4:	3730      	adds	r7, #48	; 0x30
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063ae:	f7f9 ff6b 	bl	8000288 <__aeabi_dsub>
 80063b2:	f806 7b01 	strb.w	r7, [r6], #1
 80063b6:	42ae      	cmp	r6, r5
 80063b8:	e9cd 0100 	strd	r0, r1, [sp]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	d126      	bne.n	8006410 <_dtoa_r+0x5e8>
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <_dtoa_r+0x60c>)
 80063c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c8:	f7f9 ff60 	bl	800028c <__adddf3>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d4:	f7fa fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d174      	bne.n	80064c6 <_dtoa_r+0x69e>
 80063dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063e0:	2000      	movs	r0, #0
 80063e2:	4914      	ldr	r1, [pc, #80]	; (8006434 <_dtoa_r+0x60c>)
 80063e4:	f7f9 ff50 	bl	8000288 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f0:	f7fa fb74 	bl	8000adc <__aeabi_dcmplt>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f43f af30 	beq.w	800625a <_dtoa_r+0x432>
 80063fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063fe:	2b30      	cmp	r3, #48	; 0x30
 8006400:	f105 32ff 	add.w	r2, r5, #4294967295
 8006404:	d002      	beq.n	800640c <_dtoa_r+0x5e4>
 8006406:	f8dd a020 	ldr.w	sl, [sp, #32]
 800640a:	e04a      	b.n	80064a2 <_dtoa_r+0x67a>
 800640c:	4615      	mov	r5, r2
 800640e:	e7f4      	b.n	80063fa <_dtoa_r+0x5d2>
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <_dtoa_r+0x600>)
 8006412:	f7fa f8f1 	bl	80005f8 <__aeabi_dmul>
 8006416:	e9cd 0100 	strd	r0, r1, [sp]
 800641a:	e7bc      	b.n	8006396 <_dtoa_r+0x56e>
 800641c:	08007f18 	.word	0x08007f18
 8006420:	08007ef0 	.word	0x08007ef0
 8006424:	3ff00000 	.word	0x3ff00000
 8006428:	40240000 	.word	0x40240000
 800642c:	401c0000 	.word	0x401c0000
 8006430:	40140000 	.word	0x40140000
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	e9dd 6700 	ldrd	r6, r7, [sp]
 800643c:	465d      	mov	r5, fp
 800643e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	f7fa fa01 	bl	800084c <__aeabi_ddiv>
 800644a:	f7fa fb85 	bl	8000b58 <__aeabi_d2iz>
 800644e:	4680      	mov	r8, r0
 8006450:	f7fa f868 	bl	8000524 <__aeabi_i2d>
 8006454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006458:	f7fa f8ce 	bl	80005f8 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006468:	f7f9 ff0e 	bl	8000288 <__aeabi_dsub>
 800646c:	f805 6b01 	strb.w	r6, [r5], #1
 8006470:	eba5 060b 	sub.w	r6, r5, fp
 8006474:	45b1      	cmp	r9, r6
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	d139      	bne.n	80064f0 <_dtoa_r+0x6c8>
 800647c:	f7f9 ff06 	bl	800028c <__adddf3>
 8006480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	f7fa fb46 	bl	8000b18 <__aeabi_dcmpgt>
 800648c:	b9c8      	cbnz	r0, 80064c2 <_dtoa_r+0x69a>
 800648e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006492:	4630      	mov	r0, r6
 8006494:	4639      	mov	r1, r7
 8006496:	f7fa fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800649a:	b110      	cbz	r0, 80064a2 <_dtoa_r+0x67a>
 800649c:	f018 0f01 	tst.w	r8, #1
 80064a0:	d10f      	bne.n	80064c2 <_dtoa_r+0x69a>
 80064a2:	9904      	ldr	r1, [sp, #16]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fb96 	bl	8006bd6 <_Bfree>
 80064aa:	2300      	movs	r3, #0
 80064ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064ae:	702b      	strb	r3, [r5, #0]
 80064b0:	f10a 0301 	add.w	r3, sl, #1
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8241 	beq.w	8006940 <_dtoa_r+0xb18>
 80064be:	601d      	str	r5, [r3, #0]
 80064c0:	e23e      	b.n	8006940 <_dtoa_r+0xb18>
 80064c2:	f8cd a020 	str.w	sl, [sp, #32]
 80064c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064ca:	2a39      	cmp	r2, #57	; 0x39
 80064cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80064d0:	d108      	bne.n	80064e4 <_dtoa_r+0x6bc>
 80064d2:	459b      	cmp	fp, r3
 80064d4:	d10a      	bne.n	80064ec <_dtoa_r+0x6c4>
 80064d6:	9b08      	ldr	r3, [sp, #32]
 80064d8:	3301      	adds	r3, #1
 80064da:	9308      	str	r3, [sp, #32]
 80064dc:	2330      	movs	r3, #48	; 0x30
 80064de:	f88b 3000 	strb.w	r3, [fp]
 80064e2:	465b      	mov	r3, fp
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	3201      	adds	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e78c      	b.n	8006406 <_dtoa_r+0x5de>
 80064ec:	461d      	mov	r5, r3
 80064ee:	e7ea      	b.n	80064c6 <_dtoa_r+0x69e>
 80064f0:	2200      	movs	r2, #0
 80064f2:	4b9b      	ldr	r3, [pc, #620]	; (8006760 <_dtoa_r+0x938>)
 80064f4:	f7fa f880 	bl	80005f8 <__aeabi_dmul>
 80064f8:	2200      	movs	r2, #0
 80064fa:	2300      	movs	r3, #0
 80064fc:	4606      	mov	r6, r0
 80064fe:	460f      	mov	r7, r1
 8006500:	f7fa fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006504:	2800      	cmp	r0, #0
 8006506:	d09a      	beq.n	800643e <_dtoa_r+0x616>
 8006508:	e7cb      	b.n	80064a2 <_dtoa_r+0x67a>
 800650a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800650c:	2a00      	cmp	r2, #0
 800650e:	f000 808b 	beq.w	8006628 <_dtoa_r+0x800>
 8006512:	9a06      	ldr	r2, [sp, #24]
 8006514:	2a01      	cmp	r2, #1
 8006516:	dc6e      	bgt.n	80065f6 <_dtoa_r+0x7ce>
 8006518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800651a:	2a00      	cmp	r2, #0
 800651c:	d067      	beq.n	80065ee <_dtoa_r+0x7c6>
 800651e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006522:	9f07      	ldr	r7, [sp, #28]
 8006524:	9d05      	ldr	r5, [sp, #20]
 8006526:	9a05      	ldr	r2, [sp, #20]
 8006528:	2101      	movs	r1, #1
 800652a:	441a      	add	r2, r3
 800652c:	4620      	mov	r0, r4
 800652e:	9205      	str	r2, [sp, #20]
 8006530:	4498      	add	r8, r3
 8006532:	f000 fbf0 	bl	8006d16 <__i2b>
 8006536:	4606      	mov	r6, r0
 8006538:	2d00      	cmp	r5, #0
 800653a:	dd0c      	ble.n	8006556 <_dtoa_r+0x72e>
 800653c:	f1b8 0f00 	cmp.w	r8, #0
 8006540:	dd09      	ble.n	8006556 <_dtoa_r+0x72e>
 8006542:	4545      	cmp	r5, r8
 8006544:	9a05      	ldr	r2, [sp, #20]
 8006546:	462b      	mov	r3, r5
 8006548:	bfa8      	it	ge
 800654a:	4643      	movge	r3, r8
 800654c:	1ad2      	subs	r2, r2, r3
 800654e:	9205      	str	r2, [sp, #20]
 8006550:	1aed      	subs	r5, r5, r3
 8006552:	eba8 0803 	sub.w	r8, r8, r3
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	b1eb      	cbz	r3, 8006596 <_dtoa_r+0x76e>
 800655a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d067      	beq.n	8006630 <_dtoa_r+0x808>
 8006560:	b18f      	cbz	r7, 8006586 <_dtoa_r+0x75e>
 8006562:	4631      	mov	r1, r6
 8006564:	463a      	mov	r2, r7
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fc74 	bl	8006e54 <__pow5mult>
 800656c:	9a04      	ldr	r2, [sp, #16]
 800656e:	4601      	mov	r1, r0
 8006570:	4606      	mov	r6, r0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fbd8 	bl	8006d28 <__multiply>
 8006578:	9904      	ldr	r1, [sp, #16]
 800657a:	9008      	str	r0, [sp, #32]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 fb2a 	bl	8006bd6 <_Bfree>
 8006582:	9b08      	ldr	r3, [sp, #32]
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	9b07      	ldr	r3, [sp, #28]
 8006588:	1bda      	subs	r2, r3, r7
 800658a:	d004      	beq.n	8006596 <_dtoa_r+0x76e>
 800658c:	9904      	ldr	r1, [sp, #16]
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fc60 	bl	8006e54 <__pow5mult>
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	2101      	movs	r1, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fbbc 	bl	8006d16 <__i2b>
 800659e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a0:	4607      	mov	r7, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 81d0 	beq.w	8006948 <_dtoa_r+0xb20>
 80065a8:	461a      	mov	r2, r3
 80065aa:	4601      	mov	r1, r0
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fc51 	bl	8006e54 <__pow5mult>
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	4607      	mov	r7, r0
 80065b8:	dc40      	bgt.n	800663c <_dtoa_r+0x814>
 80065ba:	9b00      	ldr	r3, [sp, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d139      	bne.n	8006634 <_dtoa_r+0x80c>
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d136      	bne.n	8006638 <_dtoa_r+0x810>
 80065ca:	9b01      	ldr	r3, [sp, #4]
 80065cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	0d1b      	lsrs	r3, r3, #20
 80065d2:	051b      	lsls	r3, r3, #20
 80065d4:	b12b      	cbz	r3, 80065e2 <_dtoa_r+0x7ba>
 80065d6:	9b05      	ldr	r3, [sp, #20]
 80065d8:	3301      	adds	r3, #1
 80065da:	9305      	str	r3, [sp, #20]
 80065dc:	f108 0801 	add.w	r8, r8, #1
 80065e0:	2301      	movs	r3, #1
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d12a      	bne.n	8006640 <_dtoa_r+0x818>
 80065ea:	2001      	movs	r0, #1
 80065ec:	e030      	b.n	8006650 <_dtoa_r+0x828>
 80065ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065f4:	e795      	b.n	8006522 <_dtoa_r+0x6fa>
 80065f6:	9b07      	ldr	r3, [sp, #28]
 80065f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80065fc:	42bb      	cmp	r3, r7
 80065fe:	bfbf      	itttt	lt
 8006600:	9b07      	ldrlt	r3, [sp, #28]
 8006602:	9707      	strlt	r7, [sp, #28]
 8006604:	1afa      	sublt	r2, r7, r3
 8006606:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006608:	bfbb      	ittet	lt
 800660a:	189b      	addlt	r3, r3, r2
 800660c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800660e:	1bdf      	subge	r7, r3, r7
 8006610:	2700      	movlt	r7, #0
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	bfb5      	itete	lt
 8006618:	9b05      	ldrlt	r3, [sp, #20]
 800661a:	9d05      	ldrge	r5, [sp, #20]
 800661c:	eba3 0509 	sublt.w	r5, r3, r9
 8006620:	464b      	movge	r3, r9
 8006622:	bfb8      	it	lt
 8006624:	2300      	movlt	r3, #0
 8006626:	e77e      	b.n	8006526 <_dtoa_r+0x6fe>
 8006628:	9f07      	ldr	r7, [sp, #28]
 800662a:	9d05      	ldr	r5, [sp, #20]
 800662c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800662e:	e783      	b.n	8006538 <_dtoa_r+0x710>
 8006630:	9a07      	ldr	r2, [sp, #28]
 8006632:	e7ab      	b.n	800658c <_dtoa_r+0x764>
 8006634:	2300      	movs	r3, #0
 8006636:	e7d4      	b.n	80065e2 <_dtoa_r+0x7ba>
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	e7d2      	b.n	80065e2 <_dtoa_r+0x7ba>
 800663c:	2300      	movs	r3, #0
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006646:	6918      	ldr	r0, [r3, #16]
 8006648:	f000 fb17 	bl	8006c7a <__hi0bits>
 800664c:	f1c0 0020 	rsb	r0, r0, #32
 8006650:	4440      	add	r0, r8
 8006652:	f010 001f 	ands.w	r0, r0, #31
 8006656:	d047      	beq.n	80066e8 <_dtoa_r+0x8c0>
 8006658:	f1c0 0320 	rsb	r3, r0, #32
 800665c:	2b04      	cmp	r3, #4
 800665e:	dd3b      	ble.n	80066d8 <_dtoa_r+0x8b0>
 8006660:	9b05      	ldr	r3, [sp, #20]
 8006662:	f1c0 001c 	rsb	r0, r0, #28
 8006666:	4403      	add	r3, r0
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	4405      	add	r5, r0
 800666c:	4480      	add	r8, r0
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	dd05      	ble.n	8006680 <_dtoa_r+0x858>
 8006674:	461a      	mov	r2, r3
 8006676:	9904      	ldr	r1, [sp, #16]
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fc39 	bl	8006ef0 <__lshift>
 800667e:	9004      	str	r0, [sp, #16]
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x86a>
 8006686:	4639      	mov	r1, r7
 8006688:	4642      	mov	r2, r8
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fc30 	bl	8006ef0 <__lshift>
 8006690:	4607      	mov	r7, r0
 8006692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006694:	b353      	cbz	r3, 80066ec <_dtoa_r+0x8c4>
 8006696:	4639      	mov	r1, r7
 8006698:	9804      	ldr	r0, [sp, #16]
 800669a:	f000 fc7d 	bl	8006f98 <__mcmp>
 800669e:	2800      	cmp	r0, #0
 80066a0:	da24      	bge.n	80066ec <_dtoa_r+0x8c4>
 80066a2:	2300      	movs	r3, #0
 80066a4:	220a      	movs	r2, #10
 80066a6:	9904      	ldr	r1, [sp, #16]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 faab 	bl	8006c04 <__multadd>
 80066ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b0:	9004      	str	r0, [sp, #16]
 80066b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 814d 	beq.w	8006956 <_dtoa_r+0xb2e>
 80066bc:	2300      	movs	r3, #0
 80066be:	4631      	mov	r1, r6
 80066c0:	220a      	movs	r2, #10
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fa9e 	bl	8006c04 <__multadd>
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	4606      	mov	r6, r0
 80066ce:	dc4f      	bgt.n	8006770 <_dtoa_r+0x948>
 80066d0:	9b06      	ldr	r3, [sp, #24]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	dd4c      	ble.n	8006770 <_dtoa_r+0x948>
 80066d6:	e011      	b.n	80066fc <_dtoa_r+0x8d4>
 80066d8:	d0c9      	beq.n	800666e <_dtoa_r+0x846>
 80066da:	9a05      	ldr	r2, [sp, #20]
 80066dc:	331c      	adds	r3, #28
 80066de:	441a      	add	r2, r3
 80066e0:	9205      	str	r2, [sp, #20]
 80066e2:	441d      	add	r5, r3
 80066e4:	4498      	add	r8, r3
 80066e6:	e7c2      	b.n	800666e <_dtoa_r+0x846>
 80066e8:	4603      	mov	r3, r0
 80066ea:	e7f6      	b.n	80066da <_dtoa_r+0x8b2>
 80066ec:	f1b9 0f00 	cmp.w	r9, #0
 80066f0:	dc38      	bgt.n	8006764 <_dtoa_r+0x93c>
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	dd35      	ble.n	8006764 <_dtoa_r+0x93c>
 80066f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80066fc:	9b02      	ldr	r3, [sp, #8]
 80066fe:	b963      	cbnz	r3, 800671a <_dtoa_r+0x8f2>
 8006700:	4639      	mov	r1, r7
 8006702:	2205      	movs	r2, #5
 8006704:	4620      	mov	r0, r4
 8006706:	f000 fa7d 	bl	8006c04 <__multadd>
 800670a:	4601      	mov	r1, r0
 800670c:	4607      	mov	r7, r0
 800670e:	9804      	ldr	r0, [sp, #16]
 8006710:	f000 fc42 	bl	8006f98 <__mcmp>
 8006714:	2800      	cmp	r0, #0
 8006716:	f73f adcc 	bgt.w	80062b2 <_dtoa_r+0x48a>
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	465d      	mov	r5, fp
 800671e:	ea6f 0a03 	mvn.w	sl, r3
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	4639      	mov	r1, r7
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fa54 	bl	8006bd6 <_Bfree>
 800672e:	2e00      	cmp	r6, #0
 8006730:	f43f aeb7 	beq.w	80064a2 <_dtoa_r+0x67a>
 8006734:	f1b9 0f00 	cmp.w	r9, #0
 8006738:	d005      	beq.n	8006746 <_dtoa_r+0x91e>
 800673a:	45b1      	cmp	r9, r6
 800673c:	d003      	beq.n	8006746 <_dtoa_r+0x91e>
 800673e:	4649      	mov	r1, r9
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fa48 	bl	8006bd6 <_Bfree>
 8006746:	4631      	mov	r1, r6
 8006748:	4620      	mov	r0, r4
 800674a:	f000 fa44 	bl	8006bd6 <_Bfree>
 800674e:	e6a8      	b.n	80064a2 <_dtoa_r+0x67a>
 8006750:	2700      	movs	r7, #0
 8006752:	463e      	mov	r6, r7
 8006754:	e7e1      	b.n	800671a <_dtoa_r+0x8f2>
 8006756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800675a:	463e      	mov	r6, r7
 800675c:	e5a9      	b.n	80062b2 <_dtoa_r+0x48a>
 800675e:	bf00      	nop
 8006760:	40240000 	.word	0x40240000
 8006764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006766:	f8cd 9008 	str.w	r9, [sp, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80fa 	beq.w	8006964 <_dtoa_r+0xb3c>
 8006770:	2d00      	cmp	r5, #0
 8006772:	dd05      	ble.n	8006780 <_dtoa_r+0x958>
 8006774:	4631      	mov	r1, r6
 8006776:	462a      	mov	r2, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fbb9 	bl	8006ef0 <__lshift>
 800677e:	4606      	mov	r6, r0
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d04c      	beq.n	8006820 <_dtoa_r+0x9f8>
 8006786:	6871      	ldr	r1, [r6, #4]
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f9f0 	bl	8006b6e <_Balloc>
 800678e:	6932      	ldr	r2, [r6, #16]
 8006790:	3202      	adds	r2, #2
 8006792:	4605      	mov	r5, r0
 8006794:	0092      	lsls	r2, r2, #2
 8006796:	f106 010c 	add.w	r1, r6, #12
 800679a:	300c      	adds	r0, #12
 800679c:	f000 f9dc 	bl	8006b58 <memcpy>
 80067a0:	2201      	movs	r2, #1
 80067a2:	4629      	mov	r1, r5
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 fba3 	bl	8006ef0 <__lshift>
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	f8cd b014 	str.w	fp, [sp, #20]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	46b1      	mov	r9, r6
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	4606      	mov	r6, r0
 80067ba:	4639      	mov	r1, r7
 80067bc:	9804      	ldr	r0, [sp, #16]
 80067be:	f7ff faa5 	bl	8005d0c <quorem>
 80067c2:	4649      	mov	r1, r9
 80067c4:	4605      	mov	r5, r0
 80067c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067ca:	9804      	ldr	r0, [sp, #16]
 80067cc:	f000 fbe4 	bl	8006f98 <__mcmp>
 80067d0:	4632      	mov	r2, r6
 80067d2:	9000      	str	r0, [sp, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fbf8 	bl	8006fcc <__mdiff>
 80067dc:	68c3      	ldr	r3, [r0, #12]
 80067de:	4602      	mov	r2, r0
 80067e0:	bb03      	cbnz	r3, 8006824 <_dtoa_r+0x9fc>
 80067e2:	4601      	mov	r1, r0
 80067e4:	9008      	str	r0, [sp, #32]
 80067e6:	9804      	ldr	r0, [sp, #16]
 80067e8:	f000 fbd6 	bl	8006f98 <__mcmp>
 80067ec:	9a08      	ldr	r2, [sp, #32]
 80067ee:	4603      	mov	r3, r0
 80067f0:	4611      	mov	r1, r2
 80067f2:	4620      	mov	r0, r4
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	f000 f9ee 	bl	8006bd6 <_Bfree>
 80067fa:	9b08      	ldr	r3, [sp, #32]
 80067fc:	b9a3      	cbnz	r3, 8006828 <_dtoa_r+0xa00>
 80067fe:	9a06      	ldr	r2, [sp, #24]
 8006800:	b992      	cbnz	r2, 8006828 <_dtoa_r+0xa00>
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	b982      	cbnz	r2, 8006828 <_dtoa_r+0xa00>
 8006806:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800680a:	d029      	beq.n	8006860 <_dtoa_r+0xa38>
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd01      	ble.n	8006816 <_dtoa_r+0x9ee>
 8006812:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	1c5d      	adds	r5, r3, #1
 800681a:	f883 8000 	strb.w	r8, [r3]
 800681e:	e782      	b.n	8006726 <_dtoa_r+0x8fe>
 8006820:	4630      	mov	r0, r6
 8006822:	e7c2      	b.n	80067aa <_dtoa_r+0x982>
 8006824:	2301      	movs	r3, #1
 8006826:	e7e3      	b.n	80067f0 <_dtoa_r+0x9c8>
 8006828:	9a00      	ldr	r2, [sp, #0]
 800682a:	2a00      	cmp	r2, #0
 800682c:	db04      	blt.n	8006838 <_dtoa_r+0xa10>
 800682e:	d125      	bne.n	800687c <_dtoa_r+0xa54>
 8006830:	9a06      	ldr	r2, [sp, #24]
 8006832:	bb1a      	cbnz	r2, 800687c <_dtoa_r+0xa54>
 8006834:	9a07      	ldr	r2, [sp, #28]
 8006836:	bb0a      	cbnz	r2, 800687c <_dtoa_r+0xa54>
 8006838:	2b00      	cmp	r3, #0
 800683a:	ddec      	ble.n	8006816 <_dtoa_r+0x9ee>
 800683c:	2201      	movs	r2, #1
 800683e:	9904      	ldr	r1, [sp, #16]
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fb55 	bl	8006ef0 <__lshift>
 8006846:	4639      	mov	r1, r7
 8006848:	9004      	str	r0, [sp, #16]
 800684a:	f000 fba5 	bl	8006f98 <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	dc03      	bgt.n	800685a <_dtoa_r+0xa32>
 8006852:	d1e0      	bne.n	8006816 <_dtoa_r+0x9ee>
 8006854:	f018 0f01 	tst.w	r8, #1
 8006858:	d0dd      	beq.n	8006816 <_dtoa_r+0x9ee>
 800685a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800685e:	d1d8      	bne.n	8006812 <_dtoa_r+0x9ea>
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	9a05      	ldr	r2, [sp, #20]
 8006864:	1c5d      	adds	r5, r3, #1
 8006866:	2339      	movs	r3, #57	; 0x39
 8006868:	7013      	strb	r3, [r2, #0]
 800686a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800686e:	2b39      	cmp	r3, #57	; 0x39
 8006870:	f105 32ff 	add.w	r2, r5, #4294967295
 8006874:	d04f      	beq.n	8006916 <_dtoa_r+0xaee>
 8006876:	3301      	adds	r3, #1
 8006878:	7013      	strb	r3, [r2, #0]
 800687a:	e754      	b.n	8006726 <_dtoa_r+0x8fe>
 800687c:	9a05      	ldr	r2, [sp, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f102 0501 	add.w	r5, r2, #1
 8006884:	dd06      	ble.n	8006894 <_dtoa_r+0xa6c>
 8006886:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800688a:	d0e9      	beq.n	8006860 <_dtoa_r+0xa38>
 800688c:	f108 0801 	add.w	r8, r8, #1
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	e7c2      	b.n	800681a <_dtoa_r+0x9f2>
 8006894:	9a02      	ldr	r2, [sp, #8]
 8006896:	f805 8c01 	strb.w	r8, [r5, #-1]
 800689a:	eba5 030b 	sub.w	r3, r5, fp
 800689e:	4293      	cmp	r3, r2
 80068a0:	d021      	beq.n	80068e6 <_dtoa_r+0xabe>
 80068a2:	2300      	movs	r3, #0
 80068a4:	220a      	movs	r2, #10
 80068a6:	9904      	ldr	r1, [sp, #16]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 f9ab 	bl	8006c04 <__multadd>
 80068ae:	45b1      	cmp	r9, r6
 80068b0:	9004      	str	r0, [sp, #16]
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	f04f 020a 	mov.w	r2, #10
 80068ba:	4649      	mov	r1, r9
 80068bc:	4620      	mov	r0, r4
 80068be:	d105      	bne.n	80068cc <_dtoa_r+0xaa4>
 80068c0:	f000 f9a0 	bl	8006c04 <__multadd>
 80068c4:	4681      	mov	r9, r0
 80068c6:	4606      	mov	r6, r0
 80068c8:	9505      	str	r5, [sp, #20]
 80068ca:	e776      	b.n	80067ba <_dtoa_r+0x992>
 80068cc:	f000 f99a 	bl	8006c04 <__multadd>
 80068d0:	4631      	mov	r1, r6
 80068d2:	4681      	mov	r9, r0
 80068d4:	2300      	movs	r3, #0
 80068d6:	220a      	movs	r2, #10
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 f993 	bl	8006c04 <__multadd>
 80068de:	4606      	mov	r6, r0
 80068e0:	e7f2      	b.n	80068c8 <_dtoa_r+0xaa0>
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	2201      	movs	r2, #1
 80068e8:	9904      	ldr	r1, [sp, #16]
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fb00 	bl	8006ef0 <__lshift>
 80068f0:	4639      	mov	r1, r7
 80068f2:	9004      	str	r0, [sp, #16]
 80068f4:	f000 fb50 	bl	8006f98 <__mcmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	dcb6      	bgt.n	800686a <_dtoa_r+0xa42>
 80068fc:	d102      	bne.n	8006904 <_dtoa_r+0xadc>
 80068fe:	f018 0f01 	tst.w	r8, #1
 8006902:	d1b2      	bne.n	800686a <_dtoa_r+0xa42>
 8006904:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	f105 32ff 	add.w	r2, r5, #4294967295
 800690e:	f47f af0a 	bne.w	8006726 <_dtoa_r+0x8fe>
 8006912:	4615      	mov	r5, r2
 8006914:	e7f6      	b.n	8006904 <_dtoa_r+0xadc>
 8006916:	4593      	cmp	fp, r2
 8006918:	d105      	bne.n	8006926 <_dtoa_r+0xafe>
 800691a:	2331      	movs	r3, #49	; 0x31
 800691c:	f10a 0a01 	add.w	sl, sl, #1
 8006920:	f88b 3000 	strb.w	r3, [fp]
 8006924:	e6ff      	b.n	8006726 <_dtoa_r+0x8fe>
 8006926:	4615      	mov	r5, r2
 8006928:	e79f      	b.n	800686a <_dtoa_r+0xa42>
 800692a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006990 <_dtoa_r+0xb68>
 800692e:	e007      	b.n	8006940 <_dtoa_r+0xb18>
 8006930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006932:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006994 <_dtoa_r+0xb6c>
 8006936:	b11b      	cbz	r3, 8006940 <_dtoa_r+0xb18>
 8006938:	f10b 0308 	add.w	r3, fp, #8
 800693c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4658      	mov	r0, fp
 8006942:	b017      	add	sp, #92	; 0x5c
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	9b06      	ldr	r3, [sp, #24]
 800694a:	2b01      	cmp	r3, #1
 800694c:	f77f ae35 	ble.w	80065ba <_dtoa_r+0x792>
 8006950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006952:	9307      	str	r3, [sp, #28]
 8006954:	e649      	b.n	80065ea <_dtoa_r+0x7c2>
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dc03      	bgt.n	8006964 <_dtoa_r+0xb3c>
 800695c:	9b06      	ldr	r3, [sp, #24]
 800695e:	2b02      	cmp	r3, #2
 8006960:	f73f aecc 	bgt.w	80066fc <_dtoa_r+0x8d4>
 8006964:	465d      	mov	r5, fp
 8006966:	4639      	mov	r1, r7
 8006968:	9804      	ldr	r0, [sp, #16]
 800696a:	f7ff f9cf 	bl	8005d0c <quorem>
 800696e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006972:	f805 8b01 	strb.w	r8, [r5], #1
 8006976:	9a02      	ldr	r2, [sp, #8]
 8006978:	eba5 030b 	sub.w	r3, r5, fp
 800697c:	429a      	cmp	r2, r3
 800697e:	ddb0      	ble.n	80068e2 <_dtoa_r+0xaba>
 8006980:	2300      	movs	r3, #0
 8006982:	220a      	movs	r2, #10
 8006984:	9904      	ldr	r1, [sp, #16]
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f93c 	bl	8006c04 <__multadd>
 800698c:	9004      	str	r0, [sp, #16]
 800698e:	e7ea      	b.n	8006966 <_dtoa_r+0xb3e>
 8006990:	08007e5c 	.word	0x08007e5c
 8006994:	08007e80 	.word	0x08007e80

08006998 <std>:
 8006998:	2300      	movs	r3, #0
 800699a:	b510      	push	{r4, lr}
 800699c:	4604      	mov	r4, r0
 800699e:	e9c0 3300 	strd	r3, r3, [r0]
 80069a2:	6083      	str	r3, [r0, #8]
 80069a4:	8181      	strh	r1, [r0, #12]
 80069a6:	6643      	str	r3, [r0, #100]	; 0x64
 80069a8:	81c2      	strh	r2, [r0, #14]
 80069aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ae:	6183      	str	r3, [r0, #24]
 80069b0:	4619      	mov	r1, r3
 80069b2:	2208      	movs	r2, #8
 80069b4:	305c      	adds	r0, #92	; 0x5c
 80069b6:	f7fe fd0d 	bl	80053d4 <memset>
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <std+0x38>)
 80069bc:	6263      	str	r3, [r4, #36]	; 0x24
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <std+0x3c>)
 80069c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <std+0x40>)
 80069c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069c6:	4b05      	ldr	r3, [pc, #20]	; (80069dc <std+0x44>)
 80069c8:	6224      	str	r4, [r4, #32]
 80069ca:	6323      	str	r3, [r4, #48]	; 0x30
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	080077d5 	.word	0x080077d5
 80069d4:	080077f7 	.word	0x080077f7
 80069d8:	0800782f 	.word	0x0800782f
 80069dc:	08007853 	.word	0x08007853

080069e0 <_cleanup_r>:
 80069e0:	4901      	ldr	r1, [pc, #4]	; (80069e8 <_cleanup_r+0x8>)
 80069e2:	f000 b885 	b.w	8006af0 <_fwalk_reent>
 80069e6:	bf00      	nop
 80069e8:	08007b2d 	.word	0x08007b2d

080069ec <__sfmoreglue>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	1e4a      	subs	r2, r1, #1
 80069f0:	2568      	movs	r5, #104	; 0x68
 80069f2:	4355      	muls	r5, r2
 80069f4:	460e      	mov	r6, r1
 80069f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069fa:	f000 fbef 	bl	80071dc <_malloc_r>
 80069fe:	4604      	mov	r4, r0
 8006a00:	b140      	cbz	r0, 8006a14 <__sfmoreglue+0x28>
 8006a02:	2100      	movs	r1, #0
 8006a04:	e9c0 1600 	strd	r1, r6, [r0]
 8006a08:	300c      	adds	r0, #12
 8006a0a:	60a0      	str	r0, [r4, #8]
 8006a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a10:	f7fe fce0 	bl	80053d4 <memset>
 8006a14:	4620      	mov	r0, r4
 8006a16:	bd70      	pop	{r4, r5, r6, pc}

08006a18 <__sinit>:
 8006a18:	6983      	ldr	r3, [r0, #24]
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	bb33      	cbnz	r3, 8006a6e <__sinit+0x56>
 8006a20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006a24:	6503      	str	r3, [r0, #80]	; 0x50
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <__sinit+0x58>)
 8006a28:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <__sinit+0x5c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6282      	str	r2, [r0, #40]	; 0x28
 8006a2e:	4298      	cmp	r0, r3
 8006a30:	bf04      	itt	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	6183      	streq	r3, [r0, #24]
 8006a36:	f000 f81f 	bl	8006a78 <__sfp>
 8006a3a:	6060      	str	r0, [r4, #4]
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 f81b 	bl	8006a78 <__sfp>
 8006a42:	60a0      	str	r0, [r4, #8]
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 f817 	bl	8006a78 <__sfp>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	60e0      	str	r0, [r4, #12]
 8006a4e:	2104      	movs	r1, #4
 8006a50:	6860      	ldr	r0, [r4, #4]
 8006a52:	f7ff ffa1 	bl	8006998 <std>
 8006a56:	2201      	movs	r2, #1
 8006a58:	2109      	movs	r1, #9
 8006a5a:	68a0      	ldr	r0, [r4, #8]
 8006a5c:	f7ff ff9c 	bl	8006998 <std>
 8006a60:	2202      	movs	r2, #2
 8006a62:	2112      	movs	r1, #18
 8006a64:	68e0      	ldr	r0, [r4, #12]
 8006a66:	f7ff ff97 	bl	8006998 <std>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61a3      	str	r3, [r4, #24]
 8006a6e:	bd10      	pop	{r4, pc}
 8006a70:	08007e48 	.word	0x08007e48
 8006a74:	080069e1 	.word	0x080069e1

08006a78 <__sfp>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <__sfp+0x70>)
 8006a7c:	681e      	ldr	r6, [r3, #0]
 8006a7e:	69b3      	ldr	r3, [r6, #24]
 8006a80:	4607      	mov	r7, r0
 8006a82:	b913      	cbnz	r3, 8006a8a <__sfp+0x12>
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff ffc7 	bl	8006a18 <__sinit>
 8006a8a:	3648      	adds	r6, #72	; 0x48
 8006a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	d503      	bpl.n	8006a9c <__sfp+0x24>
 8006a94:	6833      	ldr	r3, [r6, #0]
 8006a96:	b133      	cbz	r3, 8006aa6 <__sfp+0x2e>
 8006a98:	6836      	ldr	r6, [r6, #0]
 8006a9a:	e7f7      	b.n	8006a8c <__sfp+0x14>
 8006a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006aa0:	b16d      	cbz	r5, 8006abe <__sfp+0x46>
 8006aa2:	3468      	adds	r4, #104	; 0x68
 8006aa4:	e7f4      	b.n	8006a90 <__sfp+0x18>
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff ff9f 	bl	80069ec <__sfmoreglue>
 8006aae:	6030      	str	r0, [r6, #0]
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d1f1      	bne.n	8006a98 <__sfp+0x20>
 8006ab4:	230c      	movs	r3, #12
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4620      	mov	r0, r4
 8006abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006abe:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <__sfp+0x74>)
 8006ac0:	6665      	str	r5, [r4, #100]	; 0x64
 8006ac2:	e9c4 5500 	strd	r5, r5, [r4]
 8006ac6:	60a5      	str	r5, [r4, #8]
 8006ac8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006acc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ad8:	f7fe fc7c 	bl	80053d4 <memset>
 8006adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ae4:	e7e9      	b.n	8006aba <__sfp+0x42>
 8006ae6:	bf00      	nop
 8006ae8:	08007e48 	.word	0x08007e48
 8006aec:	ffff0001 	.word	0xffff0001

08006af0 <_fwalk_reent>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	4680      	mov	r8, r0
 8006af6:	4689      	mov	r9, r1
 8006af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006afc:	2600      	movs	r6, #0
 8006afe:	b914      	cbnz	r4, 8006b06 <_fwalk_reent+0x16>
 8006b00:	4630      	mov	r0, r6
 8006b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006b0a:	3f01      	subs	r7, #1
 8006b0c:	d501      	bpl.n	8006b12 <_fwalk_reent+0x22>
 8006b0e:	6824      	ldr	r4, [r4, #0]
 8006b10:	e7f5      	b.n	8006afe <_fwalk_reent+0xe>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d907      	bls.n	8006b28 <_fwalk_reent+0x38>
 8006b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	d003      	beq.n	8006b28 <_fwalk_reent+0x38>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4640      	mov	r0, r8
 8006b24:	47c8      	blx	r9
 8006b26:	4306      	orrs	r6, r0
 8006b28:	3568      	adds	r5, #104	; 0x68
 8006b2a:	e7ee      	b.n	8006b0a <_fwalk_reent+0x1a>

08006b2c <_localeconv_r>:
 8006b2c:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <_localeconv_r+0x14>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a18      	ldr	r0, [r3, #32]
 8006b32:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <_localeconv_r+0x18>)
 8006b34:	2800      	cmp	r0, #0
 8006b36:	bf08      	it	eq
 8006b38:	4618      	moveq	r0, r3
 8006b3a:	30f0      	adds	r0, #240	; 0xf0
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	2000000c 	.word	0x2000000c
 8006b44:	20000070 	.word	0x20000070

08006b48 <malloc>:
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <malloc+0xc>)
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f000 bb45 	b.w	80071dc <_malloc_r>
 8006b52:	bf00      	nop
 8006b54:	2000000c 	.word	0x2000000c

08006b58 <memcpy>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	1e43      	subs	r3, r0, #1
 8006b5c:	440a      	add	r2, r1
 8006b5e:	4291      	cmp	r1, r2
 8006b60:	d100      	bne.n	8006b64 <memcpy+0xc>
 8006b62:	bd10      	pop	{r4, pc}
 8006b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6c:	e7f7      	b.n	8006b5e <memcpy+0x6>

08006b6e <_Balloc>:
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b72:	4604      	mov	r4, r0
 8006b74:	460e      	mov	r6, r1
 8006b76:	b93d      	cbnz	r5, 8006b88 <_Balloc+0x1a>
 8006b78:	2010      	movs	r0, #16
 8006b7a:	f7ff ffe5 	bl	8006b48 <malloc>
 8006b7e:	6260      	str	r0, [r4, #36]	; 0x24
 8006b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b84:	6005      	str	r5, [r0, #0]
 8006b86:	60c5      	str	r5, [r0, #12]
 8006b88:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b8a:	68eb      	ldr	r3, [r5, #12]
 8006b8c:	b183      	cbz	r3, 8006bb0 <_Balloc+0x42>
 8006b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006b96:	b9b8      	cbnz	r0, 8006bc8 <_Balloc+0x5a>
 8006b98:	2101      	movs	r1, #1
 8006b9a:	fa01 f506 	lsl.w	r5, r1, r6
 8006b9e:	1d6a      	adds	r2, r5, #5
 8006ba0:	0092      	lsls	r2, r2, #2
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fabe 	bl	8007124 <_calloc_r>
 8006ba8:	b160      	cbz	r0, 8006bc4 <_Balloc+0x56>
 8006baa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006bae:	e00e      	b.n	8006bce <_Balloc+0x60>
 8006bb0:	2221      	movs	r2, #33	; 0x21
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 fab5 	bl	8007124 <_calloc_r>
 8006bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bbc:	60e8      	str	r0, [r5, #12]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e4      	bne.n	8006b8e <_Balloc+0x20>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	6802      	ldr	r2, [r0, #0]
 8006bca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bd4:	e7f7      	b.n	8006bc6 <_Balloc+0x58>

08006bd6 <_Bfree>:
 8006bd6:	b570      	push	{r4, r5, r6, lr}
 8006bd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460d      	mov	r5, r1
 8006bde:	b93c      	cbnz	r4, 8006bf0 <_Bfree+0x1a>
 8006be0:	2010      	movs	r0, #16
 8006be2:	f7ff ffb1 	bl	8006b48 <malloc>
 8006be6:	6270      	str	r0, [r6, #36]	; 0x24
 8006be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bec:	6004      	str	r4, [r0, #0]
 8006bee:	60c4      	str	r4, [r0, #12]
 8006bf0:	b13d      	cbz	r5, 8006c02 <_Bfree+0x2c>
 8006bf2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006bf4:	686a      	ldr	r2, [r5, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bfc:	6029      	str	r1, [r5, #0]
 8006bfe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006c02:	bd70      	pop	{r4, r5, r6, pc}

08006c04 <__multadd>:
 8006c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c08:	690d      	ldr	r5, [r1, #16]
 8006c0a:	461f      	mov	r7, r3
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	f101 0c14 	add.w	ip, r1, #20
 8006c14:	2300      	movs	r3, #0
 8006c16:	f8dc 0000 	ldr.w	r0, [ip]
 8006c1a:	b281      	uxth	r1, r0
 8006c1c:	fb02 7101 	mla	r1, r2, r1, r7
 8006c20:	0c0f      	lsrs	r7, r1, #16
 8006c22:	0c00      	lsrs	r0, r0, #16
 8006c24:	fb02 7000 	mla	r0, r2, r0, r7
 8006c28:	b289      	uxth	r1, r1
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006c30:	429d      	cmp	r5, r3
 8006c32:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006c36:	f84c 1b04 	str.w	r1, [ip], #4
 8006c3a:	dcec      	bgt.n	8006c16 <__multadd+0x12>
 8006c3c:	b1d7      	cbz	r7, 8006c74 <__multadd+0x70>
 8006c3e:	68a3      	ldr	r3, [r4, #8]
 8006c40:	42ab      	cmp	r3, r5
 8006c42:	dc12      	bgt.n	8006c6a <__multadd+0x66>
 8006c44:	6861      	ldr	r1, [r4, #4]
 8006c46:	4630      	mov	r0, r6
 8006c48:	3101      	adds	r1, #1
 8006c4a:	f7ff ff90 	bl	8006b6e <_Balloc>
 8006c4e:	6922      	ldr	r2, [r4, #16]
 8006c50:	3202      	adds	r2, #2
 8006c52:	f104 010c 	add.w	r1, r4, #12
 8006c56:	4680      	mov	r8, r0
 8006c58:	0092      	lsls	r2, r2, #2
 8006c5a:	300c      	adds	r0, #12
 8006c5c:	f7ff ff7c 	bl	8006b58 <memcpy>
 8006c60:	4621      	mov	r1, r4
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ffb7 	bl	8006bd6 <_Bfree>
 8006c68:	4644      	mov	r4, r8
 8006c6a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c6e:	3501      	adds	r5, #1
 8006c70:	615f      	str	r7, [r3, #20]
 8006c72:	6125      	str	r5, [r4, #16]
 8006c74:	4620      	mov	r0, r4
 8006c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c7a <__hi0bits>:
 8006c7a:	0c02      	lsrs	r2, r0, #16
 8006c7c:	0412      	lsls	r2, r2, #16
 8006c7e:	4603      	mov	r3, r0
 8006c80:	b9b2      	cbnz	r2, 8006cb0 <__hi0bits+0x36>
 8006c82:	0403      	lsls	r3, r0, #16
 8006c84:	2010      	movs	r0, #16
 8006c86:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c8a:	bf04      	itt	eq
 8006c8c:	021b      	lsleq	r3, r3, #8
 8006c8e:	3008      	addeq	r0, #8
 8006c90:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c94:	bf04      	itt	eq
 8006c96:	011b      	lsleq	r3, r3, #4
 8006c98:	3004      	addeq	r0, #4
 8006c9a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c9e:	bf04      	itt	eq
 8006ca0:	009b      	lsleq	r3, r3, #2
 8006ca2:	3002      	addeq	r0, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db06      	blt.n	8006cb6 <__hi0bits+0x3c>
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	d503      	bpl.n	8006cb4 <__hi0bits+0x3a>
 8006cac:	3001      	adds	r0, #1
 8006cae:	4770      	bx	lr
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e7e8      	b.n	8006c86 <__hi0bits+0xc>
 8006cb4:	2020      	movs	r0, #32
 8006cb6:	4770      	bx	lr

08006cb8 <__lo0bits>:
 8006cb8:	6803      	ldr	r3, [r0, #0]
 8006cba:	f013 0207 	ands.w	r2, r3, #7
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	d00b      	beq.n	8006cda <__lo0bits+0x22>
 8006cc2:	07da      	lsls	r2, r3, #31
 8006cc4:	d423      	bmi.n	8006d0e <__lo0bits+0x56>
 8006cc6:	0798      	lsls	r0, r3, #30
 8006cc8:	bf49      	itett	mi
 8006cca:	085b      	lsrmi	r3, r3, #1
 8006ccc:	089b      	lsrpl	r3, r3, #2
 8006cce:	2001      	movmi	r0, #1
 8006cd0:	600b      	strmi	r3, [r1, #0]
 8006cd2:	bf5c      	itt	pl
 8006cd4:	600b      	strpl	r3, [r1, #0]
 8006cd6:	2002      	movpl	r0, #2
 8006cd8:	4770      	bx	lr
 8006cda:	b298      	uxth	r0, r3
 8006cdc:	b9a8      	cbnz	r0, 8006d0a <__lo0bits+0x52>
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	2010      	movs	r0, #16
 8006ce2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ce6:	bf04      	itt	eq
 8006ce8:	0a1b      	lsreq	r3, r3, #8
 8006cea:	3008      	addeq	r0, #8
 8006cec:	071a      	lsls	r2, r3, #28
 8006cee:	bf04      	itt	eq
 8006cf0:	091b      	lsreq	r3, r3, #4
 8006cf2:	3004      	addeq	r0, #4
 8006cf4:	079a      	lsls	r2, r3, #30
 8006cf6:	bf04      	itt	eq
 8006cf8:	089b      	lsreq	r3, r3, #2
 8006cfa:	3002      	addeq	r0, #2
 8006cfc:	07da      	lsls	r2, r3, #31
 8006cfe:	d402      	bmi.n	8006d06 <__lo0bits+0x4e>
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	d006      	beq.n	8006d12 <__lo0bits+0x5a>
 8006d04:	3001      	adds	r0, #1
 8006d06:	600b      	str	r3, [r1, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	e7e9      	b.n	8006ce2 <__lo0bits+0x2a>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	4770      	bx	lr
 8006d12:	2020      	movs	r0, #32
 8006d14:	4770      	bx	lr

08006d16 <__i2b>:
 8006d16:	b510      	push	{r4, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	f7ff ff27 	bl	8006b6e <_Balloc>
 8006d20:	2201      	movs	r2, #1
 8006d22:	6144      	str	r4, [r0, #20]
 8006d24:	6102      	str	r2, [r0, #16]
 8006d26:	bd10      	pop	{r4, pc}

08006d28 <__multiply>:
 8006d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	690a      	ldr	r2, [r1, #16]
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	bfb8      	it	lt
 8006d36:	460b      	movlt	r3, r1
 8006d38:	4688      	mov	r8, r1
 8006d3a:	bfbc      	itt	lt
 8006d3c:	46a0      	movlt	r8, r4
 8006d3e:	461c      	movlt	r4, r3
 8006d40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d48:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d50:	eb07 0609 	add.w	r6, r7, r9
 8006d54:	42b3      	cmp	r3, r6
 8006d56:	bfb8      	it	lt
 8006d58:	3101      	addlt	r1, #1
 8006d5a:	f7ff ff08 	bl	8006b6e <_Balloc>
 8006d5e:	f100 0514 	add.w	r5, r0, #20
 8006d62:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006d66:	462b      	mov	r3, r5
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4573      	cmp	r3, lr
 8006d6c:	d316      	bcc.n	8006d9c <__multiply+0x74>
 8006d6e:	f104 0214 	add.w	r2, r4, #20
 8006d72:	f108 0114 	add.w	r1, r8, #20
 8006d76:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006d7a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	9b00      	ldr	r3, [sp, #0]
 8006d82:	9201      	str	r2, [sp, #4]
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d80c      	bhi.n	8006da2 <__multiply+0x7a>
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	dd03      	ble.n	8006d94 <__multiply+0x6c>
 8006d8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d05d      	beq.n	8006e50 <__multiply+0x128>
 8006d94:	6106      	str	r6, [r0, #16]
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9c:	f843 2b04 	str.w	r2, [r3], #4
 8006da0:	e7e3      	b.n	8006d6a <__multiply+0x42>
 8006da2:	f8b2 b000 	ldrh.w	fp, [r2]
 8006da6:	f1bb 0f00 	cmp.w	fp, #0
 8006daa:	d023      	beq.n	8006df4 <__multiply+0xcc>
 8006dac:	4689      	mov	r9, r1
 8006dae:	46ac      	mov	ip, r5
 8006db0:	f04f 0800 	mov.w	r8, #0
 8006db4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006db8:	f8dc a000 	ldr.w	sl, [ip]
 8006dbc:	b2a3      	uxth	r3, r4
 8006dbe:	fa1f fa8a 	uxth.w	sl, sl
 8006dc2:	fb0b a303 	mla	r3, fp, r3, sl
 8006dc6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006dca:	f8dc 4000 	ldr.w	r4, [ip]
 8006dce:	4443      	add	r3, r8
 8006dd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006dd4:	fb0b 840a 	mla	r4, fp, sl, r8
 8006dd8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ddc:	46e2      	mov	sl, ip
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006de4:	454f      	cmp	r7, r9
 8006de6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006dea:	f84a 3b04 	str.w	r3, [sl], #4
 8006dee:	d82b      	bhi.n	8006e48 <__multiply+0x120>
 8006df0:	f8cc 8004 	str.w	r8, [ip, #4]
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006dfa:	3204      	adds	r2, #4
 8006dfc:	f1ba 0f00 	cmp.w	sl, #0
 8006e00:	d020      	beq.n	8006e44 <__multiply+0x11c>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	4689      	mov	r9, r1
 8006e06:	46a8      	mov	r8, r5
 8006e08:	f04f 0b00 	mov.w	fp, #0
 8006e0c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e10:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e14:	fb0a 440c 	mla	r4, sl, ip, r4
 8006e18:	445c      	add	r4, fp
 8006e1a:	46c4      	mov	ip, r8
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e22:	f84c 3b04 	str.w	r3, [ip], #4
 8006e26:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e2a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e2e:	0c1b      	lsrs	r3, r3, #16
 8006e30:	fb0a b303 	mla	r3, sl, r3, fp
 8006e34:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006e38:	454f      	cmp	r7, r9
 8006e3a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006e3e:	d805      	bhi.n	8006e4c <__multiply+0x124>
 8006e40:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e44:	3504      	adds	r5, #4
 8006e46:	e79b      	b.n	8006d80 <__multiply+0x58>
 8006e48:	46d4      	mov	ip, sl
 8006e4a:	e7b3      	b.n	8006db4 <__multiply+0x8c>
 8006e4c:	46e0      	mov	r8, ip
 8006e4e:	e7dd      	b.n	8006e0c <__multiply+0xe4>
 8006e50:	3e01      	subs	r6, #1
 8006e52:	e799      	b.n	8006d88 <__multiply+0x60>

08006e54 <__pow5mult>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4615      	mov	r5, r2
 8006e5a:	f012 0203 	ands.w	r2, r2, #3
 8006e5e:	4606      	mov	r6, r0
 8006e60:	460f      	mov	r7, r1
 8006e62:	d007      	beq.n	8006e74 <__pow5mult+0x20>
 8006e64:	3a01      	subs	r2, #1
 8006e66:	4c21      	ldr	r4, [pc, #132]	; (8006eec <__pow5mult+0x98>)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e6e:	f7ff fec9 	bl	8006c04 <__multadd>
 8006e72:	4607      	mov	r7, r0
 8006e74:	10ad      	asrs	r5, r5, #2
 8006e76:	d035      	beq.n	8006ee4 <__pow5mult+0x90>
 8006e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e7a:	b93c      	cbnz	r4, 8006e8c <__pow5mult+0x38>
 8006e7c:	2010      	movs	r0, #16
 8006e7e:	f7ff fe63 	bl	8006b48 <malloc>
 8006e82:	6270      	str	r0, [r6, #36]	; 0x24
 8006e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e88:	6004      	str	r4, [r0, #0]
 8006e8a:	60c4      	str	r4, [r0, #12]
 8006e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e94:	b94c      	cbnz	r4, 8006eaa <__pow5mult+0x56>
 8006e96:	f240 2171 	movw	r1, #625	; 0x271
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ff3b 	bl	8006d16 <__i2b>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	6003      	str	r3, [r0, #0]
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	07eb      	lsls	r3, r5, #31
 8006eb0:	d50a      	bpl.n	8006ec8 <__pow5mult+0x74>
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff36 	bl	8006d28 <__multiply>
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	4681      	mov	r9, r0
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7ff fe88 	bl	8006bd6 <_Bfree>
 8006ec6:	464f      	mov	r7, r9
 8006ec8:	106d      	asrs	r5, r5, #1
 8006eca:	d00b      	beq.n	8006ee4 <__pow5mult+0x90>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	b938      	cbnz	r0, 8006ee0 <__pow5mult+0x8c>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff ff27 	bl	8006d28 <__multiply>
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	f8c0 8000 	str.w	r8, [r0]
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	e7e4      	b.n	8006eae <__pow5mult+0x5a>
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eea:	bf00      	nop
 8006eec:	08007fe0 	.word	0x08007fe0

08006ef0 <__lshift>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	6849      	ldr	r1, [r1, #4]
 8006efe:	eb0a 0903 	add.w	r9, sl, r3
 8006f02:	68a3      	ldr	r3, [r4, #8]
 8006f04:	4607      	mov	r7, r0
 8006f06:	4616      	mov	r6, r2
 8006f08:	f109 0501 	add.w	r5, r9, #1
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	db32      	blt.n	8006f76 <__lshift+0x86>
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff fe2c 	bl	8006b6e <_Balloc>
 8006f16:	2300      	movs	r3, #0
 8006f18:	4680      	mov	r8, r0
 8006f1a:	f100 0114 	add.w	r1, r0, #20
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4553      	cmp	r3, sl
 8006f22:	db2b      	blt.n	8006f7c <__lshift+0x8c>
 8006f24:	6920      	ldr	r0, [r4, #16]
 8006f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f2a:	f104 0314 	add.w	r3, r4, #20
 8006f2e:	f016 021f 	ands.w	r2, r6, #31
 8006f32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f3a:	d025      	beq.n	8006f88 <__lshift+0x98>
 8006f3c:	f1c2 0e20 	rsb	lr, r2, #32
 8006f40:	2000      	movs	r0, #0
 8006f42:	681e      	ldr	r6, [r3, #0]
 8006f44:	468a      	mov	sl, r1
 8006f46:	4096      	lsls	r6, r2
 8006f48:	4330      	orrs	r0, r6
 8006f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f4e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f52:	459c      	cmp	ip, r3
 8006f54:	fa20 f00e 	lsr.w	r0, r0, lr
 8006f58:	d814      	bhi.n	8006f84 <__lshift+0x94>
 8006f5a:	6048      	str	r0, [r1, #4]
 8006f5c:	b108      	cbz	r0, 8006f62 <__lshift+0x72>
 8006f5e:	f109 0502 	add.w	r5, r9, #2
 8006f62:	3d01      	subs	r5, #1
 8006f64:	4638      	mov	r0, r7
 8006f66:	f8c8 5010 	str.w	r5, [r8, #16]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	f7ff fe33 	bl	8006bd6 <_Bfree>
 8006f70:	4640      	mov	r0, r8
 8006f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f76:	3101      	adds	r1, #1
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	e7c7      	b.n	8006f0c <__lshift+0x1c>
 8006f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f80:	3301      	adds	r3, #1
 8006f82:	e7cd      	b.n	8006f20 <__lshift+0x30>
 8006f84:	4651      	mov	r1, sl
 8006f86:	e7dc      	b.n	8006f42 <__lshift+0x52>
 8006f88:	3904      	subs	r1, #4
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f92:	459c      	cmp	ip, r3
 8006f94:	d8f9      	bhi.n	8006f8a <__lshift+0x9a>
 8006f96:	e7e4      	b.n	8006f62 <__lshift+0x72>

08006f98 <__mcmp>:
 8006f98:	6903      	ldr	r3, [r0, #16]
 8006f9a:	690a      	ldr	r2, [r1, #16]
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	b530      	push	{r4, r5, lr}
 8006fa0:	d10c      	bne.n	8006fbc <__mcmp+0x24>
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	3014      	adds	r0, #20
 8006fa6:	3114      	adds	r1, #20
 8006fa8:	1884      	adds	r4, r0, r2
 8006faa:	4411      	add	r1, r2
 8006fac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fb4:	4295      	cmp	r5, r2
 8006fb6:	d003      	beq.n	8006fc0 <__mcmp+0x28>
 8006fb8:	d305      	bcc.n	8006fc6 <__mcmp+0x2e>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	bd30      	pop	{r4, r5, pc}
 8006fc0:	42a0      	cmp	r0, r4
 8006fc2:	d3f3      	bcc.n	8006fac <__mcmp+0x14>
 8006fc4:	e7fa      	b.n	8006fbc <__mcmp+0x24>
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	e7f7      	b.n	8006fbc <__mcmp+0x24>

08006fcc <__mdiff>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	4614      	mov	r4, r2
 8006fda:	f7ff ffdd 	bl	8006f98 <__mcmp>
 8006fde:	1e06      	subs	r6, r0, #0
 8006fe0:	d108      	bne.n	8006ff4 <__mdiff+0x28>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff fdc2 	bl	8006b6e <_Balloc>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	bfa4      	itt	ge
 8006ff6:	4623      	movge	r3, r4
 8006ff8:	462c      	movge	r4, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	6861      	ldr	r1, [r4, #4]
 8006ffe:	bfa6      	itte	ge
 8007000:	461d      	movge	r5, r3
 8007002:	2600      	movge	r6, #0
 8007004:	2601      	movlt	r6, #1
 8007006:	f7ff fdb2 	bl	8006b6e <_Balloc>
 800700a:	692b      	ldr	r3, [r5, #16]
 800700c:	60c6      	str	r6, [r0, #12]
 800700e:	6926      	ldr	r6, [r4, #16]
 8007010:	f105 0914 	add.w	r9, r5, #20
 8007014:	f104 0214 	add.w	r2, r4, #20
 8007018:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800701c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007020:	f100 0514 	add.w	r5, r0, #20
 8007024:	f04f 0e00 	mov.w	lr, #0
 8007028:	f852 ab04 	ldr.w	sl, [r2], #4
 800702c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007030:	fa1e f18a 	uxtah	r1, lr, sl
 8007034:	b2a3      	uxth	r3, r4
 8007036:	1ac9      	subs	r1, r1, r3
 8007038:	0c23      	lsrs	r3, r4, #16
 800703a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800703e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007042:	b289      	uxth	r1, r1
 8007044:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007048:	45c8      	cmp	r8, r9
 800704a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800704e:	4694      	mov	ip, r2
 8007050:	f845 3b04 	str.w	r3, [r5], #4
 8007054:	d8e8      	bhi.n	8007028 <__mdiff+0x5c>
 8007056:	45bc      	cmp	ip, r7
 8007058:	d304      	bcc.n	8007064 <__mdiff+0x98>
 800705a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800705e:	b183      	cbz	r3, 8007082 <__mdiff+0xb6>
 8007060:	6106      	str	r6, [r0, #16]
 8007062:	e7c5      	b.n	8006ff0 <__mdiff+0x24>
 8007064:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007068:	fa1e f381 	uxtah	r3, lr, r1
 800706c:	141a      	asrs	r2, r3, #16
 800706e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007072:	b29b      	uxth	r3, r3
 8007074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007078:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800707c:	f845 3b04 	str.w	r3, [r5], #4
 8007080:	e7e9      	b.n	8007056 <__mdiff+0x8a>
 8007082:	3e01      	subs	r6, #1
 8007084:	e7e9      	b.n	800705a <__mdiff+0x8e>

08007086 <__d2b>:
 8007086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800708a:	460e      	mov	r6, r1
 800708c:	2101      	movs	r1, #1
 800708e:	ec59 8b10 	vmov	r8, r9, d0
 8007092:	4615      	mov	r5, r2
 8007094:	f7ff fd6b 	bl	8006b6e <_Balloc>
 8007098:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800709c:	4607      	mov	r7, r0
 800709e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070a2:	bb34      	cbnz	r4, 80070f2 <__d2b+0x6c>
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	f1b8 0300 	subs.w	r3, r8, #0
 80070aa:	d027      	beq.n	80070fc <__d2b+0x76>
 80070ac:	a802      	add	r0, sp, #8
 80070ae:	f840 3d08 	str.w	r3, [r0, #-8]!
 80070b2:	f7ff fe01 	bl	8006cb8 <__lo0bits>
 80070b6:	9900      	ldr	r1, [sp, #0]
 80070b8:	b1f0      	cbz	r0, 80070f8 <__d2b+0x72>
 80070ba:	9a01      	ldr	r2, [sp, #4]
 80070bc:	f1c0 0320 	rsb	r3, r0, #32
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	430b      	orrs	r3, r1
 80070c6:	40c2      	lsrs	r2, r0
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf14      	ite	ne
 80070d4:	2102      	movne	r1, #2
 80070d6:	2101      	moveq	r1, #1
 80070d8:	6139      	str	r1, [r7, #16]
 80070da:	b1c4      	cbz	r4, 800710e <__d2b+0x88>
 80070dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80070e0:	4404      	add	r4, r0
 80070e2:	6034      	str	r4, [r6, #0]
 80070e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070e8:	6028      	str	r0, [r5, #0]
 80070ea:	4638      	mov	r0, r7
 80070ec:	b003      	add	sp, #12
 80070ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070f6:	e7d5      	b.n	80070a4 <__d2b+0x1e>
 80070f8:	6179      	str	r1, [r7, #20]
 80070fa:	e7e7      	b.n	80070cc <__d2b+0x46>
 80070fc:	a801      	add	r0, sp, #4
 80070fe:	f7ff fddb 	bl	8006cb8 <__lo0bits>
 8007102:	9b01      	ldr	r3, [sp, #4]
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	2101      	movs	r1, #1
 8007108:	6139      	str	r1, [r7, #16]
 800710a:	3020      	adds	r0, #32
 800710c:	e7e5      	b.n	80070da <__d2b+0x54>
 800710e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007112:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007116:	6030      	str	r0, [r6, #0]
 8007118:	6918      	ldr	r0, [r3, #16]
 800711a:	f7ff fdae 	bl	8006c7a <__hi0bits>
 800711e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007122:	e7e1      	b.n	80070e8 <__d2b+0x62>

08007124 <_calloc_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	fb02 f401 	mul.w	r4, r2, r1
 800712a:	4621      	mov	r1, r4
 800712c:	f000 f856 	bl	80071dc <_malloc_r>
 8007130:	4605      	mov	r5, r0
 8007132:	b118      	cbz	r0, 800713c <_calloc_r+0x18>
 8007134:	4622      	mov	r2, r4
 8007136:	2100      	movs	r1, #0
 8007138:	f7fe f94c 	bl	80053d4 <memset>
 800713c:	4628      	mov	r0, r5
 800713e:	bd38      	pop	{r3, r4, r5, pc}

08007140 <_free_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4605      	mov	r5, r0
 8007144:	2900      	cmp	r1, #0
 8007146:	d045      	beq.n	80071d4 <_free_r+0x94>
 8007148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714c:	1f0c      	subs	r4, r1, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfb8      	it	lt
 8007152:	18e4      	addlt	r4, r4, r3
 8007154:	f000 fdb5 	bl	8007cc2 <__malloc_lock>
 8007158:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <_free_r+0x98>)
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	4610      	mov	r0, r2
 800715e:	b933      	cbnz	r3, 800716e <_free_r+0x2e>
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	6014      	str	r4, [r2, #0]
 8007164:	4628      	mov	r0, r5
 8007166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800716a:	f000 bdab 	b.w	8007cc4 <__malloc_unlock>
 800716e:	42a3      	cmp	r3, r4
 8007170:	d90c      	bls.n	800718c <_free_r+0x4c>
 8007172:	6821      	ldr	r1, [r4, #0]
 8007174:	1862      	adds	r2, r4, r1
 8007176:	4293      	cmp	r3, r2
 8007178:	bf04      	itt	eq
 800717a:	681a      	ldreq	r2, [r3, #0]
 800717c:	685b      	ldreq	r3, [r3, #4]
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	bf04      	itt	eq
 8007182:	1852      	addeq	r2, r2, r1
 8007184:	6022      	streq	r2, [r4, #0]
 8007186:	6004      	str	r4, [r0, #0]
 8007188:	e7ec      	b.n	8007164 <_free_r+0x24>
 800718a:	4613      	mov	r3, r2
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	b10a      	cbz	r2, 8007194 <_free_r+0x54>
 8007190:	42a2      	cmp	r2, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x4a>
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	1858      	adds	r0, r3, r1
 8007198:	42a0      	cmp	r0, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x74>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	4401      	add	r1, r0
 80071a0:	1858      	adds	r0, r3, r1
 80071a2:	4282      	cmp	r2, r0
 80071a4:	6019      	str	r1, [r3, #0]
 80071a6:	d1dd      	bne.n	8007164 <_free_r+0x24>
 80071a8:	6810      	ldr	r0, [r2, #0]
 80071aa:	6852      	ldr	r2, [r2, #4]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	4401      	add	r1, r0
 80071b0:	6019      	str	r1, [r3, #0]
 80071b2:	e7d7      	b.n	8007164 <_free_r+0x24>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x7c>
 80071b6:	230c      	movs	r3, #12
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	e7d3      	b.n	8007164 <_free_r+0x24>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	1821      	adds	r1, r4, r0
 80071c0:	428a      	cmp	r2, r1
 80071c2:	bf04      	itt	eq
 80071c4:	6811      	ldreq	r1, [r2, #0]
 80071c6:	6852      	ldreq	r2, [r2, #4]
 80071c8:	6062      	str	r2, [r4, #4]
 80071ca:	bf04      	itt	eq
 80071cc:	1809      	addeq	r1, r1, r0
 80071ce:	6021      	streq	r1, [r4, #0]
 80071d0:	605c      	str	r4, [r3, #4]
 80071d2:	e7c7      	b.n	8007164 <_free_r+0x24>
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
 80071d6:	bf00      	nop
 80071d8:	200001fc 	.word	0x200001fc

080071dc <_malloc_r>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	1ccd      	adds	r5, r1, #3
 80071e0:	f025 0503 	bic.w	r5, r5, #3
 80071e4:	3508      	adds	r5, #8
 80071e6:	2d0c      	cmp	r5, #12
 80071e8:	bf38      	it	cc
 80071ea:	250c      	movcc	r5, #12
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	4606      	mov	r6, r0
 80071f0:	db01      	blt.n	80071f6 <_malloc_r+0x1a>
 80071f2:	42a9      	cmp	r1, r5
 80071f4:	d903      	bls.n	80071fe <_malloc_r+0x22>
 80071f6:	230c      	movs	r3, #12
 80071f8:	6033      	str	r3, [r6, #0]
 80071fa:	2000      	movs	r0, #0
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	f000 fd60 	bl	8007cc2 <__malloc_lock>
 8007202:	4a21      	ldr	r2, [pc, #132]	; (8007288 <_malloc_r+0xac>)
 8007204:	6814      	ldr	r4, [r2, #0]
 8007206:	4621      	mov	r1, r4
 8007208:	b991      	cbnz	r1, 8007230 <_malloc_r+0x54>
 800720a:	4c20      	ldr	r4, [pc, #128]	; (800728c <_malloc_r+0xb0>)
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	b91b      	cbnz	r3, 8007218 <_malloc_r+0x3c>
 8007210:	4630      	mov	r0, r6
 8007212:	f000 facf 	bl	80077b4 <_sbrk_r>
 8007216:	6020      	str	r0, [r4, #0]
 8007218:	4629      	mov	r1, r5
 800721a:	4630      	mov	r0, r6
 800721c:	f000 faca 	bl	80077b4 <_sbrk_r>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d124      	bne.n	800726e <_malloc_r+0x92>
 8007224:	230c      	movs	r3, #12
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	4630      	mov	r0, r6
 800722a:	f000 fd4b 	bl	8007cc4 <__malloc_unlock>
 800722e:	e7e4      	b.n	80071fa <_malloc_r+0x1e>
 8007230:	680b      	ldr	r3, [r1, #0]
 8007232:	1b5b      	subs	r3, r3, r5
 8007234:	d418      	bmi.n	8007268 <_malloc_r+0x8c>
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d90f      	bls.n	800725a <_malloc_r+0x7e>
 800723a:	600b      	str	r3, [r1, #0]
 800723c:	50cd      	str	r5, [r1, r3]
 800723e:	18cc      	adds	r4, r1, r3
 8007240:	4630      	mov	r0, r6
 8007242:	f000 fd3f 	bl	8007cc4 <__malloc_unlock>
 8007246:	f104 000b 	add.w	r0, r4, #11
 800724a:	1d23      	adds	r3, r4, #4
 800724c:	f020 0007 	bic.w	r0, r0, #7
 8007250:	1ac3      	subs	r3, r0, r3
 8007252:	d0d3      	beq.n	80071fc <_malloc_r+0x20>
 8007254:	425a      	negs	r2, r3
 8007256:	50e2      	str	r2, [r4, r3]
 8007258:	e7d0      	b.n	80071fc <_malloc_r+0x20>
 800725a:	428c      	cmp	r4, r1
 800725c:	684b      	ldr	r3, [r1, #4]
 800725e:	bf16      	itet	ne
 8007260:	6063      	strne	r3, [r4, #4]
 8007262:	6013      	streq	r3, [r2, #0]
 8007264:	460c      	movne	r4, r1
 8007266:	e7eb      	b.n	8007240 <_malloc_r+0x64>
 8007268:	460c      	mov	r4, r1
 800726a:	6849      	ldr	r1, [r1, #4]
 800726c:	e7cc      	b.n	8007208 <_malloc_r+0x2c>
 800726e:	1cc4      	adds	r4, r0, #3
 8007270:	f024 0403 	bic.w	r4, r4, #3
 8007274:	42a0      	cmp	r0, r4
 8007276:	d005      	beq.n	8007284 <_malloc_r+0xa8>
 8007278:	1a21      	subs	r1, r4, r0
 800727a:	4630      	mov	r0, r6
 800727c:	f000 fa9a 	bl	80077b4 <_sbrk_r>
 8007280:	3001      	adds	r0, #1
 8007282:	d0cf      	beq.n	8007224 <_malloc_r+0x48>
 8007284:	6025      	str	r5, [r4, #0]
 8007286:	e7db      	b.n	8007240 <_malloc_r+0x64>
 8007288:	200001fc 	.word	0x200001fc
 800728c:	20000200 	.word	0x20000200

08007290 <__ssputs_r>:
 8007290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	688e      	ldr	r6, [r1, #8]
 8007296:	429e      	cmp	r6, r3
 8007298:	4682      	mov	sl, r0
 800729a:	460c      	mov	r4, r1
 800729c:	4690      	mov	r8, r2
 800729e:	4699      	mov	r9, r3
 80072a0:	d837      	bhi.n	8007312 <__ssputs_r+0x82>
 80072a2:	898a      	ldrh	r2, [r1, #12]
 80072a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072a8:	d031      	beq.n	800730e <__ssputs_r+0x7e>
 80072aa:	6825      	ldr	r5, [r4, #0]
 80072ac:	6909      	ldr	r1, [r1, #16]
 80072ae:	1a6f      	subs	r7, r5, r1
 80072b0:	6965      	ldr	r5, [r4, #20]
 80072b2:	2302      	movs	r3, #2
 80072b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80072bc:	f109 0301 	add.w	r3, r9, #1
 80072c0:	443b      	add	r3, r7
 80072c2:	429d      	cmp	r5, r3
 80072c4:	bf38      	it	cc
 80072c6:	461d      	movcc	r5, r3
 80072c8:	0553      	lsls	r3, r2, #21
 80072ca:	d530      	bpl.n	800732e <__ssputs_r+0x9e>
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7ff ff85 	bl	80071dc <_malloc_r>
 80072d2:	4606      	mov	r6, r0
 80072d4:	b950      	cbnz	r0, 80072ec <__ssputs_r+0x5c>
 80072d6:	230c      	movs	r3, #12
 80072d8:	f8ca 3000 	str.w	r3, [sl]
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e2:	81a3      	strh	r3, [r4, #12]
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ec:	463a      	mov	r2, r7
 80072ee:	6921      	ldr	r1, [r4, #16]
 80072f0:	f7ff fc32 	bl	8006b58 <memcpy>
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	6126      	str	r6, [r4, #16]
 8007302:	6165      	str	r5, [r4, #20]
 8007304:	443e      	add	r6, r7
 8007306:	1bed      	subs	r5, r5, r7
 8007308:	6026      	str	r6, [r4, #0]
 800730a:	60a5      	str	r5, [r4, #8]
 800730c:	464e      	mov	r6, r9
 800730e:	454e      	cmp	r6, r9
 8007310:	d900      	bls.n	8007314 <__ssputs_r+0x84>
 8007312:	464e      	mov	r6, r9
 8007314:	4632      	mov	r2, r6
 8007316:	4641      	mov	r1, r8
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	f000 fcb9 	bl	8007c90 <memmove>
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	441e      	add	r6, r3
 8007328:	6026      	str	r6, [r4, #0]
 800732a:	2000      	movs	r0, #0
 800732c:	e7dc      	b.n	80072e8 <__ssputs_r+0x58>
 800732e:	462a      	mov	r2, r5
 8007330:	f000 fcc9 	bl	8007cc6 <_realloc_r>
 8007334:	4606      	mov	r6, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d1e2      	bne.n	8007300 <__ssputs_r+0x70>
 800733a:	6921      	ldr	r1, [r4, #16]
 800733c:	4650      	mov	r0, sl
 800733e:	f7ff feff 	bl	8007140 <_free_r>
 8007342:	e7c8      	b.n	80072d6 <__ssputs_r+0x46>

08007344 <_svfiprintf_r>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	461d      	mov	r5, r3
 800734a:	898b      	ldrh	r3, [r1, #12]
 800734c:	061f      	lsls	r7, r3, #24
 800734e:	b09d      	sub	sp, #116	; 0x74
 8007350:	4680      	mov	r8, r0
 8007352:	460c      	mov	r4, r1
 8007354:	4616      	mov	r6, r2
 8007356:	d50f      	bpl.n	8007378 <_svfiprintf_r+0x34>
 8007358:	690b      	ldr	r3, [r1, #16]
 800735a:	b96b      	cbnz	r3, 8007378 <_svfiprintf_r+0x34>
 800735c:	2140      	movs	r1, #64	; 0x40
 800735e:	f7ff ff3d 	bl	80071dc <_malloc_r>
 8007362:	6020      	str	r0, [r4, #0]
 8007364:	6120      	str	r0, [r4, #16]
 8007366:	b928      	cbnz	r0, 8007374 <_svfiprintf_r+0x30>
 8007368:	230c      	movs	r3, #12
 800736a:	f8c8 3000 	str.w	r3, [r8]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	e0c8      	b.n	8007506 <_svfiprintf_r+0x1c2>
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	6163      	str	r3, [r4, #20]
 8007378:	2300      	movs	r3, #0
 800737a:	9309      	str	r3, [sp, #36]	; 0x24
 800737c:	2320      	movs	r3, #32
 800737e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007382:	2330      	movs	r3, #48	; 0x30
 8007384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007388:	9503      	str	r5, [sp, #12]
 800738a:	f04f 0b01 	mov.w	fp, #1
 800738e:	4637      	mov	r7, r6
 8007390:	463d      	mov	r5, r7
 8007392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007396:	b10b      	cbz	r3, 800739c <_svfiprintf_r+0x58>
 8007398:	2b25      	cmp	r3, #37	; 0x25
 800739a:	d13e      	bne.n	800741a <_svfiprintf_r+0xd6>
 800739c:	ebb7 0a06 	subs.w	sl, r7, r6
 80073a0:	d00b      	beq.n	80073ba <_svfiprintf_r+0x76>
 80073a2:	4653      	mov	r3, sl
 80073a4:	4632      	mov	r2, r6
 80073a6:	4621      	mov	r1, r4
 80073a8:	4640      	mov	r0, r8
 80073aa:	f7ff ff71 	bl	8007290 <__ssputs_r>
 80073ae:	3001      	adds	r0, #1
 80073b0:	f000 80a4 	beq.w	80074fc <_svfiprintf_r+0x1b8>
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	4453      	add	r3, sl
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	783b      	ldrb	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 809d 	beq.w	80074fc <_svfiprintf_r+0x1b8>
 80073c2:	2300      	movs	r3, #0
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	9307      	str	r3, [sp, #28]
 80073d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073d4:	931a      	str	r3, [sp, #104]	; 0x68
 80073d6:	462f      	mov	r7, r5
 80073d8:	2205      	movs	r2, #5
 80073da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80073de:	4850      	ldr	r0, [pc, #320]	; (8007520 <_svfiprintf_r+0x1dc>)
 80073e0:	f7f8 fefe 	bl	80001e0 <memchr>
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	b9d0      	cbnz	r0, 800741e <_svfiprintf_r+0xda>
 80073e8:	06d9      	lsls	r1, r3, #27
 80073ea:	bf44      	itt	mi
 80073ec:	2220      	movmi	r2, #32
 80073ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073f2:	071a      	lsls	r2, r3, #28
 80073f4:	bf44      	itt	mi
 80073f6:	222b      	movmi	r2, #43	; 0x2b
 80073f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073fc:	782a      	ldrb	r2, [r5, #0]
 80073fe:	2a2a      	cmp	r2, #42	; 0x2a
 8007400:	d015      	beq.n	800742e <_svfiprintf_r+0xea>
 8007402:	9a07      	ldr	r2, [sp, #28]
 8007404:	462f      	mov	r7, r5
 8007406:	2000      	movs	r0, #0
 8007408:	250a      	movs	r5, #10
 800740a:	4639      	mov	r1, r7
 800740c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007410:	3b30      	subs	r3, #48	; 0x30
 8007412:	2b09      	cmp	r3, #9
 8007414:	d94d      	bls.n	80074b2 <_svfiprintf_r+0x16e>
 8007416:	b1b8      	cbz	r0, 8007448 <_svfiprintf_r+0x104>
 8007418:	e00f      	b.n	800743a <_svfiprintf_r+0xf6>
 800741a:	462f      	mov	r7, r5
 800741c:	e7b8      	b.n	8007390 <_svfiprintf_r+0x4c>
 800741e:	4a40      	ldr	r2, [pc, #256]	; (8007520 <_svfiprintf_r+0x1dc>)
 8007420:	1a80      	subs	r0, r0, r2
 8007422:	fa0b f000 	lsl.w	r0, fp, r0
 8007426:	4318      	orrs	r0, r3
 8007428:	9004      	str	r0, [sp, #16]
 800742a:	463d      	mov	r5, r7
 800742c:	e7d3      	b.n	80073d6 <_svfiprintf_r+0x92>
 800742e:	9a03      	ldr	r2, [sp, #12]
 8007430:	1d11      	adds	r1, r2, #4
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	9103      	str	r1, [sp, #12]
 8007436:	2a00      	cmp	r2, #0
 8007438:	db01      	blt.n	800743e <_svfiprintf_r+0xfa>
 800743a:	9207      	str	r2, [sp, #28]
 800743c:	e004      	b.n	8007448 <_svfiprintf_r+0x104>
 800743e:	4252      	negs	r2, r2
 8007440:	f043 0302 	orr.w	r3, r3, #2
 8007444:	9207      	str	r2, [sp, #28]
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	783b      	ldrb	r3, [r7, #0]
 800744a:	2b2e      	cmp	r3, #46	; 0x2e
 800744c:	d10c      	bne.n	8007468 <_svfiprintf_r+0x124>
 800744e:	787b      	ldrb	r3, [r7, #1]
 8007450:	2b2a      	cmp	r3, #42	; 0x2a
 8007452:	d133      	bne.n	80074bc <_svfiprintf_r+0x178>
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	9203      	str	r2, [sp, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	bfb8      	it	lt
 8007460:	f04f 33ff 	movlt.w	r3, #4294967295
 8007464:	3702      	adds	r7, #2
 8007466:	9305      	str	r3, [sp, #20]
 8007468:	4d2e      	ldr	r5, [pc, #184]	; (8007524 <_svfiprintf_r+0x1e0>)
 800746a:	7839      	ldrb	r1, [r7, #0]
 800746c:	2203      	movs	r2, #3
 800746e:	4628      	mov	r0, r5
 8007470:	f7f8 feb6 	bl	80001e0 <memchr>
 8007474:	b138      	cbz	r0, 8007486 <_svfiprintf_r+0x142>
 8007476:	2340      	movs	r3, #64	; 0x40
 8007478:	1b40      	subs	r0, r0, r5
 800747a:	fa03 f000 	lsl.w	r0, r3, r0
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	4303      	orrs	r3, r0
 8007482:	3701      	adds	r7, #1
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	7839      	ldrb	r1, [r7, #0]
 8007488:	4827      	ldr	r0, [pc, #156]	; (8007528 <_svfiprintf_r+0x1e4>)
 800748a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800748e:	2206      	movs	r2, #6
 8007490:	1c7e      	adds	r6, r7, #1
 8007492:	f7f8 fea5 	bl	80001e0 <memchr>
 8007496:	2800      	cmp	r0, #0
 8007498:	d038      	beq.n	800750c <_svfiprintf_r+0x1c8>
 800749a:	4b24      	ldr	r3, [pc, #144]	; (800752c <_svfiprintf_r+0x1e8>)
 800749c:	bb13      	cbnz	r3, 80074e4 <_svfiprintf_r+0x1a0>
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	3307      	adds	r3, #7
 80074a2:	f023 0307 	bic.w	r3, r3, #7
 80074a6:	3308      	adds	r3, #8
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ac:	444b      	add	r3, r9
 80074ae:	9309      	str	r3, [sp, #36]	; 0x24
 80074b0:	e76d      	b.n	800738e <_svfiprintf_r+0x4a>
 80074b2:	fb05 3202 	mla	r2, r5, r2, r3
 80074b6:	2001      	movs	r0, #1
 80074b8:	460f      	mov	r7, r1
 80074ba:	e7a6      	b.n	800740a <_svfiprintf_r+0xc6>
 80074bc:	2300      	movs	r3, #0
 80074be:	3701      	adds	r7, #1
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	4619      	mov	r1, r3
 80074c4:	250a      	movs	r5, #10
 80074c6:	4638      	mov	r0, r7
 80074c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074cc:	3a30      	subs	r2, #48	; 0x30
 80074ce:	2a09      	cmp	r2, #9
 80074d0:	d903      	bls.n	80074da <_svfiprintf_r+0x196>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c8      	beq.n	8007468 <_svfiprintf_r+0x124>
 80074d6:	9105      	str	r1, [sp, #20]
 80074d8:	e7c6      	b.n	8007468 <_svfiprintf_r+0x124>
 80074da:	fb05 2101 	mla	r1, r5, r1, r2
 80074de:	2301      	movs	r3, #1
 80074e0:	4607      	mov	r7, r0
 80074e2:	e7f0      	b.n	80074c6 <_svfiprintf_r+0x182>
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4622      	mov	r2, r4
 80074ea:	4b11      	ldr	r3, [pc, #68]	; (8007530 <_svfiprintf_r+0x1ec>)
 80074ec:	a904      	add	r1, sp, #16
 80074ee:	4640      	mov	r0, r8
 80074f0:	f7fe f80c 	bl	800550c <_printf_float>
 80074f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074f8:	4681      	mov	r9, r0
 80074fa:	d1d6      	bne.n	80074aa <_svfiprintf_r+0x166>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	065b      	lsls	r3, r3, #25
 8007500:	f53f af35 	bmi.w	800736e <_svfiprintf_r+0x2a>
 8007504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007506:	b01d      	add	sp, #116	; 0x74
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4622      	mov	r2, r4
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <_svfiprintf_r+0x1ec>)
 8007514:	a904      	add	r1, sp, #16
 8007516:	4640      	mov	r0, r8
 8007518:	f7fe faae 	bl	8005a78 <_printf_i>
 800751c:	e7ea      	b.n	80074f4 <_svfiprintf_r+0x1b0>
 800751e:	bf00      	nop
 8007520:	08007fec 	.word	0x08007fec
 8007524:	08007ff2 	.word	0x08007ff2
 8007528:	08007ff6 	.word	0x08007ff6
 800752c:	0800550d 	.word	0x0800550d
 8007530:	08007291 	.word	0x08007291

08007534 <__sfputc_r>:
 8007534:	6893      	ldr	r3, [r2, #8]
 8007536:	3b01      	subs	r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	b410      	push	{r4}
 800753c:	6093      	str	r3, [r2, #8]
 800753e:	da08      	bge.n	8007552 <__sfputc_r+0x1e>
 8007540:	6994      	ldr	r4, [r2, #24]
 8007542:	42a3      	cmp	r3, r4
 8007544:	db01      	blt.n	800754a <__sfputc_r+0x16>
 8007546:	290a      	cmp	r1, #10
 8007548:	d103      	bne.n	8007552 <__sfputc_r+0x1e>
 800754a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800754e:	f000 b985 	b.w	800785c <__swbuf_r>
 8007552:	6813      	ldr	r3, [r2, #0]
 8007554:	1c58      	adds	r0, r3, #1
 8007556:	6010      	str	r0, [r2, #0]
 8007558:	7019      	strb	r1, [r3, #0]
 800755a:	4608      	mov	r0, r1
 800755c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007560:	4770      	bx	lr

08007562 <__sfputs_r>:
 8007562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007564:	4606      	mov	r6, r0
 8007566:	460f      	mov	r7, r1
 8007568:	4614      	mov	r4, r2
 800756a:	18d5      	adds	r5, r2, r3
 800756c:	42ac      	cmp	r4, r5
 800756e:	d101      	bne.n	8007574 <__sfputs_r+0x12>
 8007570:	2000      	movs	r0, #0
 8007572:	e007      	b.n	8007584 <__sfputs_r+0x22>
 8007574:	463a      	mov	r2, r7
 8007576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ffda 	bl	8007534 <__sfputc_r>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d1f3      	bne.n	800756c <__sfputs_r+0xa>
 8007584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007588 <_vfiprintf_r>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	b09d      	sub	sp, #116	; 0x74
 8007590:	4617      	mov	r7, r2
 8007592:	461d      	mov	r5, r3
 8007594:	4606      	mov	r6, r0
 8007596:	b118      	cbz	r0, 80075a0 <_vfiprintf_r+0x18>
 8007598:	6983      	ldr	r3, [r0, #24]
 800759a:	b90b      	cbnz	r3, 80075a0 <_vfiprintf_r+0x18>
 800759c:	f7ff fa3c 	bl	8006a18 <__sinit>
 80075a0:	4b7c      	ldr	r3, [pc, #496]	; (8007794 <_vfiprintf_r+0x20c>)
 80075a2:	429c      	cmp	r4, r3
 80075a4:	d158      	bne.n	8007658 <_vfiprintf_r+0xd0>
 80075a6:	6874      	ldr	r4, [r6, #4]
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	0718      	lsls	r0, r3, #28
 80075ac:	d55e      	bpl.n	800766c <_vfiprintf_r+0xe4>
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d05b      	beq.n	800766c <_vfiprintf_r+0xe4>
 80075b4:	2300      	movs	r3, #0
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	2320      	movs	r3, #32
 80075ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075be:	2330      	movs	r3, #48	; 0x30
 80075c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c4:	9503      	str	r5, [sp, #12]
 80075c6:	f04f 0b01 	mov.w	fp, #1
 80075ca:	46b8      	mov	r8, r7
 80075cc:	4645      	mov	r5, r8
 80075ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075d2:	b10b      	cbz	r3, 80075d8 <_vfiprintf_r+0x50>
 80075d4:	2b25      	cmp	r3, #37	; 0x25
 80075d6:	d154      	bne.n	8007682 <_vfiprintf_r+0xfa>
 80075d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80075dc:	d00b      	beq.n	80075f6 <_vfiprintf_r+0x6e>
 80075de:	4653      	mov	r3, sl
 80075e0:	463a      	mov	r2, r7
 80075e2:	4621      	mov	r1, r4
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff ffbc 	bl	8007562 <__sfputs_r>
 80075ea:	3001      	adds	r0, #1
 80075ec:	f000 80c2 	beq.w	8007774 <_vfiprintf_r+0x1ec>
 80075f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f2:	4453      	add	r3, sl
 80075f4:	9309      	str	r3, [sp, #36]	; 0x24
 80075f6:	f898 3000 	ldrb.w	r3, [r8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80ba 	beq.w	8007774 <_vfiprintf_r+0x1ec>
 8007600:	2300      	movs	r3, #0
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	9307      	str	r3, [sp, #28]
 800760e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007612:	931a      	str	r3, [sp, #104]	; 0x68
 8007614:	46a8      	mov	r8, r5
 8007616:	2205      	movs	r2, #5
 8007618:	f818 1b01 	ldrb.w	r1, [r8], #1
 800761c:	485e      	ldr	r0, [pc, #376]	; (8007798 <_vfiprintf_r+0x210>)
 800761e:	f7f8 fddf 	bl	80001e0 <memchr>
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	bb78      	cbnz	r0, 8007686 <_vfiprintf_r+0xfe>
 8007626:	06d9      	lsls	r1, r3, #27
 8007628:	bf44      	itt	mi
 800762a:	2220      	movmi	r2, #32
 800762c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007630:	071a      	lsls	r2, r3, #28
 8007632:	bf44      	itt	mi
 8007634:	222b      	movmi	r2, #43	; 0x2b
 8007636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800763a:	782a      	ldrb	r2, [r5, #0]
 800763c:	2a2a      	cmp	r2, #42	; 0x2a
 800763e:	d02a      	beq.n	8007696 <_vfiprintf_r+0x10e>
 8007640:	9a07      	ldr	r2, [sp, #28]
 8007642:	46a8      	mov	r8, r5
 8007644:	2000      	movs	r0, #0
 8007646:	250a      	movs	r5, #10
 8007648:	4641      	mov	r1, r8
 800764a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800764e:	3b30      	subs	r3, #48	; 0x30
 8007650:	2b09      	cmp	r3, #9
 8007652:	d969      	bls.n	8007728 <_vfiprintf_r+0x1a0>
 8007654:	b360      	cbz	r0, 80076b0 <_vfiprintf_r+0x128>
 8007656:	e024      	b.n	80076a2 <_vfiprintf_r+0x11a>
 8007658:	4b50      	ldr	r3, [pc, #320]	; (800779c <_vfiprintf_r+0x214>)
 800765a:	429c      	cmp	r4, r3
 800765c:	d101      	bne.n	8007662 <_vfiprintf_r+0xda>
 800765e:	68b4      	ldr	r4, [r6, #8]
 8007660:	e7a2      	b.n	80075a8 <_vfiprintf_r+0x20>
 8007662:	4b4f      	ldr	r3, [pc, #316]	; (80077a0 <_vfiprintf_r+0x218>)
 8007664:	429c      	cmp	r4, r3
 8007666:	bf08      	it	eq
 8007668:	68f4      	ldreq	r4, [r6, #12]
 800766a:	e79d      	b.n	80075a8 <_vfiprintf_r+0x20>
 800766c:	4621      	mov	r1, r4
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f958 	bl	8007924 <__swsetup_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	d09d      	beq.n	80075b4 <_vfiprintf_r+0x2c>
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	b01d      	add	sp, #116	; 0x74
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	46a8      	mov	r8, r5
 8007684:	e7a2      	b.n	80075cc <_vfiprintf_r+0x44>
 8007686:	4a44      	ldr	r2, [pc, #272]	; (8007798 <_vfiprintf_r+0x210>)
 8007688:	1a80      	subs	r0, r0, r2
 800768a:	fa0b f000 	lsl.w	r0, fp, r0
 800768e:	4318      	orrs	r0, r3
 8007690:	9004      	str	r0, [sp, #16]
 8007692:	4645      	mov	r5, r8
 8007694:	e7be      	b.n	8007614 <_vfiprintf_r+0x8c>
 8007696:	9a03      	ldr	r2, [sp, #12]
 8007698:	1d11      	adds	r1, r2, #4
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	9103      	str	r1, [sp, #12]
 800769e:	2a00      	cmp	r2, #0
 80076a0:	db01      	blt.n	80076a6 <_vfiprintf_r+0x11e>
 80076a2:	9207      	str	r2, [sp, #28]
 80076a4:	e004      	b.n	80076b0 <_vfiprintf_r+0x128>
 80076a6:	4252      	negs	r2, r2
 80076a8:	f043 0302 	orr.w	r3, r3, #2
 80076ac:	9207      	str	r2, [sp, #28]
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	f898 3000 	ldrb.w	r3, [r8]
 80076b4:	2b2e      	cmp	r3, #46	; 0x2e
 80076b6:	d10e      	bne.n	80076d6 <_vfiprintf_r+0x14e>
 80076b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80076bc:	2b2a      	cmp	r3, #42	; 0x2a
 80076be:	d138      	bne.n	8007732 <_vfiprintf_r+0x1aa>
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	9203      	str	r2, [sp, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfb8      	it	lt
 80076cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d0:	f108 0802 	add.w	r8, r8, #2
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	4d33      	ldr	r5, [pc, #204]	; (80077a4 <_vfiprintf_r+0x21c>)
 80076d8:	f898 1000 	ldrb.w	r1, [r8]
 80076dc:	2203      	movs	r2, #3
 80076de:	4628      	mov	r0, r5
 80076e0:	f7f8 fd7e 	bl	80001e0 <memchr>
 80076e4:	b140      	cbz	r0, 80076f8 <_vfiprintf_r+0x170>
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	1b40      	subs	r0, r0, r5
 80076ea:	fa03 f000 	lsl.w	r0, r3, r0
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	4303      	orrs	r3, r0
 80076f2:	f108 0801 	add.w	r8, r8, #1
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	f898 1000 	ldrb.w	r1, [r8]
 80076fc:	482a      	ldr	r0, [pc, #168]	; (80077a8 <_vfiprintf_r+0x220>)
 80076fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007702:	2206      	movs	r2, #6
 8007704:	f108 0701 	add.w	r7, r8, #1
 8007708:	f7f8 fd6a 	bl	80001e0 <memchr>
 800770c:	2800      	cmp	r0, #0
 800770e:	d037      	beq.n	8007780 <_vfiprintf_r+0x1f8>
 8007710:	4b26      	ldr	r3, [pc, #152]	; (80077ac <_vfiprintf_r+0x224>)
 8007712:	bb1b      	cbnz	r3, 800775c <_vfiprintf_r+0x1d4>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	3307      	adds	r3, #7
 8007718:	f023 0307 	bic.w	r3, r3, #7
 800771c:	3308      	adds	r3, #8
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	444b      	add	r3, r9
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	e750      	b.n	80075ca <_vfiprintf_r+0x42>
 8007728:	fb05 3202 	mla	r2, r5, r2, r3
 800772c:	2001      	movs	r0, #1
 800772e:	4688      	mov	r8, r1
 8007730:	e78a      	b.n	8007648 <_vfiprintf_r+0xc0>
 8007732:	2300      	movs	r3, #0
 8007734:	f108 0801 	add.w	r8, r8, #1
 8007738:	9305      	str	r3, [sp, #20]
 800773a:	4619      	mov	r1, r3
 800773c:	250a      	movs	r5, #10
 800773e:	4640      	mov	r0, r8
 8007740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007744:	3a30      	subs	r2, #48	; 0x30
 8007746:	2a09      	cmp	r2, #9
 8007748:	d903      	bls.n	8007752 <_vfiprintf_r+0x1ca>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0c3      	beq.n	80076d6 <_vfiprintf_r+0x14e>
 800774e:	9105      	str	r1, [sp, #20]
 8007750:	e7c1      	b.n	80076d6 <_vfiprintf_r+0x14e>
 8007752:	fb05 2101 	mla	r1, r5, r1, r2
 8007756:	2301      	movs	r3, #1
 8007758:	4680      	mov	r8, r0
 800775a:	e7f0      	b.n	800773e <_vfiprintf_r+0x1b6>
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4622      	mov	r2, r4
 8007762:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <_vfiprintf_r+0x228>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	4630      	mov	r0, r6
 8007768:	f7fd fed0 	bl	800550c <_printf_float>
 800776c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007770:	4681      	mov	r9, r0
 8007772:	d1d5      	bne.n	8007720 <_vfiprintf_r+0x198>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	065b      	lsls	r3, r3, #25
 8007778:	f53f af7e 	bmi.w	8007678 <_vfiprintf_r+0xf0>
 800777c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777e:	e77d      	b.n	800767c <_vfiprintf_r+0xf4>
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4622      	mov	r2, r4
 8007786:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <_vfiprintf_r+0x228>)
 8007788:	a904      	add	r1, sp, #16
 800778a:	4630      	mov	r0, r6
 800778c:	f7fe f974 	bl	8005a78 <_printf_i>
 8007790:	e7ec      	b.n	800776c <_vfiprintf_r+0x1e4>
 8007792:	bf00      	nop
 8007794:	08007eb0 	.word	0x08007eb0
 8007798:	08007fec 	.word	0x08007fec
 800779c:	08007ed0 	.word	0x08007ed0
 80077a0:	08007e90 	.word	0x08007e90
 80077a4:	08007ff2 	.word	0x08007ff2
 80077a8:	08007ff6 	.word	0x08007ff6
 80077ac:	0800550d 	.word	0x0800550d
 80077b0:	08007563 	.word	0x08007563

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4c06      	ldr	r4, [pc, #24]	; (80077d0 <_sbrk_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4605      	mov	r5, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	6023      	str	r3, [r4, #0]
 80077c0:	f7fa f9a4 	bl	8001b0c <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	200002ec 	.word	0x200002ec

080077d4 <__sread>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	f000 fa9a 	bl	8007d14 <_read_r>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	bfab      	itete	ge
 80077e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077e6:	89a3      	ldrhlt	r3, [r4, #12]
 80077e8:	181b      	addge	r3, r3, r0
 80077ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ee:	bfac      	ite	ge
 80077f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077f2:	81a3      	strhlt	r3, [r4, #12]
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <__swrite>:
 80077f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	461f      	mov	r7, r3
 80077fc:	898b      	ldrh	r3, [r1, #12]
 80077fe:	05db      	lsls	r3, r3, #23
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	4616      	mov	r6, r2
 8007806:	d505      	bpl.n	8007814 <__swrite+0x1e>
 8007808:	2302      	movs	r3, #2
 800780a:	2200      	movs	r2, #0
 800780c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007810:	f000 f9b6 	bl	8007b80 <_lseek_r>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800781a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	4632      	mov	r2, r6
 8007822:	463b      	mov	r3, r7
 8007824:	4628      	mov	r0, r5
 8007826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782a:	f000 b869 	b.w	8007900 <_write_r>

0800782e <__sseek>:
 800782e:	b510      	push	{r4, lr}
 8007830:	460c      	mov	r4, r1
 8007832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007836:	f000 f9a3 	bl	8007b80 <_lseek_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	bf15      	itete	ne
 8007840:	6560      	strne	r0, [r4, #84]	; 0x54
 8007842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800784a:	81a3      	strheq	r3, [r4, #12]
 800784c:	bf18      	it	ne
 800784e:	81a3      	strhne	r3, [r4, #12]
 8007850:	bd10      	pop	{r4, pc}

08007852 <__sclose>:
 8007852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007856:	f000 b8d3 	b.w	8007a00 <_close_r>
	...

0800785c <__swbuf_r>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	460e      	mov	r6, r1
 8007860:	4614      	mov	r4, r2
 8007862:	4605      	mov	r5, r0
 8007864:	b118      	cbz	r0, 800786e <__swbuf_r+0x12>
 8007866:	6983      	ldr	r3, [r0, #24]
 8007868:	b90b      	cbnz	r3, 800786e <__swbuf_r+0x12>
 800786a:	f7ff f8d5 	bl	8006a18 <__sinit>
 800786e:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <__swbuf_r+0x98>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d12a      	bne.n	80078ca <__swbuf_r+0x6e>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	69a3      	ldr	r3, [r4, #24]
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	071a      	lsls	r2, r3, #28
 800787e:	d52e      	bpl.n	80078de <__swbuf_r+0x82>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b363      	cbz	r3, 80078de <__swbuf_r+0x82>
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	6820      	ldr	r0, [r4, #0]
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	6963      	ldr	r3, [r4, #20]
 800788c:	b2f6      	uxtb	r6, r6
 800788e:	4283      	cmp	r3, r0
 8007890:	4637      	mov	r7, r6
 8007892:	dc04      	bgt.n	800789e <__swbuf_r+0x42>
 8007894:	4621      	mov	r1, r4
 8007896:	4628      	mov	r0, r5
 8007898:	f000 f948 	bl	8007b2c <_fflush_r>
 800789c:	bb28      	cbnz	r0, 80078ea <__swbuf_r+0x8e>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	60a3      	str	r3, [r4, #8]
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	701e      	strb	r6, [r3, #0]
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	3001      	adds	r0, #1
 80078b0:	4283      	cmp	r3, r0
 80078b2:	d004      	beq.n	80078be <__swbuf_r+0x62>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	07db      	lsls	r3, r3, #31
 80078b8:	d519      	bpl.n	80078ee <__swbuf_r+0x92>
 80078ba:	2e0a      	cmp	r6, #10
 80078bc:	d117      	bne.n	80078ee <__swbuf_r+0x92>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f933 	bl	8007b2c <_fflush_r>
 80078c6:	b190      	cbz	r0, 80078ee <__swbuf_r+0x92>
 80078c8:	e00f      	b.n	80078ea <__swbuf_r+0x8e>
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <__swbuf_r+0x9c>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	d101      	bne.n	80078d4 <__swbuf_r+0x78>
 80078d0:	68ac      	ldr	r4, [r5, #8]
 80078d2:	e7d0      	b.n	8007876 <__swbuf_r+0x1a>
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <__swbuf_r+0xa0>)
 80078d6:	429c      	cmp	r4, r3
 80078d8:	bf08      	it	eq
 80078da:	68ec      	ldreq	r4, [r5, #12]
 80078dc:	e7cb      	b.n	8007876 <__swbuf_r+0x1a>
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 f81f 	bl	8007924 <__swsetup_r>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d0cc      	beq.n	8007884 <__swbuf_r+0x28>
 80078ea:	f04f 37ff 	mov.w	r7, #4294967295
 80078ee:	4638      	mov	r0, r7
 80078f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f2:	bf00      	nop
 80078f4:	08007eb0 	.word	0x08007eb0
 80078f8:	08007ed0 	.word	0x08007ed0
 80078fc:	08007e90 	.word	0x08007e90

08007900 <_write_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4c07      	ldr	r4, [pc, #28]	; (8007920 <_write_r+0x20>)
 8007904:	4605      	mov	r5, r0
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	2200      	movs	r2, #0
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7fa f8a6 	bl	8001a60 <_write>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_write_r+0x1e>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	b103      	cbz	r3, 800791e <_write_r+0x1e>
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	200002ec 	.word	0x200002ec

08007924 <__swsetup_r>:
 8007924:	4b32      	ldr	r3, [pc, #200]	; (80079f0 <__swsetup_r+0xcc>)
 8007926:	b570      	push	{r4, r5, r6, lr}
 8007928:	681d      	ldr	r5, [r3, #0]
 800792a:	4606      	mov	r6, r0
 800792c:	460c      	mov	r4, r1
 800792e:	b125      	cbz	r5, 800793a <__swsetup_r+0x16>
 8007930:	69ab      	ldr	r3, [r5, #24]
 8007932:	b913      	cbnz	r3, 800793a <__swsetup_r+0x16>
 8007934:	4628      	mov	r0, r5
 8007936:	f7ff f86f 	bl	8006a18 <__sinit>
 800793a:	4b2e      	ldr	r3, [pc, #184]	; (80079f4 <__swsetup_r+0xd0>)
 800793c:	429c      	cmp	r4, r3
 800793e:	d10f      	bne.n	8007960 <__swsetup_r+0x3c>
 8007940:	686c      	ldr	r4, [r5, #4]
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	b29a      	uxth	r2, r3
 8007948:	0715      	lsls	r5, r2, #28
 800794a:	d42c      	bmi.n	80079a6 <__swsetup_r+0x82>
 800794c:	06d0      	lsls	r0, r2, #27
 800794e:	d411      	bmi.n	8007974 <__swsetup_r+0x50>
 8007950:	2209      	movs	r2, #9
 8007952:	6032      	str	r2, [r6, #0]
 8007954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007958:	81a3      	strh	r3, [r4, #12]
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	e03e      	b.n	80079de <__swsetup_r+0xba>
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <__swsetup_r+0xd4>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <__swsetup_r+0x46>
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	e7eb      	b.n	8007942 <__swsetup_r+0x1e>
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <__swsetup_r+0xd8>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68ec      	ldreq	r4, [r5, #12]
 8007972:	e7e6      	b.n	8007942 <__swsetup_r+0x1e>
 8007974:	0751      	lsls	r1, r2, #29
 8007976:	d512      	bpl.n	800799e <__swsetup_r+0x7a>
 8007978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800797a:	b141      	cbz	r1, 800798e <__swsetup_r+0x6a>
 800797c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007980:	4299      	cmp	r1, r3
 8007982:	d002      	beq.n	800798a <__swsetup_r+0x66>
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff fbdb 	bl	8007140 <_free_r>
 800798a:	2300      	movs	r3, #0
 800798c:	6363      	str	r3, [r4, #52]	; 0x34
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	2300      	movs	r3, #0
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f043 0308 	orr.w	r3, r3, #8
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	b94b      	cbnz	r3, 80079be <__swsetup_r+0x9a>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b4:	d003      	beq.n	80079be <__swsetup_r+0x9a>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f917 	bl	8007bec <__smakebuf_r>
 80079be:	89a2      	ldrh	r2, [r4, #12]
 80079c0:	f012 0301 	ands.w	r3, r2, #1
 80079c4:	d00c      	beq.n	80079e0 <__swsetup_r+0xbc>
 80079c6:	2300      	movs	r3, #0
 80079c8:	60a3      	str	r3, [r4, #8]
 80079ca:	6963      	ldr	r3, [r4, #20]
 80079cc:	425b      	negs	r3, r3
 80079ce:	61a3      	str	r3, [r4, #24]
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	b953      	cbnz	r3, 80079ea <__swsetup_r+0xc6>
 80079d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80079dc:	d1ba      	bne.n	8007954 <__swsetup_r+0x30>
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	0792      	lsls	r2, r2, #30
 80079e2:	bf58      	it	pl
 80079e4:	6963      	ldrpl	r3, [r4, #20]
 80079e6:	60a3      	str	r3, [r4, #8]
 80079e8:	e7f2      	b.n	80079d0 <__swsetup_r+0xac>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e7f7      	b.n	80079de <__swsetup_r+0xba>
 80079ee:	bf00      	nop
 80079f0:	2000000c 	.word	0x2000000c
 80079f4:	08007eb0 	.word	0x08007eb0
 80079f8:	08007ed0 	.word	0x08007ed0
 80079fc:	08007e90 	.word	0x08007e90

08007a00 <_close_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4c06      	ldr	r4, [pc, #24]	; (8007a1c <_close_r+0x1c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4605      	mov	r5, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	f7fa f84a 	bl	8001aa4 <_close>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_close_r+0x1a>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_close_r+0x1a>
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	200002ec 	.word	0x200002ec

08007a20 <__sflush_r>:
 8007a20:	898a      	ldrh	r2, [r1, #12]
 8007a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a26:	4605      	mov	r5, r0
 8007a28:	0710      	lsls	r0, r2, #28
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	d458      	bmi.n	8007ae0 <__sflush_r+0xc0>
 8007a2e:	684b      	ldr	r3, [r1, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	dc05      	bgt.n	8007a40 <__sflush_r+0x20>
 8007a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dc02      	bgt.n	8007a40 <__sflush_r+0x20>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	d0f9      	beq.n	8007a3a <__sflush_r+0x1a>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a4c:	682f      	ldr	r7, [r5, #0]
 8007a4e:	6a21      	ldr	r1, [r4, #32]
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	d032      	beq.n	8007aba <__sflush_r+0x9a>
 8007a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	075a      	lsls	r2, r3, #29
 8007a5a:	d505      	bpl.n	8007a68 <__sflush_r+0x48>
 8007a5c:	6863      	ldr	r3, [r4, #4]
 8007a5e:	1ac0      	subs	r0, r0, r3
 8007a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a62:	b10b      	cbz	r3, 8007a68 <__sflush_r+0x48>
 8007a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a66:	1ac0      	subs	r0, r0, r3
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6e:	6a21      	ldr	r1, [r4, #32]
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	d106      	bne.n	8007a88 <__sflush_r+0x68>
 8007a7a:	6829      	ldr	r1, [r5, #0]
 8007a7c:	291d      	cmp	r1, #29
 8007a7e:	d848      	bhi.n	8007b12 <__sflush_r+0xf2>
 8007a80:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <__sflush_r+0x108>)
 8007a82:	40ca      	lsrs	r2, r1
 8007a84:	07d6      	lsls	r6, r2, #31
 8007a86:	d544      	bpl.n	8007b12 <__sflush_r+0xf2>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	6062      	str	r2, [r4, #4]
 8007a8c:	04d9      	lsls	r1, r3, #19
 8007a8e:	6922      	ldr	r2, [r4, #16]
 8007a90:	6022      	str	r2, [r4, #0]
 8007a92:	d504      	bpl.n	8007a9e <__sflush_r+0x7e>
 8007a94:	1c42      	adds	r2, r0, #1
 8007a96:	d101      	bne.n	8007a9c <__sflush_r+0x7c>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b903      	cbnz	r3, 8007a9e <__sflush_r+0x7e>
 8007a9c:	6560      	str	r0, [r4, #84]	; 0x54
 8007a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa0:	602f      	str	r7, [r5, #0]
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	d0c9      	beq.n	8007a3a <__sflush_r+0x1a>
 8007aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d002      	beq.n	8007ab4 <__sflush_r+0x94>
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7ff fb46 	bl	8007140 <_free_r>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	6360      	str	r0, [r4, #52]	; 0x34
 8007ab8:	e7c0      	b.n	8007a3c <__sflush_r+0x1c>
 8007aba:	2301      	movs	r3, #1
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b0      	blx	r6
 8007ac0:	1c41      	adds	r1, r0, #1
 8007ac2:	d1c8      	bne.n	8007a56 <__sflush_r+0x36>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0c5      	beq.n	8007a56 <__sflush_r+0x36>
 8007aca:	2b1d      	cmp	r3, #29
 8007acc:	d001      	beq.n	8007ad2 <__sflush_r+0xb2>
 8007ace:	2b16      	cmp	r3, #22
 8007ad0:	d101      	bne.n	8007ad6 <__sflush_r+0xb6>
 8007ad2:	602f      	str	r7, [r5, #0]
 8007ad4:	e7b1      	b.n	8007a3a <__sflush_r+0x1a>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	e7ad      	b.n	8007a3c <__sflush_r+0x1c>
 8007ae0:	690f      	ldr	r7, [r1, #16]
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	d0a9      	beq.n	8007a3a <__sflush_r+0x1a>
 8007ae6:	0793      	lsls	r3, r2, #30
 8007ae8:	680e      	ldr	r6, [r1, #0]
 8007aea:	bf08      	it	eq
 8007aec:	694b      	ldreq	r3, [r1, #20]
 8007aee:	600f      	str	r7, [r1, #0]
 8007af0:	bf18      	it	ne
 8007af2:	2300      	movne	r3, #0
 8007af4:	eba6 0807 	sub.w	r8, r6, r7
 8007af8:	608b      	str	r3, [r1, #8]
 8007afa:	f1b8 0f00 	cmp.w	r8, #0
 8007afe:	dd9c      	ble.n	8007a3a <__sflush_r+0x1a>
 8007b00:	4643      	mov	r3, r8
 8007b02:	463a      	mov	r2, r7
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	dc06      	bgt.n	8007b1e <__sflush_r+0xfe>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e78e      	b.n	8007a3c <__sflush_r+0x1c>
 8007b1e:	4407      	add	r7, r0
 8007b20:	eba8 0800 	sub.w	r8, r8, r0
 8007b24:	e7e9      	b.n	8007afa <__sflush_r+0xda>
 8007b26:	bf00      	nop
 8007b28:	20400001 	.word	0x20400001

08007b2c <_fflush_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	690b      	ldr	r3, [r1, #16]
 8007b30:	4605      	mov	r5, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	b1db      	cbz	r3, 8007b6e <_fflush_r+0x42>
 8007b36:	b118      	cbz	r0, 8007b40 <_fflush_r+0x14>
 8007b38:	6983      	ldr	r3, [r0, #24]
 8007b3a:	b90b      	cbnz	r3, 8007b40 <_fflush_r+0x14>
 8007b3c:	f7fe ff6c 	bl	8006a18 <__sinit>
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <_fflush_r+0x48>)
 8007b42:	429c      	cmp	r4, r3
 8007b44:	d109      	bne.n	8007b5a <_fflush_r+0x2e>
 8007b46:	686c      	ldr	r4, [r5, #4]
 8007b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4c:	b17b      	cbz	r3, 8007b6e <_fflush_r+0x42>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4628      	mov	r0, r5
 8007b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b56:	f7ff bf63 	b.w	8007a20 <__sflush_r>
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <_fflush_r+0x4c>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	d101      	bne.n	8007b64 <_fflush_r+0x38>
 8007b60:	68ac      	ldr	r4, [r5, #8]
 8007b62:	e7f1      	b.n	8007b48 <_fflush_r+0x1c>
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <_fflush_r+0x50>)
 8007b66:	429c      	cmp	r4, r3
 8007b68:	bf08      	it	eq
 8007b6a:	68ec      	ldreq	r4, [r5, #12]
 8007b6c:	e7ec      	b.n	8007b48 <_fflush_r+0x1c>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	bf00      	nop
 8007b74:	08007eb0 	.word	0x08007eb0
 8007b78:	08007ed0 	.word	0x08007ed0
 8007b7c:	08007e90 	.word	0x08007e90

08007b80 <_lseek_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4c07      	ldr	r4, [pc, #28]	; (8007ba0 <_lseek_r+0x20>)
 8007b84:	4605      	mov	r5, r0
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f7f9 ffaf 	bl	8001af2 <_lseek>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_lseek_r+0x1e>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_lseek_r+0x1e>
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200002ec 	.word	0x200002ec

08007ba4 <__swhatbuf_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	460e      	mov	r6, r1
 8007ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	b096      	sub	sp, #88	; 0x58
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	461d      	mov	r5, r3
 8007bb4:	da07      	bge.n	8007bc6 <__swhatbuf_r+0x22>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	89b3      	ldrh	r3, [r6, #12]
 8007bbc:	061a      	lsls	r2, r3, #24
 8007bbe:	d410      	bmi.n	8007be2 <__swhatbuf_r+0x3e>
 8007bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc4:	e00e      	b.n	8007be4 <__swhatbuf_r+0x40>
 8007bc6:	466a      	mov	r2, sp
 8007bc8:	f000 f8c4 	bl	8007d54 <_fstat_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	dbf2      	blt.n	8007bb6 <__swhatbuf_r+0x12>
 8007bd0:	9a01      	ldr	r2, [sp, #4]
 8007bd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bda:	425a      	negs	r2, r3
 8007bdc:	415a      	adcs	r2, r3
 8007bde:	602a      	str	r2, [r5, #0]
 8007be0:	e7ee      	b.n	8007bc0 <__swhatbuf_r+0x1c>
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	2000      	movs	r0, #0
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	b016      	add	sp, #88	; 0x58
 8007bea:	bd70      	pop	{r4, r5, r6, pc}

08007bec <__smakebuf_r>:
 8007bec:	898b      	ldrh	r3, [r1, #12]
 8007bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bf0:	079d      	lsls	r5, r3, #30
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	d507      	bpl.n	8007c08 <__smakebuf_r+0x1c>
 8007bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	2301      	movs	r3, #1
 8007c02:	6163      	str	r3, [r4, #20]
 8007c04:	b002      	add	sp, #8
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	ab01      	add	r3, sp, #4
 8007c0a:	466a      	mov	r2, sp
 8007c0c:	f7ff ffca 	bl	8007ba4 <__swhatbuf_r>
 8007c10:	9900      	ldr	r1, [sp, #0]
 8007c12:	4605      	mov	r5, r0
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7ff fae1 	bl	80071dc <_malloc_r>
 8007c1a:	b948      	cbnz	r0, 8007c30 <__smakebuf_r+0x44>
 8007c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c20:	059a      	lsls	r2, r3, #22
 8007c22:	d4ef      	bmi.n	8007c04 <__smakebuf_r+0x18>
 8007c24:	f023 0303 	bic.w	r3, r3, #3
 8007c28:	f043 0302 	orr.w	r3, r3, #2
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	e7e3      	b.n	8007bf8 <__smakebuf_r+0xc>
 8007c30:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <__smakebuf_r+0x7c>)
 8007c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	6020      	str	r0, [r4, #0]
 8007c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	6163      	str	r3, [r4, #20]
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	6120      	str	r0, [r4, #16]
 8007c46:	b15b      	cbz	r3, 8007c60 <__smakebuf_r+0x74>
 8007c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 f893 	bl	8007d78 <_isatty_r>
 8007c52:	b128      	cbz	r0, 8007c60 <__smakebuf_r+0x74>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	431d      	orrs	r5, r3
 8007c64:	81a5      	strh	r5, [r4, #12]
 8007c66:	e7cd      	b.n	8007c04 <__smakebuf_r+0x18>
 8007c68:	080069e1 	.word	0x080069e1

08007c6c <__ascii_mbtowc>:
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	b901      	cbnz	r1, 8007c72 <__ascii_mbtowc+0x6>
 8007c70:	a901      	add	r1, sp, #4
 8007c72:	b142      	cbz	r2, 8007c86 <__ascii_mbtowc+0x1a>
 8007c74:	b14b      	cbz	r3, 8007c8a <__ascii_mbtowc+0x1e>
 8007c76:	7813      	ldrb	r3, [r2, #0]
 8007c78:	600b      	str	r3, [r1, #0]
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	1c10      	adds	r0, r2, #0
 8007c7e:	bf18      	it	ne
 8007c80:	2001      	movne	r0, #1
 8007c82:	b002      	add	sp, #8
 8007c84:	4770      	bx	lr
 8007c86:	4610      	mov	r0, r2
 8007c88:	e7fb      	b.n	8007c82 <__ascii_mbtowc+0x16>
 8007c8a:	f06f 0001 	mvn.w	r0, #1
 8007c8e:	e7f8      	b.n	8007c82 <__ascii_mbtowc+0x16>

08007c90 <memmove>:
 8007c90:	4288      	cmp	r0, r1
 8007c92:	b510      	push	{r4, lr}
 8007c94:	eb01 0302 	add.w	r3, r1, r2
 8007c98:	d807      	bhi.n	8007caa <memmove+0x1a>
 8007c9a:	1e42      	subs	r2, r0, #1
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	d00a      	beq.n	8007cb6 <memmove+0x26>
 8007ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ca8:	e7f8      	b.n	8007c9c <memmove+0xc>
 8007caa:	4283      	cmp	r3, r0
 8007cac:	d9f5      	bls.n	8007c9a <memmove+0xa>
 8007cae:	1881      	adds	r1, r0, r2
 8007cb0:	1ad2      	subs	r2, r2, r3
 8007cb2:	42d3      	cmn	r3, r2
 8007cb4:	d100      	bne.n	8007cb8 <memmove+0x28>
 8007cb6:	bd10      	pop	{r4, pc}
 8007cb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007cc0:	e7f7      	b.n	8007cb2 <memmove+0x22>

08007cc2 <__malloc_lock>:
 8007cc2:	4770      	bx	lr

08007cc4 <__malloc_unlock>:
 8007cc4:	4770      	bx	lr

08007cc6 <_realloc_r>:
 8007cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc8:	4607      	mov	r7, r0
 8007cca:	4614      	mov	r4, r2
 8007ccc:	460e      	mov	r6, r1
 8007cce:	b921      	cbnz	r1, 8007cda <_realloc_r+0x14>
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cd6:	f7ff ba81 	b.w	80071dc <_malloc_r>
 8007cda:	b922      	cbnz	r2, 8007ce6 <_realloc_r+0x20>
 8007cdc:	f7ff fa30 	bl	8007140 <_free_r>
 8007ce0:	4625      	mov	r5, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce6:	f000 f857 	bl	8007d98 <_malloc_usable_size_r>
 8007cea:	42a0      	cmp	r0, r4
 8007cec:	d20f      	bcs.n	8007d0e <_realloc_r+0x48>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff fa73 	bl	80071dc <_malloc_r>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0f2      	beq.n	8007ce2 <_realloc_r+0x1c>
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4622      	mov	r2, r4
 8007d00:	f7fe ff2a 	bl	8006b58 <memcpy>
 8007d04:	4631      	mov	r1, r6
 8007d06:	4638      	mov	r0, r7
 8007d08:	f7ff fa1a 	bl	8007140 <_free_r>
 8007d0c:	e7e9      	b.n	8007ce2 <_realloc_r+0x1c>
 8007d0e:	4635      	mov	r5, r6
 8007d10:	e7e7      	b.n	8007ce2 <_realloc_r+0x1c>
	...

08007d14 <_read_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4c07      	ldr	r4, [pc, #28]	; (8007d34 <_read_r+0x20>)
 8007d18:	4605      	mov	r5, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	6022      	str	r2, [r4, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f7f9 fe7e 	bl	8001a24 <_read>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_read_r+0x1e>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_read_r+0x1e>
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200002ec 	.word	0x200002ec

08007d38 <__ascii_wctomb>:
 8007d38:	b149      	cbz	r1, 8007d4e <__ascii_wctomb+0x16>
 8007d3a:	2aff      	cmp	r2, #255	; 0xff
 8007d3c:	bf85      	ittet	hi
 8007d3e:	238a      	movhi	r3, #138	; 0x8a
 8007d40:	6003      	strhi	r3, [r0, #0]
 8007d42:	700a      	strbls	r2, [r1, #0]
 8007d44:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d48:	bf98      	it	ls
 8007d4a:	2001      	movls	r0, #1
 8007d4c:	4770      	bx	lr
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4770      	bx	lr
	...

08007d54 <_fstat_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4c07      	ldr	r4, [pc, #28]	; (8007d74 <_fstat_r+0x20>)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	f7f9 feab 	bl	8001abc <_fstat>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d102      	bne.n	8007d70 <_fstat_r+0x1c>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	b103      	cbz	r3, 8007d70 <_fstat_r+0x1c>
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	bd38      	pop	{r3, r4, r5, pc}
 8007d72:	bf00      	nop
 8007d74:	200002ec 	.word	0x200002ec

08007d78 <_isatty_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4c06      	ldr	r4, [pc, #24]	; (8007d94 <_isatty_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	f7f9 feaa 	bl	8001adc <_isatty>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_isatty_r+0x1a>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_isatty_r+0x1a>
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	200002ec 	.word	0x200002ec

08007d98 <_malloc_usable_size_r>:
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f18      	subs	r0, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfbc      	itt	lt
 8007da2:	580b      	ldrlt	r3, [r1, r0]
 8007da4:	18c0      	addlt	r0, r0, r3
 8007da6:	4770      	bx	lr

08007da8 <_init>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr

08007db4 <_fini>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	bf00      	nop
 8007db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dba:	bc08      	pop	{r3}
 8007dbc:	469e      	mov	lr, r3
 8007dbe:	4770      	bx	lr
