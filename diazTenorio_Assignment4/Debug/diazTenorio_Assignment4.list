
diazTenorio_Assignment4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080094c0  080094c0  000194c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800995c  0800995c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009964  08009964  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800996c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08009b48  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08009b48  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d038  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f6e  00000000  00000000  0002d244  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a78  00000000  00000000  0002f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  0002fc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a88  00000000  00000000  000305a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000973e  00000000  00000000  00052028  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c296f  00000000  00000000  0005b766  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e0d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f80  00000000  00000000  0011e150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094a8 	.word	0x080094a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080094a8 	.word	0x080094a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 faf4 	bl	8002588 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 fae4 	bl	8002588 <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fe0:	f7ff ffd2 	bl	8000f88 <GPIO_SetBits>
 8000fe4:	e003      	b.n	8000fee <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fea:	f7ff ffdd 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000ffc:	f7ff ffc4 	bl	8000f88 <GPIO_SetBits>
 8001000:	e003      	b.n	800100a <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001002:	2120      	movs	r1, #32
 8001004:	4817      	ldr	r0, [pc, #92]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001006:	f7ff ffcf 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001018:	f7ff ffb6 	bl	8000f88 <GPIO_SetBits>
 800101c:	e003      	b.n	8001026 <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001022:	f7ff ffc1 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da04      	bge.n	8001038 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001032:	f7ff ffa9 	bl	8000f88 <GPIO_SetBits>
 8001036:	e003      	b.n	8001040 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 800103c:	f7ff ffb4 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001040:	2201      	movs	r2, #1
 8001042:	2102      	movs	r1, #2
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001046:	f001 fa9f 	bl	8002588 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800104a:	2002      	movs	r0, #2
 800104c:	f001 f812 	bl	8002074 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001056:	f001 fa97 	bl	8002588 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	48000400 	.word	0x48000400

08001068 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800107c:	2110      	movs	r1, #16
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 8001080:	f7ff ff82 	bl	8000f88 <GPIO_SetBits>
 8001084:	e003      	b.n	800108e <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001086:	2110      	movs	r1, #16
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800108a:	f7ff ff8d 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001098:	2120      	movs	r1, #32
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800109c:	f7ff ff74 	bl	8000f88 <GPIO_SetBits>
 80010a0:	e003      	b.n	80010aa <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80010a2:	2120      	movs	r1, #32
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010a6:	f7ff ff7f 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010b8:	f7ff ff66 	bl	8000f88 <GPIO_SetBits>
 80010bc:	e003      	b.n	80010c6 <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010c2:	f7ff ff71 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010d4:	f7ff ff58 	bl	8000f88 <GPIO_SetBits>
 80010d8:	e003      	b.n	80010e2 <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010de:	f7ff ff63 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010e8:	f001 fa4e 	bl	8002588 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80010ec:	2002      	movs	r0, #2
 80010ee:	f000 ffc1 	bl	8002074 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010f8:	f001 fa46 	bl	8002588 <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400

08001108 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff57 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffa3 	bl	8001068 <hd44780_wr_lo_nibble>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <hd44780_wr_cmd+0x24>)
 800113c:	f001 fa24 	bl	8002588 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffe0 	bl	8001108 <hd44780_write>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400

08001154 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 800115e:	2201      	movs	r2, #1
 8001160:	2101      	movs	r1, #1
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <hd44780_wr_data+0x24>)
 8001164:	f001 fa10 	bl	8002588 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffcc 	bl	8001108 <hd44780_write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	48000400 	.word	0x48000400

0800117c <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HD44780_Init+0xbc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <HD44780_Init+0xbc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HD44780_Init+0xbc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800119a:	23f0      	movs	r3, #240	; 0xf0
 800119c:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <HD44780_Init+0xc0>)
 80011b0:	f001 f868 	bl	8002284 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80011b4:	230b      	movs	r3, #11
 80011b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <HD44780_Init+0xc0>)
 80011ca:	f001 f85b 	bl	8002284 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <HD44780_Init+0xc0>)
 80011d4:	f001 f9d8 	bl	8002588 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HD44780_Init+0xc0>)
 80011de:	f001 f9d3 	bl	8002588 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <HD44780_Init+0xc0>)
 80011e8:	f001 f9ce 	bl	8002588 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80011ec:	2010      	movs	r0, #16
 80011ee:	f000 ff41 	bl	8002074 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f7ff fee8 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80011f8:	2005      	movs	r0, #5
 80011fa:	f000 ff3b 	bl	8002074 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011fe:	2030      	movs	r0, #48	; 0x30
 8001200:	f7ff fee2 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8001204:	2001      	movs	r0, #1
 8001206:	f000 ff35 	bl	8002074 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f7ff fedc 	bl	8000fc8 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8001210:	2020      	movs	r0, #32
 8001212:	f7ff fed9 	bl	8000fc8 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f7ff ff88 	bl	800112c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 800121c:	200c      	movs	r0, #12
 800121e:	f7ff ff85 	bl	800112c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff82 	bl	800112c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff ff7f 	bl	800112c <hd44780_wr_cmd>

}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff81 	bl	8001154 <hd44780_wr_data>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d901      	bls.n	800127a <HD44780_GotoXY+0x1e>
		x = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d901      	bls.n	8001284 <HD44780_GotoXY+0x28>
		y = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d816      	bhi.n	80012b8 <HD44780_GotoXY+0x5c>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HD44780_GotoXY+0x34>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a7 	.word	0x080012a7
 8001298:	080012ad 	.word	0x080012ad
 800129c:	080012b3 	.word	0x080012b3
	case 0:
		copy_y = 0x80;
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	73fb      	strb	r3, [r7, #15]
		break;
 80012a4:	e008      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	73fb      	strb	r3, [r7, #15]
		break;
 80012aa:	e005      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 80012ac:	2394      	movs	r3, #148	; 0x94
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e002      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 80012b2:	23d4      	movs	r3, #212	; 0xd4
 80012b4:	73fb      	strb	r3, [r7, #15]
		break;
 80012b6:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4413      	add	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <hd44780_wr_cmd>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop

080012d0 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffab 	bl	8001240 <HD44780_PutChar>
		i++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ef      	bne.n	80012dc <HD44780_PutStr+0xc>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ff0f 	bl	800112c <hd44780_wr_cmd>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <deBounceInit>:
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}


void deBounceInit(uint16_t pin, char port, int8_t mode)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	460b      	mov	r3, r1
 8001320:	717b      	strb	r3, [r7, #5]
 8001322:	4613      	mov	r3, r2
 8001324:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struc
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]

	switch(mode)
 800133e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <deBounceInit+0x38>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <deBounceInit+0x3e>
 800134a:	e005      	b.n	8001358 <deBounceInit+0x44>
	{
		case 0:
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
			break;
 8001350:	e002      	b.n	8001358 <deBounceInit+0x44>
		case 1:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
			break;
 8001356:	bf00      	nop
	}

	switch(port)
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	2b42      	cmp	r3, #66	; 0x42
 800135c:	d00c      	beq.n	8001378 <deBounceInit+0x64>
 800135e:	2b43      	cmp	r3, #67	; 0x43
 8001360:	d011      	beq.n	8001386 <deBounceInit+0x72>
 8001362:	2b41      	cmp	r3, #65	; 0x41
 8001364:	d000      	beq.n	8001368 <deBounceInit+0x54>
		case 'C':
				HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
				break;
	}

}
 8001366:	e015      	b.n	8001394 <deBounceInit+0x80>
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f000 ff87 	bl	8002284 <HAL_GPIO_Init>
			break;
 8001376:	e00d      	b.n	8001394 <deBounceInit+0x80>
				HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <deBounceInit+0x88>)
 8001380:	f000 ff80 	bl	8002284 <HAL_GPIO_Init>
				break;
 8001384:	e006      	b.n	8001394 <deBounceInit+0x80>
				HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <deBounceInit+0x8c>)
 800138e:	f000 ff79 	bl	8002284 <HAL_GPIO_Init>
				break;
 8001392:	bf00      	nop
}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800

080013a4 <deBounceReadPin>:

int8_t deBounceReadPin(uint16_t pin, char port, int8_t mode)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	717b      	strb	r3, [r7, #5]
 80013b2:	4613      	mov	r3, r2
 80013b4:	713b      	strb	r3, [r7, #4]


	GPIO_PinState pinState = GPIO_PIN_RESET; // pin status
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]

	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval = 50; // stable interval
 80013ba:	2332      	movs	r3, #50	; 0x32
 80013bc:	73fb      	strb	r3, [r7, #15]

	int32_t msTimeStamp=HAL_GetTick();
 80013be:	f000 fe4d 	bl	800205c <HAL_GetTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	613b      	str	r3, [r7, #16]

	switch(port)
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	2b42      	cmp	r3, #66	; 0x42
 80013ca:	d00c      	beq.n	80013e6 <deBounceReadPin+0x42>
 80013cc:	2b43      	cmp	r3, #67	; 0x43
 80013ce:	d012      	beq.n	80013f6 <deBounceReadPin+0x52>
 80013d0:	2b41      	cmp	r3, #65	; 0x41
 80013d2:	d118      	bne.n	8001406 <deBounceReadPin+0x62>
		{
			case 'A':

				pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f001 f8bc 	bl	8002558 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]
				break;
 80013e4:	e00f      	b.n	8001406 <deBounceReadPin+0x62>
			case 'B':
				pinState = HAL_GPIO_ReadPin(GPIOB, pin);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	482b      	ldr	r0, [pc, #172]	; (8001498 <deBounceReadPin+0xf4>)
 80013ec:	f001 f8b4 	bl	8002558 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	75fb      	strb	r3, [r7, #23]
					break;
 80013f4:	e007      	b.n	8001406 <deBounceReadPin+0x62>
			case 'C':
				pinState = HAL_GPIO_ReadPin(GPIOC, pin);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4828      	ldr	r0, [pc, #160]	; (800149c <deBounceReadPin+0xf8>)
 80013fc:	f001 f8ac 	bl	8002558 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	75fb      	strb	r3, [r7, #23]
					break;
 8001404:	bf00      	nop
		}

	if(pinState == GPIO_PIN_RESET) //check if the button  is pressed
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <deBounceReadPin+0x6e>
	{
		pinStateWeAreLookingFor = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	75bb      	strb	r3, [r7, #22]
 8001410:	e033      	b.n	800147a <deBounceReadPin+0xd6>
	}
	else
	{
		pinStateWeAreLookingFor = 1;
 8001412:	2301      	movs	r3, #1
 8001414:	75bb      	strb	r3, [r7, #22]
	}

	while(HAL_GetTick() < (msTimeStamp + stableInterval))
 8001416:	e030      	b.n	800147a <deBounceReadPin+0xd6>
	{

		switch(port)
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	2b42      	cmp	r3, #66	; 0x42
 800141c:	d00c      	beq.n	8001438 <deBounceReadPin+0x94>
 800141e:	2b43      	cmp	r3, #67	; 0x43
 8001420:	d012      	beq.n	8001448 <deBounceReadPin+0xa4>
 8001422:	2b41      	cmp	r3, #65	; 0x41
 8001424:	d118      	bne.n	8001458 <deBounceReadPin+0xb4>
		{
			case 'A':

				pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f001 f893 	bl	8002558 <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
				break;
 8001436:	e00f      	b.n	8001458 <deBounceReadPin+0xb4>
			case 'B':
				pinState = HAL_GPIO_ReadPin(GPIOB, pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4619      	mov	r1, r3
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <deBounceReadPin+0xf4>)
 800143e:	f001 f88b 	bl	8002558 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
					break;
 8001446:	e007      	b.n	8001458 <deBounceReadPin+0xb4>
			case 'C':
				pinState = HAL_GPIO_ReadPin(GPIOC, pin);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <deBounceReadPin+0xf8>)
 800144e:	f001 f883 	bl	8002558 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	75fb      	strb	r3, [r7, #23]
					break;
 8001456:	bf00      	nop
		}
		if (pinState != pinStateWeAreLookingFor)
 8001458:	7dfa      	ldrb	r2, [r7, #23]
 800145a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800145e:	429a      	cmp	r2, r3
 8001460:	d00b      	beq.n	800147a <deBounceReadPin+0xd6>
		{
			pinStateWeAreLookingFor =! pinStateWeAreLookingFor;
 8001462:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf0c      	ite	eq
 800146a:	2301      	moveq	r3, #1
 800146c:	2300      	movne	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	75bb      	strb	r3, [r7, #22]
			msTimeStamp = HAL_GetTick();
 8001472:	f000 fdf3 	bl	800205c <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	613b      	str	r3, [r7, #16]
	while(HAL_GetTick() < (msTimeStamp + stableInterval))
 800147a:	f000 fdef 	bl	800205c <HAL_GetTick>
 800147e:	4601      	mov	r1, r0
 8001480:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4413      	add	r3, r2
 8001488:	4299      	cmp	r1, r3
 800148a:	d3c5      	bcc.n	8001418 <deBounceReadPin+0x74>
		}
	}

	return (pinStateWeAreLookingFor);
 800148c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b091      	sub	sp, #68	; 0x44
 80014a4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fd74 	bl	8001f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f96d 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 fa1d 	bl	80018ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b2:	f000 f9eb 	bl	800188c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init();
 80014b6:	f7ff fe61 	bl	800117c <HD44780_Init>

  //Initializing push buttons variables
  	char port = 'A';
 80014ba:	2341      	movs	r3, #65	; 0x41
 80014bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  	int8_t mode = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  	int16_t buttonsPin[] = {GPIO_PIN_3,GPIO_PIN_4,GPIO_PIN_7,GPIO_PIN_8};// pins for the PB
 80014c6:	4aa3      	ldr	r2, [pc, #652]	; (8001754 <main+0x2b4>)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d0:	e883 0003 	stmia.w	r3, {r0, r1}
  	int8_t numberOfButtons = (sizeof(buttonsPin))/(sizeof(buttonsPin[0]));// number of PBs used
 80014d4:	2304      	movs	r3, #4
 80014d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  	deBounceInit(buttonsPin[0], port, mode); //push1 PA3
 80014da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 80014e4:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff13 	bl	8001314 <deBounceInit>
  	deBounceInit(buttonsPin[1], port, mode); //push2 PA4
 80014ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 80014f8:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff09 	bl	8001314 <deBounceInit>
  	deBounceInit(buttonsPin[2], port, mode); //push3 PA7
 8001502:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001506:	b29b      	uxth	r3, r3
 8001508:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 800150c:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff feff 	bl	8001314 <deBounceInit>
	deBounceInit(buttonsPin[3], port, mode); //pushOK PA8
 8001516:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 8001520:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fef5 	bl	8001314 <deBounceInit>

  // initializing variables
	int8_t state = 1; //state machine state
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	const int processingTime = 10000; //delay time when is processing
 8001530:	f242 7310 	movw	r3, #10000	; 0x2710
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
	const int pinSize = 4;//pin length
 8001536:	2304      	movs	r3, #4
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
	char pin[pinSize];
 800153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153c:	3b01      	subs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	f04f 0400 	mov.w	r4, #0
 8001550:	00d4      	lsls	r4, r2, #3
 8001552:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001556:	00cb      	lsls	r3, r1, #3
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f04f 0400 	mov.w	r4, #0
 8001568:	00d4      	lsls	r4, r2, #3
 800156a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800156e:	00cb      	lsls	r3, r1, #3
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	3307      	adds	r3, #7
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	ebad 0d03 	sub.w	sp, sp, r3
 800157c:	ab02      	add	r3, sp, #8
 800157e:	3300      	adds	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
	char printBuffer [16] = { 0 };
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

	int8_t getButton = 0; //which button is pressed
 800158e:	2300      	movs	r3, #0
 8001590:	77fb      	strb	r3, [r7, #31]
	float price = 0; // price to pay
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 8001598:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800159c:	3b01      	subs	r3, #1
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d8fa      	bhi.n	8001598 <main+0xf8>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <main+0x108>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015c1 	.word	0x080015c1
 80015ac:	080015f5 	.word	0x080015f5
 80015b0:	08001661 	.word	0x08001661
 80015b4:	08001693 	.word	0x08001693
 80015b8:	0800171b 	.word	0x0800171b
 80015bc:	0800173b 	.word	0x0800173b
	  {
	  	  case 1: // welcome screen
	  		printLcdVcn("Welcome", " ");
 80015c0:	4965      	ldr	r1, [pc, #404]	; (8001758 <main+0x2b8>)
 80015c2:	4866      	ldr	r0, [pc, #408]	; (800175c <main+0x2bc>)
 80015c4:	f000 faae 	bl	8001b24 <printLcdVcn>
	  		getButton = waitForPush(-1, 3, port, mode,buttonsPin,numberOfButtons); //wait until OK is pressed
 80015c8:	f997 1031 	ldrsb.w	r1, [r7, #49]	; 0x31
 80015cc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80015d0:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	460b      	mov	r3, r1
 80015de:	2103      	movs	r1, #3
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 fa66 	bl	8001ab4 <waitForPush>
 80015e8:	4603      	mov	r3, r0
 80015ea:	77fb      	strb	r3, [r7, #31]
	  		state = 2; //next step
 80015ec:	2302      	movs	r3, #2
 80015ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 80015f2:	e0ae      	b.n	8001752 <main+0x2b2>

		  case 2: // enter and accept the price
			printf("enter price: ");
 80015f4:	485a      	ldr	r0, [pc, #360]	; (8001760 <main+0x2c0>)
 80015f6:	f003 fdd3 	bl	80051a0 <iprintf>
			scanf("%f",&price); // wait until the price is provided through serial port
 80015fa:	463b      	mov	r3, r7
 80015fc:	4619      	mov	r1, r3
 80015fe:	4859      	ldr	r0, [pc, #356]	; (8001764 <main+0x2c4>)
 8001600:	f003 fe5e 	bl	80052c0 <iscanf>
			sprintf(printBuffer, "$%.2f", price);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	1d38      	adds	r0, r7, #4
 8001612:	461a      	mov	r2, r3
 8001614:	4623      	mov	r3, r4
 8001616:	4954      	ldr	r1, [pc, #336]	; (8001768 <main+0x2c8>)
 8001618:	f003 fe70 	bl	80052fc <siprintf>
			printLcdVcn(printBuffer, "Ok:1 or Canc:2");
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4953      	ldr	r1, [pc, #332]	; (800176c <main+0x2cc>)
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fa7f 	bl	8001b24 <printLcdVcn>

			getButton = waitForPush(1, 4, port, mode, buttonsPin,numberOfButtons);//wait until 1 or 2 is pressed
 8001626:	f997 1031 	ldrsb.w	r1, [r7, #49]	; 0x31
 800162a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800162e:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	460b      	mov	r3, r1
 800163c:	2104      	movs	r1, #4
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fa38 	bl	8001ab4 <waitForPush>
 8001644:	4603      	mov	r3, r0
 8001646:	77fb      	strb	r3, [r7, #31]

			if(getButton == 0) //pressed OK: PB 1
 8001648:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <main+0x1b8>
			{
				state = 3; //next state
 8001650:	2303      	movs	r3, #3
 8001652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
			else //pressed cancel: PB 2
			{
				state = 6; // cancel transaction
			}
		  break;
 8001656:	e07c      	b.n	8001752 <main+0x2b2>
				state = 6; // cancel transaction
 8001658:	2306      	movs	r3, #6
 800165a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 800165e:	e078      	b.n	8001752 <main+0x2b2>

		  case 3: // choose chequing or saving account
		    printLcdVcn("Chequing: 1", "Saving: 2");
 8001660:	4943      	ldr	r1, [pc, #268]	; (8001770 <main+0x2d0>)
 8001662:	4844      	ldr	r0, [pc, #272]	; (8001774 <main+0x2d4>)
 8001664:	f000 fa5e 	bl	8001b24 <printLcdVcn>
		    getButton = waitForPush(1, 4, port, mode, buttonsPin,numberOfButtons); //wait until 1 or 2 is pressed
 8001668:	f997 1031 	ldrsb.w	r1, [r7, #49]	; 0x31
 800166c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001670:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	2104      	movs	r1, #4
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fa17 	bl	8001ab4 <waitForPush>
 8001686:	4603      	mov	r3, r0
 8001688:	77fb      	strb	r3, [r7, #31]
			state = 4; // next state
 800168a:	2304      	movs	r3, #4
 800168c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 8001690:	e05f      	b.n	8001752 <main+0x2b2>

		  case 4:
			printLcdVcn("Enter PIN", " ");
 8001692:	4931      	ldr	r1, [pc, #196]	; (8001758 <main+0x2b8>)
 8001694:	4838      	ldr	r0, [pc, #224]	; (8001778 <main+0x2d8>)
 8001696:	f000 fa45 	bl	8001b24 <printLcdVcn>
			memset(printBuffer,' ',16);
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2210      	movs	r2, #16
 800169e:	2120      	movs	r1, #32
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 ff37 	bl	8004514 <memset>

			for(int i=0; i<pinSize; i++) //save the pin entered in pin[]
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
 80016aa:	e01c      	b.n	80016e6 <main+0x246>
			{
				pin[i] = (readPush(buttonsPin, numberOfButtons, port, mode)+1)+'0'; //convert integer to char
 80016ac:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80016b0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80016b4:	f997 1030 	ldrsb.w	r1, [r7, #48]	; 0x30
 80016b8:	f107 0014 	add.w	r0, r7, #20
 80016bc:	f000 f96e 	bl	800199c <readPush>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	3331      	adds	r3, #49	; 0x31
 80016c6:	b2d9      	uxtb	r1, r3
 80016c8:	6a3a      	ldr	r2, [r7, #32]
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	4413      	add	r3, r2
 80016ce:	460a      	mov	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
				HD44780_GotoXY(i, 1);
 80016d2:	2101      	movs	r1, #1
 80016d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016d6:	f7ff fdc1 	bl	800125c <HD44780_GotoXY>
				HD44780_PutChar('*');
 80016da:	202a      	movs	r0, #42	; 0x2a
 80016dc:	f7ff fdb0 	bl	8001240 <HD44780_PutChar>
			for(int i=0; i<pinSize; i++) //save the pin entered in pin[]
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	3301      	adds	r3, #1
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
 80016e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbde      	blt.n	80016ac <main+0x20c>
			}

			getButton = waitForPush(-1, 3, port, mode, buttonsPin,numberOfButtons); //wait until OK is pressed
 80016ee:	f997 1031 	ldrsb.w	r1, [r7, #49]	; 0x31
 80016f2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80016f6:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	460b      	mov	r3, r1
 8001704:	2103      	movs	r1, #3
 8001706:	f04f 30ff 	mov.w	r0, #4294967295
 800170a:	f000 f9d3 	bl	8001ab4 <waitForPush>
 800170e:	4603      	mov	r3, r0
 8001710:	77fb      	strb	r3, [r7, #31]

			state = 5; //next state
 8001712:	2305      	movs	r3, #5
 8001714:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 8001718:	e01b      	b.n	8001752 <main+0x2b2>

		  case 5:

			printLcdVcn("Processing...", " ");
 800171a:	490f      	ldr	r1, [pc, #60]	; (8001758 <main+0x2b8>)
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <main+0x2dc>)
 800171e:	f000 fa01 	bl	8001b24 <printLcdVcn>
			HAL_Delay(processingTime);
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fca5 	bl	8002074 <HAL_Delay>

			state = checkPin(pin); //check if the pin is correct
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fa21 	bl	8001b74 <checkPin>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 8001738:	e00b      	b.n	8001752 <main+0x2b2>

		  case 6:

			printLcdVcn("Transaction", "Cancelling");
 800173a:	4911      	ldr	r1, [pc, #68]	; (8001780 <main+0x2e0>)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <main+0x2e4>)
 800173e:	f000 f9f1 	bl	8001b24 <printLcdVcn>
			HAL_Delay(processingTime);
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fc95 	bl	8002074 <HAL_Delay>

			state = 1; //go back to welcome screen
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 8001750:	bf00      	nop
	  switch(state)
 8001752:	e721      	b.n	8001598 <main+0xf8>
 8001754:	08009544 	.word	0x08009544
 8001758:	080094c0 	.word	0x080094c0
 800175c:	080094c4 	.word	0x080094c4
 8001760:	080094cc 	.word	0x080094cc
 8001764:	080094dc 	.word	0x080094dc
 8001768:	080094e0 	.word	0x080094e0
 800176c:	080094e8 	.word	0x080094e8
 8001770:	080094f8 	.word	0x080094f8
 8001774:	08009504 	.word	0x08009504
 8001778:	08009510 	.word	0x08009510
 800177c:	0800951c 	.word	0x0800951c
 8001780:	0800952c 	.word	0x0800952c
 8001784:	08009538 	.word	0x08009538

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0ac      	sub	sp, #176	; 0xb0
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001792:	2244      	movs	r2, #68	; 0x44
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f002 febc 	bl	8004514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2254      	movs	r2, #84	; 0x54
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 feae 	bl	8004514 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80017b8:	f000 fefe 	bl	80025b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <SystemClock_Config+0x100>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <SystemClock_Config+0x100>)
 80017c4:	f023 0318 	bic.w	r3, r3, #24
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017cc:	2314      	movs	r3, #20
 80017ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017d0:	2301      	movs	r3, #1
 80017d2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017e0:	2360      	movs	r3, #96	; 0x60
 80017e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80017f8:	2310      	movs	r3, #16
 80017fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017fe:	2307      	movs	r3, #7
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001814:	4618      	mov	r0, r3
 8001816:	f000 ff43 	bl	80026a0 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001820:	f000 fa0a 	bl	8001c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2303      	movs	r3, #3
 800182a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183c:	2101      	movs	r1, #1
 800183e:	4618      	mov	r0, r3
 8001840:	f001 fb4e 	bl	8002ee0 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800184a:	f000 f9f5 	bl	8001c38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800184e:	2302      	movs	r3, #2
 8001850:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4618      	mov	r0, r3
 800185a:	f001 fd45 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001864:	f000 f9e8 	bl	8001c38 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001868:	f44f 7000 	mov.w	r0, #512	; 0x200
 800186c:	f000 fec2 	bl	80025f4 <HAL_PWREx_ControlVoltageScaling>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001876:	f000 f9df 	bl	8001c38 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800187a:	f001 ff27 	bl	80036cc <HAL_RCCEx_EnableMSIPLLMode>
}
 800187e:	bf00      	nop
 8001880:	37b0      	adds	r7, #176	; 0xb0
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <MX_USART2_UART_Init+0x5c>)
 8001894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 8001898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800189c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART2_UART_Init+0x58>)
 80018d0:	f001 fffc 	bl	80038cc <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018da:	f000 f9ad 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000204 	.word	0x20000204
 80018e8:	40004400 	.word	0x40004400

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a23      	ldr	r2, [pc, #140]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_GPIO_Init+0xa8>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_GPIO_Init+0xa8>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 800194a:	2200      	movs	r2, #0
 800194c:	21fb      	movs	r1, #251	; 0xfb
 800194e:	4812      	ldr	r0, [pc, #72]	; (8001998 <MX_GPIO_Init+0xac>)
 8001950:	f000 fe1a 	bl	8002588 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8001954:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8001958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195e:	2301      	movs	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f000 fc8a 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001970:	23fb      	movs	r3, #251	; 0xfb
 8001972:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_GPIO_Init+0xac>)
 8001988:	f000 fc7c 	bl	8002284 <HAL_GPIO_Init>

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	48000400 	.word	0x48000400

0800199c <readPush>:
  * 					 char port: port of the pin input.
  * 				     int8_t mode: mode of the pin input. 0 for Pullup and 1 Pulldown
  *
  * RETURN			   : int8_t button: the number of the PB pressed.
  */
int8_t readPush(int16_t buttonsPin [], int8_t numberOfButtons, char port, int8_t mode) {
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	70fb      	strb	r3, [r7, #3]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70bb      	strb	r3, [r7, #2]
 80019b2:	4613      	mov	r3, r2
 80019b4:	707b      	strb	r3, [r7, #1]
 80019b6:	466b      	mov	r3, sp
 80019b8:	461d      	mov	r5, r3

int8_t button = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	74fb      	strb	r3, [r7, #19]
int8_t pushContains [numberOfButtons];
 80019be:	f997 0003 	ldrsb.w	r0, [r7, #3]
 80019c2:	4603      	mov	r3, r0
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4603      	mov	r3, r0
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	00d4      	lsls	r4, r2, #3
 80019da:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019de:	00cb      	lsls	r3, r1, #3
 80019e0:	4603      	mov	r3, r0
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	00d4      	lsls	r4, r2, #3
 80019f2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019f6:	00cb      	lsls	r3, r1, #3
 80019f8:	4603      	mov	r3, r0
 80019fa:	3307      	adds	r3, #7
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	ebad 0d03 	sub.w	sp, sp, r3
 8001a04:	466b      	mov	r3, sp
 8001a06:	3300      	adds	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]

for(int i = 0; i < numberOfButtons; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e016      	b.n	8001a3e <readPush+0xa2>
{
	pushContains[i] = deBounceReadPin(buttonsPin[i], port, mode); // read PB 1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001a22:	78b9      	ldrb	r1, [r7, #2]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fcbd 	bl	80013a4 <deBounceReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	460a      	mov	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
for(int i = 0; i < numberOfButtons; i++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbe3      	blt.n	8001a10 <readPush+0x74>
}


// check if a PB hasn't been pressed and is lower than the number of buttons
while(pushContains[button] && button < numberOfButtons)
 8001a48:	e021      	b.n	8001a8e <readPush+0xf2>
		{
			pushContains[button] = deBounceReadPin(buttonsPin[button], port, mode);
 8001a4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f997 4013 	ldrsb.w	r4, [r7, #19]
 8001a5e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001a62:	78b9      	ldrb	r1, [r7, #2]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fc9d 	bl	80013a4 <deBounceReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	551a      	strb	r2, [r3, r4]
			button ++;
 8001a72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	74fb      	strb	r3, [r7, #19]

			if(button == numberOfButtons) // restart the variable button
 8001a7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d101      	bne.n	8001a8e <readPush+0xf2>
			{
			button = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	74fb      	strb	r3, [r7, #19]
while(pushContains[button] && button < numberOfButtons)
 8001a8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	56d3      	ldrsb	r3, [r2, r3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <readPush+0x10a>
 8001a9a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbd1      	blt.n	8001a4a <readPush+0xae>
			}
		}

return button;
 8001aa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001aaa:	46ad      	mov	sp, r5
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}

08001ab4 <waitForPush>:
  * 				     int8_t numberOfButtons : amount of buttons to consider.
  *
  * RETURN			   : int8_t getButton: the number of the PB pressed.
  */
int8_t waitForPush (int8_t minValue, int8_t maxValue, char port, int8_t mode, int16_t buttonsPin[], int8_t numberOfButtons)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71bb      	strb	r3, [r7, #6]
 8001aca:	460b      	mov	r3, r1
 8001acc:	717b      	strb	r3, [r7, #5]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	713b      	strb	r3, [r7, #4]
	int8_t getButton = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
	getButton = readPush(buttonsPin, numberOfButtons, port, mode); // waiting for pushing a button
 8001ad6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001ada:	797a      	ldrb	r2, [r7, #5]
 8001adc:	f997 1024 	ldrsb.w	r1, [r7, #36]	; 0x24
 8001ae0:	6a38      	ldr	r0, [r7, #32]
 8001ae2:	f7ff ff5b 	bl	800199c <readPush>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]
	while(getButton > minValue && getButton < maxValue) // check if OK was pressed
 8001aea:	e009      	b.n	8001b00 <waitForPush+0x4c>
	{
		getButton = readPush(buttonsPin, numberOfButtons, port, mode); // waiting for pushing a button
 8001aec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001af0:	797a      	ldrb	r2, [r7, #5]
 8001af2:	f997 1024 	ldrsb.w	r1, [r7, #36]	; 0x24
 8001af6:	6a38      	ldr	r0, [r7, #32]
 8001af8:	f7ff ff50 	bl	800199c <readPush>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
	while(getButton > minValue && getButton < maxValue) // check if OK was pressed
 8001b00:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dd05      	ble.n	8001b18 <waitForPush+0x64>
 8001b0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbe9      	blt.n	8001aec <waitForPush+0x38>
	}

	return getButton;
 8001b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <printLcdVcn>:
  * 					 char printBuffer2[]: the second line string to be printed.
  *
  * RETURN			   : no return.
  */
void printLcdVcn(char printBuffer1[], char printBuffer2[])
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]

//printing in the LCD
	HD44780_ClrScr();
 8001b2e:	f7ff fbe9 	bl	8001304 <HD44780_ClrScr>
	HD44780_GotoXY(0, 0);
 8001b32:	2100      	movs	r1, #0
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff fb91 	bl	800125c <HD44780_GotoXY>
	HD44780_PutStr(printBuffer1); //print LCD
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fbc8 	bl	80012d0 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8001b40:	2101      	movs	r1, #1
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff fb8a 	bl	800125c <HD44780_GotoXY>
	HD44780_PutStr(printBuffer2);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff fbc1 	bl	80012d0 <HD44780_PutStr>

 //printing the same values throuhg the serial port
	printf(printBuffer1);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f003 fb26 	bl	80051a0 <iprintf>
	printf(" ");
 8001b54:	2020      	movs	r0, #32
 8001b56:	f003 fb3b 	bl	80051d0 <putchar>
	printf(printBuffer2);
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f003 fb20 	bl	80051a0 <iprintf>
	printf(" \r \n");
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <printLcdVcn+0x4c>)
 8001b62:	f003 fba5 	bl	80052b0 <puts>

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	0800954c 	.word	0x0800954c

08001b74 <checkPin>:
  * PARAMETERS		   : char pin[]: is the pin entered by the user.
  *
  * RETURN			   : int8_t state: the next state for the state machine
  */
int8_t checkPin(char pin[]) // check if the pin is correct
{
 8001b74:	b5b0      	push	{r4, r5, r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	int8_t state;
	int8_t p = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int pinInt = atoi(pin);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f002 fc98 	bl	80044b8 <atoi>
 8001b88:	6338      	str	r0, [r7, #48]	; 0x30
	int rightPins[] = {1111, 1121, 1133, 1213, 2111, 2331, 3111, 3211, 3333};
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <checkPin+0xb0>)
 8001b8c:	f107 0408 	add.w	r4, r7, #8
 8001b90:	461d      	mov	r5, r3
 8001b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	6023      	str	r3, [r4, #0]
	int rightPinsLength = (sizeof(rightPins)/(sizeof(rightPins[0])));
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(pinInt != rightPins[p])
 8001ba2:	e012      	b.n	8001bca <checkPin+0x56>
	{
		p++;
 8001ba4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		if(p >= rightPinsLength )
 8001bb2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc06      	bgt.n	8001bca <checkPin+0x56>
		{
			printf("pin is NOT correct ...\r \n");
 8001bbc:	481a      	ldr	r0, [pc, #104]	; (8001c28 <checkPin+0xb4>)
 8001bbe:	f003 fb77 	bl	80052b0 <puts>
			state = 6;
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 8001bc8:	e00a      	b.n	8001be0 <checkPin+0x6c>
	while(pinInt != rightPins[p])
 8001bca:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1e1      	bne.n	8001ba4 <checkPin+0x30>
		}
	}
	if (p == 8)
 8001be0:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d109      	bne.n	8001bfc <checkPin+0x88>
	{
		printf("pin is correct ...\r \n");
 8001be8:	4810      	ldr	r0, [pc, #64]	; (8001c2c <checkPin+0xb8>)
 8001bea:	f003 fb61 	bl	80052b0 <puts>
		printf("no funds ...\r \n");
 8001bee:	4810      	ldr	r0, [pc, #64]	; (8001c30 <checkPin+0xbc>)
 8001bf0:	f003 fb5e 	bl	80052b0 <puts>
		state = 6;
 8001bf4:	2306      	movs	r3, #6
 8001bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001bfa:	e00c      	b.n	8001c16 <checkPin+0xa2>
	}
	else if (p < 8)
 8001bfc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	dc08      	bgt.n	8001c16 <checkPin+0xa2>
	{
		printf("pin is correct ...\r \n");
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <checkPin+0xb8>)
 8001c06:	f003 fb53 	bl	80052b0 <puts>
		printf("printing receipt ...\r \n");
 8001c0a:	480a      	ldr	r0, [pc, #40]	; (8001c34 <checkPin+0xc0>)
 8001c0c:	f003 fb50 	bl	80052b0 <puts>
		state = 1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return state;
 8001c16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3738      	adds	r7, #56	; 0x38
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	080095ac 	.word	0x080095ac
 8001c28:	08009550 	.word	0x08009550
 8001c2c:	0800956c 	.word	0x0800956c
 8001c30:	08009584 	.word	0x08009584
 8001c34:	08009594 	.word	0x08009594

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_MspInit+0x44>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_MspInit+0x44>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_MspInit+0x44>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_MspInit+0x44>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_MspInit+0x44>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_MspInit+0x44>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_UART_MspInit+0xa0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d13a      	bne.n	8001d28 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_UART_MspInit+0xa4>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_UART_MspInit+0xa4>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_UART_MspInit+0xa4>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_UART_MspInit+0xa4>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_UART_MspInit+0xa4>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0xa4>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d00:	f000 fac0 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d16:	2303      	movs	r3, #3
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d24:	f000 faae 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40004400 	.word	0x40004400
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f954 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001da0:	2301      	movs	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	4807      	ldr	r0, [pc, #28]	; (8001dcc <_read+0x38>)
 8001db0:	f001 fe6d 	bl	8003a8e <HAL_UART_Receive>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	607b      	str	r3, [r7, #4]

	return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000204 	.word	0x20000204

08001dd0 <_write>:

int _write(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4809      	ldr	r0, [pc, #36]	; (8001e10 <_write+0x40>)
 8001dec:	f001 fdbc 	bl	8003968 <HAL_UART_Transmit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d002      	beq.n	8001e00 <_write+0x30>
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d101      	bne.n	8001e04 <_write+0x34>
	{
		Error_Handler();
 8001e00:	f7ff ff1a 	bl	8001c38 <Error_Handler>
	}

	return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000204 	.word	0x20000204

08001e14 <_close>:



int _close(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3c:	605a      	str	r2, [r3, #4]
	return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
	return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x50>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x16>
		heap_end = &end;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <_sbrk+0x50>)
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <_sbrk+0x54>)
 8001e90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <_sbrk+0x50>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <_sbrk+0x50>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	466a      	mov	r2, sp
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d907      	bls.n	8001eb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ea6:	f002 fb0b 	bl	80044c0 <__errno>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	230c      	movs	r3, #12
 8001eae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	e006      	b.n	8001ec4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <_sbrk+0x50>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <_sbrk+0x50>)
 8001ec0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200001f8 	.word	0x200001f8
 8001ed0:	20000290 	.word	0x20000290

08001ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <SystemInit+0x64>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <SystemInit+0x64>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <SystemInit+0x68>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <SystemInit+0x68>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <SystemInit+0x68>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <SystemInit+0x68>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <SystemInit+0x68>)
 8001f00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <SystemInit+0x68>)
 8001f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <SystemInit+0x68>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <SystemInit+0x68>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <SystemInit+0x68>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SystemInit+0x64>)
 8001f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	40021000 	.word	0x40021000

08001f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f46:	e003      	b.n	8001f50 <LoopCopyDataInit>

08001f48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f4e:	3104      	adds	r1, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f58:	d3f6      	bcc.n	8001f48 <CopyDataInit>
	ldr	r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f5c:	e002      	b.n	8001f64 <LoopFillZerobss>

08001f5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f60:	f842 3b04 	str.w	r3, [r2], #4

08001f64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <LoopForever+0x16>)
	cmp	r2, r3
 8001f66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f68:	d3f9      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f6a:	f7ff ffb3 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f002 faad 	bl	80044cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f72:	f7ff fa95 	bl	80014a0 <main>

08001f76 <LoopForever>:

LoopForever:
    b LoopForever
 8001f76:	e7fe      	b.n	8001f76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f7c:	0800996c 	.word	0x0800996c
	ldr	r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f84:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001f88:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001f8c:	2000028c 	.word	0x2000028c

08001f90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC1_IRQHandler>

08001f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 f93d 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f80e 	bl	8001fc4 <HAL_InitTick>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	71fb      	strb	r3, [r7, #7]
 8001fb2:	e001      	b.n	8001fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fb4:	f7ff fe48 	bl	8001c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_InitTick+0x68>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d022      	beq.n	800201e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_InitTick+0x6c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_InitTick+0x68>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f93c 	bl	800226a <HAL_SYSTICK_Config>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	d809      	bhi.n	8002012 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffe:	2200      	movs	r2, #0
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	f04f 30ff 	mov.w	r0, #4294967295
 8002006:	f000 f914 	bl	8002232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_InitTick+0x70>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e007      	b.n	8002022 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	e004      	b.n	8002022 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000008 	.word	0x20000008
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x1c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x20>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4413      	add	r3, r2
 8002046:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_IncTick+0x1c>)
 8002048:	6013      	str	r3, [r2, #0]
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	20000284 	.word	0x20000284
 8002058:	20000008 	.word	0x20000008

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000284 	.word	0x20000284

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d004      	beq.n	8002098 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_Delay+0x40>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002098:	bf00      	nop
 800209a:	f7ff ffdf 	bl	800205c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d8f7      	bhi.n	800209a <HAL_Delay+0x26>
  {
  }
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff47 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff5c 	bl	8002100 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffb0 	bl	80021d8 <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e148      	b.n	8002526 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 813a 	beq.w	8002520 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d00b      	beq.n	80022cc <HAL_GPIO_Init+0x48>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d007      	beq.n	80022cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c0:	2b11      	cmp	r3, #17
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0xea>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b12      	cmp	r3, #18
 800236c:	d123      	bne.n	80023b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	6939      	ldr	r1, [r7, #16]
 80023b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0203 	and.w	r2, r3, #3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8094 	beq.w	8002520 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HAL_GPIO_Init+0x2c0>)
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	4a51      	ldr	r2, [pc, #324]	; (8002544 <HAL_GPIO_Init+0x2c0>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6613      	str	r3, [r2, #96]	; 0x60
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x2c0>)
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800243a:	d00d      	beq.n	8002458 <HAL_GPIO_Init+0x1d4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <HAL_GPIO_Init+0x2c8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <HAL_GPIO_Init+0x1d0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_GPIO_Init+0x2cc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_GPIO_Init+0x1cc>
 800244c:	2302      	movs	r3, #2
 800244e:	e004      	b.n	800245a <HAL_GPIO_Init+0x1d6>
 8002450:	2307      	movs	r3, #7
 8002452:	e002      	b.n	800245a <HAL_GPIO_Init+0x1d6>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_GPIO_Init+0x1d6>
 8002458:	2300      	movs	r3, #0
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	f002 0203 	and.w	r2, r2, #3
 8002460:	0092      	lsls	r2, r2, #2
 8002462:	4093      	lsls	r3, r2
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800246a:	4937      	ldr	r1, [pc, #220]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800249c:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024a2:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c6:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	f47f aeaf 	bne.w	8002294 <HAL_GPIO_Init+0x10>
  }
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40010000 	.word	0x40010000
 800254c:	48000400 	.word	0x48000400
 8002550:	48000800 	.word	0x48000800
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e001      	b.n	800257a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40007000 	.word	0x40007000

080025d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000

080025f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002602:	d130      	bne.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d038      	beq.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800261a:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2232      	movs	r2, #50	; 0x32
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0c9b      	lsrs	r3, r3, #18
 8002634:	3301      	adds	r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002638:	e002      	b.n	8002640 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3b01      	subs	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264c:	d102      	bne.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x60>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f2      	bne.n	800263a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002660:	d110      	bne.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e00f      	b.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d007      	beq.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002682:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000
 8002698:	20000000 	.word	0x20000000
 800269c:	431bde83 	.word	0x431bde83

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f000 bc11 	b.w	8002ed6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b4:	4ba0      	ldr	r3, [pc, #640]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026be:	4b9e      	ldr	r3, [pc, #632]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80e4 	beq.w	800289e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_RCC_OscConfig+0x4c>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	f040 808b 	bne.w	80027fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	f040 8087 	bne.w	80027fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ec:	4b92      	ldr	r3, [pc, #584]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x64>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e3e8      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	4b8b      	ldr	r3, [pc, #556]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_RCC_OscConfig+0x7e>
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271c:	e005      	b.n	800272a <HAL_RCC_OscConfig+0x8a>
 800271e:	4b86      	ldr	r3, [pc, #536]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272a:	4293      	cmp	r3, r2
 800272c:	d223      	bcs.n	8002776 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fd78 	bl	8003228 <RCC_SetFlashLatencyFromMSIRange>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e3c9      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4977      	ldr	r1, [pc, #476]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	4972      	ldr	r1, [pc, #456]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
 8002774:	e025      	b.n	80027c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002776:	4b70      	ldr	r3, [pc, #448]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6f      	ldr	r2, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	496a      	ldr	r1, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	4965      	ldr	r1, [pc, #404]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fd38 	bl	8003228 <RCC_SetFlashLatencyFromMSIRange>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e389      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c2:	f000 fc6f 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 80027c6:	4601      	mov	r1, r0
 80027c8:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x29c>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	fa21 f303 	lsr.w	r3, r1, r3
 80027de:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_RCC_OscConfig+0x2a0>)
 80027e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027e2:	4b58      	ldr	r3, [pc, #352]	; (8002944 <HAL_RCC_OscConfig+0x2a4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fbec 	bl	8001fc4 <HAL_InitTick>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d052      	beq.n	800289c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	e36d      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d032      	beq.n	8002868 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4c      	ldr	r2, [pc, #304]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800280e:	f7ff fc25 	bl	800205c <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002816:	f7ff fc21 	bl	800205c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e356      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002834:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	493a      	ldr	r1, [pc, #232]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	4935      	ldr	r1, [pc, #212]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
 8002866:	e01a      	b.n	800289e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002874:	f7ff fbf2 	bl	800205c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800287c:	f7ff fbee 	bl	800205c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e323      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1dc>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d073      	beq.n	8002992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_OscConfig+0x21c>
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d10e      	bne.n	80028d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d063      	beq.n	8002990 <HAL_RCC_OscConfig+0x2f0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d15f      	bne.n	8002990 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e300      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x24c>
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0x288>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x270>
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x288>
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a05      	ldr	r2, [pc, #20]	; (8002938 <HAL_RCC_OscConfig+0x298>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff fb94 	bl	800205c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002936:	e010      	b.n	800295a <HAL_RCC_OscConfig+0x2ba>
 8002938:	40021000 	.word	0x40021000
 800293c:	080095dc 	.word	0x080095dc
 8002940:	20000000 	.word	0x20000000
 8002944:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff fb88 	bl	800205c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e2bd      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295a:	4baf      	ldr	r3, [pc, #700]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x2a8>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7ff fb78 	bl	800205c <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7ff fb74 	bl	800205c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e2a9      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002982:	4ba5      	ldr	r3, [pc, #660]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x2d0>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d060      	beq.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_OscConfig+0x310>
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d119      	bne.n	80029de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d116      	bne.n	80029de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b0:	4b99      	ldr	r3, [pc, #612]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_OscConfig+0x328>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e286      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b93      	ldr	r3, [pc, #588]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	4990      	ldr	r1, [pc, #576]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029dc:	e040      	b.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d023      	beq.n	8002a2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a8b      	ldr	r2, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7ff fb33 	bl	800205c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fa:	f7ff fb2f 	bl	800205c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e264      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0c:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	497c      	ldr	r1, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
 8002a2c:	e018      	b.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a79      	ldr	r2, [pc, #484]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7ff fb0f 	bl	800205c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7ff fb0b 	bl	800205c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e240      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a54:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d03c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01c      	beq.n	8002aae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7ff faea 	bl	800205c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff fae6 	bl	800205c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e21b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <HAL_RCC_OscConfig+0x3ec>
 8002aac:	e01b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	4b5a      	ldr	r3, [pc, #360]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab4:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7ff facd 	bl	800205c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7ff fac9 	bl	800205c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1fe      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ef      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80a6 	beq.w	8002c40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af4:	2300      	movs	r3, #0
 8002af6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002af8:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	4a43      	ldr	r2, [pc, #268]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCC_OscConfig+0x57c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d118      	bne.n	8002b5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_OscConfig+0x57c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3a      	ldr	r2, [pc, #232]	; (8002c1c <HAL_RCC_OscConfig+0x57c>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b38:	f7ff fa90 	bl	800205c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b40:	f7ff fa8c 	bl	800205c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1c1      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x57c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d108      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4d8>
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b76:	e024      	b.n	8002bc2 <HAL_RCC_OscConfig+0x522>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d110      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x502>
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba0:	e00f      	b.n	8002bc2 <HAL_RCC_OscConfig+0x522>
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002bba:	f023 0304 	bic.w	r3, r3, #4
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff fa47 	bl	800205c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7ff fa43 	bl	800205c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e176      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x578>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ed      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x532>
 8002bf6:	e01a      	b.n	8002c2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7ff fa30 	bl	800205c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7ff fa2c 	bl	800205c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d906      	bls.n	8002c20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e15f      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c20:	4baa      	ldr	r3, [pc, #680]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e8      	bne.n	8002c00 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2e:	7ffb      	ldrb	r3, [r7, #31]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c34:	4ba5      	ldr	r3, [pc, #660]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	4aa4      	ldr	r2, [pc, #656]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d03c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c54:	4b9d      	ldr	r3, [pc, #628]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5a:	4a9c      	ldr	r2, [pc, #624]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7ff f9fa 	bl	800205c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6c:	f7ff f9f6 	bl	800205c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e12b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c7e:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <HAL_RCC_OscConfig+0x5cc>
 8002c8c:	e01b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c8e:	4b8f      	ldr	r3, [pc, #572]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c94:	4a8d      	ldr	r2, [pc, #564]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7ff f9dd 	bl	800205c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca6:	f7ff f9d9 	bl	800205c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e10e      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cb8:	4b84      	ldr	r3, [pc, #528]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ef      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8102 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	f040 80c5 	bne.w	8002e64 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cda:	4b7c      	ldr	r3, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0203 	and.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d12c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d123      	bne.n	8002d48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d11b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d113      	bne.n	8002d48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d109      	bne.n	8002d48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d067      	beq.n	8002e18 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d062      	beq.n	8002e14 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d4e:	4b5f      	ldr	r3, [pc, #380]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0bb      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d6a:	f7ff f977 	bl	800205c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7ff f973 	bl	800205c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0a8      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d90:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <HAL_RCC_OscConfig+0x830>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002da0:	3a01      	subs	r2, #1
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002daa:	0212      	lsls	r2, r2, #8
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002db2:	0852      	lsrs	r2, r2, #1
 8002db4:	3a01      	subs	r2, #1
 8002db6:	0552      	lsls	r2, r2, #21
 8002db8:	4311      	orrs	r1, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dbe:	0852      	lsrs	r2, r2, #1
 8002dc0:	3a01      	subs	r2, #1
 8002dc2:	0652      	lsls	r2, r2, #25
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dca:	06d2      	lsls	r2, r2, #27
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	493f      	ldr	r1, [pc, #252]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a39      	ldr	r2, [pc, #228]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dec:	f7ff f936 	bl	800205c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7ff f932 	bl	800205c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e067      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e12:	e05f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e05e      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e24:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e30:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e3c:	f7ff f90e 	bl	800205c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7ff f90a 	bl	800205c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e03f      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x7a4>
 8002e62:	e037      	b.n	8002ed4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d02d      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e74:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002e94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7ff f8dd 	bl	800205c <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7ff f8d9 	bl	800205c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e00e      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_RCC_OscConfig+0x82c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x806>
 8002ec4:	e006      	b.n	8002ed4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCC_OscConfig+0x836>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0c8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4961      	ldr	r1, [pc, #388]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b0      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d04c      	beq.n	8002fca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f38:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d121      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e09e      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d115      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e092      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e086      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e07e      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	493f      	ldr	r1, [pc, #252]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9a:	f7ff f85f 	bl	800205c <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7ff f85b 	bl	800205c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e066      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 020c 	and.w	r2, r3, #12
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d1eb      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	492c      	ldr	r1, [pc, #176]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d210      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0207 	bic.w	r2, r3, #7
 8002ffe:	4924      	ldr	r1, [pc, #144]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e036      	b.n	8003086 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4918      	ldr	r1, [pc, #96]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4910      	ldr	r1, [pc, #64]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003056:	f000 f825 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800305a:	4601      	mov	r1, r0
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_RCC_ClockConfig+0x1b4>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	fa21 f303 	lsr.w	r3, r1, r3
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ffa2 	bl	8001fc4 <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
 8003082:	72fb      	strb	r3, [r7, #11]

  return status;
 8003084:	7afb      	ldrb	r3, [r7, #11]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
 8003098:	080095dc 	.word	0x080095dc
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000004 	.word	0x20000004

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030bc:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x34>
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d121      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d11e      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030e4:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e005      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030f4:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003114:	e00a      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d102      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e004      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d101      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800312a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d133      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d002      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0xa4>
 8003142:	2b03      	cmp	r3, #3
 8003144:	d003      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0xaa>
 8003146:	e005      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800314a:	617b      	str	r3, [r7, #20]
      break;
 800314c:	e005      	b.n	800315a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003150:	617b      	str	r3, [r7, #20]
      break;
 8003152:	e002      	b.n	800315a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	617b      	str	r3, [r7, #20]
      break;
 8003158:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	3301      	adds	r3, #1
 8003166:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	fb02 f203 	mul.w	r2, r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0e5b      	lsrs	r3, r3, #25
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800319a:	69bb      	ldr	r3, [r7, #24]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3724      	adds	r7, #36	; 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40021000 	.word	0x40021000
 80031ac:	080095f4 	.word	0x080095f4
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000000 	.word	0x20000000

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d8:	4601      	mov	r1, r0
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080095ec 	.word	0x080095ec

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003200:	f7ff ffda 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003204:	4601      	mov	r1, r0
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0adb      	lsrs	r3, r3, #11
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	080095ec 	.word	0x080095ec

08003228 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003234:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003240:	f7ff f9ca 	bl	80025d8 <HAL_PWREx_GetVoltageRange>
 8003244:	6178      	str	r0, [r7, #20]
 8003246:	e014      	b.n	8003272 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003252:	6593      	str	r3, [r2, #88]	; 0x58
 8003254:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003260:	f7ff f9ba 	bl	80025d8 <HAL_PWREx_GetVoltageRange>
 8003264:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003278:	d10b      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d919      	bls.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2ba0      	cmp	r3, #160	; 0xa0
 8003284:	d902      	bls.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003286:	2302      	movs	r3, #2
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e013      	b.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800328c:	2301      	movs	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e010      	b.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d902      	bls.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003298:	2303      	movs	r3, #3
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	e00a      	b.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d102      	bne.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032a4:	2302      	movs	r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	e004      	b.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d101      	bne.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b0:	2301      	movs	r3, #1
 80032b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 0207 	bic.w	r2, r3, #7
 80032bc:	4909      	ldr	r1, [pc, #36]	; (80032e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40022000 	.word	0x40022000

080032e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f0:	2300      	movs	r3, #0
 80032f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f4:	2300      	movs	r3, #0
 80032f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02f      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800330c:	d005      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800330e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003312:	d015      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003318:	e00f      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800331a:	4bac      	ldr	r3, [pc, #688]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4aab      	ldr	r2, [pc, #684]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003326:	e00c      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f9dc 	bl	80036ec <RCCEx_PLLSAI1_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003338:	e003      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	74fb      	strb	r3, [r7, #19]
      break;
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003348:	4ba0      	ldr	r3, [pc, #640]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	499d      	ldr	r1, [pc, #628]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800335e:	e001      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8099 	beq.w	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003376:	4b95      	ldr	r3, [pc, #596]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b8f      	ldr	r3, [pc, #572]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	4a8e      	ldr	r2, [pc, #568]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	6593      	str	r3, [r2, #88]	; 0x58
 8003398:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a4:	2301      	movs	r3, #1
 80033a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a8:	4b89      	ldr	r3, [pc, #548]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a88      	ldr	r2, [pc, #544]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fe52 	bl	800205c <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ba:	e009      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fe fe4e 	bl	800205c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	74fb      	strb	r3, [r7, #19]
        break;
 80033ce:	e005      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d0:	4b7f      	ldr	r3, [pc, #508]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ef      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d155      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d019      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800342a:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fe0e 	bl	800205c <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	e00b      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe fe0a 	bl	800205c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d902      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	74fb      	strb	r3, [r7, #19]
            break;
 800345a:	e006      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ec      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003470:	4b56      	ldr	r3, [pc, #344]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347e:	4953      	ldr	r1, [pc, #332]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003486:	e004      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003492:	7c7b      	ldrb	r3, [r7, #17]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	4a4b      	ldr	r2, [pc, #300]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034b0:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4943      	ldr	r1, [pc, #268]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034d2:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 020c 	bic.w	r2, r3, #12
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	493a      	ldr	r1, [pc, #232]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	4932      	ldr	r1, [pc, #200]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	4929      	ldr	r1, [pc, #164]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4921      	ldr	r1, [pc, #132]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	4918      	ldr	r1, [pc, #96]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4910      	ldr	r1, [pc, #64]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d02c      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4907      	ldr	r1, [pc, #28]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a02      	ldr	r2, [pc, #8]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035c8:	60d3      	str	r3, [r2, #12]
 80035ca:	e015      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f881 	bl	80036ec <RCCEx_PLLSAI1_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d028      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	492d      	ldr	r1, [pc, #180]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003622:	d106      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362e:	60d3      	str	r3, [r2, #12]
 8003630:	e011      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800363a:	d10c      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f852 	bl	80036ec <RCCEx_PLLSAI1_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01c      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	4915      	ldr	r1, [pc, #84]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003680:	d10c      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2102      	movs	r1, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f82f 	bl	80036ec <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	4904      	ldr	r1, [pc, #16]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036be:	7cbb      	ldrb	r3, [r7, #18]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036fa:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003706:	4b70      	ldr	r3, [pc, #448]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0203 	and.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d10d      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
       ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800371e:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
       ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d044      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e041      	b.n	80037bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d00c      	beq.n	800375a <RCCEx_PLLSAI1_Config+0x6e>
 8003740:	2b03      	cmp	r3, #3
 8003742:	d013      	beq.n	800376c <RCCEx_PLLSAI1_Config+0x80>
 8003744:	2b01      	cmp	r3, #1
 8003746:	d120      	bne.n	800378a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003748:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11d      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e01a      	b.n	8003790 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800375a:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376a:	e013      	b.n	8003794 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800376c:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10f      	bne.n	8003798 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003788:	e006      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      break;
 800378e:	e004      	b.n	800379a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003790:	bf00      	nop
 8003792:	e002      	b.n	800379a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003794:	bf00      	nop
 8003796:	e000      	b.n	800379a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003798:	bf00      	nop
    }

    if(status == HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037a0:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6819      	ldr	r1, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	430b      	orrs	r3, r1
 80037b6:	4944      	ldr	r1, [pc, #272]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d17c      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037c2:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ce:	f7fe fc45 	bl	800205c <HAL_GetTick>
 80037d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037d4:	e009      	b.n	80037ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d6:	f7fe fc41 	bl	800205c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d902      	bls.n	80037ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	73fb      	strb	r3, [r7, #15]
        break;
 80037e8:	e005      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ea:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ef      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d15f      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d110      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800380a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	0211      	lsls	r1, r2, #8
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68d2      	ldr	r2, [r2, #12]
 8003818:	06d2      	lsls	r2, r2, #27
 800381a:	430a      	orrs	r2, r1
 800381c:	492a      	ldr	r1, [pc, #168]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	610b      	str	r3, [r1, #16]
 8003822:	e027      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d112      	bne.n	8003850 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6892      	ldr	r2, [r2, #8]
 800383a:	0211      	lsls	r1, r2, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6912      	ldr	r2, [r2, #16]
 8003840:	0852      	lsrs	r2, r2, #1
 8003842:	3a01      	subs	r2, #1
 8003844:	0552      	lsls	r2, r2, #21
 8003846:	430a      	orrs	r2, r1
 8003848:	491f      	ldr	r1, [pc, #124]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]
 800384e:	e011      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6952      	ldr	r2, [r2, #20]
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0652      	lsls	r2, r2, #25
 800386c:	430a      	orrs	r2, r1
 800386e:	4916      	ldr	r1, [pc, #88]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800387e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe fbec 	bl	800205c <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003886:	e009      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003888:	f7fe fbe8 	bl	800205c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d902      	bls.n	800389c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	73fb      	strb	r3, [r7, #15]
          break;
 800389a:	e005      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ef      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	4904      	ldr	r1, [pc, #16]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000

080038cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e040      	b.n	8003960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe f9ce 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f98c 	bl	8003c28 <UART_SetConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e022      	b.n	8003960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fc66 	bl	80041f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fced 	bl	8004338 <UART_CheckIdleState>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397c:	2b20      	cmp	r3, #32
 800397e:	f040 8081 	bne.w	8003a84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Transmit+0x26>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e079      	b.n	8003a86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Transmit+0x38>
 800399c:	2302      	movs	r3, #2
 800399e:	e072      	b.n	8003a86 <HAL_UART_Transmit+0x11e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80039b4:	f7fe fb52 	bl	800205c <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d108      	bne.n	80039e6 <HAL_UART_Transmit+0x7e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e003      	b.n	80039ee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80039f6:	e02d      	b.n	8003a54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fcdd 	bl	80043c2 <UART_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e039      	b.n	8003a86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	881a      	ldrh	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a24:	b292      	uxth	r2, r2
 8003a26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e008      	b.n	8003a42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1cb      	bne.n	80039f8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fca9 	bl	80043c2 <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e005      	b.n	8003a86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b08a      	sub	sp, #40	; 0x28
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	f040 80bb 	bne.w	8003c1e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Receive+0x26>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b3      	b.n	8003c20 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Receive+0x38>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e0ac      	b.n	8003c20 <HAL_UART_Receive+0x192>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2222      	movs	r2, #34	; 0x22
 8003ad8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ada:	f7fe fabf 	bl	800205c <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d10e      	bne.n	8003b18 <HAL_UART_Receive+0x8a>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_UART_Receive+0x80>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0c:	e02d      	b.n	8003b6a <HAL_UART_Receive+0xdc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	22ff      	movs	r2, #255	; 0xff
 8003b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b16:	e028      	b.n	8003b6a <HAL_UART_Receive+0xdc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10d      	bne.n	8003b3c <HAL_UART_Receive+0xae>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_UART_Receive+0xa4>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b30:	e01b      	b.n	8003b6a <HAL_UART_Receive+0xdc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	227f      	movs	r2, #127	; 0x7f
 8003b36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3a:	e016      	b.n	8003b6a <HAL_UART_Receive+0xdc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b44:	d10d      	bne.n	8003b62 <HAL_UART_Receive+0xd4>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <HAL_UART_Receive+0xca>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	227f      	movs	r2, #127	; 0x7f
 8003b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b56:	e008      	b.n	8003b6a <HAL_UART_Receive+0xdc>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	223f      	movs	r2, #63	; 0x3f
 8003b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b60:	e003      	b.n	8003b6a <HAL_UART_Receive+0xdc>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d108      	bne.n	8003b8e <HAL_UART_Receive+0x100>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e003      	b.n	8003b96 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b9e:	e033      	b.n	8003c08 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2120      	movs	r1, #32
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fc09 	bl	80043c2 <UART_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e032      	b.n	8003c20 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10c      	bne.n	8003bda <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	8a7b      	ldrh	r3, [r7, #18]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	e00d      	b.n	8003bf6 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	8a7b      	ldrh	r3, [r7, #18]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4013      	ands	r3, r2
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1c5      	bne.n	8003ba0 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c2c:	b08a      	sub	sp, #40	; 0x28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4bb3      	ldr	r3, [pc, #716]	; (8003f2c <UART_SetConfig+0x304>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4aa9      	ldr	r2, [pc, #676]	; (8003f30 <UART_SetConfig+0x308>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	4313      	orrs	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	430a      	orrs	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4aa0      	ldr	r2, [pc, #640]	; (8003f34 <UART_SetConfig+0x30c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d126      	bne.n	8003d06 <UART_SetConfig+0xde>
 8003cb8:	4b9f      	ldr	r3, [pc, #636]	; (8003f38 <UART_SetConfig+0x310>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d81a      	bhi.n	8003cfc <UART_SetConfig+0xd4>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0xa4>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e080      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e07c      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf2:	e078      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e074      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	bf00      	nop
 8003d04:	e06f      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a8c      	ldr	r2, [pc, #560]	; (8003f3c <UART_SetConfig+0x314>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d138      	bne.n	8003d82 <UART_SetConfig+0x15a>
 8003d10:	4b89      	ldr	r3, [pc, #548]	; (8003f38 <UART_SetConfig+0x310>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d82c      	bhi.n	8003d78 <UART_SetConfig+0x150>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0xfc>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e042      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e03e      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e03a      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003d70:	2308      	movs	r3, #8
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e036      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	bf00      	nop
 8003d80:	e031      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <UART_SetConfig+0x308>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d129      	bne.n	8003de0 <UART_SetConfig+0x1b8>
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <UART_SetConfig+0x310>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d014      	beq.n	8003dc6 <UART_SetConfig+0x19e>
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d802      	bhi.n	8003da8 <UART_SetConfig+0x180>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <UART_SetConfig+0x18e>
 8003da6:	e016      	b.n	8003dd6 <UART_SetConfig+0x1ae>
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dac:	d007      	beq.n	8003dbe <UART_SetConfig+0x196>
 8003dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db2:	d00c      	beq.n	8003dce <UART_SetConfig+0x1a6>
 8003db4:	e00f      	b.n	8003dd6 <UART_SetConfig+0x1ae>
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbc:	e013      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc4:	e00f      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dcc:	e00b      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e007      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <UART_SetConfig+0x1be>
 8003de0:	2310      	movs	r3, #16
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a51      	ldr	r2, [pc, #324]	; (8003f30 <UART_SetConfig+0x308>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f040 80fa 	bne.w	8003fe6 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d823      	bhi.n	8003e42 <UART_SetConfig+0x21a>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x1d8>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e33 	.word	0x08003e33
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e43 	.word	0x08003e43
 8003e20:	08003e3b 	.word	0x08003e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7ff f9d4 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8003e28:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e2a:	e00d      	b.n	8003e48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003e2c:	4b44      	ldr	r3, [pc, #272]	; (8003f40 <UART_SetConfig+0x318>)
 8003e2e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e30:	e00a      	b.n	8003e48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003e32:	f7ff f937 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003e36:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e38:	e006      	b.n	8003e48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e40:	e002      	b.n	8003e48 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	76fb      	strb	r3, [r7, #27]
        break;
 8003e46:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 81c6 	beq.w	80041dc <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d305      	bcc.n	8003e6c <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d902      	bls.n	8003e72 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e1b4      	b.n	80041dc <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8003e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	f200 80a2 	bhi.w	8003fc0 <UART_SetConfig+0x398>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <UART_SetConfig+0x25c>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003ea9 	.word	0x08003ea9
 8003e88:	08003fc1 	.word	0x08003fc1
 8003e8c:	08003ef7 	.word	0x08003ef7
 8003e90:	08003fc1 	.word	0x08003fc1
 8003e94:	08003f49 	.word	0x08003f49
 8003e98:	08003fc1 	.word	0x08003fc1
 8003e9c:	08003fc1 	.word	0x08003fc1
 8003ea0:	08003fc1 	.word	0x08003fc1
 8003ea4:	08003f97 	.word	0x08003f97
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7ff f992 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8003eac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	0214      	lsls	r4, r2, #8
 8003ec0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ec4:	020b      	lsls	r3, r1, #8
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6852      	ldr	r2, [r2, #4]
 8003eca:	0852      	lsrs	r2, r2, #1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	eb13 0b01 	adds.w	fp, r3, r1
 8003ed6:	eb44 0c02 	adc.w	ip, r4, r2
 8003eda:	4658      	mov	r0, fp
 8003edc:	4661      	mov	r1, ip
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f04f 0400 	mov.w	r4, #0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	f7fc fecd 	bl	8000c88 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ef4:	e067      	b.n	8003fc6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	4910      	ldr	r1, [pc, #64]	; (8003f44 <UART_SetConfig+0x31c>)
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	eb13 0b01 	adds.w	fp, r3, r1
 8003f0a:	eb44 0c02 	adc.w	ip, r4, r2
 8003f0e:	4658      	mov	r0, fp
 8003f10:	4661      	mov	r1, ip
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f04f 0400 	mov.w	r4, #0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	f7fc feb3 	bl	8000c88 <__aeabi_uldivmod>
 8003f22:	4603      	mov	r3, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f28:	e04d      	b.n	8003fc6 <UART_SetConfig+0x39e>
 8003f2a:	bf00      	nop
 8003f2c:	efff69f3 	.word	0xefff69f3
 8003f30:	40008000 	.word	0x40008000
 8003f34:	40013800 	.word	0x40013800
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40004400 	.word	0x40004400
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003f48:	f7ff f8ac 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003f4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4619      	mov	r1, r3
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	f04f 0400 	mov.w	r4, #0
 8003f5e:	0214      	lsls	r4, r2, #8
 8003f60:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f64:	020b      	lsls	r3, r1, #8
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6852      	ldr	r2, [r2, #4]
 8003f6a:	0852      	lsrs	r2, r2, #1
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	eb13 0b01 	adds.w	fp, r3, r1
 8003f76:	eb44 0c02 	adc.w	ip, r4, r2
 8003f7a:	4658      	mov	r0, fp
 8003f7c:	4661      	mov	r1, ip
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f04f 0400 	mov.w	r4, #0
 8003f86:	461a      	mov	r2, r3
 8003f88:	4623      	mov	r3, r4
 8003f8a:	f7fc fe7d 	bl	8000c88 <__aeabi_uldivmod>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	460c      	mov	r4, r1
 8003f92:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003f94:	e017      	b.n	8003fc6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	f04f 0400 	mov.w	r4, #0
 8003fa0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003fa4:	f144 0100 	adc.w	r1, r4, #0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f04f 0400 	mov.w	r4, #0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	f7fc fe68 	bl	8000c88 <__aeabi_uldivmod>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003fbe:	e002      	b.n	8003fc6 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	76fb      	strb	r3, [r7, #27]
            break;
 8003fc4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fcc:	d308      	bcc.n	8003fe0 <UART_SetConfig+0x3b8>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd4:	d204      	bcs.n	8003fe0 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	e0fd      	b.n	80041dc <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e0fa      	b.n	80041dc <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fee:	f040 8083 	bne.w	80040f8 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8003ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d85e      	bhi.n	80040b8 <UART_SetConfig+0x490>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x3d8>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004025 	.word	0x08004025
 8004004:	08004045 	.word	0x08004045
 8004008:	08004065 	.word	0x08004065
 800400c:	080040b9 	.word	0x080040b9
 8004010:	08004081 	.word	0x08004081
 8004014:	080040b9 	.word	0x080040b9
 8004018:	080040b9 	.word	0x080040b9
 800401c:	080040b9 	.word	0x080040b9
 8004020:	080040a1 	.word	0x080040a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7ff f8d4 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004028:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	005a      	lsls	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	b29b      	uxth	r3, r3
 8004040:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004042:	e03c      	b.n	80040be <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004044:	f7ff f8da 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8004048:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	005a      	lsls	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004062:	e02c      	b.n	80040be <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800406e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	fbb3 f3f2 	udiv	r3, r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800407e:	e01e      	b.n	80040be <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004080:	f7ff f810 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8004084:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	005a      	lsls	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	b29b      	uxth	r3, r3
 800409c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800409e:	e00e      	b.n	80040be <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b6:	e002      	b.n	80040be <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	76fb      	strb	r3, [r7, #27]
        break;
 80040bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d916      	bls.n	80040f2 <UART_SetConfig+0x4ca>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d212      	bcs.n	80040f2 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f023 030f 	bic.w	r3, r3, #15
 80040d4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	89fa      	ldrh	r2, [r7, #14]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e074      	b.n	80041dc <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	76fb      	strb	r3, [r7, #27]
 80040f6:	e071      	b.n	80041dc <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 80040f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d85c      	bhi.n	80041ba <UART_SetConfig+0x592>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x4e0>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800412d 	.word	0x0800412d
 800410c:	0800414b 	.word	0x0800414b
 8004110:	08004169 	.word	0x08004169
 8004114:	080041bb 	.word	0x080041bb
 8004118:	08004185 	.word	0x08004185
 800411c:	080041bb 	.word	0x080041bb
 8004120:	080041bb 	.word	0x080041bb
 8004124:	080041bb 	.word	0x080041bb
 8004128:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7ff f850 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004130:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	085a      	lsrs	r2, r3, #1
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	b29b      	uxth	r3, r3
 8004146:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004148:	e03a      	b.n	80041c0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414a:	f7ff f857 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 800414e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	085a      	lsrs	r2, r3, #1
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	b29b      	uxth	r3, r3
 8004164:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004166:	e02b      	b.n	80041c0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004172:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6852      	ldr	r2, [r2, #4]
 800417a:	fbb3 f3f2 	udiv	r3, r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004182:	e01d      	b.n	80041c0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004184:	f7fe ff8e 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8004188:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	085a      	lsrs	r2, r3, #1
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	441a      	add	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	b29b      	uxth	r3, r3
 800419e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041a0:	e00e      	b.n	80041c0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041b8:	e002      	b.n	80041c0 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	76fb      	strb	r3, [r7, #27]
        break;
 80041be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	d908      	bls.n	80041d8 <UART_SetConfig+0x5b0>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d204      	bcs.n	80041d8 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	e001      	b.n	80041dc <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041e8:	7efb      	ldrb	r3, [r7, #27]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080041f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01a      	beq.n	800430a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f2:	d10a      	bne.n	800430a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af02      	add	r7, sp, #8
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004346:	f7fd fe89 	bl	800205c <HAL_GetTick>
 800434a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b08      	cmp	r3, #8
 8004358:	d10e      	bne.n	8004378 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f82a 	bl	80043c2 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e020      	b.n	80043ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d10e      	bne.n	80043a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f814 	bl	80043c2 <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e00a      	b.n	80043ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d2:	e05d      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d059      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fd fe3e 	bl	800205c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11b      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004400:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e042      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02b      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d123      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004450:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004460:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e00f      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d092      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <atoi>:
 80044b8:	220a      	movs	r2, #10
 80044ba:	2100      	movs	r1, #0
 80044bc:	f001 bdee 	b.w	800609c <strtol>

080044c0 <__errno>:
 80044c0:	4b01      	ldr	r3, [pc, #4]	; (80044c8 <__errno+0x8>)
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	2000000c 	.word	0x2000000c

080044cc <__libc_init_array>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4e0d      	ldr	r6, [pc, #52]	; (8004504 <__libc_init_array+0x38>)
 80044d0:	4c0d      	ldr	r4, [pc, #52]	; (8004508 <__libc_init_array+0x3c>)
 80044d2:	1ba4      	subs	r4, r4, r6
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	2500      	movs	r5, #0
 80044d8:	42a5      	cmp	r5, r4
 80044da:	d109      	bne.n	80044f0 <__libc_init_array+0x24>
 80044dc:	4e0b      	ldr	r6, [pc, #44]	; (800450c <__libc_init_array+0x40>)
 80044de:	4c0c      	ldr	r4, [pc, #48]	; (8004510 <__libc_init_array+0x44>)
 80044e0:	f004 ffe2 	bl	80094a8 <_init>
 80044e4:	1ba4      	subs	r4, r4, r6
 80044e6:	10a4      	asrs	r4, r4, #2
 80044e8:	2500      	movs	r5, #0
 80044ea:	42a5      	cmp	r5, r4
 80044ec:	d105      	bne.n	80044fa <__libc_init_array+0x2e>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f4:	4798      	blx	r3
 80044f6:	3501      	adds	r5, #1
 80044f8:	e7ee      	b.n	80044d8 <__libc_init_array+0xc>
 80044fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044fe:	4798      	blx	r3
 8004500:	3501      	adds	r5, #1
 8004502:	e7f2      	b.n	80044ea <__libc_init_array+0x1e>
 8004504:	08009964 	.word	0x08009964
 8004508:	08009964 	.word	0x08009964
 800450c:	08009964 	.word	0x08009964
 8004510:	08009968 	.word	0x08009968

08004514 <memset>:
 8004514:	4402      	add	r2, r0
 8004516:	4603      	mov	r3, r0
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	f803 1b01 	strb.w	r1, [r3], #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <__cvt>:
 8004524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	ec55 4b10 	vmov	r4, r5, d0
 800452c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800452e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004532:	2d00      	cmp	r5, #0
 8004534:	460e      	mov	r6, r1
 8004536:	4691      	mov	r9, r2
 8004538:	4619      	mov	r1, r3
 800453a:	bfb8      	it	lt
 800453c:	4622      	movlt	r2, r4
 800453e:	462b      	mov	r3, r5
 8004540:	f027 0720 	bic.w	r7, r7, #32
 8004544:	bfbb      	ittet	lt
 8004546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800454a:	461d      	movlt	r5, r3
 800454c:	2300      	movge	r3, #0
 800454e:	232d      	movlt	r3, #45	; 0x2d
 8004550:	bfb8      	it	lt
 8004552:	4614      	movlt	r4, r2
 8004554:	2f46      	cmp	r7, #70	; 0x46
 8004556:	700b      	strb	r3, [r1, #0]
 8004558:	d004      	beq.n	8004564 <__cvt+0x40>
 800455a:	2f45      	cmp	r7, #69	; 0x45
 800455c:	d100      	bne.n	8004560 <__cvt+0x3c>
 800455e:	3601      	adds	r6, #1
 8004560:	2102      	movs	r1, #2
 8004562:	e000      	b.n	8004566 <__cvt+0x42>
 8004564:	2103      	movs	r1, #3
 8004566:	ab03      	add	r3, sp, #12
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	ab02      	add	r3, sp, #8
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4632      	mov	r2, r6
 8004570:	4653      	mov	r3, sl
 8004572:	ec45 4b10 	vmov	d0, r4, r5
 8004576:	f001 fef3 	bl	8006360 <_dtoa_r>
 800457a:	2f47      	cmp	r7, #71	; 0x47
 800457c:	4680      	mov	r8, r0
 800457e:	d102      	bne.n	8004586 <__cvt+0x62>
 8004580:	f019 0f01 	tst.w	r9, #1
 8004584:	d026      	beq.n	80045d4 <__cvt+0xb0>
 8004586:	2f46      	cmp	r7, #70	; 0x46
 8004588:	eb08 0906 	add.w	r9, r8, r6
 800458c:	d111      	bne.n	80045b2 <__cvt+0x8e>
 800458e:	f898 3000 	ldrb.w	r3, [r8]
 8004592:	2b30      	cmp	r3, #48	; 0x30
 8004594:	d10a      	bne.n	80045ac <__cvt+0x88>
 8004596:	2200      	movs	r2, #0
 8004598:	2300      	movs	r3, #0
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fc fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80045a2:	b918      	cbnz	r0, 80045ac <__cvt+0x88>
 80045a4:	f1c6 0601 	rsb	r6, r6, #1
 80045a8:	f8ca 6000 	str.w	r6, [sl]
 80045ac:	f8da 3000 	ldr.w	r3, [sl]
 80045b0:	4499      	add	r9, r3
 80045b2:	2200      	movs	r2, #0
 80045b4:	2300      	movs	r3, #0
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fc fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80045be:	b938      	cbnz	r0, 80045d0 <__cvt+0xac>
 80045c0:	2230      	movs	r2, #48	; 0x30
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	454b      	cmp	r3, r9
 80045c6:	d205      	bcs.n	80045d4 <__cvt+0xb0>
 80045c8:	1c59      	adds	r1, r3, #1
 80045ca:	9103      	str	r1, [sp, #12]
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e7f8      	b.n	80045c2 <__cvt+0x9e>
 80045d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80045d4:	9b03      	ldr	r3, [sp, #12]
 80045d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d8:	eba3 0308 	sub.w	r3, r3, r8
 80045dc:	4640      	mov	r0, r8
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	b004      	add	sp, #16
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080045e6 <__exponent>:
 80045e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e8:	2900      	cmp	r1, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	bfba      	itte	lt
 80045ee:	4249      	neglt	r1, r1
 80045f0:	232d      	movlt	r3, #45	; 0x2d
 80045f2:	232b      	movge	r3, #43	; 0x2b
 80045f4:	2909      	cmp	r1, #9
 80045f6:	f804 2b02 	strb.w	r2, [r4], #2
 80045fa:	7043      	strb	r3, [r0, #1]
 80045fc:	dd20      	ble.n	8004640 <__exponent+0x5a>
 80045fe:	f10d 0307 	add.w	r3, sp, #7
 8004602:	461f      	mov	r7, r3
 8004604:	260a      	movs	r6, #10
 8004606:	fb91 f5f6 	sdiv	r5, r1, r6
 800460a:	fb06 1115 	mls	r1, r6, r5, r1
 800460e:	3130      	adds	r1, #48	; 0x30
 8004610:	2d09      	cmp	r5, #9
 8004612:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004616:	f103 32ff 	add.w	r2, r3, #4294967295
 800461a:	4629      	mov	r1, r5
 800461c:	dc09      	bgt.n	8004632 <__exponent+0x4c>
 800461e:	3130      	adds	r1, #48	; 0x30
 8004620:	3b02      	subs	r3, #2
 8004622:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004626:	42bb      	cmp	r3, r7
 8004628:	4622      	mov	r2, r4
 800462a:	d304      	bcc.n	8004636 <__exponent+0x50>
 800462c:	1a10      	subs	r0, r2, r0
 800462e:	b003      	add	sp, #12
 8004630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004632:	4613      	mov	r3, r2
 8004634:	e7e7      	b.n	8004606 <__exponent+0x20>
 8004636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800463a:	f804 2b01 	strb.w	r2, [r4], #1
 800463e:	e7f2      	b.n	8004626 <__exponent+0x40>
 8004640:	2330      	movs	r3, #48	; 0x30
 8004642:	4419      	add	r1, r3
 8004644:	7083      	strb	r3, [r0, #2]
 8004646:	1d02      	adds	r2, r0, #4
 8004648:	70c1      	strb	r1, [r0, #3]
 800464a:	e7ef      	b.n	800462c <__exponent+0x46>

0800464c <_printf_float>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	b08d      	sub	sp, #52	; 0x34
 8004652:	460c      	mov	r4, r1
 8004654:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004658:	4616      	mov	r6, r2
 800465a:	461f      	mov	r7, r3
 800465c:	4605      	mov	r5, r0
 800465e:	f003 f919 	bl	8007894 <_localeconv_r>
 8004662:	6803      	ldr	r3, [r0, #0]
 8004664:	9304      	str	r3, [sp, #16]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb fdb2 	bl	80001d0 <strlen>
 800466c:	2300      	movs	r3, #0
 800466e:	930a      	str	r3, [sp, #40]	; 0x28
 8004670:	f8d8 3000 	ldr.w	r3, [r8]
 8004674:	9005      	str	r0, [sp, #20]
 8004676:	3307      	adds	r3, #7
 8004678:	f023 0307 	bic.w	r3, r3, #7
 800467c:	f103 0208 	add.w	r2, r3, #8
 8004680:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004684:	f8d4 b000 	ldr.w	fp, [r4]
 8004688:	f8c8 2000 	str.w	r2, [r8]
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004694:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004698:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800469c:	9307      	str	r3, [sp, #28]
 800469e:	f8cd 8018 	str.w	r8, [sp, #24]
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295
 80046a6:	4ba7      	ldr	r3, [pc, #668]	; (8004944 <_printf_float+0x2f8>)
 80046a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ac:	f7fc fa3e 	bl	8000b2c <__aeabi_dcmpun>
 80046b0:	bb70      	cbnz	r0, 8004710 <_printf_float+0xc4>
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	4ba3      	ldr	r3, [pc, #652]	; (8004944 <_printf_float+0x2f8>)
 80046b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046bc:	f7fc fa18 	bl	8000af0 <__aeabi_dcmple>
 80046c0:	bb30      	cbnz	r0, 8004710 <_printf_float+0xc4>
 80046c2:	2200      	movs	r2, #0
 80046c4:	2300      	movs	r3, #0
 80046c6:	4640      	mov	r0, r8
 80046c8:	4649      	mov	r1, r9
 80046ca:	f7fc fa07 	bl	8000adc <__aeabi_dcmplt>
 80046ce:	b110      	cbz	r0, 80046d6 <_printf_float+0x8a>
 80046d0:	232d      	movs	r3, #45	; 0x2d
 80046d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d6:	4a9c      	ldr	r2, [pc, #624]	; (8004948 <_printf_float+0x2fc>)
 80046d8:	4b9c      	ldr	r3, [pc, #624]	; (800494c <_printf_float+0x300>)
 80046da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046de:	bf8c      	ite	hi
 80046e0:	4690      	movhi	r8, r2
 80046e2:	4698      	movls	r8, r3
 80046e4:	2303      	movs	r3, #3
 80046e6:	f02b 0204 	bic.w	r2, fp, #4
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	6022      	str	r2, [r4, #0]
 80046ee:	f04f 0900 	mov.w	r9, #0
 80046f2:	9700      	str	r7, [sp, #0]
 80046f4:	4633      	mov	r3, r6
 80046f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80046f8:	4621      	mov	r1, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 f9e6 	bl	8004acc <_printf_common>
 8004700:	3001      	adds	r0, #1
 8004702:	f040 808d 	bne.w	8004820 <_printf_float+0x1d4>
 8004706:	f04f 30ff 	mov.w	r0, #4294967295
 800470a:	b00d      	add	sp, #52	; 0x34
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	4640      	mov	r0, r8
 8004716:	4649      	mov	r1, r9
 8004718:	f7fc fa08 	bl	8000b2c <__aeabi_dcmpun>
 800471c:	b110      	cbz	r0, 8004724 <_printf_float+0xd8>
 800471e:	4a8c      	ldr	r2, [pc, #560]	; (8004950 <_printf_float+0x304>)
 8004720:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <_printf_float+0x308>)
 8004722:	e7da      	b.n	80046da <_printf_float+0x8e>
 8004724:	6861      	ldr	r1, [r4, #4]
 8004726:	1c4b      	adds	r3, r1, #1
 8004728:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800472c:	a80a      	add	r0, sp, #40	; 0x28
 800472e:	d13e      	bne.n	80047ae <_printf_float+0x162>
 8004730:	2306      	movs	r3, #6
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	2300      	movs	r3, #0
 8004736:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800473a:	ab09      	add	r3, sp, #36	; 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	ec49 8b10 	vmov	d0, r8, r9
 8004742:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	f8cd a004 	str.w	sl, [sp, #4]
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	4628      	mov	r0, r5
 8004750:	f7ff fee8 	bl	8004524 <__cvt>
 8004754:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004758:	2b47      	cmp	r3, #71	; 0x47
 800475a:	4680      	mov	r8, r0
 800475c:	d109      	bne.n	8004772 <_printf_float+0x126>
 800475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004760:	1cd8      	adds	r0, r3, #3
 8004762:	db02      	blt.n	800476a <_printf_float+0x11e>
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	4293      	cmp	r3, r2
 8004768:	dd47      	ble.n	80047fa <_printf_float+0x1ae>
 800476a:	f1aa 0a02 	sub.w	sl, sl, #2
 800476e:	fa5f fa8a 	uxtb.w	sl, sl
 8004772:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004778:	d824      	bhi.n	80047c4 <_printf_float+0x178>
 800477a:	3901      	subs	r1, #1
 800477c:	4652      	mov	r2, sl
 800477e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004782:	9109      	str	r1, [sp, #36]	; 0x24
 8004784:	f7ff ff2f 	bl	80045e6 <__exponent>
 8004788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800478a:	1813      	adds	r3, r2, r0
 800478c:	2a01      	cmp	r2, #1
 800478e:	4681      	mov	r9, r0
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	dc02      	bgt.n	800479a <_printf_float+0x14e>
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	07d1      	lsls	r1, r2, #31
 8004798:	d501      	bpl.n	800479e <_printf_float+0x152>
 800479a:	3301      	adds	r3, #1
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0a5      	beq.n	80046f2 <_printf_float+0xa6>
 80047a6:	232d      	movs	r3, #45	; 0x2d
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ac:	e7a1      	b.n	80046f2 <_printf_float+0xa6>
 80047ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80047b2:	f000 8177 	beq.w	8004aa4 <_printf_float+0x458>
 80047b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047ba:	d1bb      	bne.n	8004734 <_printf_float+0xe8>
 80047bc:	2900      	cmp	r1, #0
 80047be:	d1b9      	bne.n	8004734 <_printf_float+0xe8>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e7b6      	b.n	8004732 <_printf_float+0xe6>
 80047c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80047c8:	d119      	bne.n	80047fe <_printf_float+0x1b2>
 80047ca:	2900      	cmp	r1, #0
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	dd0c      	ble.n	80047ea <_printf_float+0x19e>
 80047d0:	6121      	str	r1, [r4, #16]
 80047d2:	b913      	cbnz	r3, 80047da <_printf_float+0x18e>
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	07d2      	lsls	r2, r2, #31
 80047d8:	d502      	bpl.n	80047e0 <_printf_float+0x194>
 80047da:	3301      	adds	r3, #1
 80047dc:	440b      	add	r3, r1
 80047de:	6123      	str	r3, [r4, #16]
 80047e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80047e4:	f04f 0900 	mov.w	r9, #0
 80047e8:	e7d9      	b.n	800479e <_printf_float+0x152>
 80047ea:	b913      	cbnz	r3, 80047f2 <_printf_float+0x1a6>
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	07d0      	lsls	r0, r2, #31
 80047f0:	d501      	bpl.n	80047f6 <_printf_float+0x1aa>
 80047f2:	3302      	adds	r3, #2
 80047f4:	e7f3      	b.n	80047de <_printf_float+0x192>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e7f1      	b.n	80047de <_printf_float+0x192>
 80047fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80047fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004802:	4293      	cmp	r3, r2
 8004804:	db05      	blt.n	8004812 <_printf_float+0x1c6>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	6123      	str	r3, [r4, #16]
 800480a:	07d1      	lsls	r1, r2, #31
 800480c:	d5e8      	bpl.n	80047e0 <_printf_float+0x194>
 800480e:	3301      	adds	r3, #1
 8004810:	e7e5      	b.n	80047de <_printf_float+0x192>
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfd4      	ite	le
 8004816:	f1c3 0302 	rsble	r3, r3, #2
 800481a:	2301      	movgt	r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	e7de      	b.n	80047de <_printf_float+0x192>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	055a      	lsls	r2, r3, #21
 8004824:	d407      	bmi.n	8004836 <_printf_float+0x1ea>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	4642      	mov	r2, r8
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	d12b      	bne.n	800488c <_printf_float+0x240>
 8004834:	e767      	b.n	8004706 <_printf_float+0xba>
 8004836:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800483a:	f240 80dc 	bls.w	80049f6 <_printf_float+0x3aa>
 800483e:	2200      	movs	r2, #0
 8004840:	2300      	movs	r3, #0
 8004842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004846:	f7fc f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800484a:	2800      	cmp	r0, #0
 800484c:	d033      	beq.n	80048b6 <_printf_float+0x26a>
 800484e:	2301      	movs	r3, #1
 8004850:	4a41      	ldr	r2, [pc, #260]	; (8004958 <_printf_float+0x30c>)
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	f43f af54 	beq.w	8004706 <_printf_float+0xba>
 800485e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	db02      	blt.n	800486c <_printf_float+0x220>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	07d8      	lsls	r0, r3, #31
 800486a:	d50f      	bpl.n	800488c <_printf_float+0x240>
 800486c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004870:	4631      	mov	r1, r6
 8004872:	4628      	mov	r0, r5
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	f43f af45 	beq.w	8004706 <_printf_float+0xba>
 800487c:	f04f 0800 	mov.w	r8, #0
 8004880:	f104 091a 	add.w	r9, r4, #26
 8004884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004886:	3b01      	subs	r3, #1
 8004888:	4543      	cmp	r3, r8
 800488a:	dc09      	bgt.n	80048a0 <_printf_float+0x254>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	079b      	lsls	r3, r3, #30
 8004890:	f100 8103 	bmi.w	8004a9a <_printf_float+0x44e>
 8004894:	68e0      	ldr	r0, [r4, #12]
 8004896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004898:	4298      	cmp	r0, r3
 800489a:	bfb8      	it	lt
 800489c:	4618      	movlt	r0, r3
 800489e:	e734      	b.n	800470a <_printf_float+0xbe>
 80048a0:	2301      	movs	r3, #1
 80048a2:	464a      	mov	r2, r9
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f af2b 	beq.w	8004706 <_printf_float+0xba>
 80048b0:	f108 0801 	add.w	r8, r8, #1
 80048b4:	e7e6      	b.n	8004884 <_printf_float+0x238>
 80048b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	dc2b      	bgt.n	8004914 <_printf_float+0x2c8>
 80048bc:	2301      	movs	r3, #1
 80048be:	4a26      	ldr	r2, [pc, #152]	; (8004958 <_printf_float+0x30c>)
 80048c0:	4631      	mov	r1, r6
 80048c2:	4628      	mov	r0, r5
 80048c4:	47b8      	blx	r7
 80048c6:	3001      	adds	r0, #1
 80048c8:	f43f af1d 	beq.w	8004706 <_printf_float+0xba>
 80048cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ce:	b923      	cbnz	r3, 80048da <_printf_float+0x28e>
 80048d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d2:	b913      	cbnz	r3, 80048da <_printf_float+0x28e>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	07d9      	lsls	r1, r3, #31
 80048d8:	d5d8      	bpl.n	800488c <_printf_float+0x240>
 80048da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f af0e 	beq.w	8004706 <_printf_float+0xba>
 80048ea:	f04f 0900 	mov.w	r9, #0
 80048ee:	f104 0a1a 	add.w	sl, r4, #26
 80048f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f4:	425b      	negs	r3, r3
 80048f6:	454b      	cmp	r3, r9
 80048f8:	dc01      	bgt.n	80048fe <_printf_float+0x2b2>
 80048fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fc:	e794      	b.n	8004828 <_printf_float+0x1dc>
 80048fe:	2301      	movs	r3, #1
 8004900:	4652      	mov	r2, sl
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f aefc 	beq.w	8004706 <_printf_float+0xba>
 800490e:	f109 0901 	add.w	r9, r9, #1
 8004912:	e7ee      	b.n	80048f2 <_printf_float+0x2a6>
 8004914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004918:	429a      	cmp	r2, r3
 800491a:	bfa8      	it	ge
 800491c:	461a      	movge	r2, r3
 800491e:	2a00      	cmp	r2, #0
 8004920:	4691      	mov	r9, r2
 8004922:	dd07      	ble.n	8004934 <_printf_float+0x2e8>
 8004924:	4613      	mov	r3, r2
 8004926:	4631      	mov	r1, r6
 8004928:	4642      	mov	r2, r8
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f aee9 	beq.w	8004706 <_printf_float+0xba>
 8004934:	f104 031a 	add.w	r3, r4, #26
 8004938:	f04f 0b00 	mov.w	fp, #0
 800493c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004940:	9306      	str	r3, [sp, #24]
 8004942:	e015      	b.n	8004970 <_printf_float+0x324>
 8004944:	7fefffff 	.word	0x7fefffff
 8004948:	0800962c 	.word	0x0800962c
 800494c:	08009628 	.word	0x08009628
 8004950:	08009634 	.word	0x08009634
 8004954:	08009630 	.word	0x08009630
 8004958:	08009853 	.word	0x08009853
 800495c:	2301      	movs	r3, #1
 800495e:	9a06      	ldr	r2, [sp, #24]
 8004960:	4631      	mov	r1, r6
 8004962:	4628      	mov	r0, r5
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	f43f aecd 	beq.w	8004706 <_printf_float+0xba>
 800496c:	f10b 0b01 	add.w	fp, fp, #1
 8004970:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004974:	ebaa 0309 	sub.w	r3, sl, r9
 8004978:	455b      	cmp	r3, fp
 800497a:	dcef      	bgt.n	800495c <_printf_float+0x310>
 800497c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004980:	429a      	cmp	r2, r3
 8004982:	44d0      	add	r8, sl
 8004984:	db15      	blt.n	80049b2 <_printf_float+0x366>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07da      	lsls	r2, r3, #31
 800498a:	d412      	bmi.n	80049b2 <_printf_float+0x366>
 800498c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004990:	eba3 020a 	sub.w	r2, r3, sl
 8004994:	eba3 0a01 	sub.w	sl, r3, r1
 8004998:	4592      	cmp	sl, r2
 800499a:	bfa8      	it	ge
 800499c:	4692      	movge	sl, r2
 800499e:	f1ba 0f00 	cmp.w	sl, #0
 80049a2:	dc0e      	bgt.n	80049c2 <_printf_float+0x376>
 80049a4:	f04f 0800 	mov.w	r8, #0
 80049a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049ac:	f104 091a 	add.w	r9, r4, #26
 80049b0:	e019      	b.n	80049e6 <_printf_float+0x39a>
 80049b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1e5      	bne.n	800498c <_printf_float+0x340>
 80049c0:	e6a1      	b.n	8004706 <_printf_float+0xba>
 80049c2:	4653      	mov	r3, sl
 80049c4:	4642      	mov	r2, r8
 80049c6:	4631      	mov	r1, r6
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	d1e9      	bne.n	80049a4 <_printf_float+0x358>
 80049d0:	e699      	b.n	8004706 <_printf_float+0xba>
 80049d2:	2301      	movs	r3, #1
 80049d4:	464a      	mov	r2, r9
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	f43f ae92 	beq.w	8004706 <_printf_float+0xba>
 80049e2:	f108 0801 	add.w	r8, r8, #1
 80049e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	eba3 030a 	sub.w	r3, r3, sl
 80049f0:	4543      	cmp	r3, r8
 80049f2:	dcee      	bgt.n	80049d2 <_printf_float+0x386>
 80049f4:	e74a      	b.n	800488c <_printf_float+0x240>
 80049f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049f8:	2a01      	cmp	r2, #1
 80049fa:	dc01      	bgt.n	8004a00 <_printf_float+0x3b4>
 80049fc:	07db      	lsls	r3, r3, #31
 80049fe:	d53a      	bpl.n	8004a76 <_printf_float+0x42a>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4642      	mov	r2, r8
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f43f ae7b 	beq.w	8004706 <_printf_float+0xba>
 8004a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f108 0801 	add.w	r8, r8, #1
 8004a20:	f43f ae71 	beq.w	8004706 <_printf_float+0xba>
 8004a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a26:	2200      	movs	r2, #0
 8004a28:	f103 3aff 	add.w	sl, r3, #4294967295
 8004a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a30:	2300      	movs	r3, #0
 8004a32:	f7fc f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a36:	b9c8      	cbnz	r0, 8004a6c <_printf_float+0x420>
 8004a38:	4653      	mov	r3, sl
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	d10e      	bne.n	8004a64 <_printf_float+0x418>
 8004a46:	e65e      	b.n	8004706 <_printf_float+0xba>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4652      	mov	r2, sl
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f ae57 	beq.w	8004706 <_printf_float+0xba>
 8004a58:	f108 0801 	add.w	r8, r8, #1
 8004a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4543      	cmp	r3, r8
 8004a62:	dcf1      	bgt.n	8004a48 <_printf_float+0x3fc>
 8004a64:	464b      	mov	r3, r9
 8004a66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a6a:	e6de      	b.n	800482a <_printf_float+0x1de>
 8004a6c:	f04f 0800 	mov.w	r8, #0
 8004a70:	f104 0a1a 	add.w	sl, r4, #26
 8004a74:	e7f2      	b.n	8004a5c <_printf_float+0x410>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e7df      	b.n	8004a3a <_printf_float+0x3ee>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	464a      	mov	r2, r9
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	f43f ae3e 	beq.w	8004706 <_printf_float+0xba>
 8004a8a:	f108 0801 	add.w	r8, r8, #1
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	4543      	cmp	r3, r8
 8004a96:	dcf0      	bgt.n	8004a7a <_printf_float+0x42e>
 8004a98:	e6fc      	b.n	8004894 <_printf_float+0x248>
 8004a9a:	f04f 0800 	mov.w	r8, #0
 8004a9e:	f104 0919 	add.w	r9, r4, #25
 8004aa2:	e7f4      	b.n	8004a8e <_printf_float+0x442>
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	f43f ae8b 	beq.w	80047c0 <_printf_float+0x174>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ab0:	ab09      	add	r3, sp, #36	; 0x24
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	ec49 8b10 	vmov	d0, r8, r9
 8004ab8:	6022      	str	r2, [r4, #0]
 8004aba:	f8cd a004 	str.w	sl, [sp, #4]
 8004abe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7ff fd2e 	bl	8004524 <__cvt>
 8004ac8:	4680      	mov	r8, r0
 8004aca:	e648      	b.n	800475e <_printf_float+0x112>

08004acc <_printf_common>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	4691      	mov	r9, r2
 8004ad2:	461f      	mov	r7, r3
 8004ad4:	688a      	ldr	r2, [r1, #8]
 8004ad6:	690b      	ldr	r3, [r1, #16]
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bfb8      	it	lt
 8004ae0:	4613      	movlt	r3, r2
 8004ae2:	f8c9 3000 	str.w	r3, [r9]
 8004ae6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aea:	4606      	mov	r6, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	b112      	cbz	r2, 8004af6 <_printf_common+0x2a>
 8004af0:	3301      	adds	r3, #1
 8004af2:	f8c9 3000 	str.w	r3, [r9]
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	0699      	lsls	r1, r3, #26
 8004afa:	bf42      	ittt	mi
 8004afc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b00:	3302      	addmi	r3, #2
 8004b02:	f8c9 3000 	strmi.w	r3, [r9]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	f015 0506 	ands.w	r5, r5, #6
 8004b0c:	d107      	bne.n	8004b1e <_printf_common+0x52>
 8004b0e:	f104 0a19 	add.w	sl, r4, #25
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	f8d9 2000 	ldr.w	r2, [r9]
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	42ab      	cmp	r3, r5
 8004b1c:	dc28      	bgt.n	8004b70 <_printf_common+0xa4>
 8004b1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	3300      	adds	r3, #0
 8004b26:	bf18      	it	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	0692      	lsls	r2, r2, #26
 8004b2c:	d42d      	bmi.n	8004b8a <_printf_common+0xbe>
 8004b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b32:	4639      	mov	r1, r7
 8004b34:	4630      	mov	r0, r6
 8004b36:	47c0      	blx	r8
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d020      	beq.n	8004b7e <_printf_common+0xb2>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	68e5      	ldr	r5, [r4, #12]
 8004b40:	f8d9 2000 	ldr.w	r2, [r9]
 8004b44:	f003 0306 	and.w	r3, r3, #6
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	bf08      	it	eq
 8004b4c:	1aad      	subeq	r5, r5, r2
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	6922      	ldr	r2, [r4, #16]
 8004b52:	bf0c      	ite	eq
 8004b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b58:	2500      	movne	r5, #0
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	bfc4      	itt	gt
 8004b5e:	1a9b      	subgt	r3, r3, r2
 8004b60:	18ed      	addgt	r5, r5, r3
 8004b62:	f04f 0900 	mov.w	r9, #0
 8004b66:	341a      	adds	r4, #26
 8004b68:	454d      	cmp	r5, r9
 8004b6a:	d11a      	bne.n	8004ba2 <_printf_common+0xd6>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e008      	b.n	8004b82 <_printf_common+0xb6>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4652      	mov	r2, sl
 8004b74:	4639      	mov	r1, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	47c0      	blx	r8
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d103      	bne.n	8004b86 <_printf_common+0xba>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	3501      	adds	r5, #1
 8004b88:	e7c3      	b.n	8004b12 <_printf_common+0x46>
 8004b8a:	18e1      	adds	r1, r4, r3
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	2030      	movs	r0, #48	; 0x30
 8004b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b94:	4422      	add	r2, r4
 8004b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	e7c5      	b.n	8004b2e <_printf_common+0x62>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4630      	mov	r0, r6
 8004baa:	47c0      	blx	r8
 8004bac:	3001      	adds	r0, #1
 8004bae:	d0e6      	beq.n	8004b7e <_printf_common+0xb2>
 8004bb0:	f109 0901 	add.w	r9, r9, #1
 8004bb4:	e7d8      	b.n	8004b68 <_printf_common+0x9c>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	7e09      	ldrb	r1, [r1, #24]
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	296e      	cmp	r1, #110	; 0x6e
 8004bc8:	4617      	mov	r7, r2
 8004bca:	4606      	mov	r6, r0
 8004bcc:	4698      	mov	r8, r3
 8004bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd0:	f000 80b3 	beq.w	8004d3a <_printf_i+0x182>
 8004bd4:	d822      	bhi.n	8004c1c <_printf_i+0x64>
 8004bd6:	2963      	cmp	r1, #99	; 0x63
 8004bd8:	d036      	beq.n	8004c48 <_printf_i+0x90>
 8004bda:	d80a      	bhi.n	8004bf2 <_printf_i+0x3a>
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	f000 80b9 	beq.w	8004d54 <_printf_i+0x19c>
 8004be2:	2958      	cmp	r1, #88	; 0x58
 8004be4:	f000 8083 	beq.w	8004cee <_printf_i+0x136>
 8004be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bf0:	e032      	b.n	8004c58 <_printf_i+0xa0>
 8004bf2:	2964      	cmp	r1, #100	; 0x64
 8004bf4:	d001      	beq.n	8004bfa <_printf_i+0x42>
 8004bf6:	2969      	cmp	r1, #105	; 0x69
 8004bf8:	d1f6      	bne.n	8004be8 <_printf_i+0x30>
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	0605      	lsls	r5, r0, #24
 8004c00:	f103 0104 	add.w	r1, r3, #4
 8004c04:	d52a      	bpl.n	8004c5c <_printf_i+0xa4>
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da03      	bge.n	8004c16 <_printf_i+0x5e>
 8004c0e:	222d      	movs	r2, #45	; 0x2d
 8004c10:	425b      	negs	r3, r3
 8004c12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c16:	486f      	ldr	r0, [pc, #444]	; (8004dd4 <_printf_i+0x21c>)
 8004c18:	220a      	movs	r2, #10
 8004c1a:	e039      	b.n	8004c90 <_printf_i+0xd8>
 8004c1c:	2973      	cmp	r1, #115	; 0x73
 8004c1e:	f000 809d 	beq.w	8004d5c <_printf_i+0x1a4>
 8004c22:	d808      	bhi.n	8004c36 <_printf_i+0x7e>
 8004c24:	296f      	cmp	r1, #111	; 0x6f
 8004c26:	d020      	beq.n	8004c6a <_printf_i+0xb2>
 8004c28:	2970      	cmp	r1, #112	; 0x70
 8004c2a:	d1dd      	bne.n	8004be8 <_printf_i+0x30>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	f043 0320 	orr.w	r3, r3, #32
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	e003      	b.n	8004c3e <_printf_i+0x86>
 8004c36:	2975      	cmp	r1, #117	; 0x75
 8004c38:	d017      	beq.n	8004c6a <_printf_i+0xb2>
 8004c3a:	2978      	cmp	r1, #120	; 0x78
 8004c3c:	d1d4      	bne.n	8004be8 <_printf_i+0x30>
 8004c3e:	2378      	movs	r3, #120	; 0x78
 8004c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c44:	4864      	ldr	r0, [pc, #400]	; (8004dd8 <_printf_i+0x220>)
 8004c46:	e055      	b.n	8004cf4 <_printf_i+0x13c>
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	1d19      	adds	r1, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6011      	str	r1, [r2, #0]
 8004c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e08c      	b.n	8004d76 <_printf_i+0x1be>
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6011      	str	r1, [r2, #0]
 8004c60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c64:	bf18      	it	ne
 8004c66:	b21b      	sxthne	r3, r3
 8004c68:	e7cf      	b.n	8004c0a <_printf_i+0x52>
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1d18      	adds	r0, r3, #4
 8004c70:	6010      	str	r0, [r2, #0]
 8004c72:	0628      	lsls	r0, r5, #24
 8004c74:	d501      	bpl.n	8004c7a <_printf_i+0xc2>
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	e002      	b.n	8004c80 <_printf_i+0xc8>
 8004c7a:	0668      	lsls	r0, r5, #25
 8004c7c:	d5fb      	bpl.n	8004c76 <_printf_i+0xbe>
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4854      	ldr	r0, [pc, #336]	; (8004dd4 <_printf_i+0x21c>)
 8004c82:	296f      	cmp	r1, #111	; 0x6f
 8004c84:	bf14      	ite	ne
 8004c86:	220a      	movne	r2, #10
 8004c88:	2208      	moveq	r2, #8
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c90:	6865      	ldr	r5, [r4, #4]
 8004c92:	60a5      	str	r5, [r4, #8]
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	f2c0 8095 	blt.w	8004dc4 <_printf_i+0x20c>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	f021 0104 	bic.w	r1, r1, #4
 8004ca0:	6021      	str	r1, [r4, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d13d      	bne.n	8004d22 <_printf_i+0x16a>
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	f040 808e 	bne.w	8004dc8 <_printf_i+0x210>
 8004cac:	4665      	mov	r5, ip
 8004cae:	2a08      	cmp	r2, #8
 8004cb0:	d10b      	bne.n	8004cca <_printf_i+0x112>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d508      	bpl.n	8004cca <_printf_i+0x112>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	bfde      	ittt	le
 8004cc0:	2330      	movle	r3, #48	; 0x30
 8004cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cca:	ebac 0305 	sub.w	r3, ip, r5
 8004cce:	6123      	str	r3, [r4, #16]
 8004cd0:	f8cd 8000 	str.w	r8, [sp]
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	aa03      	add	r2, sp, #12
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7ff fef6 	bl	8004acc <_printf_common>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d14d      	bne.n	8004d80 <_printf_i+0x1c8>
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	b005      	add	sp, #20
 8004cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cee:	4839      	ldr	r0, [pc, #228]	; (8004dd4 <_printf_i+0x21c>)
 8004cf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cf4:	6813      	ldr	r3, [r2, #0]
 8004cf6:	6821      	ldr	r1, [r4, #0]
 8004cf8:	1d1d      	adds	r5, r3, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6015      	str	r5, [r2, #0]
 8004cfe:	060a      	lsls	r2, r1, #24
 8004d00:	d50b      	bpl.n	8004d1a <_printf_i+0x162>
 8004d02:	07ca      	lsls	r2, r1, #31
 8004d04:	bf44      	itt	mi
 8004d06:	f041 0120 	orrmi.w	r1, r1, #32
 8004d0a:	6021      	strmi	r1, [r4, #0]
 8004d0c:	b91b      	cbnz	r3, 8004d16 <_printf_i+0x15e>
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	f022 0220 	bic.w	r2, r2, #32
 8004d14:	6022      	str	r2, [r4, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	e7b7      	b.n	8004c8a <_printf_i+0xd2>
 8004d1a:	064d      	lsls	r5, r1, #25
 8004d1c:	bf48      	it	mi
 8004d1e:	b29b      	uxthmi	r3, r3
 8004d20:	e7ef      	b.n	8004d02 <_printf_i+0x14a>
 8004d22:	4665      	mov	r5, ip
 8004d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d28:	fb02 3311 	mls	r3, r2, r1, r3
 8004d2c:	5cc3      	ldrb	r3, [r0, r3]
 8004d2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d32:	460b      	mov	r3, r1
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d1f5      	bne.n	8004d24 <_printf_i+0x16c>
 8004d38:	e7b9      	b.n	8004cae <_printf_i+0xf6>
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	6961      	ldr	r1, [r4, #20]
 8004d40:	1d18      	adds	r0, r3, #4
 8004d42:	6010      	str	r0, [r2, #0]
 8004d44:	0628      	lsls	r0, r5, #24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	d501      	bpl.n	8004d4e <_printf_i+0x196>
 8004d4a:	6019      	str	r1, [r3, #0]
 8004d4c:	e002      	b.n	8004d54 <_printf_i+0x19c>
 8004d4e:	066a      	lsls	r2, r5, #25
 8004d50:	d5fb      	bpl.n	8004d4a <_printf_i+0x192>
 8004d52:	8019      	strh	r1, [r3, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	4665      	mov	r5, ip
 8004d5a:	e7b9      	b.n	8004cd0 <_printf_i+0x118>
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	1d19      	adds	r1, r3, #4
 8004d60:	6011      	str	r1, [r2, #0]
 8004d62:	681d      	ldr	r5, [r3, #0]
 8004d64:	6862      	ldr	r2, [r4, #4]
 8004d66:	2100      	movs	r1, #0
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7fb fa39 	bl	80001e0 <memchr>
 8004d6e:	b108      	cbz	r0, 8004d74 <_printf_i+0x1bc>
 8004d70:	1b40      	subs	r0, r0, r5
 8004d72:	6060      	str	r0, [r4, #4]
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d7e:	e7a7      	b.n	8004cd0 <_printf_i+0x118>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	462a      	mov	r2, r5
 8004d84:	4639      	mov	r1, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	47c0      	blx	r8
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d0aa      	beq.n	8004ce4 <_printf_i+0x12c>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	079b      	lsls	r3, r3, #30
 8004d92:	d413      	bmi.n	8004dbc <_printf_i+0x204>
 8004d94:	68e0      	ldr	r0, [r4, #12]
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	4298      	cmp	r0, r3
 8004d9a:	bfb8      	it	lt
 8004d9c:	4618      	movlt	r0, r3
 8004d9e:	e7a3      	b.n	8004ce8 <_printf_i+0x130>
 8004da0:	2301      	movs	r3, #1
 8004da2:	464a      	mov	r2, r9
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d09a      	beq.n	8004ce4 <_printf_i+0x12c>
 8004dae:	3501      	adds	r5, #1
 8004db0:	68e3      	ldr	r3, [r4, #12]
 8004db2:	9a03      	ldr	r2, [sp, #12]
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	42ab      	cmp	r3, r5
 8004db8:	dcf2      	bgt.n	8004da0 <_printf_i+0x1e8>
 8004dba:	e7eb      	b.n	8004d94 <_printf_i+0x1dc>
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	f104 0919 	add.w	r9, r4, #25
 8004dc2:	e7f5      	b.n	8004db0 <_printf_i+0x1f8>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ac      	bne.n	8004d22 <_printf_i+0x16a>
 8004dc8:	7803      	ldrb	r3, [r0, #0]
 8004dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd2:	e76c      	b.n	8004cae <_printf_i+0xf6>
 8004dd4:	08009638 	.word	0x08009638
 8004dd8:	08009649 	.word	0x08009649

08004ddc <_scanf_float>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	469a      	mov	sl, r3
 8004de2:	688b      	ldr	r3, [r1, #8]
 8004de4:	4616      	mov	r6, r2
 8004de6:	1e5a      	subs	r2, r3, #1
 8004de8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004dec:	b087      	sub	sp, #28
 8004dee:	bf83      	ittte	hi
 8004df0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004df4:	189b      	addhi	r3, r3, r2
 8004df6:	9301      	strhi	r3, [sp, #4]
 8004df8:	2300      	movls	r3, #0
 8004dfa:	bf86      	itte	hi
 8004dfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e00:	608b      	strhi	r3, [r1, #8]
 8004e02:	9301      	strls	r3, [sp, #4]
 8004e04:	680b      	ldr	r3, [r1, #0]
 8004e06:	4688      	mov	r8, r1
 8004e08:	f04f 0b00 	mov.w	fp, #0
 8004e0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e10:	f848 3b1c 	str.w	r3, [r8], #28
 8004e14:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004e18:	4607      	mov	r7, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4645      	mov	r5, r8
 8004e1e:	465a      	mov	r2, fp
 8004e20:	46d9      	mov	r9, fp
 8004e22:	f8cd b008 	str.w	fp, [sp, #8]
 8004e26:	68a1      	ldr	r1, [r4, #8]
 8004e28:	b181      	cbz	r1, 8004e4c <_scanf_float+0x70>
 8004e2a:	6833      	ldr	r3, [r6, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b49      	cmp	r3, #73	; 0x49
 8004e30:	d071      	beq.n	8004f16 <_scanf_float+0x13a>
 8004e32:	d84d      	bhi.n	8004ed0 <_scanf_float+0xf4>
 8004e34:	2b39      	cmp	r3, #57	; 0x39
 8004e36:	d840      	bhi.n	8004eba <_scanf_float+0xde>
 8004e38:	2b31      	cmp	r3, #49	; 0x31
 8004e3a:	f080 8088 	bcs.w	8004f4e <_scanf_float+0x172>
 8004e3e:	2b2d      	cmp	r3, #45	; 0x2d
 8004e40:	f000 8090 	beq.w	8004f64 <_scanf_float+0x188>
 8004e44:	d815      	bhi.n	8004e72 <_scanf_float+0x96>
 8004e46:	2b2b      	cmp	r3, #43	; 0x2b
 8004e48:	f000 808c 	beq.w	8004f64 <_scanf_float+0x188>
 8004e4c:	f1b9 0f00 	cmp.w	r9, #0
 8004e50:	d003      	beq.n	8004e5a <_scanf_float+0x7e>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	3a01      	subs	r2, #1
 8004e5c:	2a01      	cmp	r2, #1
 8004e5e:	f200 80ea 	bhi.w	8005036 <_scanf_float+0x25a>
 8004e62:	4545      	cmp	r5, r8
 8004e64:	f200 80dc 	bhi.w	8005020 <_scanf_float+0x244>
 8004e68:	2601      	movs	r6, #1
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	b007      	add	sp, #28
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	2b2e      	cmp	r3, #46	; 0x2e
 8004e74:	f000 809f 	beq.w	8004fb6 <_scanf_float+0x1da>
 8004e78:	2b30      	cmp	r3, #48	; 0x30
 8004e7a:	d1e7      	bne.n	8004e4c <_scanf_float+0x70>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004e82:	d064      	beq.n	8004f4e <_scanf_float+0x172>
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004e8a:	6020      	str	r0, [r4, #0]
 8004e8c:	f109 0901 	add.w	r9, r9, #1
 8004e90:	b11b      	cbz	r3, 8004e9a <_scanf_float+0xbe>
 8004e92:	3b01      	subs	r3, #1
 8004e94:	3101      	adds	r1, #1
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	60a1      	str	r1, [r4, #8]
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	60a3      	str	r3, [r4, #8]
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	6873      	ldr	r3, [r6, #4]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	6073      	str	r3, [r6, #4]
 8004eae:	f340 80ac 	ble.w	800500a <_scanf_float+0x22e>
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	6033      	str	r3, [r6, #0]
 8004eb8:	e7b5      	b.n	8004e26 <_scanf_float+0x4a>
 8004eba:	2b45      	cmp	r3, #69	; 0x45
 8004ebc:	f000 8085 	beq.w	8004fca <_scanf_float+0x1ee>
 8004ec0:	2b46      	cmp	r3, #70	; 0x46
 8004ec2:	d06a      	beq.n	8004f9a <_scanf_float+0x1be>
 8004ec4:	2b41      	cmp	r3, #65	; 0x41
 8004ec6:	d1c1      	bne.n	8004e4c <_scanf_float+0x70>
 8004ec8:	2a01      	cmp	r2, #1
 8004eca:	d1bf      	bne.n	8004e4c <_scanf_float+0x70>
 8004ecc:	2202      	movs	r2, #2
 8004ece:	e046      	b.n	8004f5e <_scanf_float+0x182>
 8004ed0:	2b65      	cmp	r3, #101	; 0x65
 8004ed2:	d07a      	beq.n	8004fca <_scanf_float+0x1ee>
 8004ed4:	d818      	bhi.n	8004f08 <_scanf_float+0x12c>
 8004ed6:	2b54      	cmp	r3, #84	; 0x54
 8004ed8:	d066      	beq.n	8004fa8 <_scanf_float+0x1cc>
 8004eda:	d811      	bhi.n	8004f00 <_scanf_float+0x124>
 8004edc:	2b4e      	cmp	r3, #78	; 0x4e
 8004ede:	d1b5      	bne.n	8004e4c <_scanf_float+0x70>
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d146      	bne.n	8004f72 <_scanf_float+0x196>
 8004ee4:	f1b9 0f00 	cmp.w	r9, #0
 8004ee8:	d145      	bne.n	8004f76 <_scanf_float+0x19a>
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004ef0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004ef4:	d13f      	bne.n	8004f76 <_scanf_float+0x19a>
 8004ef6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004efa:	6021      	str	r1, [r4, #0]
 8004efc:	2201      	movs	r2, #1
 8004efe:	e02e      	b.n	8004f5e <_scanf_float+0x182>
 8004f00:	2b59      	cmp	r3, #89	; 0x59
 8004f02:	d01e      	beq.n	8004f42 <_scanf_float+0x166>
 8004f04:	2b61      	cmp	r3, #97	; 0x61
 8004f06:	e7de      	b.n	8004ec6 <_scanf_float+0xea>
 8004f08:	2b6e      	cmp	r3, #110	; 0x6e
 8004f0a:	d0e9      	beq.n	8004ee0 <_scanf_float+0x104>
 8004f0c:	d815      	bhi.n	8004f3a <_scanf_float+0x15e>
 8004f0e:	2b66      	cmp	r3, #102	; 0x66
 8004f10:	d043      	beq.n	8004f9a <_scanf_float+0x1be>
 8004f12:	2b69      	cmp	r3, #105	; 0x69
 8004f14:	d19a      	bne.n	8004e4c <_scanf_float+0x70>
 8004f16:	f1bb 0f00 	cmp.w	fp, #0
 8004f1a:	d138      	bne.n	8004f8e <_scanf_float+0x1b2>
 8004f1c:	f1b9 0f00 	cmp.w	r9, #0
 8004f20:	d197      	bne.n	8004e52 <_scanf_float+0x76>
 8004f22:	6821      	ldr	r1, [r4, #0]
 8004f24:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004f28:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004f2c:	d195      	bne.n	8004e5a <_scanf_float+0x7e>
 8004f2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f32:	6021      	str	r1, [r4, #0]
 8004f34:	f04f 0b01 	mov.w	fp, #1
 8004f38:	e011      	b.n	8004f5e <_scanf_float+0x182>
 8004f3a:	2b74      	cmp	r3, #116	; 0x74
 8004f3c:	d034      	beq.n	8004fa8 <_scanf_float+0x1cc>
 8004f3e:	2b79      	cmp	r3, #121	; 0x79
 8004f40:	d184      	bne.n	8004e4c <_scanf_float+0x70>
 8004f42:	f1bb 0f07 	cmp.w	fp, #7
 8004f46:	d181      	bne.n	8004e4c <_scanf_float+0x70>
 8004f48:	f04f 0b08 	mov.w	fp, #8
 8004f4c:	e007      	b.n	8004f5e <_scanf_float+0x182>
 8004f4e:	eb12 0f0b 	cmn.w	r2, fp
 8004f52:	f47f af7b 	bne.w	8004e4c <_scanf_float+0x70>
 8004f56:	6821      	ldr	r1, [r4, #0]
 8004f58:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004f5c:	6021      	str	r1, [r4, #0]
 8004f5e:	702b      	strb	r3, [r5, #0]
 8004f60:	3501      	adds	r5, #1
 8004f62:	e79a      	b.n	8004e9a <_scanf_float+0xbe>
 8004f64:	6821      	ldr	r1, [r4, #0]
 8004f66:	0608      	lsls	r0, r1, #24
 8004f68:	f57f af70 	bpl.w	8004e4c <_scanf_float+0x70>
 8004f6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f70:	e7f4      	b.n	8004f5c <_scanf_float+0x180>
 8004f72:	2a02      	cmp	r2, #2
 8004f74:	d047      	beq.n	8005006 <_scanf_float+0x22a>
 8004f76:	f1bb 0f01 	cmp.w	fp, #1
 8004f7a:	d003      	beq.n	8004f84 <_scanf_float+0x1a8>
 8004f7c:	f1bb 0f04 	cmp.w	fp, #4
 8004f80:	f47f af64 	bne.w	8004e4c <_scanf_float+0x70>
 8004f84:	f10b 0b01 	add.w	fp, fp, #1
 8004f88:	fa5f fb8b 	uxtb.w	fp, fp
 8004f8c:	e7e7      	b.n	8004f5e <_scanf_float+0x182>
 8004f8e:	f1bb 0f03 	cmp.w	fp, #3
 8004f92:	d0f7      	beq.n	8004f84 <_scanf_float+0x1a8>
 8004f94:	f1bb 0f05 	cmp.w	fp, #5
 8004f98:	e7f2      	b.n	8004f80 <_scanf_float+0x1a4>
 8004f9a:	f1bb 0f02 	cmp.w	fp, #2
 8004f9e:	f47f af55 	bne.w	8004e4c <_scanf_float+0x70>
 8004fa2:	f04f 0b03 	mov.w	fp, #3
 8004fa6:	e7da      	b.n	8004f5e <_scanf_float+0x182>
 8004fa8:	f1bb 0f06 	cmp.w	fp, #6
 8004fac:	f47f af4e 	bne.w	8004e4c <_scanf_float+0x70>
 8004fb0:	f04f 0b07 	mov.w	fp, #7
 8004fb4:	e7d3      	b.n	8004f5e <_scanf_float+0x182>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	0588      	lsls	r0, r1, #22
 8004fba:	f57f af47 	bpl.w	8004e4c <_scanf_float+0x70>
 8004fbe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004fc2:	6021      	str	r1, [r4, #0]
 8004fc4:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fc8:	e7c9      	b.n	8004f5e <_scanf_float+0x182>
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004fd0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004fd4:	d006      	beq.n	8004fe4 <_scanf_float+0x208>
 8004fd6:	0548      	lsls	r0, r1, #21
 8004fd8:	f57f af38 	bpl.w	8004e4c <_scanf_float+0x70>
 8004fdc:	f1b9 0f00 	cmp.w	r9, #0
 8004fe0:	f43f af3b 	beq.w	8004e5a <_scanf_float+0x7e>
 8004fe4:	0588      	lsls	r0, r1, #22
 8004fe6:	bf58      	it	pl
 8004fe8:	9802      	ldrpl	r0, [sp, #8]
 8004fea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004fee:	bf58      	it	pl
 8004ff0:	eba9 0000 	subpl.w	r0, r9, r0
 8004ff4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004ff8:	bf58      	it	pl
 8004ffa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004ffe:	6021      	str	r1, [r4, #0]
 8005000:	f04f 0900 	mov.w	r9, #0
 8005004:	e7ab      	b.n	8004f5e <_scanf_float+0x182>
 8005006:	2203      	movs	r2, #3
 8005008:	e7a9      	b.n	8004f5e <_scanf_float+0x182>
 800500a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800500e:	9205      	str	r2, [sp, #20]
 8005010:	4631      	mov	r1, r6
 8005012:	4638      	mov	r0, r7
 8005014:	4798      	blx	r3
 8005016:	9a05      	ldr	r2, [sp, #20]
 8005018:	2800      	cmp	r0, #0
 800501a:	f43f af04 	beq.w	8004e26 <_scanf_float+0x4a>
 800501e:	e715      	b.n	8004e4c <_scanf_float+0x70>
 8005020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005028:	4632      	mov	r2, r6
 800502a:	4638      	mov	r0, r7
 800502c:	4798      	blx	r3
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	3b01      	subs	r3, #1
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	e715      	b.n	8004e62 <_scanf_float+0x86>
 8005036:	f10b 33ff 	add.w	r3, fp, #4294967295
 800503a:	2b06      	cmp	r3, #6
 800503c:	d80a      	bhi.n	8005054 <_scanf_float+0x278>
 800503e:	f1bb 0f02 	cmp.w	fp, #2
 8005042:	d968      	bls.n	8005116 <_scanf_float+0x33a>
 8005044:	f1ab 0b03 	sub.w	fp, fp, #3
 8005048:	fa5f fb8b 	uxtb.w	fp, fp
 800504c:	eba5 0b0b 	sub.w	fp, r5, fp
 8005050:	455d      	cmp	r5, fp
 8005052:	d14b      	bne.n	80050ec <_scanf_float+0x310>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	05da      	lsls	r2, r3, #23
 8005058:	d51f      	bpl.n	800509a <_scanf_float+0x2be>
 800505a:	055b      	lsls	r3, r3, #21
 800505c:	d468      	bmi.n	8005130 <_scanf_float+0x354>
 800505e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	2965      	cmp	r1, #101	; 0x65
 8005066:	f103 33ff 	add.w	r3, r3, #4294967295
 800506a:	f105 3bff 	add.w	fp, r5, #4294967295
 800506e:	6123      	str	r3, [r4, #16]
 8005070:	d00d      	beq.n	800508e <_scanf_float+0x2b2>
 8005072:	2945      	cmp	r1, #69	; 0x45
 8005074:	d00b      	beq.n	800508e <_scanf_float+0x2b2>
 8005076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800507a:	4632      	mov	r2, r6
 800507c:	4638      	mov	r0, r7
 800507e:	4798      	blx	r3
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005086:	3b01      	subs	r3, #1
 8005088:	f1a5 0b02 	sub.w	fp, r5, #2
 800508c:	6123      	str	r3, [r4, #16]
 800508e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005092:	4632      	mov	r2, r6
 8005094:	4638      	mov	r0, r7
 8005096:	4798      	blx	r3
 8005098:	465d      	mov	r5, fp
 800509a:	6826      	ldr	r6, [r4, #0]
 800509c:	f016 0610 	ands.w	r6, r6, #16
 80050a0:	d17a      	bne.n	8005198 <_scanf_float+0x3bc>
 80050a2:	702e      	strb	r6, [r5, #0]
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ae:	d142      	bne.n	8005136 <_scanf_float+0x35a>
 80050b0:	9b02      	ldr	r3, [sp, #8]
 80050b2:	eba9 0303 	sub.w	r3, r9, r3
 80050b6:	425a      	negs	r2, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d149      	bne.n	8005150 <_scanf_float+0x374>
 80050bc:	2200      	movs	r2, #0
 80050be:	4641      	mov	r1, r8
 80050c0:	4638      	mov	r0, r7
 80050c2:	f000 ff4d 	bl	8005f60 <_strtod_r>
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	f8da 3000 	ldr.w	r3, [sl]
 80050cc:	f015 0f02 	tst.w	r5, #2
 80050d0:	f103 0204 	add.w	r2, r3, #4
 80050d4:	ec59 8b10 	vmov	r8, r9, d0
 80050d8:	f8ca 2000 	str.w	r2, [sl]
 80050dc:	d043      	beq.n	8005166 <_scanf_float+0x38a>
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	e9c3 8900 	strd	r8, r9, [r3]
 80050e4:	68e3      	ldr	r3, [r4, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60e3      	str	r3, [r4, #12]
 80050ea:	e6be      	b.n	8004e6a <_scanf_float+0x8e>
 80050ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80050f4:	4632      	mov	r2, r6
 80050f6:	4638      	mov	r0, r7
 80050f8:	4798      	blx	r3
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	e7a6      	b.n	8005050 <_scanf_float+0x274>
 8005102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005106:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800510a:	4632      	mov	r2, r6
 800510c:	4638      	mov	r0, r7
 800510e:	4798      	blx	r3
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	3b01      	subs	r3, #1
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	4545      	cmp	r5, r8
 8005118:	d8f3      	bhi.n	8005102 <_scanf_float+0x326>
 800511a:	e6a5      	b.n	8004e68 <_scanf_float+0x8c>
 800511c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005120:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005124:	4632      	mov	r2, r6
 8005126:	4638      	mov	r0, r7
 8005128:	4798      	blx	r3
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	3b01      	subs	r3, #1
 800512e:	6123      	str	r3, [r4, #16]
 8005130:	4545      	cmp	r5, r8
 8005132:	d8f3      	bhi.n	800511c <_scanf_float+0x340>
 8005134:	e698      	b.n	8004e68 <_scanf_float+0x8c>
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0bf      	beq.n	80050bc <_scanf_float+0x2e0>
 800513c:	9904      	ldr	r1, [sp, #16]
 800513e:	230a      	movs	r3, #10
 8005140:	4632      	mov	r2, r6
 8005142:	3101      	adds	r1, #1
 8005144:	4638      	mov	r0, r7
 8005146:	f000 ff97 	bl	8006078 <_strtol_r>
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	9d04      	ldr	r5, [sp, #16]
 800514e:	1ac2      	subs	r2, r0, r3
 8005150:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005154:	429d      	cmp	r5, r3
 8005156:	bf28      	it	cs
 8005158:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800515c:	490f      	ldr	r1, [pc, #60]	; (800519c <_scanf_float+0x3c0>)
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f8cc 	bl	80052fc <siprintf>
 8005164:	e7aa      	b.n	80050bc <_scanf_float+0x2e0>
 8005166:	f015 0504 	ands.w	r5, r5, #4
 800516a:	d1b8      	bne.n	80050de <_scanf_float+0x302>
 800516c:	681f      	ldr	r7, [r3, #0]
 800516e:	ee10 2a10 	vmov	r2, s0
 8005172:	464b      	mov	r3, r9
 8005174:	ee10 0a10 	vmov	r0, s0
 8005178:	4649      	mov	r1, r9
 800517a:	f7fb fcd7 	bl	8000b2c <__aeabi_dcmpun>
 800517e:	b128      	cbz	r0, 800518c <_scanf_float+0x3b0>
 8005180:	4628      	mov	r0, r5
 8005182:	f000 f8b5 	bl	80052f0 <nanf>
 8005186:	ed87 0a00 	vstr	s0, [r7]
 800518a:	e7ab      	b.n	80050e4 <_scanf_float+0x308>
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb fd2a 	bl	8000be8 <__aeabi_d2f>
 8005194:	6038      	str	r0, [r7, #0]
 8005196:	e7a5      	b.n	80050e4 <_scanf_float+0x308>
 8005198:	2600      	movs	r6, #0
 800519a:	e666      	b.n	8004e6a <_scanf_float+0x8e>
 800519c:	0800965a 	.word	0x0800965a

080051a0 <iprintf>:
 80051a0:	b40f      	push	{r0, r1, r2, r3}
 80051a2:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <iprintf+0x2c>)
 80051a4:	b513      	push	{r0, r1, r4, lr}
 80051a6:	681c      	ldr	r4, [r3, #0]
 80051a8:	b124      	cbz	r4, 80051b4 <iprintf+0x14>
 80051aa:	69a3      	ldr	r3, [r4, #24]
 80051ac:	b913      	cbnz	r3, 80051b4 <iprintf+0x14>
 80051ae:	4620      	mov	r0, r4
 80051b0:	f001 ff90 	bl	80070d4 <__sinit>
 80051b4:	ab05      	add	r3, sp, #20
 80051b6:	9a04      	ldr	r2, [sp, #16]
 80051b8:	68a1      	ldr	r1, [r4, #8]
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	4620      	mov	r0, r4
 80051be:	f003 fa31 	bl	8008624 <_vfiprintf_r>
 80051c2:	b002      	add	sp, #8
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	b004      	add	sp, #16
 80051ca:	4770      	bx	lr
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <putchar>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <putchar+0x24>)
 80051d4:	681c      	ldr	r4, [r3, #0]
 80051d6:	4605      	mov	r5, r0
 80051d8:	b124      	cbz	r4, 80051e4 <putchar+0x14>
 80051da:	69a3      	ldr	r3, [r4, #24]
 80051dc:	b913      	cbnz	r3, 80051e4 <putchar+0x14>
 80051de:	4620      	mov	r0, r4
 80051e0:	f001 ff78 	bl	80070d4 <__sinit>
 80051e4:	68a2      	ldr	r2, [r4, #8]
 80051e6:	4629      	mov	r1, r5
 80051e8:	4620      	mov	r0, r4
 80051ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ee:	f003 bdff 	b.w	8008df0 <_putc_r>
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c

080051f8 <_puts_r>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	460e      	mov	r6, r1
 80051fc:	4605      	mov	r5, r0
 80051fe:	b118      	cbz	r0, 8005208 <_puts_r+0x10>
 8005200:	6983      	ldr	r3, [r0, #24]
 8005202:	b90b      	cbnz	r3, 8005208 <_puts_r+0x10>
 8005204:	f001 ff66 	bl	80070d4 <__sinit>
 8005208:	69ab      	ldr	r3, [r5, #24]
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	b913      	cbnz	r3, 8005214 <_puts_r+0x1c>
 800520e:	4628      	mov	r0, r5
 8005210:	f001 ff60 	bl	80070d4 <__sinit>
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <_puts_r+0xac>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d117      	bne.n	800524a <_puts_r+0x52>
 800521a:	686c      	ldr	r4, [r5, #4]
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	071b      	lsls	r3, r3, #28
 8005220:	d51d      	bpl.n	800525e <_puts_r+0x66>
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	b1db      	cbz	r3, 800525e <_puts_r+0x66>
 8005226:	3e01      	subs	r6, #1
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800522e:	3b01      	subs	r3, #1
 8005230:	60a3      	str	r3, [r4, #8]
 8005232:	b9e9      	cbnz	r1, 8005270 <_puts_r+0x78>
 8005234:	2b00      	cmp	r3, #0
 8005236:	da2e      	bge.n	8005296 <_puts_r+0x9e>
 8005238:	4622      	mov	r2, r4
 800523a:	210a      	movs	r1, #10
 800523c:	4628      	mov	r0, r5
 800523e:	f000 ff43 	bl	80060c8 <__swbuf_r>
 8005242:	3001      	adds	r0, #1
 8005244:	d011      	beq.n	800526a <_puts_r+0x72>
 8005246:	200a      	movs	r0, #10
 8005248:	e011      	b.n	800526e <_puts_r+0x76>
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <_puts_r+0xb0>)
 800524c:	429c      	cmp	r4, r3
 800524e:	d101      	bne.n	8005254 <_puts_r+0x5c>
 8005250:	68ac      	ldr	r4, [r5, #8]
 8005252:	e7e3      	b.n	800521c <_puts_r+0x24>
 8005254:	4b15      	ldr	r3, [pc, #84]	; (80052ac <_puts_r+0xb4>)
 8005256:	429c      	cmp	r4, r3
 8005258:	bf08      	it	eq
 800525a:	68ec      	ldreq	r4, [r5, #12]
 800525c:	e7de      	b.n	800521c <_puts_r+0x24>
 800525e:	4621      	mov	r1, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 ff83 	bl	800616c <__swsetup_r>
 8005266:	2800      	cmp	r0, #0
 8005268:	d0dd      	beq.n	8005226 <_puts_r+0x2e>
 800526a:	f04f 30ff 	mov.w	r0, #4294967295
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	2b00      	cmp	r3, #0
 8005272:	da04      	bge.n	800527e <_puts_r+0x86>
 8005274:	69a2      	ldr	r2, [r4, #24]
 8005276:	429a      	cmp	r2, r3
 8005278:	dc06      	bgt.n	8005288 <_puts_r+0x90>
 800527a:	290a      	cmp	r1, #10
 800527c:	d004      	beq.n	8005288 <_puts_r+0x90>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	7019      	strb	r1, [r3, #0]
 8005286:	e7cf      	b.n	8005228 <_puts_r+0x30>
 8005288:	4622      	mov	r2, r4
 800528a:	4628      	mov	r0, r5
 800528c:	f000 ff1c 	bl	80060c8 <__swbuf_r>
 8005290:	3001      	adds	r0, #1
 8005292:	d1c9      	bne.n	8005228 <_puts_r+0x30>
 8005294:	e7e9      	b.n	800526a <_puts_r+0x72>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	200a      	movs	r0, #10
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	6022      	str	r2, [r4, #0]
 800529e:	7018      	strb	r0, [r3, #0]
 80052a0:	e7e5      	b.n	800526e <_puts_r+0x76>
 80052a2:	bf00      	nop
 80052a4:	080096e0 	.word	0x080096e0
 80052a8:	08009700 	.word	0x08009700
 80052ac:	080096c0 	.word	0x080096c0

080052b0 <puts>:
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <puts+0xc>)
 80052b2:	4601      	mov	r1, r0
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	f7ff bf9f 	b.w	80051f8 <_puts_r>
 80052ba:	bf00      	nop
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <iscanf>:
 80052c0:	b40f      	push	{r0, r1, r2, r3}
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <iscanf+0x2c>)
 80052c4:	b513      	push	{r0, r1, r4, lr}
 80052c6:	681c      	ldr	r4, [r3, #0]
 80052c8:	b124      	cbz	r4, 80052d4 <iscanf+0x14>
 80052ca:	69a3      	ldr	r3, [r4, #24]
 80052cc:	b913      	cbnz	r3, 80052d4 <iscanf+0x14>
 80052ce:	4620      	mov	r0, r4
 80052d0:	f001 ff00 	bl	80070d4 <__sinit>
 80052d4:	ab05      	add	r3, sp, #20
 80052d6:	9a04      	ldr	r2, [sp, #16]
 80052d8:	6861      	ldr	r1, [r4, #4]
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	4620      	mov	r0, r4
 80052de:	f003 fc07 	bl	8008af0 <_vfiscanf_r>
 80052e2:	b002      	add	sp, #8
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	b004      	add	sp, #16
 80052ea:	4770      	bx	lr
 80052ec:	2000000c 	.word	0x2000000c

080052f0 <nanf>:
 80052f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80052f8 <nanf+0x8>
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	7fc00000 	.word	0x7fc00000

080052fc <siprintf>:
 80052fc:	b40e      	push	{r1, r2, r3}
 80052fe:	b500      	push	{lr}
 8005300:	b09c      	sub	sp, #112	; 0x70
 8005302:	ab1d      	add	r3, sp, #116	; 0x74
 8005304:	9002      	str	r0, [sp, #8]
 8005306:	9006      	str	r0, [sp, #24]
 8005308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800530c:	4809      	ldr	r0, [pc, #36]	; (8005334 <siprintf+0x38>)
 800530e:	9107      	str	r1, [sp, #28]
 8005310:	9104      	str	r1, [sp, #16]
 8005312:	4909      	ldr	r1, [pc, #36]	; (8005338 <siprintf+0x3c>)
 8005314:	f853 2b04 	ldr.w	r2, [r3], #4
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	a902      	add	r1, sp, #8
 8005320:	f003 f85e 	bl	80083e0 <_svfiprintf_r>
 8005324:	9b02      	ldr	r3, [sp, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	b01c      	add	sp, #112	; 0x70
 800532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005330:	b003      	add	sp, #12
 8005332:	4770      	bx	lr
 8005334:	2000000c 	.word	0x2000000c
 8005338:	ffff0208 	.word	0xffff0208

0800533c <sulp>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4604      	mov	r4, r0
 8005340:	460d      	mov	r5, r1
 8005342:	ec45 4b10 	vmov	d0, r4, r5
 8005346:	4616      	mov	r6, r2
 8005348:	f002 fe06 	bl	8007f58 <__ulp>
 800534c:	ec51 0b10 	vmov	r0, r1, d0
 8005350:	b17e      	cbz	r6, 8005372 <sulp+0x36>
 8005352:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005356:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800535a:	2b00      	cmp	r3, #0
 800535c:	dd09      	ble.n	8005372 <sulp+0x36>
 800535e:	051b      	lsls	r3, r3, #20
 8005360:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005364:	2400      	movs	r4, #0
 8005366:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	f7fb f943 	bl	80005f8 <__aeabi_dmul>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	0000      	movs	r0, r0
	...

08005378 <_strtod_l>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	461f      	mov	r7, r3
 800537e:	b0a1      	sub	sp, #132	; 0x84
 8005380:	2300      	movs	r3, #0
 8005382:	4681      	mov	r9, r0
 8005384:	4638      	mov	r0, r7
 8005386:	460e      	mov	r6, r1
 8005388:	9217      	str	r2, [sp, #92]	; 0x5c
 800538a:	931c      	str	r3, [sp, #112]	; 0x70
 800538c:	f002 fa80 	bl	8007890 <__localeconv_l>
 8005390:	4680      	mov	r8, r0
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	f7fa ff1c 	bl	80001d0 <strlen>
 8005398:	f04f 0a00 	mov.w	sl, #0
 800539c:	4604      	mov	r4, r0
 800539e:	f04f 0b00 	mov.w	fp, #0
 80053a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80053a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	2a0d      	cmp	r2, #13
 80053aa:	d832      	bhi.n	8005412 <_strtod_l+0x9a>
 80053ac:	2a09      	cmp	r2, #9
 80053ae:	d236      	bcs.n	800541e <_strtod_l+0xa6>
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	d03e      	beq.n	8005432 <_strtod_l+0xba>
 80053b4:	2300      	movs	r3, #0
 80053b6:	930d      	str	r3, [sp, #52]	; 0x34
 80053b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80053ba:	782b      	ldrb	r3, [r5, #0]
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	f040 80ac 	bne.w	800551a <_strtod_l+0x1a2>
 80053c2:	786b      	ldrb	r3, [r5, #1]
 80053c4:	2b58      	cmp	r3, #88	; 0x58
 80053c6:	d001      	beq.n	80053cc <_strtod_l+0x54>
 80053c8:	2b78      	cmp	r3, #120	; 0x78
 80053ca:	d167      	bne.n	800549c <_strtod_l+0x124>
 80053cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	ab1c      	add	r3, sp, #112	; 0x70
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	9702      	str	r7, [sp, #8]
 80053d6:	ab1d      	add	r3, sp, #116	; 0x74
 80053d8:	4a88      	ldr	r2, [pc, #544]	; (80055fc <_strtod_l+0x284>)
 80053da:	a91b      	add	r1, sp, #108	; 0x6c
 80053dc:	4648      	mov	r0, r9
 80053de:	f001 ff6e 	bl	80072be <__gethex>
 80053e2:	f010 0407 	ands.w	r4, r0, #7
 80053e6:	4606      	mov	r6, r0
 80053e8:	d005      	beq.n	80053f6 <_strtod_l+0x7e>
 80053ea:	2c06      	cmp	r4, #6
 80053ec:	d12b      	bne.n	8005446 <_strtod_l+0xce>
 80053ee:	3501      	adds	r5, #1
 80053f0:	2300      	movs	r3, #0
 80053f2:	951b      	str	r5, [sp, #108]	; 0x6c
 80053f4:	930d      	str	r3, [sp, #52]	; 0x34
 80053f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f040 859a 	bne.w	8005f32 <_strtod_l+0xbba>
 80053fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005400:	b1e3      	cbz	r3, 800543c <_strtod_l+0xc4>
 8005402:	4652      	mov	r2, sl
 8005404:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005408:	ec43 2b10 	vmov	d0, r2, r3
 800540c:	b021      	add	sp, #132	; 0x84
 800540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005412:	2a2b      	cmp	r2, #43	; 0x2b
 8005414:	d015      	beq.n	8005442 <_strtod_l+0xca>
 8005416:	2a2d      	cmp	r2, #45	; 0x2d
 8005418:	d004      	beq.n	8005424 <_strtod_l+0xac>
 800541a:	2a20      	cmp	r2, #32
 800541c:	d1ca      	bne.n	80053b4 <_strtod_l+0x3c>
 800541e:	3301      	adds	r3, #1
 8005420:	931b      	str	r3, [sp, #108]	; 0x6c
 8005422:	e7bf      	b.n	80053a4 <_strtod_l+0x2c>
 8005424:	2201      	movs	r2, #1
 8005426:	920d      	str	r2, [sp, #52]	; 0x34
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	921b      	str	r2, [sp, #108]	; 0x6c
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1c2      	bne.n	80053b8 <_strtod_l+0x40>
 8005432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005434:	961b      	str	r6, [sp, #108]	; 0x6c
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 8579 	bne.w	8005f2e <_strtod_l+0xbb6>
 800543c:	4652      	mov	r2, sl
 800543e:	465b      	mov	r3, fp
 8005440:	e7e2      	b.n	8005408 <_strtod_l+0x90>
 8005442:	2200      	movs	r2, #0
 8005444:	e7ef      	b.n	8005426 <_strtod_l+0xae>
 8005446:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005448:	b13a      	cbz	r2, 800545a <_strtod_l+0xe2>
 800544a:	2135      	movs	r1, #53	; 0x35
 800544c:	a81e      	add	r0, sp, #120	; 0x78
 800544e:	f002 fe7b 	bl	8008148 <__copybits>
 8005452:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005454:	4648      	mov	r0, r9
 8005456:	f002 fae8 	bl	8007a2a <_Bfree>
 800545a:	3c01      	subs	r4, #1
 800545c:	2c04      	cmp	r4, #4
 800545e:	d806      	bhi.n	800546e <_strtod_l+0xf6>
 8005460:	e8df f004 	tbb	[pc, r4]
 8005464:	1714030a 	.word	0x1714030a
 8005468:	0a          	.byte	0x0a
 8005469:	00          	.byte	0x00
 800546a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800546e:	0730      	lsls	r0, r6, #28
 8005470:	d5c1      	bpl.n	80053f6 <_strtod_l+0x7e>
 8005472:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005476:	e7be      	b.n	80053f6 <_strtod_l+0x7e>
 8005478:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800547c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800547e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005482:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005486:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800548a:	e7f0      	b.n	800546e <_strtod_l+0xf6>
 800548c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005600 <_strtod_l+0x288>
 8005490:	e7ed      	b.n	800546e <_strtod_l+0xf6>
 8005492:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005496:	f04f 3aff 	mov.w	sl, #4294967295
 800549a:	e7e8      	b.n	800546e <_strtod_l+0xf6>
 800549c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	2b30      	cmp	r3, #48	; 0x30
 80054a6:	d0f9      	beq.n	800549c <_strtod_l+0x124>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0a4      	beq.n	80053f6 <_strtod_l+0x7e>
 80054ac:	2301      	movs	r3, #1
 80054ae:	2500      	movs	r5, #0
 80054b0:	9306      	str	r3, [sp, #24]
 80054b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054b4:	9308      	str	r3, [sp, #32]
 80054b6:	9507      	str	r5, [sp, #28]
 80054b8:	9505      	str	r5, [sp, #20]
 80054ba:	220a      	movs	r2, #10
 80054bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80054be:	7807      	ldrb	r7, [r0, #0]
 80054c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80054c4:	b2d9      	uxtb	r1, r3
 80054c6:	2909      	cmp	r1, #9
 80054c8:	d929      	bls.n	800551e <_strtod_l+0x1a6>
 80054ca:	4622      	mov	r2, r4
 80054cc:	f8d8 1000 	ldr.w	r1, [r8]
 80054d0:	f003 fddf 	bl	8009092 <strncmp>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d031      	beq.n	800553c <_strtod_l+0x1c4>
 80054d8:	2000      	movs	r0, #0
 80054da:	9c05      	ldr	r4, [sp, #20]
 80054dc:	9004      	str	r0, [sp, #16]
 80054de:	463b      	mov	r3, r7
 80054e0:	4602      	mov	r2, r0
 80054e2:	2b65      	cmp	r3, #101	; 0x65
 80054e4:	d001      	beq.n	80054ea <_strtod_l+0x172>
 80054e6:	2b45      	cmp	r3, #69	; 0x45
 80054e8:	d114      	bne.n	8005514 <_strtod_l+0x19c>
 80054ea:	b924      	cbnz	r4, 80054f6 <_strtod_l+0x17e>
 80054ec:	b910      	cbnz	r0, 80054f4 <_strtod_l+0x17c>
 80054ee:	9b06      	ldr	r3, [sp, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d09e      	beq.n	8005432 <_strtod_l+0xba>
 80054f4:	2400      	movs	r4, #0
 80054f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80054f8:	1c73      	adds	r3, r6, #1
 80054fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80054fc:	7873      	ldrb	r3, [r6, #1]
 80054fe:	2b2b      	cmp	r3, #43	; 0x2b
 8005500:	d078      	beq.n	80055f4 <_strtod_l+0x27c>
 8005502:	2b2d      	cmp	r3, #45	; 0x2d
 8005504:	d070      	beq.n	80055e8 <_strtod_l+0x270>
 8005506:	f04f 0c00 	mov.w	ip, #0
 800550a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800550e:	2f09      	cmp	r7, #9
 8005510:	d97c      	bls.n	800560c <_strtod_l+0x294>
 8005512:	961b      	str	r6, [sp, #108]	; 0x6c
 8005514:	f04f 0e00 	mov.w	lr, #0
 8005518:	e09a      	b.n	8005650 <_strtod_l+0x2d8>
 800551a:	2300      	movs	r3, #0
 800551c:	e7c7      	b.n	80054ae <_strtod_l+0x136>
 800551e:	9905      	ldr	r1, [sp, #20]
 8005520:	2908      	cmp	r1, #8
 8005522:	bfdd      	ittte	le
 8005524:	9907      	ldrle	r1, [sp, #28]
 8005526:	fb02 3301 	mlale	r3, r2, r1, r3
 800552a:	9307      	strle	r3, [sp, #28]
 800552c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005530:	9b05      	ldr	r3, [sp, #20]
 8005532:	3001      	adds	r0, #1
 8005534:	3301      	adds	r3, #1
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	901b      	str	r0, [sp, #108]	; 0x6c
 800553a:	e7bf      	b.n	80054bc <_strtod_l+0x144>
 800553c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800553e:	191a      	adds	r2, r3, r4
 8005540:	921b      	str	r2, [sp, #108]	; 0x6c
 8005542:	9a05      	ldr	r2, [sp, #20]
 8005544:	5d1b      	ldrb	r3, [r3, r4]
 8005546:	2a00      	cmp	r2, #0
 8005548:	d037      	beq.n	80055ba <_strtod_l+0x242>
 800554a:	9c05      	ldr	r4, [sp, #20]
 800554c:	4602      	mov	r2, r0
 800554e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005552:	2909      	cmp	r1, #9
 8005554:	d913      	bls.n	800557e <_strtod_l+0x206>
 8005556:	2101      	movs	r1, #1
 8005558:	9104      	str	r1, [sp, #16]
 800555a:	e7c2      	b.n	80054e2 <_strtod_l+0x16a>
 800555c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	921b      	str	r2, [sp, #108]	; 0x6c
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	3001      	adds	r0, #1
 8005566:	2b30      	cmp	r3, #48	; 0x30
 8005568:	d0f8      	beq.n	800555c <_strtod_l+0x1e4>
 800556a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800556e:	2a08      	cmp	r2, #8
 8005570:	f200 84e4 	bhi.w	8005f3c <_strtod_l+0xbc4>
 8005574:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005576:	9208      	str	r2, [sp, #32]
 8005578:	4602      	mov	r2, r0
 800557a:	2000      	movs	r0, #0
 800557c:	4604      	mov	r4, r0
 800557e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005582:	f100 0101 	add.w	r1, r0, #1
 8005586:	d012      	beq.n	80055ae <_strtod_l+0x236>
 8005588:	440a      	add	r2, r1
 800558a:	eb00 0c04 	add.w	ip, r0, r4
 800558e:	4621      	mov	r1, r4
 8005590:	270a      	movs	r7, #10
 8005592:	458c      	cmp	ip, r1
 8005594:	d113      	bne.n	80055be <_strtod_l+0x246>
 8005596:	1821      	adds	r1, r4, r0
 8005598:	2908      	cmp	r1, #8
 800559a:	f104 0401 	add.w	r4, r4, #1
 800559e:	4404      	add	r4, r0
 80055a0:	dc19      	bgt.n	80055d6 <_strtod_l+0x25e>
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	210a      	movs	r1, #10
 80055a6:	fb01 e303 	mla	r3, r1, r3, lr
 80055aa:	9307      	str	r3, [sp, #28]
 80055ac:	2100      	movs	r1, #0
 80055ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055b0:	1c58      	adds	r0, r3, #1
 80055b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	4608      	mov	r0, r1
 80055b8:	e7c9      	b.n	800554e <_strtod_l+0x1d6>
 80055ba:	9805      	ldr	r0, [sp, #20]
 80055bc:	e7d3      	b.n	8005566 <_strtod_l+0x1ee>
 80055be:	2908      	cmp	r1, #8
 80055c0:	f101 0101 	add.w	r1, r1, #1
 80055c4:	dc03      	bgt.n	80055ce <_strtod_l+0x256>
 80055c6:	9b07      	ldr	r3, [sp, #28]
 80055c8:	437b      	muls	r3, r7
 80055ca:	9307      	str	r3, [sp, #28]
 80055cc:	e7e1      	b.n	8005592 <_strtod_l+0x21a>
 80055ce:	2910      	cmp	r1, #16
 80055d0:	bfd8      	it	le
 80055d2:	437d      	mulle	r5, r7
 80055d4:	e7dd      	b.n	8005592 <_strtod_l+0x21a>
 80055d6:	2c10      	cmp	r4, #16
 80055d8:	bfdc      	itt	le
 80055da:	210a      	movle	r1, #10
 80055dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80055e0:	e7e4      	b.n	80055ac <_strtod_l+0x234>
 80055e2:	2301      	movs	r3, #1
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	e781      	b.n	80054ec <_strtod_l+0x174>
 80055e8:	f04f 0c01 	mov.w	ip, #1
 80055ec:	1cb3      	adds	r3, r6, #2
 80055ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80055f0:	78b3      	ldrb	r3, [r6, #2]
 80055f2:	e78a      	b.n	800550a <_strtod_l+0x192>
 80055f4:	f04f 0c00 	mov.w	ip, #0
 80055f8:	e7f8      	b.n	80055ec <_strtod_l+0x274>
 80055fa:	bf00      	nop
 80055fc:	08009660 	.word	0x08009660
 8005600:	7ff00000 	.word	0x7ff00000
 8005604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005606:	1c5f      	adds	r7, r3, #1
 8005608:	971b      	str	r7, [sp, #108]	; 0x6c
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b30      	cmp	r3, #48	; 0x30
 800560e:	d0f9      	beq.n	8005604 <_strtod_l+0x28c>
 8005610:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005614:	2f08      	cmp	r7, #8
 8005616:	f63f af7d 	bhi.w	8005514 <_strtod_l+0x19c>
 800561a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800561e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005620:	930a      	str	r3, [sp, #40]	; 0x28
 8005622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005624:	1c5f      	adds	r7, r3, #1
 8005626:	971b      	str	r7, [sp, #108]	; 0x6c
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800562e:	f1b8 0f09 	cmp.w	r8, #9
 8005632:	d937      	bls.n	80056a4 <_strtod_l+0x32c>
 8005634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005636:	1a7f      	subs	r7, r7, r1
 8005638:	2f08      	cmp	r7, #8
 800563a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800563e:	dc37      	bgt.n	80056b0 <_strtod_l+0x338>
 8005640:	45be      	cmp	lr, r7
 8005642:	bfa8      	it	ge
 8005644:	46be      	movge	lr, r7
 8005646:	f1bc 0f00 	cmp.w	ip, #0
 800564a:	d001      	beq.n	8005650 <_strtod_l+0x2d8>
 800564c:	f1ce 0e00 	rsb	lr, lr, #0
 8005650:	2c00      	cmp	r4, #0
 8005652:	d151      	bne.n	80056f8 <_strtod_l+0x380>
 8005654:	2800      	cmp	r0, #0
 8005656:	f47f aece 	bne.w	80053f6 <_strtod_l+0x7e>
 800565a:	9a06      	ldr	r2, [sp, #24]
 800565c:	2a00      	cmp	r2, #0
 800565e:	f47f aeca 	bne.w	80053f6 <_strtod_l+0x7e>
 8005662:	9a04      	ldr	r2, [sp, #16]
 8005664:	2a00      	cmp	r2, #0
 8005666:	f47f aee4 	bne.w	8005432 <_strtod_l+0xba>
 800566a:	2b4e      	cmp	r3, #78	; 0x4e
 800566c:	d027      	beq.n	80056be <_strtod_l+0x346>
 800566e:	dc21      	bgt.n	80056b4 <_strtod_l+0x33c>
 8005670:	2b49      	cmp	r3, #73	; 0x49
 8005672:	f47f aede 	bne.w	8005432 <_strtod_l+0xba>
 8005676:	49a0      	ldr	r1, [pc, #640]	; (80058f8 <_strtod_l+0x580>)
 8005678:	a81b      	add	r0, sp, #108	; 0x6c
 800567a:	f002 f853 	bl	8007724 <__match>
 800567e:	2800      	cmp	r0, #0
 8005680:	f43f aed7 	beq.w	8005432 <_strtod_l+0xba>
 8005684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005686:	499d      	ldr	r1, [pc, #628]	; (80058fc <_strtod_l+0x584>)
 8005688:	3b01      	subs	r3, #1
 800568a:	a81b      	add	r0, sp, #108	; 0x6c
 800568c:	931b      	str	r3, [sp, #108]	; 0x6c
 800568e:	f002 f849 	bl	8007724 <__match>
 8005692:	b910      	cbnz	r0, 800569a <_strtod_l+0x322>
 8005694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005696:	3301      	adds	r3, #1
 8005698:	931b      	str	r3, [sp, #108]	; 0x6c
 800569a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005910 <_strtod_l+0x598>
 800569e:	f04f 0a00 	mov.w	sl, #0
 80056a2:	e6a8      	b.n	80053f6 <_strtod_l+0x7e>
 80056a4:	210a      	movs	r1, #10
 80056a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80056aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80056ae:	e7b8      	b.n	8005622 <_strtod_l+0x2aa>
 80056b0:	46be      	mov	lr, r7
 80056b2:	e7c8      	b.n	8005646 <_strtod_l+0x2ce>
 80056b4:	2b69      	cmp	r3, #105	; 0x69
 80056b6:	d0de      	beq.n	8005676 <_strtod_l+0x2fe>
 80056b8:	2b6e      	cmp	r3, #110	; 0x6e
 80056ba:	f47f aeba 	bne.w	8005432 <_strtod_l+0xba>
 80056be:	4990      	ldr	r1, [pc, #576]	; (8005900 <_strtod_l+0x588>)
 80056c0:	a81b      	add	r0, sp, #108	; 0x6c
 80056c2:	f002 f82f 	bl	8007724 <__match>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	f43f aeb3 	beq.w	8005432 <_strtod_l+0xba>
 80056cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b28      	cmp	r3, #40	; 0x28
 80056d2:	d10e      	bne.n	80056f2 <_strtod_l+0x37a>
 80056d4:	aa1e      	add	r2, sp, #120	; 0x78
 80056d6:	498b      	ldr	r1, [pc, #556]	; (8005904 <_strtod_l+0x58c>)
 80056d8:	a81b      	add	r0, sp, #108	; 0x6c
 80056da:	f002 f837 	bl	800774c <__hexnan>
 80056de:	2805      	cmp	r0, #5
 80056e0:	d107      	bne.n	80056f2 <_strtod_l+0x37a>
 80056e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056e4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80056e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80056ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80056f0:	e681      	b.n	80053f6 <_strtod_l+0x7e>
 80056f2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005918 <_strtod_l+0x5a0>
 80056f6:	e7d2      	b.n	800569e <_strtod_l+0x326>
 80056f8:	ebae 0302 	sub.w	r3, lr, r2
 80056fc:	9306      	str	r3, [sp, #24]
 80056fe:	9b05      	ldr	r3, [sp, #20]
 8005700:	9807      	ldr	r0, [sp, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf08      	it	eq
 8005706:	4623      	moveq	r3, r4
 8005708:	2c10      	cmp	r4, #16
 800570a:	9305      	str	r3, [sp, #20]
 800570c:	46a0      	mov	r8, r4
 800570e:	bfa8      	it	ge
 8005710:	f04f 0810 	movge.w	r8, #16
 8005714:	f7fa fef6 	bl	8000504 <__aeabi_ui2d>
 8005718:	2c09      	cmp	r4, #9
 800571a:	4682      	mov	sl, r0
 800571c:	468b      	mov	fp, r1
 800571e:	dc13      	bgt.n	8005748 <_strtod_l+0x3d0>
 8005720:	9b06      	ldr	r3, [sp, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f43f ae67 	beq.w	80053f6 <_strtod_l+0x7e>
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	dd7a      	ble.n	8005822 <_strtod_l+0x4aa>
 800572c:	2b16      	cmp	r3, #22
 800572e:	dc61      	bgt.n	80057f4 <_strtod_l+0x47c>
 8005730:	4a75      	ldr	r2, [pc, #468]	; (8005908 <_strtod_l+0x590>)
 8005732:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005736:	e9de 0100 	ldrd	r0, r1, [lr]
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	4682      	mov	sl, r0
 8005744:	468b      	mov	fp, r1
 8005746:	e656      	b.n	80053f6 <_strtod_l+0x7e>
 8005748:	4b6f      	ldr	r3, [pc, #444]	; (8005908 <_strtod_l+0x590>)
 800574a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800574e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005752:	f7fa ff51 	bl	80005f8 <__aeabi_dmul>
 8005756:	4606      	mov	r6, r0
 8005758:	4628      	mov	r0, r5
 800575a:	460f      	mov	r7, r1
 800575c:	f7fa fed2 	bl	8000504 <__aeabi_ui2d>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4630      	mov	r0, r6
 8005766:	4639      	mov	r1, r7
 8005768:	f7fa fd90 	bl	800028c <__adddf3>
 800576c:	2c0f      	cmp	r4, #15
 800576e:	4682      	mov	sl, r0
 8005770:	468b      	mov	fp, r1
 8005772:	ddd5      	ble.n	8005720 <_strtod_l+0x3a8>
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	eba4 0808 	sub.w	r8, r4, r8
 800577a:	4498      	add	r8, r3
 800577c:	f1b8 0f00 	cmp.w	r8, #0
 8005780:	f340 8096 	ble.w	80058b0 <_strtod_l+0x538>
 8005784:	f018 030f 	ands.w	r3, r8, #15
 8005788:	d00a      	beq.n	80057a0 <_strtod_l+0x428>
 800578a:	495f      	ldr	r1, [pc, #380]	; (8005908 <_strtod_l+0x590>)
 800578c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005790:	4652      	mov	r2, sl
 8005792:	465b      	mov	r3, fp
 8005794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005798:	f7fa ff2e 	bl	80005f8 <__aeabi_dmul>
 800579c:	4682      	mov	sl, r0
 800579e:	468b      	mov	fp, r1
 80057a0:	f038 080f 	bics.w	r8, r8, #15
 80057a4:	d073      	beq.n	800588e <_strtod_l+0x516>
 80057a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80057aa:	dd47      	ble.n	800583c <_strtod_l+0x4c4>
 80057ac:	2400      	movs	r4, #0
 80057ae:	46a0      	mov	r8, r4
 80057b0:	9407      	str	r4, [sp, #28]
 80057b2:	9405      	str	r4, [sp, #20]
 80057b4:	2322      	movs	r3, #34	; 0x22
 80057b6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005910 <_strtod_l+0x598>
 80057ba:	f8c9 3000 	str.w	r3, [r9]
 80057be:	f04f 0a00 	mov.w	sl, #0
 80057c2:	9b07      	ldr	r3, [sp, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f43f ae16 	beq.w	80053f6 <_strtod_l+0x7e>
 80057ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057cc:	4648      	mov	r0, r9
 80057ce:	f002 f92c 	bl	8007a2a <_Bfree>
 80057d2:	9905      	ldr	r1, [sp, #20]
 80057d4:	4648      	mov	r0, r9
 80057d6:	f002 f928 	bl	8007a2a <_Bfree>
 80057da:	4641      	mov	r1, r8
 80057dc:	4648      	mov	r0, r9
 80057de:	f002 f924 	bl	8007a2a <_Bfree>
 80057e2:	9907      	ldr	r1, [sp, #28]
 80057e4:	4648      	mov	r0, r9
 80057e6:	f002 f920 	bl	8007a2a <_Bfree>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4648      	mov	r0, r9
 80057ee:	f002 f91c 	bl	8007a2a <_Bfree>
 80057f2:	e600      	b.n	80053f6 <_strtod_l+0x7e>
 80057f4:	9a06      	ldr	r2, [sp, #24]
 80057f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80057fa:	4293      	cmp	r3, r2
 80057fc:	dbba      	blt.n	8005774 <_strtod_l+0x3fc>
 80057fe:	4d42      	ldr	r5, [pc, #264]	; (8005908 <_strtod_l+0x590>)
 8005800:	f1c4 040f 	rsb	r4, r4, #15
 8005804:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005808:	4652      	mov	r2, sl
 800580a:	465b      	mov	r3, fp
 800580c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005810:	f7fa fef2 	bl	80005f8 <__aeabi_dmul>
 8005814:	9b06      	ldr	r3, [sp, #24]
 8005816:	1b1c      	subs	r4, r3, r4
 8005818:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800581c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005820:	e78d      	b.n	800573e <_strtod_l+0x3c6>
 8005822:	f113 0f16 	cmn.w	r3, #22
 8005826:	dba5      	blt.n	8005774 <_strtod_l+0x3fc>
 8005828:	4a37      	ldr	r2, [pc, #220]	; (8005908 <_strtod_l+0x590>)
 800582a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800582e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005832:	4650      	mov	r0, sl
 8005834:	4659      	mov	r1, fp
 8005836:	f7fb f809 	bl	800084c <__aeabi_ddiv>
 800583a:	e782      	b.n	8005742 <_strtod_l+0x3ca>
 800583c:	2300      	movs	r3, #0
 800583e:	4e33      	ldr	r6, [pc, #204]	; (800590c <_strtod_l+0x594>)
 8005840:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005844:	4650      	mov	r0, sl
 8005846:	4659      	mov	r1, fp
 8005848:	461d      	mov	r5, r3
 800584a:	f1b8 0f01 	cmp.w	r8, #1
 800584e:	dc21      	bgt.n	8005894 <_strtod_l+0x51c>
 8005850:	b10b      	cbz	r3, 8005856 <_strtod_l+0x4de>
 8005852:	4682      	mov	sl, r0
 8005854:	468b      	mov	fp, r1
 8005856:	4b2d      	ldr	r3, [pc, #180]	; (800590c <_strtod_l+0x594>)
 8005858:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800585c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005860:	4652      	mov	r2, sl
 8005862:	465b      	mov	r3, fp
 8005864:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005868:	f7fa fec6 	bl	80005f8 <__aeabi_dmul>
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <_strtod_l+0x598>)
 800586e:	460a      	mov	r2, r1
 8005870:	400b      	ands	r3, r1
 8005872:	4928      	ldr	r1, [pc, #160]	; (8005914 <_strtod_l+0x59c>)
 8005874:	428b      	cmp	r3, r1
 8005876:	4682      	mov	sl, r0
 8005878:	d898      	bhi.n	80057ac <_strtod_l+0x434>
 800587a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800587e:	428b      	cmp	r3, r1
 8005880:	bf86      	itte	hi
 8005882:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800591c <_strtod_l+0x5a4>
 8005886:	f04f 3aff 	movhi.w	sl, #4294967295
 800588a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800588e:	2300      	movs	r3, #0
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	e077      	b.n	8005984 <_strtod_l+0x60c>
 8005894:	f018 0f01 	tst.w	r8, #1
 8005898:	d006      	beq.n	80058a8 <_strtod_l+0x530>
 800589a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fea9 	bl	80005f8 <__aeabi_dmul>
 80058a6:	2301      	movs	r3, #1
 80058a8:	3501      	adds	r5, #1
 80058aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058ae:	e7cc      	b.n	800584a <_strtod_l+0x4d2>
 80058b0:	d0ed      	beq.n	800588e <_strtod_l+0x516>
 80058b2:	f1c8 0800 	rsb	r8, r8, #0
 80058b6:	f018 020f 	ands.w	r2, r8, #15
 80058ba:	d00a      	beq.n	80058d2 <_strtod_l+0x55a>
 80058bc:	4b12      	ldr	r3, [pc, #72]	; (8005908 <_strtod_l+0x590>)
 80058be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058c2:	4650      	mov	r0, sl
 80058c4:	4659      	mov	r1, fp
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa ffbf 	bl	800084c <__aeabi_ddiv>
 80058ce:	4682      	mov	sl, r0
 80058d0:	468b      	mov	fp, r1
 80058d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80058d6:	d0da      	beq.n	800588e <_strtod_l+0x516>
 80058d8:	f1b8 0f1f 	cmp.w	r8, #31
 80058dc:	dd20      	ble.n	8005920 <_strtod_l+0x5a8>
 80058de:	2400      	movs	r4, #0
 80058e0:	46a0      	mov	r8, r4
 80058e2:	9407      	str	r4, [sp, #28]
 80058e4:	9405      	str	r4, [sp, #20]
 80058e6:	2322      	movs	r3, #34	; 0x22
 80058e8:	f04f 0a00 	mov.w	sl, #0
 80058ec:	f04f 0b00 	mov.w	fp, #0
 80058f0:	f8c9 3000 	str.w	r3, [r9]
 80058f4:	e765      	b.n	80057c2 <_strtod_l+0x44a>
 80058f6:	bf00      	nop
 80058f8:	0800962d 	.word	0x0800962d
 80058fc:	080096b3 	.word	0x080096b3
 8005900:	08009635 	.word	0x08009635
 8005904:	08009674 	.word	0x08009674
 8005908:	08009758 	.word	0x08009758
 800590c:	08009730 	.word	0x08009730
 8005910:	7ff00000 	.word	0x7ff00000
 8005914:	7ca00000 	.word	0x7ca00000
 8005918:	fff80000 	.word	0xfff80000
 800591c:	7fefffff 	.word	0x7fefffff
 8005920:	f018 0310 	ands.w	r3, r8, #16
 8005924:	bf18      	it	ne
 8005926:	236a      	movne	r3, #106	; 0x6a
 8005928:	4da0      	ldr	r5, [pc, #640]	; (8005bac <_strtod_l+0x834>)
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	4650      	mov	r0, sl
 800592e:	4659      	mov	r1, fp
 8005930:	2300      	movs	r3, #0
 8005932:	f1b8 0f00 	cmp.w	r8, #0
 8005936:	f300 810a 	bgt.w	8005b4e <_strtod_l+0x7d6>
 800593a:	b10b      	cbz	r3, 8005940 <_strtod_l+0x5c8>
 800593c:	4682      	mov	sl, r0
 800593e:	468b      	mov	fp, r1
 8005940:	9b04      	ldr	r3, [sp, #16]
 8005942:	b1bb      	cbz	r3, 8005974 <_strtod_l+0x5fc>
 8005944:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005948:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800594c:	2b00      	cmp	r3, #0
 800594e:	4659      	mov	r1, fp
 8005950:	dd10      	ble.n	8005974 <_strtod_l+0x5fc>
 8005952:	2b1f      	cmp	r3, #31
 8005954:	f340 8107 	ble.w	8005b66 <_strtod_l+0x7ee>
 8005958:	2b34      	cmp	r3, #52	; 0x34
 800595a:	bfde      	ittt	le
 800595c:	3b20      	suble	r3, #32
 800595e:	f04f 32ff 	movle.w	r2, #4294967295
 8005962:	fa02 f303 	lslle.w	r3, r2, r3
 8005966:	f04f 0a00 	mov.w	sl, #0
 800596a:	bfcc      	ite	gt
 800596c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005970:	ea03 0b01 	andle.w	fp, r3, r1
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	4650      	mov	r0, sl
 800597a:	4659      	mov	r1, fp
 800597c:	f7fb f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005980:	2800      	cmp	r0, #0
 8005982:	d1ac      	bne.n	80058de <_strtod_l+0x566>
 8005984:	9b07      	ldr	r3, [sp, #28]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	9a05      	ldr	r2, [sp, #20]
 800598a:	9908      	ldr	r1, [sp, #32]
 800598c:	4623      	mov	r3, r4
 800598e:	4648      	mov	r0, r9
 8005990:	f002 f89d 	bl	8007ace <__s2b>
 8005994:	9007      	str	r0, [sp, #28]
 8005996:	2800      	cmp	r0, #0
 8005998:	f43f af08 	beq.w	80057ac <_strtod_l+0x434>
 800599c:	9a06      	ldr	r2, [sp, #24]
 800599e:	9b06      	ldr	r3, [sp, #24]
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	f1c3 0300 	rsb	r3, r3, #0
 80059a6:	bfa8      	it	ge
 80059a8:	2300      	movge	r3, #0
 80059aa:	930e      	str	r3, [sp, #56]	; 0x38
 80059ac:	2400      	movs	r4, #0
 80059ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80059b2:	9316      	str	r3, [sp, #88]	; 0x58
 80059b4:	46a0      	mov	r8, r4
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	4648      	mov	r0, r9
 80059ba:	6859      	ldr	r1, [r3, #4]
 80059bc:	f002 f801 	bl	80079c2 <_Balloc>
 80059c0:	9005      	str	r0, [sp, #20]
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f43f aef6 	beq.w	80057b4 <_strtod_l+0x43c>
 80059c8:	9b07      	ldr	r3, [sp, #28]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	3202      	adds	r2, #2
 80059ce:	f103 010c 	add.w	r1, r3, #12
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	300c      	adds	r0, #12
 80059d6:	f001 ffe9 	bl	80079ac <memcpy>
 80059da:	aa1e      	add	r2, sp, #120	; 0x78
 80059dc:	a91d      	add	r1, sp, #116	; 0x74
 80059de:	ec4b ab10 	vmov	d0, sl, fp
 80059e2:	4648      	mov	r0, r9
 80059e4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80059e8:	f002 fb2c 	bl	8008044 <__d2b>
 80059ec:	901c      	str	r0, [sp, #112]	; 0x70
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f43f aee0 	beq.w	80057b4 <_strtod_l+0x43c>
 80059f4:	2101      	movs	r1, #1
 80059f6:	4648      	mov	r0, r9
 80059f8:	f002 f8f5 	bl	8007be6 <__i2b>
 80059fc:	4680      	mov	r8, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f43f aed8 	beq.w	80057b4 <_strtod_l+0x43c>
 8005a04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005a06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	bfab      	itete	ge
 8005a0c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a0e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005a10:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005a12:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005a14:	bfac      	ite	ge
 8005a16:	18f7      	addge	r7, r6, r3
 8005a18:	1b9d      	sublt	r5, r3, r6
 8005a1a:	9b04      	ldr	r3, [sp, #16]
 8005a1c:	1af6      	subs	r6, r6, r3
 8005a1e:	4416      	add	r6, r2
 8005a20:	4b63      	ldr	r3, [pc, #396]	; (8005bb0 <_strtod_l+0x838>)
 8005a22:	3e01      	subs	r6, #1
 8005a24:	429e      	cmp	r6, r3
 8005a26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a2a:	f280 80af 	bge.w	8005b8c <_strtod_l+0x814>
 8005a2e:	1b9b      	subs	r3, r3, r6
 8005a30:	2b1f      	cmp	r3, #31
 8005a32:	eba2 0203 	sub.w	r2, r2, r3
 8005a36:	f04f 0101 	mov.w	r1, #1
 8005a3a:	f300 809b 	bgt.w	8005b74 <_strtod_l+0x7fc>
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a44:	2300      	movs	r3, #0
 8005a46:	930a      	str	r3, [sp, #40]	; 0x28
 8005a48:	18be      	adds	r6, r7, r2
 8005a4a:	9b04      	ldr	r3, [sp, #16]
 8005a4c:	42b7      	cmp	r7, r6
 8005a4e:	4415      	add	r5, r2
 8005a50:	441d      	add	r5, r3
 8005a52:	463b      	mov	r3, r7
 8005a54:	bfa8      	it	ge
 8005a56:	4633      	movge	r3, r6
 8005a58:	42ab      	cmp	r3, r5
 8005a5a:	bfa8      	it	ge
 8005a5c:	462b      	movge	r3, r5
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bfc2      	ittt	gt
 8005a62:	1af6      	subgt	r6, r6, r3
 8005a64:	1aed      	subgt	r5, r5, r3
 8005a66:	1aff      	subgt	r7, r7, r3
 8005a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a6a:	b1bb      	cbz	r3, 8005a9c <_strtod_l+0x724>
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4648      	mov	r0, r9
 8005a72:	f002 f957 	bl	8007d24 <__pow5mult>
 8005a76:	4680      	mov	r8, r0
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f43f ae9b 	beq.w	80057b4 <_strtod_l+0x43c>
 8005a7e:	4601      	mov	r1, r0
 8005a80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a82:	4648      	mov	r0, r9
 8005a84:	f002 f8b8 	bl	8007bf8 <__multiply>
 8005a88:	900c      	str	r0, [sp, #48]	; 0x30
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f43f ae92 	beq.w	80057b4 <_strtod_l+0x43c>
 8005a90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a92:	4648      	mov	r0, r9
 8005a94:	f001 ffc9 	bl	8007a2a <_Bfree>
 8005a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a9a:	931c      	str	r3, [sp, #112]	; 0x70
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	dc7a      	bgt.n	8005b96 <_strtod_l+0x81e>
 8005aa0:	9b06      	ldr	r3, [sp, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dd08      	ble.n	8005ab8 <_strtod_l+0x740>
 8005aa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005aa8:	9905      	ldr	r1, [sp, #20]
 8005aaa:	4648      	mov	r0, r9
 8005aac:	f002 f93a 	bl	8007d24 <__pow5mult>
 8005ab0:	9005      	str	r0, [sp, #20]
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f43f ae7e 	beq.w	80057b4 <_strtod_l+0x43c>
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	dd08      	ble.n	8005ace <_strtod_l+0x756>
 8005abc:	462a      	mov	r2, r5
 8005abe:	9905      	ldr	r1, [sp, #20]
 8005ac0:	4648      	mov	r0, r9
 8005ac2:	f002 f97d 	bl	8007dc0 <__lshift>
 8005ac6:	9005      	str	r0, [sp, #20]
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f43f ae73 	beq.w	80057b4 <_strtod_l+0x43c>
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	dd08      	ble.n	8005ae4 <_strtod_l+0x76c>
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	463a      	mov	r2, r7
 8005ad6:	4648      	mov	r0, r9
 8005ad8:	f002 f972 	bl	8007dc0 <__lshift>
 8005adc:	4680      	mov	r8, r0
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f ae68 	beq.w	80057b4 <_strtod_l+0x43c>
 8005ae4:	9a05      	ldr	r2, [sp, #20]
 8005ae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ae8:	4648      	mov	r0, r9
 8005aea:	f002 f9d7 	bl	8007e9c <__mdiff>
 8005aee:	4604      	mov	r4, r0
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f43f ae5f 	beq.w	80057b4 <_strtod_l+0x43c>
 8005af6:	68c3      	ldr	r3, [r0, #12]
 8005af8:	930c      	str	r3, [sp, #48]	; 0x30
 8005afa:	2300      	movs	r3, #0
 8005afc:	60c3      	str	r3, [r0, #12]
 8005afe:	4641      	mov	r1, r8
 8005b00:	f002 f9b2 	bl	8007e68 <__mcmp>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	da55      	bge.n	8005bb4 <_strtod_l+0x83c>
 8005b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0a:	b9e3      	cbnz	r3, 8005b46 <_strtod_l+0x7ce>
 8005b0c:	f1ba 0f00 	cmp.w	sl, #0
 8005b10:	d119      	bne.n	8005b46 <_strtod_l+0x7ce>
 8005b12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b16:	b9b3      	cbnz	r3, 8005b46 <_strtod_l+0x7ce>
 8005b18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b1c:	0d1b      	lsrs	r3, r3, #20
 8005b1e:	051b      	lsls	r3, r3, #20
 8005b20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b24:	d90f      	bls.n	8005b46 <_strtod_l+0x7ce>
 8005b26:	6963      	ldr	r3, [r4, #20]
 8005b28:	b913      	cbnz	r3, 8005b30 <_strtod_l+0x7b8>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	dd0a      	ble.n	8005b46 <_strtod_l+0x7ce>
 8005b30:	4621      	mov	r1, r4
 8005b32:	2201      	movs	r2, #1
 8005b34:	4648      	mov	r0, r9
 8005b36:	f002 f943 	bl	8007dc0 <__lshift>
 8005b3a:	4641      	mov	r1, r8
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	f002 f993 	bl	8007e68 <__mcmp>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	dc67      	bgt.n	8005c16 <_strtod_l+0x89e>
 8005b46:	9b04      	ldr	r3, [sp, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d171      	bne.n	8005c30 <_strtod_l+0x8b8>
 8005b4c:	e63d      	b.n	80057ca <_strtod_l+0x452>
 8005b4e:	f018 0f01 	tst.w	r8, #1
 8005b52:	d004      	beq.n	8005b5e <_strtod_l+0x7e6>
 8005b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b62:	3508      	adds	r5, #8
 8005b64:	e6e5      	b.n	8005932 <_strtod_l+0x5ba>
 8005b66:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	ea03 0a0a 	and.w	sl, r3, sl
 8005b72:	e6ff      	b.n	8005974 <_strtod_l+0x5fc>
 8005b74:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005b78:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005b7c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005b80:	36e2      	adds	r6, #226	; 0xe2
 8005b82:	fa01 f306 	lsl.w	r3, r1, r6
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	910f      	str	r1, [sp, #60]	; 0x3c
 8005b8a:	e75d      	b.n	8005a48 <_strtod_l+0x6d0>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b90:	2301      	movs	r3, #1
 8005b92:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b94:	e758      	b.n	8005a48 <_strtod_l+0x6d0>
 8005b96:	4632      	mov	r2, r6
 8005b98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b9a:	4648      	mov	r0, r9
 8005b9c:	f002 f910 	bl	8007dc0 <__lshift>
 8005ba0:	901c      	str	r0, [sp, #112]	; 0x70
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f47f af7c 	bne.w	8005aa0 <_strtod_l+0x728>
 8005ba8:	e604      	b.n	80057b4 <_strtod_l+0x43c>
 8005baa:	bf00      	nop
 8005bac:	08009688 	.word	0x08009688
 8005bb0:	fffffc02 	.word	0xfffffc02
 8005bb4:	465d      	mov	r5, fp
 8005bb6:	f040 8086 	bne.w	8005cc6 <_strtod_l+0x94e>
 8005bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bc0:	b32a      	cbz	r2, 8005c0e <_strtod_l+0x896>
 8005bc2:	4aaf      	ldr	r2, [pc, #700]	; (8005e80 <_strtod_l+0xb08>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d153      	bne.n	8005c70 <_strtod_l+0x8f8>
 8005bc8:	9b04      	ldr	r3, [sp, #16]
 8005bca:	4650      	mov	r0, sl
 8005bcc:	b1d3      	cbz	r3, 8005c04 <_strtod_l+0x88c>
 8005bce:	4aad      	ldr	r2, [pc, #692]	; (8005e84 <_strtod_l+0xb0c>)
 8005bd0:	402a      	ands	r2, r5
 8005bd2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8005bda:	d816      	bhi.n	8005c0a <_strtod_l+0x892>
 8005bdc:	0d12      	lsrs	r2, r2, #20
 8005bde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	4298      	cmp	r0, r3
 8005be8:	d142      	bne.n	8005c70 <_strtod_l+0x8f8>
 8005bea:	4ba7      	ldr	r3, [pc, #668]	; (8005e88 <_strtod_l+0xb10>)
 8005bec:	429d      	cmp	r5, r3
 8005bee:	d102      	bne.n	8005bf6 <_strtod_l+0x87e>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f addf 	beq.w	80057b4 <_strtod_l+0x43c>
 8005bf6:	4ba3      	ldr	r3, [pc, #652]	; (8005e84 <_strtod_l+0xb0c>)
 8005bf8:	402b      	ands	r3, r5
 8005bfa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005bfe:	f04f 0a00 	mov.w	sl, #0
 8005c02:	e7a0      	b.n	8005b46 <_strtod_l+0x7ce>
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	e7ed      	b.n	8005be6 <_strtod_l+0x86e>
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	e7eb      	b.n	8005be6 <_strtod_l+0x86e>
 8005c0e:	bb7b      	cbnz	r3, 8005c70 <_strtod_l+0x8f8>
 8005c10:	f1ba 0f00 	cmp.w	sl, #0
 8005c14:	d12c      	bne.n	8005c70 <_strtod_l+0x8f8>
 8005c16:	9904      	ldr	r1, [sp, #16]
 8005c18:	4a9a      	ldr	r2, [pc, #616]	; (8005e84 <_strtod_l+0xb0c>)
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	b1f1      	cbz	r1, 8005c5c <_strtod_l+0x8e4>
 8005c1e:	ea02 010b 	and.w	r1, r2, fp
 8005c22:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c26:	dc19      	bgt.n	8005c5c <_strtod_l+0x8e4>
 8005c28:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c2c:	f77f ae5b 	ble.w	80058e6 <_strtod_l+0x56e>
 8005c30:	4a96      	ldr	r2, [pc, #600]	; (8005e8c <_strtod_l+0xb14>)
 8005c32:	2300      	movs	r3, #0
 8005c34:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c40:	f7fa fcda 	bl	80005f8 <__aeabi_dmul>
 8005c44:	4682      	mov	sl, r0
 8005c46:	468b      	mov	fp, r1
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	f47f adbe 	bne.w	80057ca <_strtod_l+0x452>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f47f adbb 	bne.w	80057ca <_strtod_l+0x452>
 8005c54:	2322      	movs	r3, #34	; 0x22
 8005c56:	f8c9 3000 	str.w	r3, [r9]
 8005c5a:	e5b6      	b.n	80057ca <_strtod_l+0x452>
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005c62:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c66:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c6a:	f04f 3aff 	mov.w	sl, #4294967295
 8005c6e:	e76a      	b.n	8005b46 <_strtod_l+0x7ce>
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	b193      	cbz	r3, 8005c9a <_strtod_l+0x922>
 8005c74:	422b      	tst	r3, r5
 8005c76:	f43f af66 	beq.w	8005b46 <_strtod_l+0x7ce>
 8005c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	4650      	mov	r0, sl
 8005c80:	4659      	mov	r1, fp
 8005c82:	b173      	cbz	r3, 8005ca2 <_strtod_l+0x92a>
 8005c84:	f7ff fb5a 	bl	800533c <sulp>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c90:	f7fa fafc 	bl	800028c <__adddf3>
 8005c94:	4682      	mov	sl, r0
 8005c96:	468b      	mov	fp, r1
 8005c98:	e755      	b.n	8005b46 <_strtod_l+0x7ce>
 8005c9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c9c:	ea13 0f0a 	tst.w	r3, sl
 8005ca0:	e7e9      	b.n	8005c76 <_strtod_l+0x8fe>
 8005ca2:	f7ff fb4b 	bl	800533c <sulp>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005cae:	f7fa faeb 	bl	8000288 <__aeabi_dsub>
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4682      	mov	sl, r0
 8005cb8:	468b      	mov	fp, r1
 8005cba:	f7fa ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f47f ae11 	bne.w	80058e6 <_strtod_l+0x56e>
 8005cc4:	e73f      	b.n	8005b46 <_strtod_l+0x7ce>
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f002 fa0a 	bl	80080e2 <__ratio>
 8005cce:	ec57 6b10 	vmov	r6, r7, d0
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cd8:	ee10 0a10 	vmov	r0, s0
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa ff07 	bl	8000af0 <__aeabi_dcmple>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d077      	beq.n	8005dd6 <_strtod_l+0xa5e>
 8005ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d04a      	beq.n	8005d82 <_strtod_l+0xa0a>
 8005cec:	4b68      	ldr	r3, [pc, #416]	; (8005e90 <_strtod_l+0xb18>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cf4:	4f66      	ldr	r7, [pc, #408]	; (8005e90 <_strtod_l+0xb18>)
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <_strtod_l+0xb0c>)
 8005cfa:	402b      	ands	r3, r5
 8005cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d00:	4b64      	ldr	r3, [pc, #400]	; (8005e94 <_strtod_l+0xb1c>)
 8005d02:	429a      	cmp	r2, r3
 8005d04:	f040 80ce 	bne.w	8005ea4 <_strtod_l+0xb2c>
 8005d08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d10:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005d14:	ec4b ab10 	vmov	d0, sl, fp
 8005d18:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005d1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d20:	f002 f91a 	bl	8007f58 <__ulp>
 8005d24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d28:	ec53 2b10 	vmov	r2, r3, d0
 8005d2c:	f7fa fc64 	bl	80005f8 <__aeabi_dmul>
 8005d30:	4652      	mov	r2, sl
 8005d32:	465b      	mov	r3, fp
 8005d34:	f7fa faaa 	bl	800028c <__adddf3>
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4952      	ldr	r1, [pc, #328]	; (8005e84 <_strtod_l+0xb0c>)
 8005d3c:	4a56      	ldr	r2, [pc, #344]	; (8005e98 <_strtod_l+0xb20>)
 8005d3e:	4019      	ands	r1, r3
 8005d40:	4291      	cmp	r1, r2
 8005d42:	4682      	mov	sl, r0
 8005d44:	d95b      	bls.n	8005dfe <_strtod_l+0xa86>
 8005d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d48:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <_strtod_l+0x9e0>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	3301      	adds	r3, #1
 8005d54:	f43f ad2e 	beq.w	80057b4 <_strtod_l+0x43c>
 8005d58:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005e88 <_strtod_l+0xb10>
 8005d5c:	f04f 3aff 	mov.w	sl, #4294967295
 8005d60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d62:	4648      	mov	r0, r9
 8005d64:	f001 fe61 	bl	8007a2a <_Bfree>
 8005d68:	9905      	ldr	r1, [sp, #20]
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	f001 fe5d 	bl	8007a2a <_Bfree>
 8005d70:	4641      	mov	r1, r8
 8005d72:	4648      	mov	r0, r9
 8005d74:	f001 fe59 	bl	8007a2a <_Bfree>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4648      	mov	r0, r9
 8005d7c:	f001 fe55 	bl	8007a2a <_Bfree>
 8005d80:	e619      	b.n	80059b6 <_strtod_l+0x63e>
 8005d82:	f1ba 0f00 	cmp.w	sl, #0
 8005d86:	d11a      	bne.n	8005dbe <_strtod_l+0xa46>
 8005d88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d8c:	b9eb      	cbnz	r3, 8005dca <_strtod_l+0xa52>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	4b3f      	ldr	r3, [pc, #252]	; (8005e90 <_strtod_l+0xb18>)
 8005d92:	4630      	mov	r0, r6
 8005d94:	4639      	mov	r1, r7
 8005d96:	f7fa fea1 	bl	8000adc <__aeabi_dcmplt>
 8005d9a:	b9c8      	cbnz	r0, 8005dd0 <_strtod_l+0xa58>
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	4639      	mov	r1, r7
 8005da0:	2200      	movs	r2, #0
 8005da2:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <_strtod_l+0xb24>)
 8005da4:	f7fa fc28 	bl	80005f8 <__aeabi_dmul>
 8005da8:	4606      	mov	r6, r0
 8005daa:	460f      	mov	r7, r1
 8005dac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005db0:	9618      	str	r6, [sp, #96]	; 0x60
 8005db2:	9319      	str	r3, [sp, #100]	; 0x64
 8005db4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005db8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005dbc:	e79c      	b.n	8005cf8 <_strtod_l+0x980>
 8005dbe:	f1ba 0f01 	cmp.w	sl, #1
 8005dc2:	d102      	bne.n	8005dca <_strtod_l+0xa52>
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	f43f ad8e 	beq.w	80058e6 <_strtod_l+0x56e>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <_strtod_l+0xb28>)
 8005dce:	e78f      	b.n	8005cf0 <_strtod_l+0x978>
 8005dd0:	2600      	movs	r6, #0
 8005dd2:	4f32      	ldr	r7, [pc, #200]	; (8005e9c <_strtod_l+0xb24>)
 8005dd4:	e7ea      	b.n	8005dac <_strtod_l+0xa34>
 8005dd6:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <_strtod_l+0xb24>)
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f7fa fc0b 	bl	80005f8 <__aeabi_dmul>
 8005de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005de4:	4606      	mov	r6, r0
 8005de6:	460f      	mov	r7, r1
 8005de8:	b933      	cbnz	r3, 8005df8 <_strtod_l+0xa80>
 8005dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dee:	9010      	str	r0, [sp, #64]	; 0x40
 8005df0:	9311      	str	r3, [sp, #68]	; 0x44
 8005df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005df6:	e7df      	b.n	8005db8 <_strtod_l+0xa40>
 8005df8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005dfc:	e7f9      	b.n	8005df2 <_strtod_l+0xa7a>
 8005dfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1ab      	bne.n	8005d60 <_strtod_l+0x9e8>
 8005e08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e0c:	0d1b      	lsrs	r3, r3, #20
 8005e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e10:	051b      	lsls	r3, r3, #20
 8005e12:	429a      	cmp	r2, r3
 8005e14:	465d      	mov	r5, fp
 8005e16:	d1a3      	bne.n	8005d60 <_strtod_l+0x9e8>
 8005e18:	4639      	mov	r1, r7
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7fa fe9c 	bl	8000b58 <__aeabi_d2iz>
 8005e20:	f7fa fb80 	bl	8000524 <__aeabi_i2d>
 8005e24:	460b      	mov	r3, r1
 8005e26:	4602      	mov	r2, r0
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7fa fa2c 	bl	8000288 <__aeabi_dsub>
 8005e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	b933      	cbnz	r3, 8005e46 <_strtod_l+0xace>
 8005e38:	f1ba 0f00 	cmp.w	sl, #0
 8005e3c:	d103      	bne.n	8005e46 <_strtod_l+0xace>
 8005e3e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	d06d      	beq.n	8005f22 <_strtod_l+0xbaa>
 8005e46:	a30a      	add	r3, pc, #40	; (adr r3, 8005e70 <_strtod_l+0xaf8>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fe44 	bl	8000adc <__aeabi_dcmplt>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f47f acb8 	bne.w	80057ca <_strtod_l+0x452>
 8005e5a:	a307      	add	r3, pc, #28	; (adr r3, 8005e78 <_strtod_l+0xb00>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa fe58 	bl	8000b18 <__aeabi_dcmpgt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f43f af79 	beq.w	8005d60 <_strtod_l+0x9e8>
 8005e6e:	e4ac      	b.n	80057ca <_strtod_l+0x452>
 8005e70:	94a03595 	.word	0x94a03595
 8005e74:	3fdfffff 	.word	0x3fdfffff
 8005e78:	35afe535 	.word	0x35afe535
 8005e7c:	3fe00000 	.word	0x3fe00000
 8005e80:	000fffff 	.word	0x000fffff
 8005e84:	7ff00000 	.word	0x7ff00000
 8005e88:	7fefffff 	.word	0x7fefffff
 8005e8c:	39500000 	.word	0x39500000
 8005e90:	3ff00000 	.word	0x3ff00000
 8005e94:	7fe00000 	.word	0x7fe00000
 8005e98:	7c9fffff 	.word	0x7c9fffff
 8005e9c:	3fe00000 	.word	0x3fe00000
 8005ea0:	bff00000 	.word	0xbff00000
 8005ea4:	9b04      	ldr	r3, [sp, #16]
 8005ea6:	b333      	cbz	r3, 8005ef6 <_strtod_l+0xb7e>
 8005ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eaa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005eae:	d822      	bhi.n	8005ef6 <_strtod_l+0xb7e>
 8005eb0:	a327      	add	r3, pc, #156	; (adr r3, 8005f50 <_strtod_l+0xbd8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	4639      	mov	r1, r7
 8005eba:	f7fa fe19 	bl	8000af0 <__aeabi_dcmple>
 8005ebe:	b1a0      	cbz	r0, 8005eea <_strtod_l+0xb72>
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7fa fe70 	bl	8000ba8 <__aeabi_d2uiz>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	bf08      	it	eq
 8005ecc:	2001      	moveq	r0, #1
 8005ece:	f7fa fb19 	bl	8000504 <__aeabi_ui2d>
 8005ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	bb03      	cbnz	r3, 8005f1c <_strtod_l+0xba4>
 8005eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ede:	9012      	str	r0, [sp, #72]	; 0x48
 8005ee0:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ee2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005ee6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005eee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005efa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005efe:	f002 f82b 	bl	8007f58 <__ulp>
 8005f02:	4650      	mov	r0, sl
 8005f04:	ec53 2b10 	vmov	r2, r3, d0
 8005f08:	4659      	mov	r1, fp
 8005f0a:	f7fa fb75 	bl	80005f8 <__aeabi_dmul>
 8005f0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f12:	f7fa f9bb 	bl	800028c <__adddf3>
 8005f16:	4682      	mov	sl, r0
 8005f18:	468b      	mov	fp, r1
 8005f1a:	e772      	b.n	8005e02 <_strtod_l+0xa8a>
 8005f1c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005f20:	e7df      	b.n	8005ee2 <_strtod_l+0xb6a>
 8005f22:	a30d      	add	r3, pc, #52	; (adr r3, 8005f58 <_strtod_l+0xbe0>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f7fa fdd8 	bl	8000adc <__aeabi_dcmplt>
 8005f2c:	e79c      	b.n	8005e68 <_strtod_l+0xaf0>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	930d      	str	r3, [sp, #52]	; 0x34
 8005f32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	f7ff ba61 	b.w	80053fe <_strtod_l+0x86>
 8005f3c:	2b65      	cmp	r3, #101	; 0x65
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f43f ab4e 	beq.w	80055e2 <_strtod_l+0x26a>
 8005f46:	2101      	movs	r1, #1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	9104      	str	r1, [sp, #16]
 8005f4c:	f7ff bacb 	b.w	80054e6 <_strtod_l+0x16e>
 8005f50:	ffc00000 	.word	0xffc00000
 8005f54:	41dfffff 	.word	0x41dfffff
 8005f58:	94a03595 	.word	0x94a03595
 8005f5c:	3fcfffff 	.word	0x3fcfffff

08005f60 <_strtod_r>:
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <_strtod_r+0x18>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	b410      	push	{r4}
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	4c04      	ldr	r4, [pc, #16]	; (8005f7c <_strtod_r+0x1c>)
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf08      	it	eq
 8005f6e:	4623      	moveq	r3, r4
 8005f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f74:	f7ff ba00 	b.w	8005378 <_strtod_l>
 8005f78:	2000000c 	.word	0x2000000c
 8005f7c:	20000070 	.word	0x20000070

08005f80 <_strtol_l.isra.0>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	4680      	mov	r8, r0
 8005f86:	4689      	mov	r9, r1
 8005f88:	4692      	mov	sl, r2
 8005f8a:	461e      	mov	r6, r3
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	463d      	mov	r5, r7
 8005f90:	9808      	ldr	r0, [sp, #32]
 8005f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f96:	f001 fc69 	bl	800786c <__locale_ctype_ptr_l>
 8005f9a:	4420      	add	r0, r4
 8005f9c:	7843      	ldrb	r3, [r0, #1]
 8005f9e:	f013 0308 	ands.w	r3, r3, #8
 8005fa2:	d132      	bne.n	800600a <_strtol_l.isra.0+0x8a>
 8005fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8005fa6:	d132      	bne.n	800600e <_strtol_l.isra.0+0x8e>
 8005fa8:	787c      	ldrb	r4, [r7, #1]
 8005faa:	1cbd      	adds	r5, r7, #2
 8005fac:	2201      	movs	r2, #1
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	d05d      	beq.n	800606e <_strtol_l.isra.0+0xee>
 8005fb2:	2e10      	cmp	r6, #16
 8005fb4:	d109      	bne.n	8005fca <_strtol_l.isra.0+0x4a>
 8005fb6:	2c30      	cmp	r4, #48	; 0x30
 8005fb8:	d107      	bne.n	8005fca <_strtol_l.isra.0+0x4a>
 8005fba:	782b      	ldrb	r3, [r5, #0]
 8005fbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fc0:	2b58      	cmp	r3, #88	; 0x58
 8005fc2:	d14f      	bne.n	8006064 <_strtol_l.isra.0+0xe4>
 8005fc4:	786c      	ldrb	r4, [r5, #1]
 8005fc6:	2610      	movs	r6, #16
 8005fc8:	3502      	adds	r5, #2
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	bf14      	ite	ne
 8005fce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005fd2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005fd6:	2700      	movs	r7, #0
 8005fd8:	fbb1 fcf6 	udiv	ip, r1, r6
 8005fdc:	4638      	mov	r0, r7
 8005fde:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005fe2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005fe6:	2b09      	cmp	r3, #9
 8005fe8:	d817      	bhi.n	800601a <_strtol_l.isra.0+0x9a>
 8005fea:	461c      	mov	r4, r3
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	dd23      	ble.n	8006038 <_strtol_l.isra.0+0xb8>
 8005ff0:	1c7b      	adds	r3, r7, #1
 8005ff2:	d007      	beq.n	8006004 <_strtol_l.isra.0+0x84>
 8005ff4:	4584      	cmp	ip, r0
 8005ff6:	d31c      	bcc.n	8006032 <_strtol_l.isra.0+0xb2>
 8005ff8:	d101      	bne.n	8005ffe <_strtol_l.isra.0+0x7e>
 8005ffa:	45a6      	cmp	lr, r4
 8005ffc:	db19      	blt.n	8006032 <_strtol_l.isra.0+0xb2>
 8005ffe:	fb00 4006 	mla	r0, r0, r6, r4
 8006002:	2701      	movs	r7, #1
 8006004:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006008:	e7eb      	b.n	8005fe2 <_strtol_l.isra.0+0x62>
 800600a:	462f      	mov	r7, r5
 800600c:	e7bf      	b.n	8005f8e <_strtol_l.isra.0+0xe>
 800600e:	2c2b      	cmp	r4, #43	; 0x2b
 8006010:	bf04      	itt	eq
 8006012:	1cbd      	addeq	r5, r7, #2
 8006014:	787c      	ldrbeq	r4, [r7, #1]
 8006016:	461a      	mov	r2, r3
 8006018:	e7c9      	b.n	8005fae <_strtol_l.isra.0+0x2e>
 800601a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800601e:	2b19      	cmp	r3, #25
 8006020:	d801      	bhi.n	8006026 <_strtol_l.isra.0+0xa6>
 8006022:	3c37      	subs	r4, #55	; 0x37
 8006024:	e7e2      	b.n	8005fec <_strtol_l.isra.0+0x6c>
 8006026:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800602a:	2b19      	cmp	r3, #25
 800602c:	d804      	bhi.n	8006038 <_strtol_l.isra.0+0xb8>
 800602e:	3c57      	subs	r4, #87	; 0x57
 8006030:	e7dc      	b.n	8005fec <_strtol_l.isra.0+0x6c>
 8006032:	f04f 37ff 	mov.w	r7, #4294967295
 8006036:	e7e5      	b.n	8006004 <_strtol_l.isra.0+0x84>
 8006038:	1c7b      	adds	r3, r7, #1
 800603a:	d108      	bne.n	800604e <_strtol_l.isra.0+0xce>
 800603c:	2322      	movs	r3, #34	; 0x22
 800603e:	f8c8 3000 	str.w	r3, [r8]
 8006042:	4608      	mov	r0, r1
 8006044:	f1ba 0f00 	cmp.w	sl, #0
 8006048:	d107      	bne.n	800605a <_strtol_l.isra.0+0xda>
 800604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604e:	b102      	cbz	r2, 8006052 <_strtol_l.isra.0+0xd2>
 8006050:	4240      	negs	r0, r0
 8006052:	f1ba 0f00 	cmp.w	sl, #0
 8006056:	d0f8      	beq.n	800604a <_strtol_l.isra.0+0xca>
 8006058:	b10f      	cbz	r7, 800605e <_strtol_l.isra.0+0xde>
 800605a:	f105 39ff 	add.w	r9, r5, #4294967295
 800605e:	f8ca 9000 	str.w	r9, [sl]
 8006062:	e7f2      	b.n	800604a <_strtol_l.isra.0+0xca>
 8006064:	2430      	movs	r4, #48	; 0x30
 8006066:	2e00      	cmp	r6, #0
 8006068:	d1af      	bne.n	8005fca <_strtol_l.isra.0+0x4a>
 800606a:	2608      	movs	r6, #8
 800606c:	e7ad      	b.n	8005fca <_strtol_l.isra.0+0x4a>
 800606e:	2c30      	cmp	r4, #48	; 0x30
 8006070:	d0a3      	beq.n	8005fba <_strtol_l.isra.0+0x3a>
 8006072:	260a      	movs	r6, #10
 8006074:	e7a9      	b.n	8005fca <_strtol_l.isra.0+0x4a>
	...

08006078 <_strtol_r>:
 8006078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800607a:	4c06      	ldr	r4, [pc, #24]	; (8006094 <_strtol_r+0x1c>)
 800607c:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_strtol_r+0x20>)
 800607e:	6824      	ldr	r4, [r4, #0]
 8006080:	6a24      	ldr	r4, [r4, #32]
 8006082:	2c00      	cmp	r4, #0
 8006084:	bf08      	it	eq
 8006086:	462c      	moveq	r4, r5
 8006088:	9400      	str	r4, [sp, #0]
 800608a:	f7ff ff79 	bl	8005f80 <_strtol_l.isra.0>
 800608e:	b003      	add	sp, #12
 8006090:	bd30      	pop	{r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	2000000c 	.word	0x2000000c
 8006098:	20000070 	.word	0x20000070

0800609c <strtol>:
 800609c:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <strtol+0x24>)
 800609e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060a0:	681c      	ldr	r4, [r3, #0]
 80060a2:	4d08      	ldr	r5, [pc, #32]	; (80060c4 <strtol+0x28>)
 80060a4:	6a23      	ldr	r3, [r4, #32]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bf08      	it	eq
 80060aa:	462b      	moveq	r3, r5
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4613      	mov	r3, r2
 80060b0:	460a      	mov	r2, r1
 80060b2:	4601      	mov	r1, r0
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff ff63 	bl	8005f80 <_strtol_l.isra.0>
 80060ba:	b003      	add	sp, #12
 80060bc:	bd30      	pop	{r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	2000000c 	.word	0x2000000c
 80060c4:	20000070 	.word	0x20000070

080060c8 <__swbuf_r>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	460e      	mov	r6, r1
 80060cc:	4614      	mov	r4, r2
 80060ce:	4605      	mov	r5, r0
 80060d0:	b118      	cbz	r0, 80060da <__swbuf_r+0x12>
 80060d2:	6983      	ldr	r3, [r0, #24]
 80060d4:	b90b      	cbnz	r3, 80060da <__swbuf_r+0x12>
 80060d6:	f000 fffd 	bl	80070d4 <__sinit>
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <__swbuf_r+0x98>)
 80060dc:	429c      	cmp	r4, r3
 80060de:	d12a      	bne.n	8006136 <__swbuf_r+0x6e>
 80060e0:	686c      	ldr	r4, [r5, #4]
 80060e2:	69a3      	ldr	r3, [r4, #24]
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	071a      	lsls	r2, r3, #28
 80060ea:	d52e      	bpl.n	800614a <__swbuf_r+0x82>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	b363      	cbz	r3, 800614a <__swbuf_r+0x82>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	6820      	ldr	r0, [r4, #0]
 80060f4:	1ac0      	subs	r0, r0, r3
 80060f6:	6963      	ldr	r3, [r4, #20]
 80060f8:	b2f6      	uxtb	r6, r6
 80060fa:	4283      	cmp	r3, r0
 80060fc:	4637      	mov	r7, r6
 80060fe:	dc04      	bgt.n	800610a <__swbuf_r+0x42>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 ff6a 	bl	8006fdc <_fflush_r>
 8006108:	bb28      	cbnz	r0, 8006156 <__swbuf_r+0x8e>
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	3b01      	subs	r3, #1
 800610e:	60a3      	str	r3, [r4, #8]
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	701e      	strb	r6, [r3, #0]
 8006118:	6963      	ldr	r3, [r4, #20]
 800611a:	3001      	adds	r0, #1
 800611c:	4283      	cmp	r3, r0
 800611e:	d004      	beq.n	800612a <__swbuf_r+0x62>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	07db      	lsls	r3, r3, #31
 8006124:	d519      	bpl.n	800615a <__swbuf_r+0x92>
 8006126:	2e0a      	cmp	r6, #10
 8006128:	d117      	bne.n	800615a <__swbuf_r+0x92>
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f000 ff55 	bl	8006fdc <_fflush_r>
 8006132:	b190      	cbz	r0, 800615a <__swbuf_r+0x92>
 8006134:	e00f      	b.n	8006156 <__swbuf_r+0x8e>
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <__swbuf_r+0x9c>)
 8006138:	429c      	cmp	r4, r3
 800613a:	d101      	bne.n	8006140 <__swbuf_r+0x78>
 800613c:	68ac      	ldr	r4, [r5, #8]
 800613e:	e7d0      	b.n	80060e2 <__swbuf_r+0x1a>
 8006140:	4b09      	ldr	r3, [pc, #36]	; (8006168 <__swbuf_r+0xa0>)
 8006142:	429c      	cmp	r4, r3
 8006144:	bf08      	it	eq
 8006146:	68ec      	ldreq	r4, [r5, #12]
 8006148:	e7cb      	b.n	80060e2 <__swbuf_r+0x1a>
 800614a:	4621      	mov	r1, r4
 800614c:	4628      	mov	r0, r5
 800614e:	f000 f80d 	bl	800616c <__swsetup_r>
 8006152:	2800      	cmp	r0, #0
 8006154:	d0cc      	beq.n	80060f0 <__swbuf_r+0x28>
 8006156:	f04f 37ff 	mov.w	r7, #4294967295
 800615a:	4638      	mov	r0, r7
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615e:	bf00      	nop
 8006160:	080096e0 	.word	0x080096e0
 8006164:	08009700 	.word	0x08009700
 8006168:	080096c0 	.word	0x080096c0

0800616c <__swsetup_r>:
 800616c:	4b32      	ldr	r3, [pc, #200]	; (8006238 <__swsetup_r+0xcc>)
 800616e:	b570      	push	{r4, r5, r6, lr}
 8006170:	681d      	ldr	r5, [r3, #0]
 8006172:	4606      	mov	r6, r0
 8006174:	460c      	mov	r4, r1
 8006176:	b125      	cbz	r5, 8006182 <__swsetup_r+0x16>
 8006178:	69ab      	ldr	r3, [r5, #24]
 800617a:	b913      	cbnz	r3, 8006182 <__swsetup_r+0x16>
 800617c:	4628      	mov	r0, r5
 800617e:	f000 ffa9 	bl	80070d4 <__sinit>
 8006182:	4b2e      	ldr	r3, [pc, #184]	; (800623c <__swsetup_r+0xd0>)
 8006184:	429c      	cmp	r4, r3
 8006186:	d10f      	bne.n	80061a8 <__swsetup_r+0x3c>
 8006188:	686c      	ldr	r4, [r5, #4]
 800618a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618e:	b29a      	uxth	r2, r3
 8006190:	0715      	lsls	r5, r2, #28
 8006192:	d42c      	bmi.n	80061ee <__swsetup_r+0x82>
 8006194:	06d0      	lsls	r0, r2, #27
 8006196:	d411      	bmi.n	80061bc <__swsetup_r+0x50>
 8006198:	2209      	movs	r2, #9
 800619a:	6032      	str	r2, [r6, #0]
 800619c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	f04f 30ff 	mov.w	r0, #4294967295
 80061a6:	e03e      	b.n	8006226 <__swsetup_r+0xba>
 80061a8:	4b25      	ldr	r3, [pc, #148]	; (8006240 <__swsetup_r+0xd4>)
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d101      	bne.n	80061b2 <__swsetup_r+0x46>
 80061ae:	68ac      	ldr	r4, [r5, #8]
 80061b0:	e7eb      	b.n	800618a <__swsetup_r+0x1e>
 80061b2:	4b24      	ldr	r3, [pc, #144]	; (8006244 <__swsetup_r+0xd8>)
 80061b4:	429c      	cmp	r4, r3
 80061b6:	bf08      	it	eq
 80061b8:	68ec      	ldreq	r4, [r5, #12]
 80061ba:	e7e6      	b.n	800618a <__swsetup_r+0x1e>
 80061bc:	0751      	lsls	r1, r2, #29
 80061be:	d512      	bpl.n	80061e6 <__swsetup_r+0x7a>
 80061c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061c2:	b141      	cbz	r1, 80061d6 <__swsetup_r+0x6a>
 80061c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061c8:	4299      	cmp	r1, r3
 80061ca:	d002      	beq.n	80061d2 <__swsetup_r+0x66>
 80061cc:	4630      	mov	r0, r6
 80061ce:	f002 f805 	bl	80081dc <_free_r>
 80061d2:	2300      	movs	r3, #0
 80061d4:	6363      	str	r3, [r4, #52]	; 0x34
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	2300      	movs	r3, #0
 80061e0:	6063      	str	r3, [r4, #4]
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	f043 0308 	orr.w	r3, r3, #8
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	b94b      	cbnz	r3, 8006206 <__swsetup_r+0x9a>
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fc:	d003      	beq.n	8006206 <__swsetup_r+0x9a>
 80061fe:	4621      	mov	r1, r4
 8006200:	4630      	mov	r0, r6
 8006202:	f001 fb79 	bl	80078f8 <__smakebuf_r>
 8006206:	89a2      	ldrh	r2, [r4, #12]
 8006208:	f012 0301 	ands.w	r3, r2, #1
 800620c:	d00c      	beq.n	8006228 <__swsetup_r+0xbc>
 800620e:	2300      	movs	r3, #0
 8006210:	60a3      	str	r3, [r4, #8]
 8006212:	6963      	ldr	r3, [r4, #20]
 8006214:	425b      	negs	r3, r3
 8006216:	61a3      	str	r3, [r4, #24]
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	b953      	cbnz	r3, 8006232 <__swsetup_r+0xc6>
 800621c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006220:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006224:	d1ba      	bne.n	800619c <__swsetup_r+0x30>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	0792      	lsls	r2, r2, #30
 800622a:	bf58      	it	pl
 800622c:	6963      	ldrpl	r3, [r4, #20]
 800622e:	60a3      	str	r3, [r4, #8]
 8006230:	e7f2      	b.n	8006218 <__swsetup_r+0xac>
 8006232:	2000      	movs	r0, #0
 8006234:	e7f7      	b.n	8006226 <__swsetup_r+0xba>
 8006236:	bf00      	nop
 8006238:	2000000c 	.word	0x2000000c
 800623c:	080096e0 	.word	0x080096e0
 8006240:	08009700 	.word	0x08009700
 8006244:	080096c0 	.word	0x080096c0

08006248 <quorem>:
 8006248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	6903      	ldr	r3, [r0, #16]
 800624e:	690c      	ldr	r4, [r1, #16]
 8006250:	42a3      	cmp	r3, r4
 8006252:	4680      	mov	r8, r0
 8006254:	f2c0 8082 	blt.w	800635c <quorem+0x114>
 8006258:	3c01      	subs	r4, #1
 800625a:	f101 0714 	add.w	r7, r1, #20
 800625e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006262:	f100 0614 	add.w	r6, r0, #20
 8006266:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800626a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800626e:	eb06 030c 	add.w	r3, r6, ip
 8006272:	3501      	adds	r5, #1
 8006274:	eb07 090c 	add.w	r9, r7, ip
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	fbb0 f5f5 	udiv	r5, r0, r5
 800627e:	b395      	cbz	r5, 80062e6 <quorem+0x9e>
 8006280:	f04f 0a00 	mov.w	sl, #0
 8006284:	4638      	mov	r0, r7
 8006286:	46b6      	mov	lr, r6
 8006288:	46d3      	mov	fp, sl
 800628a:	f850 2b04 	ldr.w	r2, [r0], #4
 800628e:	b293      	uxth	r3, r2
 8006290:	fb05 a303 	mla	r3, r5, r3, sl
 8006294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006298:	b29b      	uxth	r3, r3
 800629a:	ebab 0303 	sub.w	r3, fp, r3
 800629e:	0c12      	lsrs	r2, r2, #16
 80062a0:	f8de b000 	ldr.w	fp, [lr]
 80062a4:	fb05 a202 	mla	r2, r5, r2, sl
 80062a8:	fa13 f38b 	uxtah	r3, r3, fp
 80062ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80062b0:	fa1f fb82 	uxth.w	fp, r2
 80062b4:	f8de 2000 	ldr.w	r2, [lr]
 80062b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80062bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062c6:	4581      	cmp	r9, r0
 80062c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80062cc:	f84e 3b04 	str.w	r3, [lr], #4
 80062d0:	d2db      	bcs.n	800628a <quorem+0x42>
 80062d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80062d6:	b933      	cbnz	r3, 80062e6 <quorem+0x9e>
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	3b04      	subs	r3, #4
 80062dc:	429e      	cmp	r6, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	d330      	bcc.n	8006344 <quorem+0xfc>
 80062e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80062e6:	4640      	mov	r0, r8
 80062e8:	f001 fdbe 	bl	8007e68 <__mcmp>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	db25      	blt.n	800633c <quorem+0xf4>
 80062f0:	3501      	adds	r5, #1
 80062f2:	4630      	mov	r0, r6
 80062f4:	f04f 0c00 	mov.w	ip, #0
 80062f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80062fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006300:	b293      	uxth	r3, r2
 8006302:	ebac 0303 	sub.w	r3, ip, r3
 8006306:	0c12      	lsrs	r2, r2, #16
 8006308:	fa13 f38e 	uxtah	r3, r3, lr
 800630c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006314:	b29b      	uxth	r3, r3
 8006316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800631a:	45b9      	cmp	r9, r7
 800631c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006320:	f840 3b04 	str.w	r3, [r0], #4
 8006324:	d2e8      	bcs.n	80062f8 <quorem+0xb0>
 8006326:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800632a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800632e:	b92a      	cbnz	r2, 800633c <quorem+0xf4>
 8006330:	3b04      	subs	r3, #4
 8006332:	429e      	cmp	r6, r3
 8006334:	461a      	mov	r2, r3
 8006336:	d30b      	bcc.n	8006350 <quorem+0x108>
 8006338:	f8c8 4010 	str.w	r4, [r8, #16]
 800633c:	4628      	mov	r0, r5
 800633e:	b003      	add	sp, #12
 8006340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	3b04      	subs	r3, #4
 8006348:	2a00      	cmp	r2, #0
 800634a:	d1ca      	bne.n	80062e2 <quorem+0x9a>
 800634c:	3c01      	subs	r4, #1
 800634e:	e7c5      	b.n	80062dc <quorem+0x94>
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	3b04      	subs	r3, #4
 8006354:	2a00      	cmp	r2, #0
 8006356:	d1ef      	bne.n	8006338 <quorem+0xf0>
 8006358:	3c01      	subs	r4, #1
 800635a:	e7ea      	b.n	8006332 <quorem+0xea>
 800635c:	2000      	movs	r0, #0
 800635e:	e7ee      	b.n	800633e <quorem+0xf6>

08006360 <_dtoa_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	ec57 6b10 	vmov	r6, r7, d0
 8006368:	b097      	sub	sp, #92	; 0x5c
 800636a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800636c:	9106      	str	r1, [sp, #24]
 800636e:	4604      	mov	r4, r0
 8006370:	920b      	str	r2, [sp, #44]	; 0x2c
 8006372:	9312      	str	r3, [sp, #72]	; 0x48
 8006374:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006378:	e9cd 6700 	strd	r6, r7, [sp]
 800637c:	b93d      	cbnz	r5, 800638e <_dtoa_r+0x2e>
 800637e:	2010      	movs	r0, #16
 8006380:	f001 fafa 	bl	8007978 <malloc>
 8006384:	6260      	str	r0, [r4, #36]	; 0x24
 8006386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800638a:	6005      	str	r5, [r0, #0]
 800638c:	60c5      	str	r5, [r0, #12]
 800638e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	b151      	cbz	r1, 80063aa <_dtoa_r+0x4a>
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	604a      	str	r2, [r1, #4]
 8006398:	2301      	movs	r3, #1
 800639a:	4093      	lsls	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
 800639e:	4620      	mov	r0, r4
 80063a0:	f001 fb43 	bl	8007a2a <_Bfree>
 80063a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	1e3b      	subs	r3, r7, #0
 80063ac:	bfbb      	ittet	lt
 80063ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063b2:	9301      	strlt	r3, [sp, #4]
 80063b4:	2300      	movge	r3, #0
 80063b6:	2201      	movlt	r2, #1
 80063b8:	bfac      	ite	ge
 80063ba:	f8c8 3000 	strge.w	r3, [r8]
 80063be:	f8c8 2000 	strlt.w	r2, [r8]
 80063c2:	4baf      	ldr	r3, [pc, #700]	; (8006680 <_dtoa_r+0x320>)
 80063c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80063c8:	ea33 0308 	bics.w	r3, r3, r8
 80063cc:	d114      	bne.n	80063f8 <_dtoa_r+0x98>
 80063ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	9b00      	ldr	r3, [sp, #0]
 80063d8:	b923      	cbnz	r3, 80063e4 <_dtoa_r+0x84>
 80063da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80063de:	2800      	cmp	r0, #0
 80063e0:	f000 8542 	beq.w	8006e68 <_dtoa_r+0xb08>
 80063e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006694 <_dtoa_r+0x334>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 8544 	beq.w	8006e78 <_dtoa_r+0xb18>
 80063f0:	f10b 0303 	add.w	r3, fp, #3
 80063f4:	f000 bd3e 	b.w	8006e74 <_dtoa_r+0xb14>
 80063f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006408:	4681      	mov	r9, r0
 800640a:	b168      	cbz	r0, 8006428 <_dtoa_r+0xc8>
 800640c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800640e:	2301      	movs	r3, #1
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8524 	beq.w	8006e62 <_dtoa_r+0xb02>
 800641a:	4b9a      	ldr	r3, [pc, #616]	; (8006684 <_dtoa_r+0x324>)
 800641c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800641e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	f000 bd28 	b.w	8006e78 <_dtoa_r+0xb18>
 8006428:	aa14      	add	r2, sp, #80	; 0x50
 800642a:	a915      	add	r1, sp, #84	; 0x54
 800642c:	ec47 6b10 	vmov	d0, r6, r7
 8006430:	4620      	mov	r0, r4
 8006432:	f001 fe07 	bl	8008044 <__d2b>
 8006436:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800643a:	9004      	str	r0, [sp, #16]
 800643c:	2d00      	cmp	r5, #0
 800643e:	d07c      	beq.n	800653a <_dtoa_r+0x1da>
 8006440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006444:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006448:	46b2      	mov	sl, r6
 800644a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800644e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006452:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006456:	2200      	movs	r2, #0
 8006458:	4b8b      	ldr	r3, [pc, #556]	; (8006688 <_dtoa_r+0x328>)
 800645a:	4650      	mov	r0, sl
 800645c:	4659      	mov	r1, fp
 800645e:	f7f9 ff13 	bl	8000288 <__aeabi_dsub>
 8006462:	a381      	add	r3, pc, #516	; (adr r3, 8006668 <_dtoa_r+0x308>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7fa f8c6 	bl	80005f8 <__aeabi_dmul>
 800646c:	a380      	add	r3, pc, #512	; (adr r3, 8006670 <_dtoa_r+0x310>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f7f9 ff0b 	bl	800028c <__adddf3>
 8006476:	4606      	mov	r6, r0
 8006478:	4628      	mov	r0, r5
 800647a:	460f      	mov	r7, r1
 800647c:	f7fa f852 	bl	8000524 <__aeabi_i2d>
 8006480:	a37d      	add	r3, pc, #500	; (adr r3, 8006678 <_dtoa_r+0x318>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4630      	mov	r0, r6
 8006490:	4639      	mov	r1, r7
 8006492:	f7f9 fefb 	bl	800028c <__adddf3>
 8006496:	4606      	mov	r6, r0
 8006498:	460f      	mov	r7, r1
 800649a:	f7fa fb5d 	bl	8000b58 <__aeabi_d2iz>
 800649e:	2200      	movs	r2, #0
 80064a0:	4682      	mov	sl, r0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7fa fb18 	bl	8000adc <__aeabi_dcmplt>
 80064ac:	b148      	cbz	r0, 80064c2 <_dtoa_r+0x162>
 80064ae:	4650      	mov	r0, sl
 80064b0:	f7fa f838 	bl	8000524 <__aeabi_i2d>
 80064b4:	4632      	mov	r2, r6
 80064b6:	463b      	mov	r3, r7
 80064b8:	f7fa fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 80064bc:	b908      	cbnz	r0, 80064c2 <_dtoa_r+0x162>
 80064be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064c2:	f1ba 0f16 	cmp.w	sl, #22
 80064c6:	d859      	bhi.n	800657c <_dtoa_r+0x21c>
 80064c8:	4970      	ldr	r1, [pc, #448]	; (800668c <_dtoa_r+0x32c>)
 80064ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80064ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d6:	f7fa fb1f 	bl	8000b18 <__aeabi_dcmpgt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d050      	beq.n	8006580 <_dtoa_r+0x220>
 80064de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064e2:	2300      	movs	r3, #0
 80064e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80064e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064e8:	1b5d      	subs	r5, r3, r5
 80064ea:	f1b5 0801 	subs.w	r8, r5, #1
 80064ee:	bf49      	itett	mi
 80064f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80064f4:	2300      	movpl	r3, #0
 80064f6:	9305      	strmi	r3, [sp, #20]
 80064f8:	f04f 0800 	movmi.w	r8, #0
 80064fc:	bf58      	it	pl
 80064fe:	9305      	strpl	r3, [sp, #20]
 8006500:	f1ba 0f00 	cmp.w	sl, #0
 8006504:	db3e      	blt.n	8006584 <_dtoa_r+0x224>
 8006506:	2300      	movs	r3, #0
 8006508:	44d0      	add	r8, sl
 800650a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800650e:	9307      	str	r3, [sp, #28]
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	2b09      	cmp	r3, #9
 8006514:	f200 8090 	bhi.w	8006638 <_dtoa_r+0x2d8>
 8006518:	2b05      	cmp	r3, #5
 800651a:	bfc4      	itt	gt
 800651c:	3b04      	subgt	r3, #4
 800651e:	9306      	strgt	r3, [sp, #24]
 8006520:	9b06      	ldr	r3, [sp, #24]
 8006522:	f1a3 0302 	sub.w	r3, r3, #2
 8006526:	bfcc      	ite	gt
 8006528:	2500      	movgt	r5, #0
 800652a:	2501      	movle	r5, #1
 800652c:	2b03      	cmp	r3, #3
 800652e:	f200 808f 	bhi.w	8006650 <_dtoa_r+0x2f0>
 8006532:	e8df f003 	tbb	[pc, r3]
 8006536:	7f7d      	.short	0x7f7d
 8006538:	7131      	.short	0x7131
 800653a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800653e:	441d      	add	r5, r3
 8006540:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006544:	2820      	cmp	r0, #32
 8006546:	dd13      	ble.n	8006570 <_dtoa_r+0x210>
 8006548:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800654c:	9b00      	ldr	r3, [sp, #0]
 800654e:	fa08 f800 	lsl.w	r8, r8, r0
 8006552:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006556:	fa23 f000 	lsr.w	r0, r3, r0
 800655a:	ea48 0000 	orr.w	r0, r8, r0
 800655e:	f7f9 ffd1 	bl	8000504 <__aeabi_ui2d>
 8006562:	2301      	movs	r3, #1
 8006564:	4682      	mov	sl, r0
 8006566:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800656a:	3d01      	subs	r5, #1
 800656c:	9313      	str	r3, [sp, #76]	; 0x4c
 800656e:	e772      	b.n	8006456 <_dtoa_r+0xf6>
 8006570:	9b00      	ldr	r3, [sp, #0]
 8006572:	f1c0 0020 	rsb	r0, r0, #32
 8006576:	fa03 f000 	lsl.w	r0, r3, r0
 800657a:	e7f0      	b.n	800655e <_dtoa_r+0x1fe>
 800657c:	2301      	movs	r3, #1
 800657e:	e7b1      	b.n	80064e4 <_dtoa_r+0x184>
 8006580:	900f      	str	r0, [sp, #60]	; 0x3c
 8006582:	e7b0      	b.n	80064e6 <_dtoa_r+0x186>
 8006584:	9b05      	ldr	r3, [sp, #20]
 8006586:	eba3 030a 	sub.w	r3, r3, sl
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	f1ca 0300 	rsb	r3, sl, #0
 8006590:	9307      	str	r3, [sp, #28]
 8006592:	2300      	movs	r3, #0
 8006594:	930e      	str	r3, [sp, #56]	; 0x38
 8006596:	e7bb      	b.n	8006510 <_dtoa_r+0x1b0>
 8006598:	2301      	movs	r3, #1
 800659a:	930a      	str	r3, [sp, #40]	; 0x28
 800659c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd59      	ble.n	8006656 <_dtoa_r+0x2f6>
 80065a2:	9302      	str	r3, [sp, #8]
 80065a4:	4699      	mov	r9, r3
 80065a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065a8:	2200      	movs	r2, #0
 80065aa:	6072      	str	r2, [r6, #4]
 80065ac:	2204      	movs	r2, #4
 80065ae:	f102 0014 	add.w	r0, r2, #20
 80065b2:	4298      	cmp	r0, r3
 80065b4:	6871      	ldr	r1, [r6, #4]
 80065b6:	d953      	bls.n	8006660 <_dtoa_r+0x300>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f001 fa02 	bl	80079c2 <_Balloc>
 80065be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c0:	6030      	str	r0, [r6, #0]
 80065c2:	f1b9 0f0e 	cmp.w	r9, #14
 80065c6:	f8d3 b000 	ldr.w	fp, [r3]
 80065ca:	f200 80e6 	bhi.w	800679a <_dtoa_r+0x43a>
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	f000 80e3 	beq.w	800679a <_dtoa_r+0x43a>
 80065d4:	ed9d 7b00 	vldr	d7, [sp]
 80065d8:	f1ba 0f00 	cmp.w	sl, #0
 80065dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80065e0:	dd74      	ble.n	80066cc <_dtoa_r+0x36c>
 80065e2:	4a2a      	ldr	r2, [pc, #168]	; (800668c <_dtoa_r+0x32c>)
 80065e4:	f00a 030f 	and.w	r3, sl, #15
 80065e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065ec:	ed93 7b00 	vldr	d7, [r3]
 80065f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80065f4:	06f0      	lsls	r0, r6, #27
 80065f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80065fa:	d565      	bpl.n	80066c8 <_dtoa_r+0x368>
 80065fc:	4b24      	ldr	r3, [pc, #144]	; (8006690 <_dtoa_r+0x330>)
 80065fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006602:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006606:	f7fa f921 	bl	800084c <__aeabi_ddiv>
 800660a:	e9cd 0100 	strd	r0, r1, [sp]
 800660e:	f006 060f 	and.w	r6, r6, #15
 8006612:	2503      	movs	r5, #3
 8006614:	4f1e      	ldr	r7, [pc, #120]	; (8006690 <_dtoa_r+0x330>)
 8006616:	e04c      	b.n	80066b2 <_dtoa_r+0x352>
 8006618:	2301      	movs	r3, #1
 800661a:	930a      	str	r3, [sp, #40]	; 0x28
 800661c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800661e:	4453      	add	r3, sl
 8006620:	f103 0901 	add.w	r9, r3, #1
 8006624:	9302      	str	r3, [sp, #8]
 8006626:	464b      	mov	r3, r9
 8006628:	2b01      	cmp	r3, #1
 800662a:	bfb8      	it	lt
 800662c:	2301      	movlt	r3, #1
 800662e:	e7ba      	b.n	80065a6 <_dtoa_r+0x246>
 8006630:	2300      	movs	r3, #0
 8006632:	e7b2      	b.n	800659a <_dtoa_r+0x23a>
 8006634:	2300      	movs	r3, #0
 8006636:	e7f0      	b.n	800661a <_dtoa_r+0x2ba>
 8006638:	2501      	movs	r5, #1
 800663a:	2300      	movs	r3, #0
 800663c:	9306      	str	r3, [sp, #24]
 800663e:	950a      	str	r5, [sp, #40]	; 0x28
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	4699      	mov	r9, r3
 8006648:	2200      	movs	r2, #0
 800664a:	2312      	movs	r3, #18
 800664c:	920b      	str	r2, [sp, #44]	; 0x2c
 800664e:	e7aa      	b.n	80065a6 <_dtoa_r+0x246>
 8006650:	2301      	movs	r3, #1
 8006652:	930a      	str	r3, [sp, #40]	; 0x28
 8006654:	e7f4      	b.n	8006640 <_dtoa_r+0x2e0>
 8006656:	2301      	movs	r3, #1
 8006658:	9302      	str	r3, [sp, #8]
 800665a:	4699      	mov	r9, r3
 800665c:	461a      	mov	r2, r3
 800665e:	e7f5      	b.n	800664c <_dtoa_r+0x2ec>
 8006660:	3101      	adds	r1, #1
 8006662:	6071      	str	r1, [r6, #4]
 8006664:	0052      	lsls	r2, r2, #1
 8006666:	e7a2      	b.n	80065ae <_dtoa_r+0x24e>
 8006668:	636f4361 	.word	0x636f4361
 800666c:	3fd287a7 	.word	0x3fd287a7
 8006670:	8b60c8b3 	.word	0x8b60c8b3
 8006674:	3fc68a28 	.word	0x3fc68a28
 8006678:	509f79fb 	.word	0x509f79fb
 800667c:	3fd34413 	.word	0x3fd34413
 8006680:	7ff00000 	.word	0x7ff00000
 8006684:	08009854 	.word	0x08009854
 8006688:	3ff80000 	.word	0x3ff80000
 800668c:	08009758 	.word	0x08009758
 8006690:	08009730 	.word	0x08009730
 8006694:	080096b9 	.word	0x080096b9
 8006698:	07f1      	lsls	r1, r6, #31
 800669a:	d508      	bpl.n	80066ae <_dtoa_r+0x34e>
 800669c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a4:	f7f9 ffa8 	bl	80005f8 <__aeabi_dmul>
 80066a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066ac:	3501      	adds	r5, #1
 80066ae:	1076      	asrs	r6, r6, #1
 80066b0:	3708      	adds	r7, #8
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	d1f0      	bne.n	8006698 <_dtoa_r+0x338>
 80066b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066be:	f7fa f8c5 	bl	800084c <__aeabi_ddiv>
 80066c2:	e9cd 0100 	strd	r0, r1, [sp]
 80066c6:	e01a      	b.n	80066fe <_dtoa_r+0x39e>
 80066c8:	2502      	movs	r5, #2
 80066ca:	e7a3      	b.n	8006614 <_dtoa_r+0x2b4>
 80066cc:	f000 80a0 	beq.w	8006810 <_dtoa_r+0x4b0>
 80066d0:	f1ca 0600 	rsb	r6, sl, #0
 80066d4:	4b9f      	ldr	r3, [pc, #636]	; (8006954 <_dtoa_r+0x5f4>)
 80066d6:	4fa0      	ldr	r7, [pc, #640]	; (8006958 <_dtoa_r+0x5f8>)
 80066d8:	f006 020f 	and.w	r2, r6, #15
 80066dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066e8:	f7f9 ff86 	bl	80005f8 <__aeabi_dmul>
 80066ec:	e9cd 0100 	strd	r0, r1, [sp]
 80066f0:	1136      	asrs	r6, r6, #4
 80066f2:	2300      	movs	r3, #0
 80066f4:	2502      	movs	r5, #2
 80066f6:	2e00      	cmp	r6, #0
 80066f8:	d17f      	bne.n	80067fa <_dtoa_r+0x49a>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e1      	bne.n	80066c2 <_dtoa_r+0x362>
 80066fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8087 	beq.w	8006814 <_dtoa_r+0x4b4>
 8006706:	e9dd 6700 	ldrd	r6, r7, [sp]
 800670a:	2200      	movs	r2, #0
 800670c:	4b93      	ldr	r3, [pc, #588]	; (800695c <_dtoa_r+0x5fc>)
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7fa f9e3 	bl	8000adc <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d07c      	beq.n	8006814 <_dtoa_r+0x4b4>
 800671a:	f1b9 0f00 	cmp.w	r9, #0
 800671e:	d079      	beq.n	8006814 <_dtoa_r+0x4b4>
 8006720:	9b02      	ldr	r3, [sp, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	dd35      	ble.n	8006792 <_dtoa_r+0x432>
 8006726:	f10a 33ff 	add.w	r3, sl, #4294967295
 800672a:	9308      	str	r3, [sp, #32]
 800672c:	4639      	mov	r1, r7
 800672e:	2200      	movs	r2, #0
 8006730:	4b8b      	ldr	r3, [pc, #556]	; (8006960 <_dtoa_r+0x600>)
 8006732:	4630      	mov	r0, r6
 8006734:	f7f9 ff60 	bl	80005f8 <__aeabi_dmul>
 8006738:	e9cd 0100 	strd	r0, r1, [sp]
 800673c:	9f02      	ldr	r7, [sp, #8]
 800673e:	3501      	adds	r5, #1
 8006740:	4628      	mov	r0, r5
 8006742:	f7f9 feef 	bl	8000524 <__aeabi_i2d>
 8006746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800674a:	f7f9 ff55 	bl	80005f8 <__aeabi_dmul>
 800674e:	2200      	movs	r2, #0
 8006750:	4b84      	ldr	r3, [pc, #528]	; (8006964 <_dtoa_r+0x604>)
 8006752:	f7f9 fd9b 	bl	800028c <__adddf3>
 8006756:	4605      	mov	r5, r0
 8006758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800675c:	2f00      	cmp	r7, #0
 800675e:	d15d      	bne.n	800681c <_dtoa_r+0x4bc>
 8006760:	2200      	movs	r2, #0
 8006762:	4b81      	ldr	r3, [pc, #516]	; (8006968 <_dtoa_r+0x608>)
 8006764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006768:	f7f9 fd8e 	bl	8000288 <__aeabi_dsub>
 800676c:	462a      	mov	r2, r5
 800676e:	4633      	mov	r3, r6
 8006770:	e9cd 0100 	strd	r0, r1, [sp]
 8006774:	f7fa f9d0 	bl	8000b18 <__aeabi_dcmpgt>
 8006778:	2800      	cmp	r0, #0
 800677a:	f040 8288 	bne.w	8006c8e <_dtoa_r+0x92e>
 800677e:	462a      	mov	r2, r5
 8006780:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006788:	f7fa f9a8 	bl	8000adc <__aeabi_dcmplt>
 800678c:	2800      	cmp	r0, #0
 800678e:	f040 827c 	bne.w	8006c8a <_dtoa_r+0x92a>
 8006792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006796:	e9cd 2300 	strd	r2, r3, [sp]
 800679a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800679c:	2b00      	cmp	r3, #0
 800679e:	f2c0 8150 	blt.w	8006a42 <_dtoa_r+0x6e2>
 80067a2:	f1ba 0f0e 	cmp.w	sl, #14
 80067a6:	f300 814c 	bgt.w	8006a42 <_dtoa_r+0x6e2>
 80067aa:	4b6a      	ldr	r3, [pc, #424]	; (8006954 <_dtoa_r+0x5f4>)
 80067ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067b0:	ed93 7b00 	vldr	d7, [r3]
 80067b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80067bc:	f280 80d8 	bge.w	8006970 <_dtoa_r+0x610>
 80067c0:	f1b9 0f00 	cmp.w	r9, #0
 80067c4:	f300 80d4 	bgt.w	8006970 <_dtoa_r+0x610>
 80067c8:	f040 825e 	bne.w	8006c88 <_dtoa_r+0x928>
 80067cc:	2200      	movs	r2, #0
 80067ce:	4b66      	ldr	r3, [pc, #408]	; (8006968 <_dtoa_r+0x608>)
 80067d0:	ec51 0b17 	vmov	r0, r1, d7
 80067d4:	f7f9 ff10 	bl	80005f8 <__aeabi_dmul>
 80067d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067dc:	f7fa f992 	bl	8000b04 <__aeabi_dcmpge>
 80067e0:	464f      	mov	r7, r9
 80067e2:	464e      	mov	r6, r9
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f040 8234 	bne.w	8006c52 <_dtoa_r+0x8f2>
 80067ea:	2331      	movs	r3, #49	; 0x31
 80067ec:	f10b 0501 	add.w	r5, fp, #1
 80067f0:	f88b 3000 	strb.w	r3, [fp]
 80067f4:	f10a 0a01 	add.w	sl, sl, #1
 80067f8:	e22f      	b.n	8006c5a <_dtoa_r+0x8fa>
 80067fa:	07f2      	lsls	r2, r6, #31
 80067fc:	d505      	bpl.n	800680a <_dtoa_r+0x4aa>
 80067fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006802:	f7f9 fef9 	bl	80005f8 <__aeabi_dmul>
 8006806:	3501      	adds	r5, #1
 8006808:	2301      	movs	r3, #1
 800680a:	1076      	asrs	r6, r6, #1
 800680c:	3708      	adds	r7, #8
 800680e:	e772      	b.n	80066f6 <_dtoa_r+0x396>
 8006810:	2502      	movs	r5, #2
 8006812:	e774      	b.n	80066fe <_dtoa_r+0x39e>
 8006814:	f8cd a020 	str.w	sl, [sp, #32]
 8006818:	464f      	mov	r7, r9
 800681a:	e791      	b.n	8006740 <_dtoa_r+0x3e0>
 800681c:	4b4d      	ldr	r3, [pc, #308]	; (8006954 <_dtoa_r+0x5f4>)
 800681e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006822:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	d047      	beq.n	80068bc <_dtoa_r+0x55c>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	2000      	movs	r0, #0
 8006832:	494e      	ldr	r1, [pc, #312]	; (800696c <_dtoa_r+0x60c>)
 8006834:	f7fa f80a 	bl	800084c <__aeabi_ddiv>
 8006838:	462a      	mov	r2, r5
 800683a:	4633      	mov	r3, r6
 800683c:	f7f9 fd24 	bl	8000288 <__aeabi_dsub>
 8006840:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006844:	465d      	mov	r5, fp
 8006846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800684a:	f7fa f985 	bl	8000b58 <__aeabi_d2iz>
 800684e:	4606      	mov	r6, r0
 8006850:	f7f9 fe68 	bl	8000524 <__aeabi_i2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800685c:	f7f9 fd14 	bl	8000288 <__aeabi_dsub>
 8006860:	3630      	adds	r6, #48	; 0x30
 8006862:	f805 6b01 	strb.w	r6, [r5], #1
 8006866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800686a:	e9cd 0100 	strd	r0, r1, [sp]
 800686e:	f7fa f935 	bl	8000adc <__aeabi_dcmplt>
 8006872:	2800      	cmp	r0, #0
 8006874:	d163      	bne.n	800693e <_dtoa_r+0x5de>
 8006876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800687a:	2000      	movs	r0, #0
 800687c:	4937      	ldr	r1, [pc, #220]	; (800695c <_dtoa_r+0x5fc>)
 800687e:	f7f9 fd03 	bl	8000288 <__aeabi_dsub>
 8006882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006886:	f7fa f929 	bl	8000adc <__aeabi_dcmplt>
 800688a:	2800      	cmp	r0, #0
 800688c:	f040 80b7 	bne.w	80069fe <_dtoa_r+0x69e>
 8006890:	eba5 030b 	sub.w	r3, r5, fp
 8006894:	429f      	cmp	r7, r3
 8006896:	f77f af7c 	ble.w	8006792 <_dtoa_r+0x432>
 800689a:	2200      	movs	r2, #0
 800689c:	4b30      	ldr	r3, [pc, #192]	; (8006960 <_dtoa_r+0x600>)
 800689e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068a2:	f7f9 fea9 	bl	80005f8 <__aeabi_dmul>
 80068a6:	2200      	movs	r2, #0
 80068a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068ac:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <_dtoa_r+0x600>)
 80068ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	e9cd 0100 	strd	r0, r1, [sp]
 80068ba:	e7c4      	b.n	8006846 <_dtoa_r+0x4e6>
 80068bc:	462a      	mov	r2, r5
 80068be:	4633      	mov	r3, r6
 80068c0:	f7f9 fe9a 	bl	80005f8 <__aeabi_dmul>
 80068c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068c8:	eb0b 0507 	add.w	r5, fp, r7
 80068cc:	465e      	mov	r6, fp
 80068ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068d2:	f7fa f941 	bl	8000b58 <__aeabi_d2iz>
 80068d6:	4607      	mov	r7, r0
 80068d8:	f7f9 fe24 	bl	8000524 <__aeabi_i2d>
 80068dc:	3730      	adds	r7, #48	; 0x30
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068e6:	f7f9 fccf 	bl	8000288 <__aeabi_dsub>
 80068ea:	f806 7b01 	strb.w	r7, [r6], #1
 80068ee:	42ae      	cmp	r6, r5
 80068f0:	e9cd 0100 	strd	r0, r1, [sp]
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	d126      	bne.n	8006948 <_dtoa_r+0x5e8>
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <_dtoa_r+0x60c>)
 80068fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006900:	f7f9 fcc4 	bl	800028c <__adddf3>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800690c:	f7fa f904 	bl	8000b18 <__aeabi_dcmpgt>
 8006910:	2800      	cmp	r0, #0
 8006912:	d174      	bne.n	80069fe <_dtoa_r+0x69e>
 8006914:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006918:	2000      	movs	r0, #0
 800691a:	4914      	ldr	r1, [pc, #80]	; (800696c <_dtoa_r+0x60c>)
 800691c:	f7f9 fcb4 	bl	8000288 <__aeabi_dsub>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006928:	f7fa f8d8 	bl	8000adc <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	f43f af30 	beq.w	8006792 <_dtoa_r+0x432>
 8006932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006936:	2b30      	cmp	r3, #48	; 0x30
 8006938:	f105 32ff 	add.w	r2, r5, #4294967295
 800693c:	d002      	beq.n	8006944 <_dtoa_r+0x5e4>
 800693e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006942:	e04a      	b.n	80069da <_dtoa_r+0x67a>
 8006944:	4615      	mov	r5, r2
 8006946:	e7f4      	b.n	8006932 <_dtoa_r+0x5d2>
 8006948:	4b05      	ldr	r3, [pc, #20]	; (8006960 <_dtoa_r+0x600>)
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	e9cd 0100 	strd	r0, r1, [sp]
 8006952:	e7bc      	b.n	80068ce <_dtoa_r+0x56e>
 8006954:	08009758 	.word	0x08009758
 8006958:	08009730 	.word	0x08009730
 800695c:	3ff00000 	.word	0x3ff00000
 8006960:	40240000 	.word	0x40240000
 8006964:	401c0000 	.word	0x401c0000
 8006968:	40140000 	.word	0x40140000
 800696c:	3fe00000 	.word	0x3fe00000
 8006970:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006974:	465d      	mov	r5, fp
 8006976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800697a:	4630      	mov	r0, r6
 800697c:	4639      	mov	r1, r7
 800697e:	f7f9 ff65 	bl	800084c <__aeabi_ddiv>
 8006982:	f7fa f8e9 	bl	8000b58 <__aeabi_d2iz>
 8006986:	4680      	mov	r8, r0
 8006988:	f7f9 fdcc 	bl	8000524 <__aeabi_i2d>
 800698c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006990:	f7f9 fe32 	bl	80005f8 <__aeabi_dmul>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80069a0:	f7f9 fc72 	bl	8000288 <__aeabi_dsub>
 80069a4:	f805 6b01 	strb.w	r6, [r5], #1
 80069a8:	eba5 060b 	sub.w	r6, r5, fp
 80069ac:	45b1      	cmp	r9, r6
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	d139      	bne.n	8006a28 <_dtoa_r+0x6c8>
 80069b4:	f7f9 fc6a 	bl	800028c <__adddf3>
 80069b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069bc:	4606      	mov	r6, r0
 80069be:	460f      	mov	r7, r1
 80069c0:	f7fa f8aa 	bl	8000b18 <__aeabi_dcmpgt>
 80069c4:	b9c8      	cbnz	r0, 80069fa <_dtoa_r+0x69a>
 80069c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069ca:	4630      	mov	r0, r6
 80069cc:	4639      	mov	r1, r7
 80069ce:	f7fa f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d2:	b110      	cbz	r0, 80069da <_dtoa_r+0x67a>
 80069d4:	f018 0f01 	tst.w	r8, #1
 80069d8:	d10f      	bne.n	80069fa <_dtoa_r+0x69a>
 80069da:	9904      	ldr	r1, [sp, #16]
 80069dc:	4620      	mov	r0, r4
 80069de:	f001 f824 	bl	8007a2a <_Bfree>
 80069e2:	2300      	movs	r3, #0
 80069e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e6:	702b      	strb	r3, [r5, #0]
 80069e8:	f10a 0301 	add.w	r3, sl, #1
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8241 	beq.w	8006e78 <_dtoa_r+0xb18>
 80069f6:	601d      	str	r5, [r3, #0]
 80069f8:	e23e      	b.n	8006e78 <_dtoa_r+0xb18>
 80069fa:	f8cd a020 	str.w	sl, [sp, #32]
 80069fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a02:	2a39      	cmp	r2, #57	; 0x39
 8006a04:	f105 33ff 	add.w	r3, r5, #4294967295
 8006a08:	d108      	bne.n	8006a1c <_dtoa_r+0x6bc>
 8006a0a:	459b      	cmp	fp, r3
 8006a0c:	d10a      	bne.n	8006a24 <_dtoa_r+0x6c4>
 8006a0e:	9b08      	ldr	r3, [sp, #32]
 8006a10:	3301      	adds	r3, #1
 8006a12:	9308      	str	r3, [sp, #32]
 8006a14:	2330      	movs	r3, #48	; 0x30
 8006a16:	f88b 3000 	strb.w	r3, [fp]
 8006a1a:	465b      	mov	r3, fp
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	3201      	adds	r2, #1
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	e78c      	b.n	800693e <_dtoa_r+0x5de>
 8006a24:	461d      	mov	r5, r3
 8006a26:	e7ea      	b.n	80069fe <_dtoa_r+0x69e>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4b9b      	ldr	r3, [pc, #620]	; (8006c98 <_dtoa_r+0x938>)
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	2200      	movs	r2, #0
 8006a32:	2300      	movs	r3, #0
 8006a34:	4606      	mov	r6, r0
 8006a36:	460f      	mov	r7, r1
 8006a38:	f7fa f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d09a      	beq.n	8006976 <_dtoa_r+0x616>
 8006a40:	e7cb      	b.n	80069da <_dtoa_r+0x67a>
 8006a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	f000 808b 	beq.w	8006b60 <_dtoa_r+0x800>
 8006a4a:	9a06      	ldr	r2, [sp, #24]
 8006a4c:	2a01      	cmp	r2, #1
 8006a4e:	dc6e      	bgt.n	8006b2e <_dtoa_r+0x7ce>
 8006a50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a52:	2a00      	cmp	r2, #0
 8006a54:	d067      	beq.n	8006b26 <_dtoa_r+0x7c6>
 8006a56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a5a:	9f07      	ldr	r7, [sp, #28]
 8006a5c:	9d05      	ldr	r5, [sp, #20]
 8006a5e:	9a05      	ldr	r2, [sp, #20]
 8006a60:	2101      	movs	r1, #1
 8006a62:	441a      	add	r2, r3
 8006a64:	4620      	mov	r0, r4
 8006a66:	9205      	str	r2, [sp, #20]
 8006a68:	4498      	add	r8, r3
 8006a6a:	f001 f8bc 	bl	8007be6 <__i2b>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	dd0c      	ble.n	8006a8e <_dtoa_r+0x72e>
 8006a74:	f1b8 0f00 	cmp.w	r8, #0
 8006a78:	dd09      	ble.n	8006a8e <_dtoa_r+0x72e>
 8006a7a:	4545      	cmp	r5, r8
 8006a7c:	9a05      	ldr	r2, [sp, #20]
 8006a7e:	462b      	mov	r3, r5
 8006a80:	bfa8      	it	ge
 8006a82:	4643      	movge	r3, r8
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	9205      	str	r2, [sp, #20]
 8006a88:	1aed      	subs	r5, r5, r3
 8006a8a:	eba8 0803 	sub.w	r8, r8, r3
 8006a8e:	9b07      	ldr	r3, [sp, #28]
 8006a90:	b1eb      	cbz	r3, 8006ace <_dtoa_r+0x76e>
 8006a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d067      	beq.n	8006b68 <_dtoa_r+0x808>
 8006a98:	b18f      	cbz	r7, 8006abe <_dtoa_r+0x75e>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	463a      	mov	r2, r7
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 f940 	bl	8007d24 <__pow5mult>
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f001 f8a4 	bl	8007bf8 <__multiply>
 8006ab0:	9904      	ldr	r1, [sp, #16]
 8006ab2:	9008      	str	r0, [sp, #32]
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 ffb8 	bl	8007a2a <_Bfree>
 8006aba:	9b08      	ldr	r3, [sp, #32]
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	9b07      	ldr	r3, [sp, #28]
 8006ac0:	1bda      	subs	r2, r3, r7
 8006ac2:	d004      	beq.n	8006ace <_dtoa_r+0x76e>
 8006ac4:	9904      	ldr	r1, [sp, #16]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f001 f92c 	bl	8007d24 <__pow5mult>
 8006acc:	9004      	str	r0, [sp, #16]
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f001 f888 	bl	8007be6 <__i2b>
 8006ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad8:	4607      	mov	r7, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 81d0 	beq.w	8006e80 <_dtoa_r+0xb20>
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f001 f91d 	bl	8007d24 <__pow5mult>
 8006aea:	9b06      	ldr	r3, [sp, #24]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	4607      	mov	r7, r0
 8006af0:	dc40      	bgt.n	8006b74 <_dtoa_r+0x814>
 8006af2:	9b00      	ldr	r3, [sp, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d139      	bne.n	8006b6c <_dtoa_r+0x80c>
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d136      	bne.n	8006b70 <_dtoa_r+0x810>
 8006b02:	9b01      	ldr	r3, [sp, #4]
 8006b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	051b      	lsls	r3, r3, #20
 8006b0c:	b12b      	cbz	r3, 8006b1a <_dtoa_r+0x7ba>
 8006b0e:	9b05      	ldr	r3, [sp, #20]
 8006b10:	3301      	adds	r3, #1
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f108 0801 	add.w	r8, r8, #1
 8006b18:	2301      	movs	r3, #1
 8006b1a:	9307      	str	r3, [sp, #28]
 8006b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d12a      	bne.n	8006b78 <_dtoa_r+0x818>
 8006b22:	2001      	movs	r0, #1
 8006b24:	e030      	b.n	8006b88 <_dtoa_r+0x828>
 8006b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b2c:	e795      	b.n	8006a5a <_dtoa_r+0x6fa>
 8006b2e:	9b07      	ldr	r3, [sp, #28]
 8006b30:	f109 37ff 	add.w	r7, r9, #4294967295
 8006b34:	42bb      	cmp	r3, r7
 8006b36:	bfbf      	itttt	lt
 8006b38:	9b07      	ldrlt	r3, [sp, #28]
 8006b3a:	9707      	strlt	r7, [sp, #28]
 8006b3c:	1afa      	sublt	r2, r7, r3
 8006b3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b40:	bfbb      	ittet	lt
 8006b42:	189b      	addlt	r3, r3, r2
 8006b44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b46:	1bdf      	subge	r7, r3, r7
 8006b48:	2700      	movlt	r7, #0
 8006b4a:	f1b9 0f00 	cmp.w	r9, #0
 8006b4e:	bfb5      	itete	lt
 8006b50:	9b05      	ldrlt	r3, [sp, #20]
 8006b52:	9d05      	ldrge	r5, [sp, #20]
 8006b54:	eba3 0509 	sublt.w	r5, r3, r9
 8006b58:	464b      	movge	r3, r9
 8006b5a:	bfb8      	it	lt
 8006b5c:	2300      	movlt	r3, #0
 8006b5e:	e77e      	b.n	8006a5e <_dtoa_r+0x6fe>
 8006b60:	9f07      	ldr	r7, [sp, #28]
 8006b62:	9d05      	ldr	r5, [sp, #20]
 8006b64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006b66:	e783      	b.n	8006a70 <_dtoa_r+0x710>
 8006b68:	9a07      	ldr	r2, [sp, #28]
 8006b6a:	e7ab      	b.n	8006ac4 <_dtoa_r+0x764>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e7d4      	b.n	8006b1a <_dtoa_r+0x7ba>
 8006b70:	9b00      	ldr	r3, [sp, #0]
 8006b72:	e7d2      	b.n	8006b1a <_dtoa_r+0x7ba>
 8006b74:	2300      	movs	r3, #0
 8006b76:	9307      	str	r3, [sp, #28]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006b7e:	6918      	ldr	r0, [r3, #16]
 8006b80:	f000 ffe3 	bl	8007b4a <__hi0bits>
 8006b84:	f1c0 0020 	rsb	r0, r0, #32
 8006b88:	4440      	add	r0, r8
 8006b8a:	f010 001f 	ands.w	r0, r0, #31
 8006b8e:	d047      	beq.n	8006c20 <_dtoa_r+0x8c0>
 8006b90:	f1c0 0320 	rsb	r3, r0, #32
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	dd3b      	ble.n	8006c10 <_dtoa_r+0x8b0>
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	f1c0 001c 	rsb	r0, r0, #28
 8006b9e:	4403      	add	r3, r0
 8006ba0:	9305      	str	r3, [sp, #20]
 8006ba2:	4405      	add	r5, r0
 8006ba4:	4480      	add	r8, r0
 8006ba6:	9b05      	ldr	r3, [sp, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dd05      	ble.n	8006bb8 <_dtoa_r+0x858>
 8006bac:	461a      	mov	r2, r3
 8006bae:	9904      	ldr	r1, [sp, #16]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f001 f905 	bl	8007dc0 <__lshift>
 8006bb6:	9004      	str	r0, [sp, #16]
 8006bb8:	f1b8 0f00 	cmp.w	r8, #0
 8006bbc:	dd05      	ble.n	8006bca <_dtoa_r+0x86a>
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f001 f8fc 	bl	8007dc0 <__lshift>
 8006bc8:	4607      	mov	r7, r0
 8006bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bcc:	b353      	cbz	r3, 8006c24 <_dtoa_r+0x8c4>
 8006bce:	4639      	mov	r1, r7
 8006bd0:	9804      	ldr	r0, [sp, #16]
 8006bd2:	f001 f949 	bl	8007e68 <__mcmp>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	da24      	bge.n	8006c24 <_dtoa_r+0x8c4>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	9904      	ldr	r1, [sp, #16]
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 ff39 	bl	8007a58 <__multadd>
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	9004      	str	r0, [sp, #16]
 8006bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 814d 	beq.w	8006e8e <_dtoa_r+0xb2e>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 ff2c 	bl	8007a58 <__multadd>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	4606      	mov	r6, r0
 8006c06:	dc4f      	bgt.n	8006ca8 <_dtoa_r+0x948>
 8006c08:	9b06      	ldr	r3, [sp, #24]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	dd4c      	ble.n	8006ca8 <_dtoa_r+0x948>
 8006c0e:	e011      	b.n	8006c34 <_dtoa_r+0x8d4>
 8006c10:	d0c9      	beq.n	8006ba6 <_dtoa_r+0x846>
 8006c12:	9a05      	ldr	r2, [sp, #20]
 8006c14:	331c      	adds	r3, #28
 8006c16:	441a      	add	r2, r3
 8006c18:	9205      	str	r2, [sp, #20]
 8006c1a:	441d      	add	r5, r3
 8006c1c:	4498      	add	r8, r3
 8006c1e:	e7c2      	b.n	8006ba6 <_dtoa_r+0x846>
 8006c20:	4603      	mov	r3, r0
 8006c22:	e7f6      	b.n	8006c12 <_dtoa_r+0x8b2>
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	dc38      	bgt.n	8006c9c <_dtoa_r+0x93c>
 8006c2a:	9b06      	ldr	r3, [sp, #24]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	dd35      	ble.n	8006c9c <_dtoa_r+0x93c>
 8006c30:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c34:	9b02      	ldr	r3, [sp, #8]
 8006c36:	b963      	cbnz	r3, 8006c52 <_dtoa_r+0x8f2>
 8006c38:	4639      	mov	r1, r7
 8006c3a:	2205      	movs	r2, #5
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 ff0b 	bl	8007a58 <__multadd>
 8006c42:	4601      	mov	r1, r0
 8006c44:	4607      	mov	r7, r0
 8006c46:	9804      	ldr	r0, [sp, #16]
 8006c48:	f001 f90e 	bl	8007e68 <__mcmp>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f73f adcc 	bgt.w	80067ea <_dtoa_r+0x48a>
 8006c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c54:	465d      	mov	r5, fp
 8006c56:	ea6f 0a03 	mvn.w	sl, r3
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	4639      	mov	r1, r7
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fee2 	bl	8007a2a <_Bfree>
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	f43f aeb7 	beq.w	80069da <_dtoa_r+0x67a>
 8006c6c:	f1b9 0f00 	cmp.w	r9, #0
 8006c70:	d005      	beq.n	8006c7e <_dtoa_r+0x91e>
 8006c72:	45b1      	cmp	r9, r6
 8006c74:	d003      	beq.n	8006c7e <_dtoa_r+0x91e>
 8006c76:	4649      	mov	r1, r9
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fed6 	bl	8007a2a <_Bfree>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fed2 	bl	8007a2a <_Bfree>
 8006c86:	e6a8      	b.n	80069da <_dtoa_r+0x67a>
 8006c88:	2700      	movs	r7, #0
 8006c8a:	463e      	mov	r6, r7
 8006c8c:	e7e1      	b.n	8006c52 <_dtoa_r+0x8f2>
 8006c8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006c92:	463e      	mov	r6, r7
 8006c94:	e5a9      	b.n	80067ea <_dtoa_r+0x48a>
 8006c96:	bf00      	nop
 8006c98:	40240000 	.word	0x40240000
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80fa 	beq.w	8006e9c <_dtoa_r+0xb3c>
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	dd05      	ble.n	8006cb8 <_dtoa_r+0x958>
 8006cac:	4631      	mov	r1, r6
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f001 f885 	bl	8007dc0 <__lshift>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d04c      	beq.n	8006d58 <_dtoa_r+0x9f8>
 8006cbe:	6871      	ldr	r1, [r6, #4]
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fe7e 	bl	80079c2 <_Balloc>
 8006cc6:	6932      	ldr	r2, [r6, #16]
 8006cc8:	3202      	adds	r2, #2
 8006cca:	4605      	mov	r5, r0
 8006ccc:	0092      	lsls	r2, r2, #2
 8006cce:	f106 010c 	add.w	r1, r6, #12
 8006cd2:	300c      	adds	r0, #12
 8006cd4:	f000 fe6a 	bl	80079ac <memcpy>
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f001 f86f 	bl	8007dc0 <__lshift>
 8006ce2:	9b00      	ldr	r3, [sp, #0]
 8006ce4:	f8cd b014 	str.w	fp, [sp, #20]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	46b1      	mov	r9, r6
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	9804      	ldr	r0, [sp, #16]
 8006cf6:	f7ff faa7 	bl	8006248 <quorem>
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d02:	9804      	ldr	r0, [sp, #16]
 8006d04:	f001 f8b0 	bl	8007e68 <__mcmp>
 8006d08:	4632      	mov	r2, r6
 8006d0a:	9000      	str	r0, [sp, #0]
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f001 f8c4 	bl	8007e9c <__mdiff>
 8006d14:	68c3      	ldr	r3, [r0, #12]
 8006d16:	4602      	mov	r2, r0
 8006d18:	bb03      	cbnz	r3, 8006d5c <_dtoa_r+0x9fc>
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	9008      	str	r0, [sp, #32]
 8006d1e:	9804      	ldr	r0, [sp, #16]
 8006d20:	f001 f8a2 	bl	8007e68 <__mcmp>
 8006d24:	9a08      	ldr	r2, [sp, #32]
 8006d26:	4603      	mov	r3, r0
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	9308      	str	r3, [sp, #32]
 8006d2e:	f000 fe7c 	bl	8007a2a <_Bfree>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	b9a3      	cbnz	r3, 8006d60 <_dtoa_r+0xa00>
 8006d36:	9a06      	ldr	r2, [sp, #24]
 8006d38:	b992      	cbnz	r2, 8006d60 <_dtoa_r+0xa00>
 8006d3a:	9a07      	ldr	r2, [sp, #28]
 8006d3c:	b982      	cbnz	r2, 8006d60 <_dtoa_r+0xa00>
 8006d3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d42:	d029      	beq.n	8006d98 <_dtoa_r+0xa38>
 8006d44:	9b00      	ldr	r3, [sp, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dd01      	ble.n	8006d4e <_dtoa_r+0x9ee>
 8006d4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006d4e:	9b05      	ldr	r3, [sp, #20]
 8006d50:	1c5d      	adds	r5, r3, #1
 8006d52:	f883 8000 	strb.w	r8, [r3]
 8006d56:	e782      	b.n	8006c5e <_dtoa_r+0x8fe>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	e7c2      	b.n	8006ce2 <_dtoa_r+0x982>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e7e3      	b.n	8006d28 <_dtoa_r+0x9c8>
 8006d60:	9a00      	ldr	r2, [sp, #0]
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	db04      	blt.n	8006d70 <_dtoa_r+0xa10>
 8006d66:	d125      	bne.n	8006db4 <_dtoa_r+0xa54>
 8006d68:	9a06      	ldr	r2, [sp, #24]
 8006d6a:	bb1a      	cbnz	r2, 8006db4 <_dtoa_r+0xa54>
 8006d6c:	9a07      	ldr	r2, [sp, #28]
 8006d6e:	bb0a      	cbnz	r2, 8006db4 <_dtoa_r+0xa54>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	ddec      	ble.n	8006d4e <_dtoa_r+0x9ee>
 8006d74:	2201      	movs	r2, #1
 8006d76:	9904      	ldr	r1, [sp, #16]
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f001 f821 	bl	8007dc0 <__lshift>
 8006d7e:	4639      	mov	r1, r7
 8006d80:	9004      	str	r0, [sp, #16]
 8006d82:	f001 f871 	bl	8007e68 <__mcmp>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	dc03      	bgt.n	8006d92 <_dtoa_r+0xa32>
 8006d8a:	d1e0      	bne.n	8006d4e <_dtoa_r+0x9ee>
 8006d8c:	f018 0f01 	tst.w	r8, #1
 8006d90:	d0dd      	beq.n	8006d4e <_dtoa_r+0x9ee>
 8006d92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d96:	d1d8      	bne.n	8006d4a <_dtoa_r+0x9ea>
 8006d98:	9b05      	ldr	r3, [sp, #20]
 8006d9a:	9a05      	ldr	r2, [sp, #20]
 8006d9c:	1c5d      	adds	r5, r3, #1
 8006d9e:	2339      	movs	r3, #57	; 0x39
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006da6:	2b39      	cmp	r3, #57	; 0x39
 8006da8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006dac:	d04f      	beq.n	8006e4e <_dtoa_r+0xaee>
 8006dae:	3301      	adds	r3, #1
 8006db0:	7013      	strb	r3, [r2, #0]
 8006db2:	e754      	b.n	8006c5e <_dtoa_r+0x8fe>
 8006db4:	9a05      	ldr	r2, [sp, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f102 0501 	add.w	r5, r2, #1
 8006dbc:	dd06      	ble.n	8006dcc <_dtoa_r+0xa6c>
 8006dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dc2:	d0e9      	beq.n	8006d98 <_dtoa_r+0xa38>
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	9b05      	ldr	r3, [sp, #20]
 8006dca:	e7c2      	b.n	8006d52 <_dtoa_r+0x9f2>
 8006dcc:	9a02      	ldr	r2, [sp, #8]
 8006dce:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006dd2:	eba5 030b 	sub.w	r3, r5, fp
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d021      	beq.n	8006e1e <_dtoa_r+0xabe>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	220a      	movs	r2, #10
 8006dde:	9904      	ldr	r1, [sp, #16]
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fe39 	bl	8007a58 <__multadd>
 8006de6:	45b1      	cmp	r9, r6
 8006de8:	9004      	str	r0, [sp, #16]
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	f04f 020a 	mov.w	r2, #10
 8006df2:	4649      	mov	r1, r9
 8006df4:	4620      	mov	r0, r4
 8006df6:	d105      	bne.n	8006e04 <_dtoa_r+0xaa4>
 8006df8:	f000 fe2e 	bl	8007a58 <__multadd>
 8006dfc:	4681      	mov	r9, r0
 8006dfe:	4606      	mov	r6, r0
 8006e00:	9505      	str	r5, [sp, #20]
 8006e02:	e776      	b.n	8006cf2 <_dtoa_r+0x992>
 8006e04:	f000 fe28 	bl	8007a58 <__multadd>
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4681      	mov	r9, r0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	220a      	movs	r2, #10
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fe21 	bl	8007a58 <__multadd>
 8006e16:	4606      	mov	r6, r0
 8006e18:	e7f2      	b.n	8006e00 <_dtoa_r+0xaa0>
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	2201      	movs	r2, #1
 8006e20:	9904      	ldr	r1, [sp, #16]
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 ffcc 	bl	8007dc0 <__lshift>
 8006e28:	4639      	mov	r1, r7
 8006e2a:	9004      	str	r0, [sp, #16]
 8006e2c:	f001 f81c 	bl	8007e68 <__mcmp>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	dcb6      	bgt.n	8006da2 <_dtoa_r+0xa42>
 8006e34:	d102      	bne.n	8006e3c <_dtoa_r+0xadc>
 8006e36:	f018 0f01 	tst.w	r8, #1
 8006e3a:	d1b2      	bne.n	8006da2 <_dtoa_r+0xa42>
 8006e3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e40:	2b30      	cmp	r3, #48	; 0x30
 8006e42:	f105 32ff 	add.w	r2, r5, #4294967295
 8006e46:	f47f af0a 	bne.w	8006c5e <_dtoa_r+0x8fe>
 8006e4a:	4615      	mov	r5, r2
 8006e4c:	e7f6      	b.n	8006e3c <_dtoa_r+0xadc>
 8006e4e:	4593      	cmp	fp, r2
 8006e50:	d105      	bne.n	8006e5e <_dtoa_r+0xafe>
 8006e52:	2331      	movs	r3, #49	; 0x31
 8006e54:	f10a 0a01 	add.w	sl, sl, #1
 8006e58:	f88b 3000 	strb.w	r3, [fp]
 8006e5c:	e6ff      	b.n	8006c5e <_dtoa_r+0x8fe>
 8006e5e:	4615      	mov	r5, r2
 8006e60:	e79f      	b.n	8006da2 <_dtoa_r+0xa42>
 8006e62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ec8 <_dtoa_r+0xb68>
 8006e66:	e007      	b.n	8006e78 <_dtoa_r+0xb18>
 8006e68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006ecc <_dtoa_r+0xb6c>
 8006e6e:	b11b      	cbz	r3, 8006e78 <_dtoa_r+0xb18>
 8006e70:	f10b 0308 	add.w	r3, fp, #8
 8006e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	4658      	mov	r0, fp
 8006e7a:	b017      	add	sp, #92	; 0x5c
 8006e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e80:	9b06      	ldr	r3, [sp, #24]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	f77f ae35 	ble.w	8006af2 <_dtoa_r+0x792>
 8006e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e8a:	9307      	str	r3, [sp, #28]
 8006e8c:	e649      	b.n	8006b22 <_dtoa_r+0x7c2>
 8006e8e:	9b02      	ldr	r3, [sp, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc03      	bgt.n	8006e9c <_dtoa_r+0xb3c>
 8006e94:	9b06      	ldr	r3, [sp, #24]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	f73f aecc 	bgt.w	8006c34 <_dtoa_r+0x8d4>
 8006e9c:	465d      	mov	r5, fp
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	9804      	ldr	r0, [sp, #16]
 8006ea2:	f7ff f9d1 	bl	8006248 <quorem>
 8006ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006eaa:	f805 8b01 	strb.w	r8, [r5], #1
 8006eae:	9a02      	ldr	r2, [sp, #8]
 8006eb0:	eba5 030b 	sub.w	r3, r5, fp
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	ddb0      	ble.n	8006e1a <_dtoa_r+0xaba>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	220a      	movs	r2, #10
 8006ebc:	9904      	ldr	r1, [sp, #16]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 fdca 	bl	8007a58 <__multadd>
 8006ec4:	9004      	str	r0, [sp, #16]
 8006ec6:	e7ea      	b.n	8006e9e <_dtoa_r+0xb3e>
 8006ec8:	08009853 	.word	0x08009853
 8006ecc:	080096b0 	.word	0x080096b0

08006ed0 <__sflush_r>:
 8006ed0:	898a      	ldrh	r2, [r1, #12]
 8006ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	0710      	lsls	r0, r2, #28
 8006eda:	460c      	mov	r4, r1
 8006edc:	d458      	bmi.n	8006f90 <__sflush_r+0xc0>
 8006ede:	684b      	ldr	r3, [r1, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dc05      	bgt.n	8006ef0 <__sflush_r+0x20>
 8006ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dc02      	bgt.n	8006ef0 <__sflush_r+0x20>
 8006eea:	2000      	movs	r0, #0
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d0f9      	beq.n	8006eea <__sflush_r+0x1a>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006efc:	682f      	ldr	r7, [r5, #0]
 8006efe:	6a21      	ldr	r1, [r4, #32]
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	d032      	beq.n	8006f6a <__sflush_r+0x9a>
 8006f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	075a      	lsls	r2, r3, #29
 8006f0a:	d505      	bpl.n	8006f18 <__sflush_r+0x48>
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	1ac0      	subs	r0, r0, r3
 8006f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f12:	b10b      	cbz	r3, 8006f18 <__sflush_r+0x48>
 8006f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f16:	1ac0      	subs	r0, r0, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f1e:	6a21      	ldr	r1, [r4, #32]
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b0      	blx	r6
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	d106      	bne.n	8006f38 <__sflush_r+0x68>
 8006f2a:	6829      	ldr	r1, [r5, #0]
 8006f2c:	291d      	cmp	r1, #29
 8006f2e:	d848      	bhi.n	8006fc2 <__sflush_r+0xf2>
 8006f30:	4a29      	ldr	r2, [pc, #164]	; (8006fd8 <__sflush_r+0x108>)
 8006f32:	40ca      	lsrs	r2, r1
 8006f34:	07d6      	lsls	r6, r2, #31
 8006f36:	d544      	bpl.n	8006fc2 <__sflush_r+0xf2>
 8006f38:	2200      	movs	r2, #0
 8006f3a:	6062      	str	r2, [r4, #4]
 8006f3c:	04d9      	lsls	r1, r3, #19
 8006f3e:	6922      	ldr	r2, [r4, #16]
 8006f40:	6022      	str	r2, [r4, #0]
 8006f42:	d504      	bpl.n	8006f4e <__sflush_r+0x7e>
 8006f44:	1c42      	adds	r2, r0, #1
 8006f46:	d101      	bne.n	8006f4c <__sflush_r+0x7c>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b903      	cbnz	r3, 8006f4e <__sflush_r+0x7e>
 8006f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8006f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f50:	602f      	str	r7, [r5, #0]
 8006f52:	2900      	cmp	r1, #0
 8006f54:	d0c9      	beq.n	8006eea <__sflush_r+0x1a>
 8006f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d002      	beq.n	8006f64 <__sflush_r+0x94>
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f001 f93c 	bl	80081dc <_free_r>
 8006f64:	2000      	movs	r0, #0
 8006f66:	6360      	str	r0, [r4, #52]	; 0x34
 8006f68:	e7c0      	b.n	8006eec <__sflush_r+0x1c>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b0      	blx	r6
 8006f70:	1c41      	adds	r1, r0, #1
 8006f72:	d1c8      	bne.n	8006f06 <__sflush_r+0x36>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0c5      	beq.n	8006f06 <__sflush_r+0x36>
 8006f7a:	2b1d      	cmp	r3, #29
 8006f7c:	d001      	beq.n	8006f82 <__sflush_r+0xb2>
 8006f7e:	2b16      	cmp	r3, #22
 8006f80:	d101      	bne.n	8006f86 <__sflush_r+0xb6>
 8006f82:	602f      	str	r7, [r5, #0]
 8006f84:	e7b1      	b.n	8006eea <__sflush_r+0x1a>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	e7ad      	b.n	8006eec <__sflush_r+0x1c>
 8006f90:	690f      	ldr	r7, [r1, #16]
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	d0a9      	beq.n	8006eea <__sflush_r+0x1a>
 8006f96:	0793      	lsls	r3, r2, #30
 8006f98:	680e      	ldr	r6, [r1, #0]
 8006f9a:	bf08      	it	eq
 8006f9c:	694b      	ldreq	r3, [r1, #20]
 8006f9e:	600f      	str	r7, [r1, #0]
 8006fa0:	bf18      	it	ne
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	eba6 0807 	sub.w	r8, r6, r7
 8006fa8:	608b      	str	r3, [r1, #8]
 8006faa:	f1b8 0f00 	cmp.w	r8, #0
 8006fae:	dd9c      	ble.n	8006eea <__sflush_r+0x1a>
 8006fb0:	4643      	mov	r3, r8
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	6a21      	ldr	r1, [r4, #32]
 8006fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fb8:	4628      	mov	r0, r5
 8006fba:	47b0      	blx	r6
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	dc06      	bgt.n	8006fce <__sflush_r+0xfe>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	e78e      	b.n	8006eec <__sflush_r+0x1c>
 8006fce:	4407      	add	r7, r0
 8006fd0:	eba8 0800 	sub.w	r8, r8, r0
 8006fd4:	e7e9      	b.n	8006faa <__sflush_r+0xda>
 8006fd6:	bf00      	nop
 8006fd8:	20400001 	.word	0x20400001

08006fdc <_fflush_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	b1db      	cbz	r3, 800701e <_fflush_r+0x42>
 8006fe6:	b118      	cbz	r0, 8006ff0 <_fflush_r+0x14>
 8006fe8:	6983      	ldr	r3, [r0, #24]
 8006fea:	b90b      	cbnz	r3, 8006ff0 <_fflush_r+0x14>
 8006fec:	f000 f872 	bl	80070d4 <__sinit>
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <_fflush_r+0x48>)
 8006ff2:	429c      	cmp	r4, r3
 8006ff4:	d109      	bne.n	800700a <_fflush_r+0x2e>
 8006ff6:	686c      	ldr	r4, [r5, #4]
 8006ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffc:	b17b      	cbz	r3, 800701e <_fflush_r+0x42>
 8006ffe:	4621      	mov	r1, r4
 8007000:	4628      	mov	r0, r5
 8007002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007006:	f7ff bf63 	b.w	8006ed0 <__sflush_r>
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <_fflush_r+0x4c>)
 800700c:	429c      	cmp	r4, r3
 800700e:	d101      	bne.n	8007014 <_fflush_r+0x38>
 8007010:	68ac      	ldr	r4, [r5, #8]
 8007012:	e7f1      	b.n	8006ff8 <_fflush_r+0x1c>
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <_fflush_r+0x50>)
 8007016:	429c      	cmp	r4, r3
 8007018:	bf08      	it	eq
 800701a:	68ec      	ldreq	r4, [r5, #12]
 800701c:	e7ec      	b.n	8006ff8 <_fflush_r+0x1c>
 800701e:	2000      	movs	r0, #0
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	080096e0 	.word	0x080096e0
 8007028:	08009700 	.word	0x08009700
 800702c:	080096c0 	.word	0x080096c0

08007030 <fflush>:
 8007030:	4601      	mov	r1, r0
 8007032:	b920      	cbnz	r0, 800703e <fflush+0xe>
 8007034:	4b04      	ldr	r3, [pc, #16]	; (8007048 <fflush+0x18>)
 8007036:	4905      	ldr	r1, [pc, #20]	; (800704c <fflush+0x1c>)
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f000 b8d3 	b.w	80071e4 <_fwalk_reent>
 800703e:	4b04      	ldr	r3, [pc, #16]	; (8007050 <fflush+0x20>)
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f7ff bfcb 	b.w	8006fdc <_fflush_r>
 8007046:	bf00      	nop
 8007048:	08009624 	.word	0x08009624
 800704c:	08006fdd 	.word	0x08006fdd
 8007050:	2000000c 	.word	0x2000000c

08007054 <std>:
 8007054:	2300      	movs	r3, #0
 8007056:	b510      	push	{r4, lr}
 8007058:	4604      	mov	r4, r0
 800705a:	e9c0 3300 	strd	r3, r3, [r0]
 800705e:	6083      	str	r3, [r0, #8]
 8007060:	8181      	strh	r1, [r0, #12]
 8007062:	6643      	str	r3, [r0, #100]	; 0x64
 8007064:	81c2      	strh	r2, [r0, #14]
 8007066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800706a:	6183      	str	r3, [r0, #24]
 800706c:	4619      	mov	r1, r3
 800706e:	2208      	movs	r2, #8
 8007070:	305c      	adds	r0, #92	; 0x5c
 8007072:	f7fd fa4f 	bl	8004514 <memset>
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <std+0x38>)
 8007078:	6263      	str	r3, [r4, #36]	; 0x24
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <std+0x3c>)
 800707c:	62a3      	str	r3, [r4, #40]	; 0x28
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <std+0x40>)
 8007080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <std+0x44>)
 8007084:	6224      	str	r4, [r4, #32]
 8007086:	6323      	str	r3, [r4, #48]	; 0x30
 8007088:	bd10      	pop	{r4, pc}
 800708a:	bf00      	nop
 800708c:	0800900d 	.word	0x0800900d
 8007090:	0800902f 	.word	0x0800902f
 8007094:	08009067 	.word	0x08009067
 8007098:	0800908b 	.word	0x0800908b

0800709c <_cleanup_r>:
 800709c:	4901      	ldr	r1, [pc, #4]	; (80070a4 <_cleanup_r+0x8>)
 800709e:	f000 b8a1 	b.w	80071e4 <_fwalk_reent>
 80070a2:	bf00      	nop
 80070a4:	08006fdd 	.word	0x08006fdd

080070a8 <__sfmoreglue>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	1e4a      	subs	r2, r1, #1
 80070ac:	2568      	movs	r5, #104	; 0x68
 80070ae:	4355      	muls	r5, r2
 80070b0:	460e      	mov	r6, r1
 80070b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070b6:	f001 f8df 	bl	8008278 <_malloc_r>
 80070ba:	4604      	mov	r4, r0
 80070bc:	b140      	cbz	r0, 80070d0 <__sfmoreglue+0x28>
 80070be:	2100      	movs	r1, #0
 80070c0:	e9c0 1600 	strd	r1, r6, [r0]
 80070c4:	300c      	adds	r0, #12
 80070c6:	60a0      	str	r0, [r4, #8]
 80070c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070cc:	f7fd fa22 	bl	8004514 <memset>
 80070d0:	4620      	mov	r0, r4
 80070d2:	bd70      	pop	{r4, r5, r6, pc}

080070d4 <__sinit>:
 80070d4:	6983      	ldr	r3, [r0, #24]
 80070d6:	b510      	push	{r4, lr}
 80070d8:	4604      	mov	r4, r0
 80070da:	bb33      	cbnz	r3, 800712a <__sinit+0x56>
 80070dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80070e0:	6503      	str	r3, [r0, #80]	; 0x50
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <__sinit+0x58>)
 80070e4:	4a12      	ldr	r2, [pc, #72]	; (8007130 <__sinit+0x5c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6282      	str	r2, [r0, #40]	; 0x28
 80070ea:	4298      	cmp	r0, r3
 80070ec:	bf04      	itt	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	6183      	streq	r3, [r0, #24]
 80070f2:	f000 f81f 	bl	8007134 <__sfp>
 80070f6:	6060      	str	r0, [r4, #4]
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 f81b 	bl	8007134 <__sfp>
 80070fe:	60a0      	str	r0, [r4, #8]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 f817 	bl	8007134 <__sfp>
 8007106:	2200      	movs	r2, #0
 8007108:	60e0      	str	r0, [r4, #12]
 800710a:	2104      	movs	r1, #4
 800710c:	6860      	ldr	r0, [r4, #4]
 800710e:	f7ff ffa1 	bl	8007054 <std>
 8007112:	2201      	movs	r2, #1
 8007114:	2109      	movs	r1, #9
 8007116:	68a0      	ldr	r0, [r4, #8]
 8007118:	f7ff ff9c 	bl	8007054 <std>
 800711c:	2202      	movs	r2, #2
 800711e:	2112      	movs	r1, #18
 8007120:	68e0      	ldr	r0, [r4, #12]
 8007122:	f7ff ff97 	bl	8007054 <std>
 8007126:	2301      	movs	r3, #1
 8007128:	61a3      	str	r3, [r4, #24]
 800712a:	bd10      	pop	{r4, pc}
 800712c:	08009624 	.word	0x08009624
 8007130:	0800709d 	.word	0x0800709d

08007134 <__sfp>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <__sfp+0x70>)
 8007138:	681e      	ldr	r6, [r3, #0]
 800713a:	69b3      	ldr	r3, [r6, #24]
 800713c:	4607      	mov	r7, r0
 800713e:	b913      	cbnz	r3, 8007146 <__sfp+0x12>
 8007140:	4630      	mov	r0, r6
 8007142:	f7ff ffc7 	bl	80070d4 <__sinit>
 8007146:	3648      	adds	r6, #72	; 0x48
 8007148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800714c:	3b01      	subs	r3, #1
 800714e:	d503      	bpl.n	8007158 <__sfp+0x24>
 8007150:	6833      	ldr	r3, [r6, #0]
 8007152:	b133      	cbz	r3, 8007162 <__sfp+0x2e>
 8007154:	6836      	ldr	r6, [r6, #0]
 8007156:	e7f7      	b.n	8007148 <__sfp+0x14>
 8007158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800715c:	b16d      	cbz	r5, 800717a <__sfp+0x46>
 800715e:	3468      	adds	r4, #104	; 0x68
 8007160:	e7f4      	b.n	800714c <__sfp+0x18>
 8007162:	2104      	movs	r1, #4
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff ff9f 	bl	80070a8 <__sfmoreglue>
 800716a:	6030      	str	r0, [r6, #0]
 800716c:	2800      	cmp	r0, #0
 800716e:	d1f1      	bne.n	8007154 <__sfp+0x20>
 8007170:	230c      	movs	r3, #12
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4604      	mov	r4, r0
 8007176:	4620      	mov	r0, r4
 8007178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <__sfp+0x74>)
 800717c:	6665      	str	r5, [r4, #100]	; 0x64
 800717e:	e9c4 5500 	strd	r5, r5, [r4]
 8007182:	60a5      	str	r5, [r4, #8]
 8007184:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007188:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800718c:	2208      	movs	r2, #8
 800718e:	4629      	mov	r1, r5
 8007190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007194:	f7fd f9be 	bl	8004514 <memset>
 8007198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800719c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071a0:	e7e9      	b.n	8007176 <__sfp+0x42>
 80071a2:	bf00      	nop
 80071a4:	08009624 	.word	0x08009624
 80071a8:	ffff0001 	.word	0xffff0001

080071ac <_fwalk>:
 80071ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	4688      	mov	r8, r1
 80071b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071b6:	2600      	movs	r6, #0
 80071b8:	b914      	cbnz	r4, 80071c0 <_fwalk+0x14>
 80071ba:	4630      	mov	r0, r6
 80071bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c0:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80071c4:	3f01      	subs	r7, #1
 80071c6:	d501      	bpl.n	80071cc <_fwalk+0x20>
 80071c8:	6824      	ldr	r4, [r4, #0]
 80071ca:	e7f5      	b.n	80071b8 <_fwalk+0xc>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d906      	bls.n	80071e0 <_fwalk+0x34>
 80071d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071d6:	3301      	adds	r3, #1
 80071d8:	d002      	beq.n	80071e0 <_fwalk+0x34>
 80071da:	4628      	mov	r0, r5
 80071dc:	47c0      	blx	r8
 80071de:	4306      	orrs	r6, r0
 80071e0:	3568      	adds	r5, #104	; 0x68
 80071e2:	e7ef      	b.n	80071c4 <_fwalk+0x18>

080071e4 <_fwalk_reent>:
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	4680      	mov	r8, r0
 80071ea:	4689      	mov	r9, r1
 80071ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071f0:	2600      	movs	r6, #0
 80071f2:	b914      	cbnz	r4, 80071fa <_fwalk_reent+0x16>
 80071f4:	4630      	mov	r0, r6
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80071fe:	3f01      	subs	r7, #1
 8007200:	d501      	bpl.n	8007206 <_fwalk_reent+0x22>
 8007202:	6824      	ldr	r4, [r4, #0]
 8007204:	e7f5      	b.n	80071f2 <_fwalk_reent+0xe>
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d907      	bls.n	800721c <_fwalk_reent+0x38>
 800720c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007210:	3301      	adds	r3, #1
 8007212:	d003      	beq.n	800721c <_fwalk_reent+0x38>
 8007214:	4629      	mov	r1, r5
 8007216:	4640      	mov	r0, r8
 8007218:	47c8      	blx	r9
 800721a:	4306      	orrs	r6, r0
 800721c:	3568      	adds	r5, #104	; 0x68
 800721e:	e7ee      	b.n	80071fe <_fwalk_reent+0x1a>

08007220 <rshift>:
 8007220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007222:	6906      	ldr	r6, [r0, #16]
 8007224:	114b      	asrs	r3, r1, #5
 8007226:	429e      	cmp	r6, r3
 8007228:	f100 0414 	add.w	r4, r0, #20
 800722c:	dd30      	ble.n	8007290 <rshift+0x70>
 800722e:	f011 011f 	ands.w	r1, r1, #31
 8007232:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007236:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800723a:	d108      	bne.n	800724e <rshift+0x2e>
 800723c:	4621      	mov	r1, r4
 800723e:	42b2      	cmp	r2, r6
 8007240:	460b      	mov	r3, r1
 8007242:	d211      	bcs.n	8007268 <rshift+0x48>
 8007244:	f852 3b04 	ldr.w	r3, [r2], #4
 8007248:	f841 3b04 	str.w	r3, [r1], #4
 800724c:	e7f7      	b.n	800723e <rshift+0x1e>
 800724e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007252:	f1c1 0c20 	rsb	ip, r1, #32
 8007256:	40cd      	lsrs	r5, r1
 8007258:	3204      	adds	r2, #4
 800725a:	4623      	mov	r3, r4
 800725c:	42b2      	cmp	r2, r6
 800725e:	4617      	mov	r7, r2
 8007260:	d30c      	bcc.n	800727c <rshift+0x5c>
 8007262:	601d      	str	r5, [r3, #0]
 8007264:	b105      	cbz	r5, 8007268 <rshift+0x48>
 8007266:	3304      	adds	r3, #4
 8007268:	1b1a      	subs	r2, r3, r4
 800726a:	42a3      	cmp	r3, r4
 800726c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007270:	bf08      	it	eq
 8007272:	2300      	moveq	r3, #0
 8007274:	6102      	str	r2, [r0, #16]
 8007276:	bf08      	it	eq
 8007278:	6143      	streq	r3, [r0, #20]
 800727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727c:	683f      	ldr	r7, [r7, #0]
 800727e:	fa07 f70c 	lsl.w	r7, r7, ip
 8007282:	433d      	orrs	r5, r7
 8007284:	f843 5b04 	str.w	r5, [r3], #4
 8007288:	f852 5b04 	ldr.w	r5, [r2], #4
 800728c:	40cd      	lsrs	r5, r1
 800728e:	e7e5      	b.n	800725c <rshift+0x3c>
 8007290:	4623      	mov	r3, r4
 8007292:	e7e9      	b.n	8007268 <rshift+0x48>

08007294 <__hexdig_fun>:
 8007294:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007298:	2b09      	cmp	r3, #9
 800729a:	d802      	bhi.n	80072a2 <__hexdig_fun+0xe>
 800729c:	3820      	subs	r0, #32
 800729e:	b2c0      	uxtb	r0, r0
 80072a0:	4770      	bx	lr
 80072a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d801      	bhi.n	80072ae <__hexdig_fun+0x1a>
 80072aa:	3847      	subs	r0, #71	; 0x47
 80072ac:	e7f7      	b.n	800729e <__hexdig_fun+0xa>
 80072ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	d801      	bhi.n	80072ba <__hexdig_fun+0x26>
 80072b6:	3827      	subs	r0, #39	; 0x27
 80072b8:	e7f1      	b.n	800729e <__hexdig_fun+0xa>
 80072ba:	2000      	movs	r0, #0
 80072bc:	4770      	bx	lr

080072be <__gethex>:
 80072be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c2:	b08b      	sub	sp, #44	; 0x2c
 80072c4:	468a      	mov	sl, r1
 80072c6:	9002      	str	r0, [sp, #8]
 80072c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80072ca:	9306      	str	r3, [sp, #24]
 80072cc:	4690      	mov	r8, r2
 80072ce:	f000 fadf 	bl	8007890 <__localeconv_l>
 80072d2:	6803      	ldr	r3, [r0, #0]
 80072d4:	9303      	str	r3, [sp, #12]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7f8 ff7a 	bl	80001d0 <strlen>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	9001      	str	r0, [sp, #4]
 80072e0:	4403      	add	r3, r0
 80072e2:	f04f 0b00 	mov.w	fp, #0
 80072e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	f8da 3000 	ldr.w	r3, [sl]
 80072f0:	3302      	adds	r3, #2
 80072f2:	461f      	mov	r7, r3
 80072f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80072f8:	2830      	cmp	r0, #48	; 0x30
 80072fa:	d06c      	beq.n	80073d6 <__gethex+0x118>
 80072fc:	f7ff ffca 	bl	8007294 <__hexdig_fun>
 8007300:	4604      	mov	r4, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d16a      	bne.n	80073dc <__gethex+0x11e>
 8007306:	9a01      	ldr	r2, [sp, #4]
 8007308:	9903      	ldr	r1, [sp, #12]
 800730a:	4638      	mov	r0, r7
 800730c:	f001 fec1 	bl	8009092 <strncmp>
 8007310:	2800      	cmp	r0, #0
 8007312:	d166      	bne.n	80073e2 <__gethex+0x124>
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	5cf8      	ldrb	r0, [r7, r3]
 8007318:	18fe      	adds	r6, r7, r3
 800731a:	f7ff ffbb 	bl	8007294 <__hexdig_fun>
 800731e:	2800      	cmp	r0, #0
 8007320:	d062      	beq.n	80073e8 <__gethex+0x12a>
 8007322:	4633      	mov	r3, r6
 8007324:	7818      	ldrb	r0, [r3, #0]
 8007326:	2830      	cmp	r0, #48	; 0x30
 8007328:	461f      	mov	r7, r3
 800732a:	f103 0301 	add.w	r3, r3, #1
 800732e:	d0f9      	beq.n	8007324 <__gethex+0x66>
 8007330:	f7ff ffb0 	bl	8007294 <__hexdig_fun>
 8007334:	fab0 f580 	clz	r5, r0
 8007338:	096d      	lsrs	r5, r5, #5
 800733a:	4634      	mov	r4, r6
 800733c:	f04f 0b01 	mov.w	fp, #1
 8007340:	463a      	mov	r2, r7
 8007342:	4616      	mov	r6, r2
 8007344:	3201      	adds	r2, #1
 8007346:	7830      	ldrb	r0, [r6, #0]
 8007348:	f7ff ffa4 	bl	8007294 <__hexdig_fun>
 800734c:	2800      	cmp	r0, #0
 800734e:	d1f8      	bne.n	8007342 <__gethex+0x84>
 8007350:	9a01      	ldr	r2, [sp, #4]
 8007352:	9903      	ldr	r1, [sp, #12]
 8007354:	4630      	mov	r0, r6
 8007356:	f001 fe9c 	bl	8009092 <strncmp>
 800735a:	b950      	cbnz	r0, 8007372 <__gethex+0xb4>
 800735c:	b954      	cbnz	r4, 8007374 <__gethex+0xb6>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	18f4      	adds	r4, r6, r3
 8007362:	4622      	mov	r2, r4
 8007364:	4616      	mov	r6, r2
 8007366:	3201      	adds	r2, #1
 8007368:	7830      	ldrb	r0, [r6, #0]
 800736a:	f7ff ff93 	bl	8007294 <__hexdig_fun>
 800736e:	2800      	cmp	r0, #0
 8007370:	d1f8      	bne.n	8007364 <__gethex+0xa6>
 8007372:	b10c      	cbz	r4, 8007378 <__gethex+0xba>
 8007374:	1ba4      	subs	r4, r4, r6
 8007376:	00a4      	lsls	r4, r4, #2
 8007378:	7833      	ldrb	r3, [r6, #0]
 800737a:	2b50      	cmp	r3, #80	; 0x50
 800737c:	d001      	beq.n	8007382 <__gethex+0xc4>
 800737e:	2b70      	cmp	r3, #112	; 0x70
 8007380:	d140      	bne.n	8007404 <__gethex+0x146>
 8007382:	7873      	ldrb	r3, [r6, #1]
 8007384:	2b2b      	cmp	r3, #43	; 0x2b
 8007386:	d031      	beq.n	80073ec <__gethex+0x12e>
 8007388:	2b2d      	cmp	r3, #45	; 0x2d
 800738a:	d033      	beq.n	80073f4 <__gethex+0x136>
 800738c:	1c71      	adds	r1, r6, #1
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	7808      	ldrb	r0, [r1, #0]
 8007394:	f7ff ff7e 	bl	8007294 <__hexdig_fun>
 8007398:	1e43      	subs	r3, r0, #1
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b18      	cmp	r3, #24
 800739e:	d831      	bhi.n	8007404 <__gethex+0x146>
 80073a0:	f1a0 0210 	sub.w	r2, r0, #16
 80073a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073a8:	f7ff ff74 	bl	8007294 <__hexdig_fun>
 80073ac:	1e43      	subs	r3, r0, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b18      	cmp	r3, #24
 80073b2:	d922      	bls.n	80073fa <__gethex+0x13c>
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	d000      	beq.n	80073bc <__gethex+0xfe>
 80073ba:	4252      	negs	r2, r2
 80073bc:	4414      	add	r4, r2
 80073be:	f8ca 1000 	str.w	r1, [sl]
 80073c2:	b30d      	cbz	r5, 8007408 <__gethex+0x14a>
 80073c4:	f1bb 0f00 	cmp.w	fp, #0
 80073c8:	bf0c      	ite	eq
 80073ca:	2706      	moveq	r7, #6
 80073cc:	2700      	movne	r7, #0
 80073ce:	4638      	mov	r0, r7
 80073d0:	b00b      	add	sp, #44	; 0x2c
 80073d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	f10b 0b01 	add.w	fp, fp, #1
 80073da:	e78a      	b.n	80072f2 <__gethex+0x34>
 80073dc:	2500      	movs	r5, #0
 80073de:	462c      	mov	r4, r5
 80073e0:	e7ae      	b.n	8007340 <__gethex+0x82>
 80073e2:	463e      	mov	r6, r7
 80073e4:	2501      	movs	r5, #1
 80073e6:	e7c7      	b.n	8007378 <__gethex+0xba>
 80073e8:	4604      	mov	r4, r0
 80073ea:	e7fb      	b.n	80073e4 <__gethex+0x126>
 80073ec:	f04f 0900 	mov.w	r9, #0
 80073f0:	1cb1      	adds	r1, r6, #2
 80073f2:	e7ce      	b.n	8007392 <__gethex+0xd4>
 80073f4:	f04f 0901 	mov.w	r9, #1
 80073f8:	e7fa      	b.n	80073f0 <__gethex+0x132>
 80073fa:	230a      	movs	r3, #10
 80073fc:	fb03 0202 	mla	r2, r3, r2, r0
 8007400:	3a10      	subs	r2, #16
 8007402:	e7cf      	b.n	80073a4 <__gethex+0xe6>
 8007404:	4631      	mov	r1, r6
 8007406:	e7da      	b.n	80073be <__gethex+0x100>
 8007408:	1bf3      	subs	r3, r6, r7
 800740a:	3b01      	subs	r3, #1
 800740c:	4629      	mov	r1, r5
 800740e:	2b07      	cmp	r3, #7
 8007410:	dc49      	bgt.n	80074a6 <__gethex+0x1e8>
 8007412:	9802      	ldr	r0, [sp, #8]
 8007414:	f000 fad5 	bl	80079c2 <_Balloc>
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	f100 0914 	add.w	r9, r0, #20
 800741e:	f04f 0b00 	mov.w	fp, #0
 8007422:	f1c3 0301 	rsb	r3, r3, #1
 8007426:	4605      	mov	r5, r0
 8007428:	f8cd 9010 	str.w	r9, [sp, #16]
 800742c:	46da      	mov	sl, fp
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	42b7      	cmp	r7, r6
 8007432:	d33b      	bcc.n	80074ac <__gethex+0x1ee>
 8007434:	9804      	ldr	r0, [sp, #16]
 8007436:	f840 ab04 	str.w	sl, [r0], #4
 800743a:	eba0 0009 	sub.w	r0, r0, r9
 800743e:	1080      	asrs	r0, r0, #2
 8007440:	6128      	str	r0, [r5, #16]
 8007442:	0147      	lsls	r7, r0, #5
 8007444:	4650      	mov	r0, sl
 8007446:	f000 fb80 	bl	8007b4a <__hi0bits>
 800744a:	f8d8 6000 	ldr.w	r6, [r8]
 800744e:	1a3f      	subs	r7, r7, r0
 8007450:	42b7      	cmp	r7, r6
 8007452:	dd64      	ble.n	800751e <__gethex+0x260>
 8007454:	1bbf      	subs	r7, r7, r6
 8007456:	4639      	mov	r1, r7
 8007458:	4628      	mov	r0, r5
 800745a:	f000 fe8f 	bl	800817c <__any_on>
 800745e:	4682      	mov	sl, r0
 8007460:	b178      	cbz	r0, 8007482 <__gethex+0x1c4>
 8007462:	1e7b      	subs	r3, r7, #1
 8007464:	1159      	asrs	r1, r3, #5
 8007466:	f003 021f 	and.w	r2, r3, #31
 800746a:	f04f 0a01 	mov.w	sl, #1
 800746e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007472:	fa0a f202 	lsl.w	r2, sl, r2
 8007476:	420a      	tst	r2, r1
 8007478:	d003      	beq.n	8007482 <__gethex+0x1c4>
 800747a:	4553      	cmp	r3, sl
 800747c:	dc46      	bgt.n	800750c <__gethex+0x24e>
 800747e:	f04f 0a02 	mov.w	sl, #2
 8007482:	4639      	mov	r1, r7
 8007484:	4628      	mov	r0, r5
 8007486:	f7ff fecb 	bl	8007220 <rshift>
 800748a:	443c      	add	r4, r7
 800748c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007490:	42a3      	cmp	r3, r4
 8007492:	da52      	bge.n	800753a <__gethex+0x27c>
 8007494:	4629      	mov	r1, r5
 8007496:	9802      	ldr	r0, [sp, #8]
 8007498:	f000 fac7 	bl	8007a2a <_Bfree>
 800749c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800749e:	2300      	movs	r3, #0
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	27a3      	movs	r7, #163	; 0xa3
 80074a4:	e793      	b.n	80073ce <__gethex+0x110>
 80074a6:	3101      	adds	r1, #1
 80074a8:	105b      	asrs	r3, r3, #1
 80074aa:	e7b0      	b.n	800740e <__gethex+0x150>
 80074ac:	1e73      	subs	r3, r6, #1
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	9a07      	ldr	r2, [sp, #28]
 80074b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <__gethex+0x22e>
 80074ba:	f1bb 0f20 	cmp.w	fp, #32
 80074be:	d107      	bne.n	80074d0 <__gethex+0x212>
 80074c0:	9b04      	ldr	r3, [sp, #16]
 80074c2:	f8c3 a000 	str.w	sl, [r3]
 80074c6:	3304      	adds	r3, #4
 80074c8:	f04f 0a00 	mov.w	sl, #0
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	46d3      	mov	fp, sl
 80074d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80074d4:	f7ff fede 	bl	8007294 <__hexdig_fun>
 80074d8:	f000 000f 	and.w	r0, r0, #15
 80074dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80074e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80074e4:	f10b 0b04 	add.w	fp, fp, #4
 80074e8:	9b05      	ldr	r3, [sp, #20]
 80074ea:	e00d      	b.n	8007508 <__gethex+0x24a>
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	9a08      	ldr	r2, [sp, #32]
 80074f0:	4413      	add	r3, r2
 80074f2:	42bb      	cmp	r3, r7
 80074f4:	d3e1      	bcc.n	80074ba <__gethex+0x1fc>
 80074f6:	4618      	mov	r0, r3
 80074f8:	9a01      	ldr	r2, [sp, #4]
 80074fa:	9903      	ldr	r1, [sp, #12]
 80074fc:	9309      	str	r3, [sp, #36]	; 0x24
 80074fe:	f001 fdc8 	bl	8009092 <strncmp>
 8007502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007504:	2800      	cmp	r0, #0
 8007506:	d1d8      	bne.n	80074ba <__gethex+0x1fc>
 8007508:	461e      	mov	r6, r3
 800750a:	e791      	b.n	8007430 <__gethex+0x172>
 800750c:	1eb9      	subs	r1, r7, #2
 800750e:	4628      	mov	r0, r5
 8007510:	f000 fe34 	bl	800817c <__any_on>
 8007514:	2800      	cmp	r0, #0
 8007516:	d0b2      	beq.n	800747e <__gethex+0x1c0>
 8007518:	f04f 0a03 	mov.w	sl, #3
 800751c:	e7b1      	b.n	8007482 <__gethex+0x1c4>
 800751e:	da09      	bge.n	8007534 <__gethex+0x276>
 8007520:	1bf7      	subs	r7, r6, r7
 8007522:	4629      	mov	r1, r5
 8007524:	463a      	mov	r2, r7
 8007526:	9802      	ldr	r0, [sp, #8]
 8007528:	f000 fc4a 	bl	8007dc0 <__lshift>
 800752c:	1be4      	subs	r4, r4, r7
 800752e:	4605      	mov	r5, r0
 8007530:	f100 0914 	add.w	r9, r0, #20
 8007534:	f04f 0a00 	mov.w	sl, #0
 8007538:	e7a8      	b.n	800748c <__gethex+0x1ce>
 800753a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800753e:	42a0      	cmp	r0, r4
 8007540:	dd6a      	ble.n	8007618 <__gethex+0x35a>
 8007542:	1b04      	subs	r4, r0, r4
 8007544:	42a6      	cmp	r6, r4
 8007546:	dc2e      	bgt.n	80075a6 <__gethex+0x2e8>
 8007548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d022      	beq.n	8007596 <__gethex+0x2d8>
 8007550:	2b03      	cmp	r3, #3
 8007552:	d024      	beq.n	800759e <__gethex+0x2e0>
 8007554:	2b01      	cmp	r3, #1
 8007556:	d115      	bne.n	8007584 <__gethex+0x2c6>
 8007558:	42a6      	cmp	r6, r4
 800755a:	d113      	bne.n	8007584 <__gethex+0x2c6>
 800755c:	2e01      	cmp	r6, #1
 800755e:	dc0b      	bgt.n	8007578 <__gethex+0x2ba>
 8007560:	9a06      	ldr	r2, [sp, #24]
 8007562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	2301      	movs	r3, #1
 800756a:	612b      	str	r3, [r5, #16]
 800756c:	f8c9 3000 	str.w	r3, [r9]
 8007570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007572:	2762      	movs	r7, #98	; 0x62
 8007574:	601d      	str	r5, [r3, #0]
 8007576:	e72a      	b.n	80073ce <__gethex+0x110>
 8007578:	1e71      	subs	r1, r6, #1
 800757a:	4628      	mov	r0, r5
 800757c:	f000 fdfe 	bl	800817c <__any_on>
 8007580:	2800      	cmp	r0, #0
 8007582:	d1ed      	bne.n	8007560 <__gethex+0x2a2>
 8007584:	4629      	mov	r1, r5
 8007586:	9802      	ldr	r0, [sp, #8]
 8007588:	f000 fa4f 	bl	8007a2a <_Bfree>
 800758c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800758e:	2300      	movs	r3, #0
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	2750      	movs	r7, #80	; 0x50
 8007594:	e71b      	b.n	80073ce <__gethex+0x110>
 8007596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0e1      	beq.n	8007560 <__gethex+0x2a2>
 800759c:	e7f2      	b.n	8007584 <__gethex+0x2c6>
 800759e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1dd      	bne.n	8007560 <__gethex+0x2a2>
 80075a4:	e7ee      	b.n	8007584 <__gethex+0x2c6>
 80075a6:	1e67      	subs	r7, r4, #1
 80075a8:	f1ba 0f00 	cmp.w	sl, #0
 80075ac:	d131      	bne.n	8007612 <__gethex+0x354>
 80075ae:	b127      	cbz	r7, 80075ba <__gethex+0x2fc>
 80075b0:	4639      	mov	r1, r7
 80075b2:	4628      	mov	r0, r5
 80075b4:	f000 fde2 	bl	800817c <__any_on>
 80075b8:	4682      	mov	sl, r0
 80075ba:	117a      	asrs	r2, r7, #5
 80075bc:	2301      	movs	r3, #1
 80075be:	f007 071f 	and.w	r7, r7, #31
 80075c2:	fa03 f707 	lsl.w	r7, r3, r7
 80075c6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80075ca:	4621      	mov	r1, r4
 80075cc:	421f      	tst	r7, r3
 80075ce:	4628      	mov	r0, r5
 80075d0:	bf18      	it	ne
 80075d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80075d6:	1b36      	subs	r6, r6, r4
 80075d8:	f7ff fe22 	bl	8007220 <rshift>
 80075dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80075e0:	2702      	movs	r7, #2
 80075e2:	f1ba 0f00 	cmp.w	sl, #0
 80075e6:	d048      	beq.n	800767a <__gethex+0x3bc>
 80075e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d015      	beq.n	800761c <__gethex+0x35e>
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d017      	beq.n	8007624 <__gethex+0x366>
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d109      	bne.n	800760c <__gethex+0x34e>
 80075f8:	f01a 0f02 	tst.w	sl, #2
 80075fc:	d006      	beq.n	800760c <__gethex+0x34e>
 80075fe:	f8d9 3000 	ldr.w	r3, [r9]
 8007602:	ea4a 0a03 	orr.w	sl, sl, r3
 8007606:	f01a 0f01 	tst.w	sl, #1
 800760a:	d10e      	bne.n	800762a <__gethex+0x36c>
 800760c:	f047 0710 	orr.w	r7, r7, #16
 8007610:	e033      	b.n	800767a <__gethex+0x3bc>
 8007612:	f04f 0a01 	mov.w	sl, #1
 8007616:	e7d0      	b.n	80075ba <__gethex+0x2fc>
 8007618:	2701      	movs	r7, #1
 800761a:	e7e2      	b.n	80075e2 <__gethex+0x324>
 800761c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800761e:	f1c3 0301 	rsb	r3, r3, #1
 8007622:	9315      	str	r3, [sp, #84]	; 0x54
 8007624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0f0      	beq.n	800760c <__gethex+0x34e>
 800762a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800762e:	f105 0314 	add.w	r3, r5, #20
 8007632:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007636:	eb03 010a 	add.w	r1, r3, sl
 800763a:	f04f 0c00 	mov.w	ip, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f853 2b04 	ldr.w	r2, [r3], #4
 8007644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007648:	d01c      	beq.n	8007684 <__gethex+0x3c6>
 800764a:	3201      	adds	r2, #1
 800764c:	6002      	str	r2, [r0, #0]
 800764e:	2f02      	cmp	r7, #2
 8007650:	f105 0314 	add.w	r3, r5, #20
 8007654:	d138      	bne.n	80076c8 <__gethex+0x40a>
 8007656:	f8d8 2000 	ldr.w	r2, [r8]
 800765a:	3a01      	subs	r2, #1
 800765c:	42b2      	cmp	r2, r6
 800765e:	d10a      	bne.n	8007676 <__gethex+0x3b8>
 8007660:	1171      	asrs	r1, r6, #5
 8007662:	2201      	movs	r2, #1
 8007664:	f006 061f 	and.w	r6, r6, #31
 8007668:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800766c:	fa02 f606 	lsl.w	r6, r2, r6
 8007670:	421e      	tst	r6, r3
 8007672:	bf18      	it	ne
 8007674:	4617      	movne	r7, r2
 8007676:	f047 0720 	orr.w	r7, r7, #32
 800767a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800767c:	601d      	str	r5, [r3, #0]
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	601c      	str	r4, [r3, #0]
 8007682:	e6a4      	b.n	80073ce <__gethex+0x110>
 8007684:	4299      	cmp	r1, r3
 8007686:	f843 cc04 	str.w	ip, [r3, #-4]
 800768a:	d8d8      	bhi.n	800763e <__gethex+0x380>
 800768c:	68ab      	ldr	r3, [r5, #8]
 800768e:	4599      	cmp	r9, r3
 8007690:	db12      	blt.n	80076b8 <__gethex+0x3fa>
 8007692:	6869      	ldr	r1, [r5, #4]
 8007694:	9802      	ldr	r0, [sp, #8]
 8007696:	3101      	adds	r1, #1
 8007698:	f000 f993 	bl	80079c2 <_Balloc>
 800769c:	692a      	ldr	r2, [r5, #16]
 800769e:	3202      	adds	r2, #2
 80076a0:	f105 010c 	add.w	r1, r5, #12
 80076a4:	4683      	mov	fp, r0
 80076a6:	0092      	lsls	r2, r2, #2
 80076a8:	300c      	adds	r0, #12
 80076aa:	f000 f97f 	bl	80079ac <memcpy>
 80076ae:	4629      	mov	r1, r5
 80076b0:	9802      	ldr	r0, [sp, #8]
 80076b2:	f000 f9ba 	bl	8007a2a <_Bfree>
 80076b6:	465d      	mov	r5, fp
 80076b8:	692b      	ldr	r3, [r5, #16]
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80076c0:	612a      	str	r2, [r5, #16]
 80076c2:	2201      	movs	r2, #1
 80076c4:	615a      	str	r2, [r3, #20]
 80076c6:	e7c2      	b.n	800764e <__gethex+0x390>
 80076c8:	692a      	ldr	r2, [r5, #16]
 80076ca:	454a      	cmp	r2, r9
 80076cc:	dd0b      	ble.n	80076e6 <__gethex+0x428>
 80076ce:	2101      	movs	r1, #1
 80076d0:	4628      	mov	r0, r5
 80076d2:	f7ff fda5 	bl	8007220 <rshift>
 80076d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076da:	3401      	adds	r4, #1
 80076dc:	42a3      	cmp	r3, r4
 80076de:	f6ff aed9 	blt.w	8007494 <__gethex+0x1d6>
 80076e2:	2701      	movs	r7, #1
 80076e4:	e7c7      	b.n	8007676 <__gethex+0x3b8>
 80076e6:	f016 061f 	ands.w	r6, r6, #31
 80076ea:	d0fa      	beq.n	80076e2 <__gethex+0x424>
 80076ec:	449a      	add	sl, r3
 80076ee:	f1c6 0620 	rsb	r6, r6, #32
 80076f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80076f6:	f000 fa28 	bl	8007b4a <__hi0bits>
 80076fa:	42b0      	cmp	r0, r6
 80076fc:	dbe7      	blt.n	80076ce <__gethex+0x410>
 80076fe:	e7f0      	b.n	80076e2 <__gethex+0x424>

08007700 <L_shift>:
 8007700:	f1c2 0208 	rsb	r2, r2, #8
 8007704:	0092      	lsls	r2, r2, #2
 8007706:	b570      	push	{r4, r5, r6, lr}
 8007708:	f1c2 0620 	rsb	r6, r2, #32
 800770c:	6843      	ldr	r3, [r0, #4]
 800770e:	6804      	ldr	r4, [r0, #0]
 8007710:	fa03 f506 	lsl.w	r5, r3, r6
 8007714:	432c      	orrs	r4, r5
 8007716:	40d3      	lsrs	r3, r2
 8007718:	6004      	str	r4, [r0, #0]
 800771a:	f840 3f04 	str.w	r3, [r0, #4]!
 800771e:	4288      	cmp	r0, r1
 8007720:	d3f4      	bcc.n	800770c <L_shift+0xc>
 8007722:	bd70      	pop	{r4, r5, r6, pc}

08007724 <__match>:
 8007724:	b530      	push	{r4, r5, lr}
 8007726:	6803      	ldr	r3, [r0, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772e:	b914      	cbnz	r4, 8007736 <__match+0x12>
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	2001      	movs	r0, #1
 8007734:	bd30      	pop	{r4, r5, pc}
 8007736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800773e:	2d19      	cmp	r5, #25
 8007740:	bf98      	it	ls
 8007742:	3220      	addls	r2, #32
 8007744:	42a2      	cmp	r2, r4
 8007746:	d0f0      	beq.n	800772a <__match+0x6>
 8007748:	2000      	movs	r0, #0
 800774a:	e7f3      	b.n	8007734 <__match+0x10>

0800774c <__hexnan>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	680b      	ldr	r3, [r1, #0]
 8007752:	6801      	ldr	r1, [r0, #0]
 8007754:	115f      	asrs	r7, r3, #5
 8007756:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800775a:	f013 031f 	ands.w	r3, r3, #31
 800775e:	b087      	sub	sp, #28
 8007760:	bf18      	it	ne
 8007762:	3704      	addne	r7, #4
 8007764:	2500      	movs	r5, #0
 8007766:	1f3e      	subs	r6, r7, #4
 8007768:	4682      	mov	sl, r0
 800776a:	4690      	mov	r8, r2
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	f847 5c04 	str.w	r5, [r7, #-4]
 8007772:	46b1      	mov	r9, r6
 8007774:	4634      	mov	r4, r6
 8007776:	9502      	str	r5, [sp, #8]
 8007778:	46ab      	mov	fp, r5
 800777a:	784a      	ldrb	r2, [r1, #1]
 800777c:	1c4b      	adds	r3, r1, #1
 800777e:	9303      	str	r3, [sp, #12]
 8007780:	b342      	cbz	r2, 80077d4 <__hexnan+0x88>
 8007782:	4610      	mov	r0, r2
 8007784:	9105      	str	r1, [sp, #20]
 8007786:	9204      	str	r2, [sp, #16]
 8007788:	f7ff fd84 	bl	8007294 <__hexdig_fun>
 800778c:	2800      	cmp	r0, #0
 800778e:	d143      	bne.n	8007818 <__hexnan+0xcc>
 8007790:	9a04      	ldr	r2, [sp, #16]
 8007792:	9905      	ldr	r1, [sp, #20]
 8007794:	2a20      	cmp	r2, #32
 8007796:	d818      	bhi.n	80077ca <__hexnan+0x7e>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	459b      	cmp	fp, r3
 800779c:	dd13      	ble.n	80077c6 <__hexnan+0x7a>
 800779e:	454c      	cmp	r4, r9
 80077a0:	d206      	bcs.n	80077b0 <__hexnan+0x64>
 80077a2:	2d07      	cmp	r5, #7
 80077a4:	dc04      	bgt.n	80077b0 <__hexnan+0x64>
 80077a6:	462a      	mov	r2, r5
 80077a8:	4649      	mov	r1, r9
 80077aa:	4620      	mov	r0, r4
 80077ac:	f7ff ffa8 	bl	8007700 <L_shift>
 80077b0:	4544      	cmp	r4, r8
 80077b2:	d944      	bls.n	800783e <__hexnan+0xf2>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f1a4 0904 	sub.w	r9, r4, #4
 80077ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80077be:	f8cd b008 	str.w	fp, [sp, #8]
 80077c2:	464c      	mov	r4, r9
 80077c4:	461d      	mov	r5, r3
 80077c6:	9903      	ldr	r1, [sp, #12]
 80077c8:	e7d7      	b.n	800777a <__hexnan+0x2e>
 80077ca:	2a29      	cmp	r2, #41	; 0x29
 80077cc:	d14a      	bne.n	8007864 <__hexnan+0x118>
 80077ce:	3102      	adds	r1, #2
 80077d0:	f8ca 1000 	str.w	r1, [sl]
 80077d4:	f1bb 0f00 	cmp.w	fp, #0
 80077d8:	d044      	beq.n	8007864 <__hexnan+0x118>
 80077da:	454c      	cmp	r4, r9
 80077dc:	d206      	bcs.n	80077ec <__hexnan+0xa0>
 80077de:	2d07      	cmp	r5, #7
 80077e0:	dc04      	bgt.n	80077ec <__hexnan+0xa0>
 80077e2:	462a      	mov	r2, r5
 80077e4:	4649      	mov	r1, r9
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff ff8a 	bl	8007700 <L_shift>
 80077ec:	4544      	cmp	r4, r8
 80077ee:	d928      	bls.n	8007842 <__hexnan+0xf6>
 80077f0:	4643      	mov	r3, r8
 80077f2:	f854 2b04 	ldr.w	r2, [r4], #4
 80077f6:	f843 2b04 	str.w	r2, [r3], #4
 80077fa:	42a6      	cmp	r6, r4
 80077fc:	d2f9      	bcs.n	80077f2 <__hexnan+0xa6>
 80077fe:	2200      	movs	r2, #0
 8007800:	f843 2b04 	str.w	r2, [r3], #4
 8007804:	429e      	cmp	r6, r3
 8007806:	d2fb      	bcs.n	8007800 <__hexnan+0xb4>
 8007808:	6833      	ldr	r3, [r6, #0]
 800780a:	b91b      	cbnz	r3, 8007814 <__hexnan+0xc8>
 800780c:	4546      	cmp	r6, r8
 800780e:	d127      	bne.n	8007860 <__hexnan+0x114>
 8007810:	2301      	movs	r3, #1
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	2005      	movs	r0, #5
 8007816:	e026      	b.n	8007866 <__hexnan+0x11a>
 8007818:	3501      	adds	r5, #1
 800781a:	2d08      	cmp	r5, #8
 800781c:	f10b 0b01 	add.w	fp, fp, #1
 8007820:	dd06      	ble.n	8007830 <__hexnan+0xe4>
 8007822:	4544      	cmp	r4, r8
 8007824:	d9cf      	bls.n	80077c6 <__hexnan+0x7a>
 8007826:	2300      	movs	r3, #0
 8007828:	f844 3c04 	str.w	r3, [r4, #-4]
 800782c:	2501      	movs	r5, #1
 800782e:	3c04      	subs	r4, #4
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	f000 000f 	and.w	r0, r0, #15
 8007836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800783a:	6020      	str	r0, [r4, #0]
 800783c:	e7c3      	b.n	80077c6 <__hexnan+0x7a>
 800783e:	2508      	movs	r5, #8
 8007840:	e7c1      	b.n	80077c6 <__hexnan+0x7a>
 8007842:	9b01      	ldr	r3, [sp, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0df      	beq.n	8007808 <__hexnan+0xbc>
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	f1c3 0320 	rsb	r3, r3, #32
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007858:	401a      	ands	r2, r3
 800785a:	f847 2c04 	str.w	r2, [r7, #-4]
 800785e:	e7d3      	b.n	8007808 <__hexnan+0xbc>
 8007860:	3e04      	subs	r6, #4
 8007862:	e7d1      	b.n	8007808 <__hexnan+0xbc>
 8007864:	2004      	movs	r0, #4
 8007866:	b007      	add	sp, #28
 8007868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800786c <__locale_ctype_ptr_l>:
 800786c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007870:	4770      	bx	lr
	...

08007874 <__locale_ctype_ptr>:
 8007874:	4b04      	ldr	r3, [pc, #16]	; (8007888 <__locale_ctype_ptr+0x14>)
 8007876:	4a05      	ldr	r2, [pc, #20]	; (800788c <__locale_ctype_ptr+0x18>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf08      	it	eq
 8007880:	4613      	moveq	r3, r2
 8007882:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007886:	4770      	bx	lr
 8007888:	2000000c 	.word	0x2000000c
 800788c:	20000070 	.word	0x20000070

08007890 <__localeconv_l>:
 8007890:	30f0      	adds	r0, #240	; 0xf0
 8007892:	4770      	bx	lr

08007894 <_localeconv_r>:
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <_localeconv_r+0x14>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a18      	ldr	r0, [r3, #32]
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <_localeconv_r+0x18>)
 800789c:	2800      	cmp	r0, #0
 800789e:	bf08      	it	eq
 80078a0:	4618      	moveq	r0, r3
 80078a2:	30f0      	adds	r0, #240	; 0xf0
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	2000000c 	.word	0x2000000c
 80078ac:	20000070 	.word	0x20000070

080078b0 <__swhatbuf_r>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b8:	2900      	cmp	r1, #0
 80078ba:	b096      	sub	sp, #88	; 0x58
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	da07      	bge.n	80078d2 <__swhatbuf_r+0x22>
 80078c2:	2300      	movs	r3, #0
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	89b3      	ldrh	r3, [r6, #12]
 80078c8:	061a      	lsls	r2, r3, #24
 80078ca:	d410      	bmi.n	80078ee <__swhatbuf_r+0x3e>
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	e00e      	b.n	80078f0 <__swhatbuf_r+0x40>
 80078d2:	466a      	mov	r2, sp
 80078d4:	f001 fd58 	bl	8009388 <_fstat_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dbf2      	blt.n	80078c2 <__swhatbuf_r+0x12>
 80078dc:	9a01      	ldr	r2, [sp, #4]
 80078de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078e6:	425a      	negs	r2, r3
 80078e8:	415a      	adcs	r2, r3
 80078ea:	602a      	str	r2, [r5, #0]
 80078ec:	e7ee      	b.n	80078cc <__swhatbuf_r+0x1c>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	2000      	movs	r0, #0
 80078f2:	6023      	str	r3, [r4, #0]
 80078f4:	b016      	add	sp, #88	; 0x58
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <__smakebuf_r>:
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078fc:	079d      	lsls	r5, r3, #30
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	d507      	bpl.n	8007914 <__smakebuf_r+0x1c>
 8007904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	2301      	movs	r3, #1
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	b002      	add	sp, #8
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	ab01      	add	r3, sp, #4
 8007916:	466a      	mov	r2, sp
 8007918:	f7ff ffca 	bl	80078b0 <__swhatbuf_r>
 800791c:	9900      	ldr	r1, [sp, #0]
 800791e:	4605      	mov	r5, r0
 8007920:	4630      	mov	r0, r6
 8007922:	f000 fca9 	bl	8008278 <_malloc_r>
 8007926:	b948      	cbnz	r0, 800793c <__smakebuf_r+0x44>
 8007928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d4ef      	bmi.n	8007910 <__smakebuf_r+0x18>
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	e7e3      	b.n	8007904 <__smakebuf_r+0xc>
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <__smakebuf_r+0x7c>)
 800793e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	6163      	str	r3, [r4, #20]
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	6120      	str	r0, [r4, #16]
 8007952:	b15b      	cbz	r3, 800796c <__smakebuf_r+0x74>
 8007954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007958:	4630      	mov	r0, r6
 800795a:	f001 fd27 	bl	80093ac <_isatty_r>
 800795e:	b128      	cbz	r0, 800796c <__smakebuf_r+0x74>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	431d      	orrs	r5, r3
 8007970:	81a5      	strh	r5, [r4, #12]
 8007972:	e7cd      	b.n	8007910 <__smakebuf_r+0x18>
 8007974:	0800709d 	.word	0x0800709d

08007978 <malloc>:
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <malloc+0xc>)
 800797a:	4601      	mov	r1, r0
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	f000 bc7b 	b.w	8008278 <_malloc_r>
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c

08007988 <__ascii_mbtowc>:
 8007988:	b082      	sub	sp, #8
 800798a:	b901      	cbnz	r1, 800798e <__ascii_mbtowc+0x6>
 800798c:	a901      	add	r1, sp, #4
 800798e:	b142      	cbz	r2, 80079a2 <__ascii_mbtowc+0x1a>
 8007990:	b14b      	cbz	r3, 80079a6 <__ascii_mbtowc+0x1e>
 8007992:	7813      	ldrb	r3, [r2, #0]
 8007994:	600b      	str	r3, [r1, #0]
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	1c10      	adds	r0, r2, #0
 800799a:	bf18      	it	ne
 800799c:	2001      	movne	r0, #1
 800799e:	b002      	add	sp, #8
 80079a0:	4770      	bx	lr
 80079a2:	4610      	mov	r0, r2
 80079a4:	e7fb      	b.n	800799e <__ascii_mbtowc+0x16>
 80079a6:	f06f 0001 	mvn.w	r0, #1
 80079aa:	e7f8      	b.n	800799e <__ascii_mbtowc+0x16>

080079ac <memcpy>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	1e43      	subs	r3, r0, #1
 80079b0:	440a      	add	r2, r1
 80079b2:	4291      	cmp	r1, r2
 80079b4:	d100      	bne.n	80079b8 <memcpy+0xc>
 80079b6:	bd10      	pop	{r4, pc}
 80079b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c0:	e7f7      	b.n	80079b2 <memcpy+0x6>

080079c2 <_Balloc>:
 80079c2:	b570      	push	{r4, r5, r6, lr}
 80079c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079c6:	4604      	mov	r4, r0
 80079c8:	460e      	mov	r6, r1
 80079ca:	b93d      	cbnz	r5, 80079dc <_Balloc+0x1a>
 80079cc:	2010      	movs	r0, #16
 80079ce:	f7ff ffd3 	bl	8007978 <malloc>
 80079d2:	6260      	str	r0, [r4, #36]	; 0x24
 80079d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079d8:	6005      	str	r5, [r0, #0]
 80079da:	60c5      	str	r5, [r0, #12]
 80079dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80079de:	68eb      	ldr	r3, [r5, #12]
 80079e0:	b183      	cbz	r3, 8007a04 <_Balloc+0x42>
 80079e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079ea:	b9b8      	cbnz	r0, 8007a1c <_Balloc+0x5a>
 80079ec:	2101      	movs	r1, #1
 80079ee:	fa01 f506 	lsl.w	r5, r1, r6
 80079f2:	1d6a      	adds	r2, r5, #5
 80079f4:	0092      	lsls	r2, r2, #2
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 fbe1 	bl	80081be <_calloc_r>
 80079fc:	b160      	cbz	r0, 8007a18 <_Balloc+0x56>
 80079fe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007a02:	e00e      	b.n	8007a22 <_Balloc+0x60>
 8007a04:	2221      	movs	r2, #33	; 0x21
 8007a06:	2104      	movs	r1, #4
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 fbd8 	bl	80081be <_calloc_r>
 8007a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a10:	60e8      	str	r0, [r5, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e4      	bne.n	80079e2 <_Balloc+0x20>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	6802      	ldr	r2, [r0, #0]
 8007a1e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007a22:	2300      	movs	r3, #0
 8007a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a28:	e7f7      	b.n	8007a1a <_Balloc+0x58>

08007a2a <_Bfree>:
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	b93c      	cbnz	r4, 8007a44 <_Bfree+0x1a>
 8007a34:	2010      	movs	r0, #16
 8007a36:	f7ff ff9f 	bl	8007978 <malloc>
 8007a3a:	6270      	str	r0, [r6, #36]	; 0x24
 8007a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a40:	6004      	str	r4, [r0, #0]
 8007a42:	60c4      	str	r4, [r0, #12]
 8007a44:	b13d      	cbz	r5, 8007a56 <_Bfree+0x2c>
 8007a46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a48:	686a      	ldr	r2, [r5, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a50:	6029      	str	r1, [r5, #0]
 8007a52:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a56:	bd70      	pop	{r4, r5, r6, pc}

08007a58 <__multadd>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	690d      	ldr	r5, [r1, #16]
 8007a5e:	461f      	mov	r7, r3
 8007a60:	4606      	mov	r6, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	f101 0c14 	add.w	ip, r1, #20
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f8dc 0000 	ldr.w	r0, [ip]
 8007a6e:	b281      	uxth	r1, r0
 8007a70:	fb02 7101 	mla	r1, r2, r1, r7
 8007a74:	0c0f      	lsrs	r7, r1, #16
 8007a76:	0c00      	lsrs	r0, r0, #16
 8007a78:	fb02 7000 	mla	r0, r2, r0, r7
 8007a7c:	b289      	uxth	r1, r1
 8007a7e:	3301      	adds	r3, #1
 8007a80:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007a84:	429d      	cmp	r5, r3
 8007a86:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a8e:	dcec      	bgt.n	8007a6a <__multadd+0x12>
 8007a90:	b1d7      	cbz	r7, 8007ac8 <__multadd+0x70>
 8007a92:	68a3      	ldr	r3, [r4, #8]
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc12      	bgt.n	8007abe <__multadd+0x66>
 8007a98:	6861      	ldr	r1, [r4, #4]
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	3101      	adds	r1, #1
 8007a9e:	f7ff ff90 	bl	80079c2 <_Balloc>
 8007aa2:	6922      	ldr	r2, [r4, #16]
 8007aa4:	3202      	adds	r2, #2
 8007aa6:	f104 010c 	add.w	r1, r4, #12
 8007aaa:	4680      	mov	r8, r0
 8007aac:	0092      	lsls	r2, r2, #2
 8007aae:	300c      	adds	r0, #12
 8007ab0:	f7ff ff7c 	bl	80079ac <memcpy>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff ffb7 	bl	8007a2a <_Bfree>
 8007abc:	4644      	mov	r4, r8
 8007abe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ac2:	3501      	adds	r5, #1
 8007ac4:	615f      	str	r7, [r3, #20]
 8007ac6:	6125      	str	r5, [r4, #16]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ace <__s2b>:
 8007ace:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	2209      	movs	r2, #9
 8007ada:	3308      	adds	r3, #8
 8007adc:	4606      	mov	r6, r0
 8007ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	db20      	blt.n	8007b2c <__s2b+0x5e>
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7ff ff69 	bl	80079c2 <_Balloc>
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	6143      	str	r3, [r0, #20]
 8007af4:	2d09      	cmp	r5, #9
 8007af6:	f04f 0301 	mov.w	r3, #1
 8007afa:	6103      	str	r3, [r0, #16]
 8007afc:	dd19      	ble.n	8007b32 <__s2b+0x64>
 8007afe:	f104 0809 	add.w	r8, r4, #9
 8007b02:	46c1      	mov	r9, r8
 8007b04:	442c      	add	r4, r5
 8007b06:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	3b30      	subs	r3, #48	; 0x30
 8007b0e:	220a      	movs	r2, #10
 8007b10:	4630      	mov	r0, r6
 8007b12:	f7ff ffa1 	bl	8007a58 <__multadd>
 8007b16:	45a1      	cmp	r9, r4
 8007b18:	d1f5      	bne.n	8007b06 <__s2b+0x38>
 8007b1a:	eb08 0405 	add.w	r4, r8, r5
 8007b1e:	3c08      	subs	r4, #8
 8007b20:	1b2d      	subs	r5, r5, r4
 8007b22:	1963      	adds	r3, r4, r5
 8007b24:	42bb      	cmp	r3, r7
 8007b26:	db07      	blt.n	8007b38 <__s2b+0x6a>
 8007b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	3101      	adds	r1, #1
 8007b30:	e7d9      	b.n	8007ae6 <__s2b+0x18>
 8007b32:	340a      	adds	r4, #10
 8007b34:	2509      	movs	r5, #9
 8007b36:	e7f3      	b.n	8007b20 <__s2b+0x52>
 8007b38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	3b30      	subs	r3, #48	; 0x30
 8007b40:	220a      	movs	r2, #10
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ff88 	bl	8007a58 <__multadd>
 8007b48:	e7eb      	b.n	8007b22 <__s2b+0x54>

08007b4a <__hi0bits>:
 8007b4a:	0c02      	lsrs	r2, r0, #16
 8007b4c:	0412      	lsls	r2, r2, #16
 8007b4e:	4603      	mov	r3, r0
 8007b50:	b9b2      	cbnz	r2, 8007b80 <__hi0bits+0x36>
 8007b52:	0403      	lsls	r3, r0, #16
 8007b54:	2010      	movs	r0, #16
 8007b56:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b5a:	bf04      	itt	eq
 8007b5c:	021b      	lsleq	r3, r3, #8
 8007b5e:	3008      	addeq	r0, #8
 8007b60:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b64:	bf04      	itt	eq
 8007b66:	011b      	lsleq	r3, r3, #4
 8007b68:	3004      	addeq	r0, #4
 8007b6a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b6e:	bf04      	itt	eq
 8007b70:	009b      	lsleq	r3, r3, #2
 8007b72:	3002      	addeq	r0, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	db06      	blt.n	8007b86 <__hi0bits+0x3c>
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	d503      	bpl.n	8007b84 <__hi0bits+0x3a>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	4770      	bx	lr
 8007b80:	2000      	movs	r0, #0
 8007b82:	e7e8      	b.n	8007b56 <__hi0bits+0xc>
 8007b84:	2020      	movs	r0, #32
 8007b86:	4770      	bx	lr

08007b88 <__lo0bits>:
 8007b88:	6803      	ldr	r3, [r0, #0]
 8007b8a:	f013 0207 	ands.w	r2, r3, #7
 8007b8e:	4601      	mov	r1, r0
 8007b90:	d00b      	beq.n	8007baa <__lo0bits+0x22>
 8007b92:	07da      	lsls	r2, r3, #31
 8007b94:	d423      	bmi.n	8007bde <__lo0bits+0x56>
 8007b96:	0798      	lsls	r0, r3, #30
 8007b98:	bf49      	itett	mi
 8007b9a:	085b      	lsrmi	r3, r3, #1
 8007b9c:	089b      	lsrpl	r3, r3, #2
 8007b9e:	2001      	movmi	r0, #1
 8007ba0:	600b      	strmi	r3, [r1, #0]
 8007ba2:	bf5c      	itt	pl
 8007ba4:	600b      	strpl	r3, [r1, #0]
 8007ba6:	2002      	movpl	r0, #2
 8007ba8:	4770      	bx	lr
 8007baa:	b298      	uxth	r0, r3
 8007bac:	b9a8      	cbnz	r0, 8007bda <__lo0bits+0x52>
 8007bae:	0c1b      	lsrs	r3, r3, #16
 8007bb0:	2010      	movs	r0, #16
 8007bb2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007bb6:	bf04      	itt	eq
 8007bb8:	0a1b      	lsreq	r3, r3, #8
 8007bba:	3008      	addeq	r0, #8
 8007bbc:	071a      	lsls	r2, r3, #28
 8007bbe:	bf04      	itt	eq
 8007bc0:	091b      	lsreq	r3, r3, #4
 8007bc2:	3004      	addeq	r0, #4
 8007bc4:	079a      	lsls	r2, r3, #30
 8007bc6:	bf04      	itt	eq
 8007bc8:	089b      	lsreq	r3, r3, #2
 8007bca:	3002      	addeq	r0, #2
 8007bcc:	07da      	lsls	r2, r3, #31
 8007bce:	d402      	bmi.n	8007bd6 <__lo0bits+0x4e>
 8007bd0:	085b      	lsrs	r3, r3, #1
 8007bd2:	d006      	beq.n	8007be2 <__lo0bits+0x5a>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	600b      	str	r3, [r1, #0]
 8007bd8:	4770      	bx	lr
 8007bda:	4610      	mov	r0, r2
 8007bdc:	e7e9      	b.n	8007bb2 <__lo0bits+0x2a>
 8007bde:	2000      	movs	r0, #0
 8007be0:	4770      	bx	lr
 8007be2:	2020      	movs	r0, #32
 8007be4:	4770      	bx	lr

08007be6 <__i2b>:
 8007be6:	b510      	push	{r4, lr}
 8007be8:	460c      	mov	r4, r1
 8007bea:	2101      	movs	r1, #1
 8007bec:	f7ff fee9 	bl	80079c2 <_Balloc>
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	6144      	str	r4, [r0, #20]
 8007bf4:	6102      	str	r2, [r0, #16]
 8007bf6:	bd10      	pop	{r4, pc}

08007bf8 <__multiply>:
 8007bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	690a      	ldr	r2, [r1, #16]
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	bfb8      	it	lt
 8007c06:	460b      	movlt	r3, r1
 8007c08:	4688      	mov	r8, r1
 8007c0a:	bfbc      	itt	lt
 8007c0c:	46a0      	movlt	r8, r4
 8007c0e:	461c      	movlt	r4, r3
 8007c10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c20:	eb07 0609 	add.w	r6, r7, r9
 8007c24:	42b3      	cmp	r3, r6
 8007c26:	bfb8      	it	lt
 8007c28:	3101      	addlt	r1, #1
 8007c2a:	f7ff feca 	bl	80079c2 <_Balloc>
 8007c2e:	f100 0514 	add.w	r5, r0, #20
 8007c32:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007c36:	462b      	mov	r3, r5
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4573      	cmp	r3, lr
 8007c3c:	d316      	bcc.n	8007c6c <__multiply+0x74>
 8007c3e:	f104 0214 	add.w	r2, r4, #20
 8007c42:	f108 0114 	add.w	r1, r8, #20
 8007c46:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007c4a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	9201      	str	r2, [sp, #4]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d80c      	bhi.n	8007c72 <__multiply+0x7a>
 8007c58:	2e00      	cmp	r6, #0
 8007c5a:	dd03      	ble.n	8007c64 <__multiply+0x6c>
 8007c5c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05d      	beq.n	8007d20 <__multiply+0x128>
 8007c64:	6106      	str	r6, [r0, #16]
 8007c66:	b003      	add	sp, #12
 8007c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6c:	f843 2b04 	str.w	r2, [r3], #4
 8007c70:	e7e3      	b.n	8007c3a <__multiply+0x42>
 8007c72:	f8b2 b000 	ldrh.w	fp, [r2]
 8007c76:	f1bb 0f00 	cmp.w	fp, #0
 8007c7a:	d023      	beq.n	8007cc4 <__multiply+0xcc>
 8007c7c:	4689      	mov	r9, r1
 8007c7e:	46ac      	mov	ip, r5
 8007c80:	f04f 0800 	mov.w	r8, #0
 8007c84:	f859 4b04 	ldr.w	r4, [r9], #4
 8007c88:	f8dc a000 	ldr.w	sl, [ip]
 8007c8c:	b2a3      	uxth	r3, r4
 8007c8e:	fa1f fa8a 	uxth.w	sl, sl
 8007c92:	fb0b a303 	mla	r3, fp, r3, sl
 8007c96:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c9a:	f8dc 4000 	ldr.w	r4, [ip]
 8007c9e:	4443      	add	r3, r8
 8007ca0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ca4:	fb0b 840a 	mla	r4, fp, sl, r8
 8007ca8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007cac:	46e2      	mov	sl, ip
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007cb4:	454f      	cmp	r7, r9
 8007cb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007cba:	f84a 3b04 	str.w	r3, [sl], #4
 8007cbe:	d82b      	bhi.n	8007d18 <__multiply+0x120>
 8007cc0:	f8cc 8004 	str.w	r8, [ip, #4]
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007cca:	3204      	adds	r2, #4
 8007ccc:	f1ba 0f00 	cmp.w	sl, #0
 8007cd0:	d020      	beq.n	8007d14 <__multiply+0x11c>
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	4689      	mov	r9, r1
 8007cd6:	46a8      	mov	r8, r5
 8007cd8:	f04f 0b00 	mov.w	fp, #0
 8007cdc:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ce0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007ce4:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ce8:	445c      	add	r4, fp
 8007cea:	46c4      	mov	ip, r8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007cf2:	f84c 3b04 	str.w	r3, [ip], #4
 8007cf6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cfa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	fb0a b303 	mla	r3, sl, r3, fp
 8007d04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007d08:	454f      	cmp	r7, r9
 8007d0a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007d0e:	d805      	bhi.n	8007d1c <__multiply+0x124>
 8007d10:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d14:	3504      	adds	r5, #4
 8007d16:	e79b      	b.n	8007c50 <__multiply+0x58>
 8007d18:	46d4      	mov	ip, sl
 8007d1a:	e7b3      	b.n	8007c84 <__multiply+0x8c>
 8007d1c:	46e0      	mov	r8, ip
 8007d1e:	e7dd      	b.n	8007cdc <__multiply+0xe4>
 8007d20:	3e01      	subs	r6, #1
 8007d22:	e799      	b.n	8007c58 <__multiply+0x60>

08007d24 <__pow5mult>:
 8007d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d28:	4615      	mov	r5, r2
 8007d2a:	f012 0203 	ands.w	r2, r2, #3
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	d007      	beq.n	8007d44 <__pow5mult+0x20>
 8007d34:	3a01      	subs	r2, #1
 8007d36:	4c21      	ldr	r4, [pc, #132]	; (8007dbc <__pow5mult+0x98>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d3e:	f7ff fe8b 	bl	8007a58 <__multadd>
 8007d42:	4607      	mov	r7, r0
 8007d44:	10ad      	asrs	r5, r5, #2
 8007d46:	d035      	beq.n	8007db4 <__pow5mult+0x90>
 8007d48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d4a:	b93c      	cbnz	r4, 8007d5c <__pow5mult+0x38>
 8007d4c:	2010      	movs	r0, #16
 8007d4e:	f7ff fe13 	bl	8007978 <malloc>
 8007d52:	6270      	str	r0, [r6, #36]	; 0x24
 8007d54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d58:	6004      	str	r4, [r0, #0]
 8007d5a:	60c4      	str	r4, [r0, #12]
 8007d5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d64:	b94c      	cbnz	r4, 8007d7a <__pow5mult+0x56>
 8007d66:	f240 2171 	movw	r1, #625	; 0x271
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ff3b 	bl	8007be6 <__i2b>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d76:	4604      	mov	r4, r0
 8007d78:	6003      	str	r3, [r0, #0]
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	07eb      	lsls	r3, r5, #31
 8007d80:	d50a      	bpl.n	8007d98 <__pow5mult+0x74>
 8007d82:	4639      	mov	r1, r7
 8007d84:	4622      	mov	r2, r4
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff ff36 	bl	8007bf8 <__multiply>
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4681      	mov	r9, r0
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff fe4a 	bl	8007a2a <_Bfree>
 8007d96:	464f      	mov	r7, r9
 8007d98:	106d      	asrs	r5, r5, #1
 8007d9a:	d00b      	beq.n	8007db4 <__pow5mult+0x90>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	b938      	cbnz	r0, 8007db0 <__pow5mult+0x8c>
 8007da0:	4622      	mov	r2, r4
 8007da2:	4621      	mov	r1, r4
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ff27 	bl	8007bf8 <__multiply>
 8007daa:	6020      	str	r0, [r4, #0]
 8007dac:	f8c0 8000 	str.w	r8, [r0]
 8007db0:	4604      	mov	r4, r0
 8007db2:	e7e4      	b.n	8007d7e <__pow5mult+0x5a>
 8007db4:	4638      	mov	r0, r7
 8007db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dba:	bf00      	nop
 8007dbc:	08009820 	.word	0x08009820

08007dc0 <__lshift>:
 8007dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6849      	ldr	r1, [r1, #4]
 8007dce:	eb0a 0903 	add.w	r9, sl, r3
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	4616      	mov	r6, r2
 8007dd8:	f109 0501 	add.w	r5, r9, #1
 8007ddc:	42ab      	cmp	r3, r5
 8007dde:	db32      	blt.n	8007e46 <__lshift+0x86>
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff fdee 	bl	80079c2 <_Balloc>
 8007de6:	2300      	movs	r3, #0
 8007de8:	4680      	mov	r8, r0
 8007dea:	f100 0114 	add.w	r1, r0, #20
 8007dee:	461a      	mov	r2, r3
 8007df0:	4553      	cmp	r3, sl
 8007df2:	db2b      	blt.n	8007e4c <__lshift+0x8c>
 8007df4:	6920      	ldr	r0, [r4, #16]
 8007df6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dfa:	f104 0314 	add.w	r3, r4, #20
 8007dfe:	f016 021f 	ands.w	r2, r6, #31
 8007e02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e0a:	d025      	beq.n	8007e58 <__lshift+0x98>
 8007e0c:	f1c2 0e20 	rsb	lr, r2, #32
 8007e10:	2000      	movs	r0, #0
 8007e12:	681e      	ldr	r6, [r3, #0]
 8007e14:	468a      	mov	sl, r1
 8007e16:	4096      	lsls	r6, r2
 8007e18:	4330      	orrs	r0, r6
 8007e1a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007e22:	459c      	cmp	ip, r3
 8007e24:	fa20 f00e 	lsr.w	r0, r0, lr
 8007e28:	d814      	bhi.n	8007e54 <__lshift+0x94>
 8007e2a:	6048      	str	r0, [r1, #4]
 8007e2c:	b108      	cbz	r0, 8007e32 <__lshift+0x72>
 8007e2e:	f109 0502 	add.w	r5, r9, #2
 8007e32:	3d01      	subs	r5, #1
 8007e34:	4638      	mov	r0, r7
 8007e36:	f8c8 5010 	str.w	r5, [r8, #16]
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	f7ff fdf5 	bl	8007a2a <_Bfree>
 8007e40:	4640      	mov	r0, r8
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	3101      	adds	r1, #1
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	e7c7      	b.n	8007ddc <__lshift+0x1c>
 8007e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e50:	3301      	adds	r3, #1
 8007e52:	e7cd      	b.n	8007df0 <__lshift+0x30>
 8007e54:	4651      	mov	r1, sl
 8007e56:	e7dc      	b.n	8007e12 <__lshift+0x52>
 8007e58:	3904      	subs	r1, #4
 8007e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e62:	459c      	cmp	ip, r3
 8007e64:	d8f9      	bhi.n	8007e5a <__lshift+0x9a>
 8007e66:	e7e4      	b.n	8007e32 <__lshift+0x72>

08007e68 <__mcmp>:
 8007e68:	6903      	ldr	r3, [r0, #16]
 8007e6a:	690a      	ldr	r2, [r1, #16]
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	b530      	push	{r4, r5, lr}
 8007e70:	d10c      	bne.n	8007e8c <__mcmp+0x24>
 8007e72:	0092      	lsls	r2, r2, #2
 8007e74:	3014      	adds	r0, #20
 8007e76:	3114      	adds	r1, #20
 8007e78:	1884      	adds	r4, r0, r2
 8007e7a:	4411      	add	r1, r2
 8007e7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e84:	4295      	cmp	r5, r2
 8007e86:	d003      	beq.n	8007e90 <__mcmp+0x28>
 8007e88:	d305      	bcc.n	8007e96 <__mcmp+0x2e>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	bd30      	pop	{r4, r5, pc}
 8007e90:	42a0      	cmp	r0, r4
 8007e92:	d3f3      	bcc.n	8007e7c <__mcmp+0x14>
 8007e94:	e7fa      	b.n	8007e8c <__mcmp+0x24>
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	e7f7      	b.n	8007e8c <__mcmp+0x24>

08007e9c <__mdiff>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	f7ff ffdd 	bl	8007e68 <__mcmp>
 8007eae:	1e06      	subs	r6, r0, #0
 8007eb0:	d108      	bne.n	8007ec4 <__mdiff+0x28>
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff fd84 	bl	80079c2 <_Balloc>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec4:	bfa4      	itt	ge
 8007ec6:	4623      	movge	r3, r4
 8007ec8:	462c      	movge	r4, r5
 8007eca:	4638      	mov	r0, r7
 8007ecc:	6861      	ldr	r1, [r4, #4]
 8007ece:	bfa6      	itte	ge
 8007ed0:	461d      	movge	r5, r3
 8007ed2:	2600      	movge	r6, #0
 8007ed4:	2601      	movlt	r6, #1
 8007ed6:	f7ff fd74 	bl	80079c2 <_Balloc>
 8007eda:	692b      	ldr	r3, [r5, #16]
 8007edc:	60c6      	str	r6, [r0, #12]
 8007ede:	6926      	ldr	r6, [r4, #16]
 8007ee0:	f105 0914 	add.w	r9, r5, #20
 8007ee4:	f104 0214 	add.w	r2, r4, #20
 8007ee8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007eec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ef0:	f100 0514 	add.w	r5, r0, #20
 8007ef4:	f04f 0e00 	mov.w	lr, #0
 8007ef8:	f852 ab04 	ldr.w	sl, [r2], #4
 8007efc:	f859 4b04 	ldr.w	r4, [r9], #4
 8007f00:	fa1e f18a 	uxtah	r1, lr, sl
 8007f04:	b2a3      	uxth	r3, r4
 8007f06:	1ac9      	subs	r1, r1, r3
 8007f08:	0c23      	lsrs	r3, r4, #16
 8007f0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007f0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f12:	b289      	uxth	r1, r1
 8007f14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007f18:	45c8      	cmp	r8, r9
 8007f1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007f1e:	4694      	mov	ip, r2
 8007f20:	f845 3b04 	str.w	r3, [r5], #4
 8007f24:	d8e8      	bhi.n	8007ef8 <__mdiff+0x5c>
 8007f26:	45bc      	cmp	ip, r7
 8007f28:	d304      	bcc.n	8007f34 <__mdiff+0x98>
 8007f2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007f2e:	b183      	cbz	r3, 8007f52 <__mdiff+0xb6>
 8007f30:	6106      	str	r6, [r0, #16]
 8007f32:	e7c5      	b.n	8007ec0 <__mdiff+0x24>
 8007f34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007f38:	fa1e f381 	uxtah	r3, lr, r1
 8007f3c:	141a      	asrs	r2, r3, #16
 8007f3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007f4c:	f845 3b04 	str.w	r3, [r5], #4
 8007f50:	e7e9      	b.n	8007f26 <__mdiff+0x8a>
 8007f52:	3e01      	subs	r6, #1
 8007f54:	e7e9      	b.n	8007f2a <__mdiff+0x8e>
	...

08007f58 <__ulp>:
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <__ulp+0x4c>)
 8007f5a:	ee10 2a90 	vmov	r2, s1
 8007f5e:	401a      	ands	r2, r3
 8007f60:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dd04      	ble.n	8007f72 <__ulp+0x1a>
 8007f68:	2000      	movs	r0, #0
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	ec41 0b10 	vmov	d0, r0, r1
 8007f70:	4770      	bx	lr
 8007f72:	425b      	negs	r3, r3
 8007f74:	151b      	asrs	r3, r3, #20
 8007f76:	2b13      	cmp	r3, #19
 8007f78:	f04f 0000 	mov.w	r0, #0
 8007f7c:	f04f 0100 	mov.w	r1, #0
 8007f80:	dc04      	bgt.n	8007f8c <__ulp+0x34>
 8007f82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007f86:	fa42 f103 	asr.w	r1, r2, r3
 8007f8a:	e7ef      	b.n	8007f6c <__ulp+0x14>
 8007f8c:	3b14      	subs	r3, #20
 8007f8e:	2b1e      	cmp	r3, #30
 8007f90:	f04f 0201 	mov.w	r2, #1
 8007f94:	bfda      	itte	le
 8007f96:	f1c3 031f 	rsble	r3, r3, #31
 8007f9a:	fa02 f303 	lslle.w	r3, r2, r3
 8007f9e:	4613      	movgt	r3, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	e7e3      	b.n	8007f6c <__ulp+0x14>
 8007fa4:	7ff00000 	.word	0x7ff00000

08007fa8 <__b2d>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	6905      	ldr	r5, [r0, #16]
 8007fac:	f100 0714 	add.w	r7, r0, #20
 8007fb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007fb4:	1f2e      	subs	r6, r5, #4
 8007fb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f7ff fdc5 	bl	8007b4a <__hi0bits>
 8007fc0:	f1c0 0320 	rsb	r3, r0, #32
 8007fc4:	280a      	cmp	r0, #10
 8007fc6:	600b      	str	r3, [r1, #0]
 8007fc8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008040 <__b2d+0x98>
 8007fcc:	dc14      	bgt.n	8007ff8 <__b2d+0x50>
 8007fce:	f1c0 0e0b 	rsb	lr, r0, #11
 8007fd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8007fd6:	42b7      	cmp	r7, r6
 8007fd8:	ea41 030c 	orr.w	r3, r1, ip
 8007fdc:	bf34      	ite	cc
 8007fde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fe2:	2100      	movcs	r1, #0
 8007fe4:	3015      	adds	r0, #21
 8007fe6:	fa04 f000 	lsl.w	r0, r4, r0
 8007fea:	fa21 f10e 	lsr.w	r1, r1, lr
 8007fee:	ea40 0201 	orr.w	r2, r0, r1
 8007ff2:	ec43 2b10 	vmov	d0, r2, r3
 8007ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff8:	42b7      	cmp	r7, r6
 8007ffa:	bf3a      	itte	cc
 8007ffc:	f1a5 0608 	subcc.w	r6, r5, #8
 8008000:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008004:	2100      	movcs	r1, #0
 8008006:	380b      	subs	r0, #11
 8008008:	d015      	beq.n	8008036 <__b2d+0x8e>
 800800a:	4084      	lsls	r4, r0
 800800c:	f1c0 0520 	rsb	r5, r0, #32
 8008010:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008014:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008018:	42be      	cmp	r6, r7
 800801a:	fa21 fc05 	lsr.w	ip, r1, r5
 800801e:	ea44 030c 	orr.w	r3, r4, ip
 8008022:	bf8c      	ite	hi
 8008024:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008028:	2400      	movls	r4, #0
 800802a:	fa01 f000 	lsl.w	r0, r1, r0
 800802e:	40ec      	lsrs	r4, r5
 8008030:	ea40 0204 	orr.w	r2, r0, r4
 8008034:	e7dd      	b.n	8007ff2 <__b2d+0x4a>
 8008036:	ea44 030c 	orr.w	r3, r4, ip
 800803a:	460a      	mov	r2, r1
 800803c:	e7d9      	b.n	8007ff2 <__b2d+0x4a>
 800803e:	bf00      	nop
 8008040:	3ff00000 	.word	0x3ff00000

08008044 <__d2b>:
 8008044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008048:	460e      	mov	r6, r1
 800804a:	2101      	movs	r1, #1
 800804c:	ec59 8b10 	vmov	r8, r9, d0
 8008050:	4615      	mov	r5, r2
 8008052:	f7ff fcb6 	bl	80079c2 <_Balloc>
 8008056:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800805a:	4607      	mov	r7, r0
 800805c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008060:	bb34      	cbnz	r4, 80080b0 <__d2b+0x6c>
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	f1b8 0300 	subs.w	r3, r8, #0
 8008068:	d027      	beq.n	80080ba <__d2b+0x76>
 800806a:	a802      	add	r0, sp, #8
 800806c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008070:	f7ff fd8a 	bl	8007b88 <__lo0bits>
 8008074:	9900      	ldr	r1, [sp, #0]
 8008076:	b1f0      	cbz	r0, 80080b6 <__d2b+0x72>
 8008078:	9a01      	ldr	r2, [sp, #4]
 800807a:	f1c0 0320 	rsb	r3, r0, #32
 800807e:	fa02 f303 	lsl.w	r3, r2, r3
 8008082:	430b      	orrs	r3, r1
 8008084:	40c2      	lsrs	r2, r0
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	9201      	str	r2, [sp, #4]
 800808a:	9b01      	ldr	r3, [sp, #4]
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bf14      	ite	ne
 8008092:	2102      	movne	r1, #2
 8008094:	2101      	moveq	r1, #1
 8008096:	6139      	str	r1, [r7, #16]
 8008098:	b1c4      	cbz	r4, 80080cc <__d2b+0x88>
 800809a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800809e:	4404      	add	r4, r0
 80080a0:	6034      	str	r4, [r6, #0]
 80080a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080a6:	6028      	str	r0, [r5, #0]
 80080a8:	4638      	mov	r0, r7
 80080aa:	b003      	add	sp, #12
 80080ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080b4:	e7d5      	b.n	8008062 <__d2b+0x1e>
 80080b6:	6179      	str	r1, [r7, #20]
 80080b8:	e7e7      	b.n	800808a <__d2b+0x46>
 80080ba:	a801      	add	r0, sp, #4
 80080bc:	f7ff fd64 	bl	8007b88 <__lo0bits>
 80080c0:	9b01      	ldr	r3, [sp, #4]
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	2101      	movs	r1, #1
 80080c6:	6139      	str	r1, [r7, #16]
 80080c8:	3020      	adds	r0, #32
 80080ca:	e7e5      	b.n	8008098 <__d2b+0x54>
 80080cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080d4:	6030      	str	r0, [r6, #0]
 80080d6:	6918      	ldr	r0, [r3, #16]
 80080d8:	f7ff fd37 	bl	8007b4a <__hi0bits>
 80080dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080e0:	e7e1      	b.n	80080a6 <__d2b+0x62>

080080e2 <__ratio>:
 80080e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e6:	4688      	mov	r8, r1
 80080e8:	4669      	mov	r1, sp
 80080ea:	4681      	mov	r9, r0
 80080ec:	f7ff ff5c 	bl	8007fa8 <__b2d>
 80080f0:	a901      	add	r1, sp, #4
 80080f2:	4640      	mov	r0, r8
 80080f4:	ec57 6b10 	vmov	r6, r7, d0
 80080f8:	f7ff ff56 	bl	8007fa8 <__b2d>
 80080fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008100:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008104:	eba3 0c02 	sub.w	ip, r3, r2
 8008108:	e9dd 3200 	ldrd	r3, r2, [sp]
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008112:	ec5b ab10 	vmov	sl, fp, d0
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfce      	itee	gt
 800811a:	463a      	movgt	r2, r7
 800811c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008120:	465a      	movle	r2, fp
 8008122:	4659      	mov	r1, fp
 8008124:	463d      	mov	r5, r7
 8008126:	bfd4      	ite	le
 8008128:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800812c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008130:	4630      	mov	r0, r6
 8008132:	ee10 2a10 	vmov	r2, s0
 8008136:	460b      	mov	r3, r1
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 fb87 	bl	800084c <__aeabi_ddiv>
 800813e:	ec41 0b10 	vmov	d0, r0, r1
 8008142:	b003      	add	sp, #12
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008148 <__copybits>:
 8008148:	3901      	subs	r1, #1
 800814a:	b510      	push	{r4, lr}
 800814c:	1149      	asrs	r1, r1, #5
 800814e:	6914      	ldr	r4, [r2, #16]
 8008150:	3101      	adds	r1, #1
 8008152:	f102 0314 	add.w	r3, r2, #20
 8008156:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800815a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800815e:	42a3      	cmp	r3, r4
 8008160:	4602      	mov	r2, r0
 8008162:	d303      	bcc.n	800816c <__copybits+0x24>
 8008164:	2300      	movs	r3, #0
 8008166:	428a      	cmp	r2, r1
 8008168:	d305      	bcc.n	8008176 <__copybits+0x2e>
 800816a:	bd10      	pop	{r4, pc}
 800816c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008170:	f840 2b04 	str.w	r2, [r0], #4
 8008174:	e7f3      	b.n	800815e <__copybits+0x16>
 8008176:	f842 3b04 	str.w	r3, [r2], #4
 800817a:	e7f4      	b.n	8008166 <__copybits+0x1e>

0800817c <__any_on>:
 800817c:	f100 0214 	add.w	r2, r0, #20
 8008180:	6900      	ldr	r0, [r0, #16]
 8008182:	114b      	asrs	r3, r1, #5
 8008184:	4298      	cmp	r0, r3
 8008186:	b510      	push	{r4, lr}
 8008188:	db11      	blt.n	80081ae <__any_on+0x32>
 800818a:	dd0a      	ble.n	80081a2 <__any_on+0x26>
 800818c:	f011 011f 	ands.w	r1, r1, #31
 8008190:	d007      	beq.n	80081a2 <__any_on+0x26>
 8008192:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008196:	fa24 f001 	lsr.w	r0, r4, r1
 800819a:	fa00 f101 	lsl.w	r1, r0, r1
 800819e:	428c      	cmp	r4, r1
 80081a0:	d10b      	bne.n	80081ba <__any_on+0x3e>
 80081a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d803      	bhi.n	80081b2 <__any_on+0x36>
 80081aa:	2000      	movs	r0, #0
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	4603      	mov	r3, r0
 80081b0:	e7f7      	b.n	80081a2 <__any_on+0x26>
 80081b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081b6:	2900      	cmp	r1, #0
 80081b8:	d0f5      	beq.n	80081a6 <__any_on+0x2a>
 80081ba:	2001      	movs	r0, #1
 80081bc:	e7f6      	b.n	80081ac <__any_on+0x30>

080081be <_calloc_r>:
 80081be:	b538      	push	{r3, r4, r5, lr}
 80081c0:	fb02 f401 	mul.w	r4, r2, r1
 80081c4:	4621      	mov	r1, r4
 80081c6:	f000 f857 	bl	8008278 <_malloc_r>
 80081ca:	4605      	mov	r5, r0
 80081cc:	b118      	cbz	r0, 80081d6 <_calloc_r+0x18>
 80081ce:	4622      	mov	r2, r4
 80081d0:	2100      	movs	r1, #0
 80081d2:	f7fc f99f 	bl	8004514 <memset>
 80081d6:	4628      	mov	r0, r5
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080081dc <_free_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4605      	mov	r5, r0
 80081e0:	2900      	cmp	r1, #0
 80081e2:	d045      	beq.n	8008270 <_free_r+0x94>
 80081e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e8:	1f0c      	subs	r4, r1, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfb8      	it	lt
 80081ee:	18e4      	addlt	r4, r4, r3
 80081f0:	f001 f917 	bl	8009422 <__malloc_lock>
 80081f4:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <_free_r+0x98>)
 80081f6:	6813      	ldr	r3, [r2, #0]
 80081f8:	4610      	mov	r0, r2
 80081fa:	b933      	cbnz	r3, 800820a <_free_r+0x2e>
 80081fc:	6063      	str	r3, [r4, #4]
 80081fe:	6014      	str	r4, [r2, #0]
 8008200:	4628      	mov	r0, r5
 8008202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008206:	f001 b90d 	b.w	8009424 <__malloc_unlock>
 800820a:	42a3      	cmp	r3, r4
 800820c:	d90c      	bls.n	8008228 <_free_r+0x4c>
 800820e:	6821      	ldr	r1, [r4, #0]
 8008210:	1862      	adds	r2, r4, r1
 8008212:	4293      	cmp	r3, r2
 8008214:	bf04      	itt	eq
 8008216:	681a      	ldreq	r2, [r3, #0]
 8008218:	685b      	ldreq	r3, [r3, #4]
 800821a:	6063      	str	r3, [r4, #4]
 800821c:	bf04      	itt	eq
 800821e:	1852      	addeq	r2, r2, r1
 8008220:	6022      	streq	r2, [r4, #0]
 8008222:	6004      	str	r4, [r0, #0]
 8008224:	e7ec      	b.n	8008200 <_free_r+0x24>
 8008226:	4613      	mov	r3, r2
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	b10a      	cbz	r2, 8008230 <_free_r+0x54>
 800822c:	42a2      	cmp	r2, r4
 800822e:	d9fa      	bls.n	8008226 <_free_r+0x4a>
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	1858      	adds	r0, r3, r1
 8008234:	42a0      	cmp	r0, r4
 8008236:	d10b      	bne.n	8008250 <_free_r+0x74>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	4401      	add	r1, r0
 800823c:	1858      	adds	r0, r3, r1
 800823e:	4282      	cmp	r2, r0
 8008240:	6019      	str	r1, [r3, #0]
 8008242:	d1dd      	bne.n	8008200 <_free_r+0x24>
 8008244:	6810      	ldr	r0, [r2, #0]
 8008246:	6852      	ldr	r2, [r2, #4]
 8008248:	605a      	str	r2, [r3, #4]
 800824a:	4401      	add	r1, r0
 800824c:	6019      	str	r1, [r3, #0]
 800824e:	e7d7      	b.n	8008200 <_free_r+0x24>
 8008250:	d902      	bls.n	8008258 <_free_r+0x7c>
 8008252:	230c      	movs	r3, #12
 8008254:	602b      	str	r3, [r5, #0]
 8008256:	e7d3      	b.n	8008200 <_free_r+0x24>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	1821      	adds	r1, r4, r0
 800825c:	428a      	cmp	r2, r1
 800825e:	bf04      	itt	eq
 8008260:	6811      	ldreq	r1, [r2, #0]
 8008262:	6852      	ldreq	r2, [r2, #4]
 8008264:	6062      	str	r2, [r4, #4]
 8008266:	bf04      	itt	eq
 8008268:	1809      	addeq	r1, r1, r0
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	605c      	str	r4, [r3, #4]
 800826e:	e7c7      	b.n	8008200 <_free_r+0x24>
 8008270:	bd38      	pop	{r3, r4, r5, pc}
 8008272:	bf00      	nop
 8008274:	200001fc 	.word	0x200001fc

08008278 <_malloc_r>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	1ccd      	adds	r5, r1, #3
 800827c:	f025 0503 	bic.w	r5, r5, #3
 8008280:	3508      	adds	r5, #8
 8008282:	2d0c      	cmp	r5, #12
 8008284:	bf38      	it	cc
 8008286:	250c      	movcc	r5, #12
 8008288:	2d00      	cmp	r5, #0
 800828a:	4606      	mov	r6, r0
 800828c:	db01      	blt.n	8008292 <_malloc_r+0x1a>
 800828e:	42a9      	cmp	r1, r5
 8008290:	d903      	bls.n	800829a <_malloc_r+0x22>
 8008292:	230c      	movs	r3, #12
 8008294:	6033      	str	r3, [r6, #0]
 8008296:	2000      	movs	r0, #0
 8008298:	bd70      	pop	{r4, r5, r6, pc}
 800829a:	f001 f8c2 	bl	8009422 <__malloc_lock>
 800829e:	4a21      	ldr	r2, [pc, #132]	; (8008324 <_malloc_r+0xac>)
 80082a0:	6814      	ldr	r4, [r2, #0]
 80082a2:	4621      	mov	r1, r4
 80082a4:	b991      	cbnz	r1, 80082cc <_malloc_r+0x54>
 80082a6:	4c20      	ldr	r4, [pc, #128]	; (8008328 <_malloc_r+0xb0>)
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	b91b      	cbnz	r3, 80082b4 <_malloc_r+0x3c>
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 fe6b 	bl	8008f88 <_sbrk_r>
 80082b2:	6020      	str	r0, [r4, #0]
 80082b4:	4629      	mov	r1, r5
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 fe66 	bl	8008f88 <_sbrk_r>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d124      	bne.n	800830a <_malloc_r+0x92>
 80082c0:	230c      	movs	r3, #12
 80082c2:	6033      	str	r3, [r6, #0]
 80082c4:	4630      	mov	r0, r6
 80082c6:	f001 f8ad 	bl	8009424 <__malloc_unlock>
 80082ca:	e7e4      	b.n	8008296 <_malloc_r+0x1e>
 80082cc:	680b      	ldr	r3, [r1, #0]
 80082ce:	1b5b      	subs	r3, r3, r5
 80082d0:	d418      	bmi.n	8008304 <_malloc_r+0x8c>
 80082d2:	2b0b      	cmp	r3, #11
 80082d4:	d90f      	bls.n	80082f6 <_malloc_r+0x7e>
 80082d6:	600b      	str	r3, [r1, #0]
 80082d8:	50cd      	str	r5, [r1, r3]
 80082da:	18cc      	adds	r4, r1, r3
 80082dc:	4630      	mov	r0, r6
 80082de:	f001 f8a1 	bl	8009424 <__malloc_unlock>
 80082e2:	f104 000b 	add.w	r0, r4, #11
 80082e6:	1d23      	adds	r3, r4, #4
 80082e8:	f020 0007 	bic.w	r0, r0, #7
 80082ec:	1ac3      	subs	r3, r0, r3
 80082ee:	d0d3      	beq.n	8008298 <_malloc_r+0x20>
 80082f0:	425a      	negs	r2, r3
 80082f2:	50e2      	str	r2, [r4, r3]
 80082f4:	e7d0      	b.n	8008298 <_malloc_r+0x20>
 80082f6:	428c      	cmp	r4, r1
 80082f8:	684b      	ldr	r3, [r1, #4]
 80082fa:	bf16      	itet	ne
 80082fc:	6063      	strne	r3, [r4, #4]
 80082fe:	6013      	streq	r3, [r2, #0]
 8008300:	460c      	movne	r4, r1
 8008302:	e7eb      	b.n	80082dc <_malloc_r+0x64>
 8008304:	460c      	mov	r4, r1
 8008306:	6849      	ldr	r1, [r1, #4]
 8008308:	e7cc      	b.n	80082a4 <_malloc_r+0x2c>
 800830a:	1cc4      	adds	r4, r0, #3
 800830c:	f024 0403 	bic.w	r4, r4, #3
 8008310:	42a0      	cmp	r0, r4
 8008312:	d005      	beq.n	8008320 <_malloc_r+0xa8>
 8008314:	1a21      	subs	r1, r4, r0
 8008316:	4630      	mov	r0, r6
 8008318:	f000 fe36 	bl	8008f88 <_sbrk_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d0cf      	beq.n	80082c0 <_malloc_r+0x48>
 8008320:	6025      	str	r5, [r4, #0]
 8008322:	e7db      	b.n	80082dc <_malloc_r+0x64>
 8008324:	200001fc 	.word	0x200001fc
 8008328:	20000200 	.word	0x20000200

0800832c <__ssputs_r>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	688e      	ldr	r6, [r1, #8]
 8008332:	429e      	cmp	r6, r3
 8008334:	4682      	mov	sl, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4690      	mov	r8, r2
 800833a:	4699      	mov	r9, r3
 800833c:	d837      	bhi.n	80083ae <__ssputs_r+0x82>
 800833e:	898a      	ldrh	r2, [r1, #12]
 8008340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008344:	d031      	beq.n	80083aa <__ssputs_r+0x7e>
 8008346:	6825      	ldr	r5, [r4, #0]
 8008348:	6909      	ldr	r1, [r1, #16]
 800834a:	1a6f      	subs	r7, r5, r1
 800834c:	6965      	ldr	r5, [r4, #20]
 800834e:	2302      	movs	r3, #2
 8008350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008354:	fb95 f5f3 	sdiv	r5, r5, r3
 8008358:	f109 0301 	add.w	r3, r9, #1
 800835c:	443b      	add	r3, r7
 800835e:	429d      	cmp	r5, r3
 8008360:	bf38      	it	cc
 8008362:	461d      	movcc	r5, r3
 8008364:	0553      	lsls	r3, r2, #21
 8008366:	d530      	bpl.n	80083ca <__ssputs_r+0x9e>
 8008368:	4629      	mov	r1, r5
 800836a:	f7ff ff85 	bl	8008278 <_malloc_r>
 800836e:	4606      	mov	r6, r0
 8008370:	b950      	cbnz	r0, 8008388 <__ssputs_r+0x5c>
 8008372:	230c      	movs	r3, #12
 8008374:	f8ca 3000 	str.w	r3, [sl]
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	463a      	mov	r2, r7
 800838a:	6921      	ldr	r1, [r4, #16]
 800838c:	f7ff fb0e 	bl	80079ac <memcpy>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	6126      	str	r6, [r4, #16]
 800839e:	6165      	str	r5, [r4, #20]
 80083a0:	443e      	add	r6, r7
 80083a2:	1bed      	subs	r5, r5, r7
 80083a4:	6026      	str	r6, [r4, #0]
 80083a6:	60a5      	str	r5, [r4, #8]
 80083a8:	464e      	mov	r6, r9
 80083aa:	454e      	cmp	r6, r9
 80083ac:	d900      	bls.n	80083b0 <__ssputs_r+0x84>
 80083ae:	464e      	mov	r6, r9
 80083b0:	4632      	mov	r2, r6
 80083b2:	4641      	mov	r1, r8
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	f001 f81b 	bl	80093f0 <memmove>
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	1b9b      	subs	r3, r3, r6
 80083be:	60a3      	str	r3, [r4, #8]
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	441e      	add	r6, r3
 80083c4:	6026      	str	r6, [r4, #0]
 80083c6:	2000      	movs	r0, #0
 80083c8:	e7dc      	b.n	8008384 <__ssputs_r+0x58>
 80083ca:	462a      	mov	r2, r5
 80083cc:	f001 f82b 	bl	8009426 <_realloc_r>
 80083d0:	4606      	mov	r6, r0
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d1e2      	bne.n	800839c <__ssputs_r+0x70>
 80083d6:	6921      	ldr	r1, [r4, #16]
 80083d8:	4650      	mov	r0, sl
 80083da:	f7ff feff 	bl	80081dc <_free_r>
 80083de:	e7c8      	b.n	8008372 <__ssputs_r+0x46>

080083e0 <_svfiprintf_r>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	461d      	mov	r5, r3
 80083e6:	898b      	ldrh	r3, [r1, #12]
 80083e8:	061f      	lsls	r7, r3, #24
 80083ea:	b09d      	sub	sp, #116	; 0x74
 80083ec:	4680      	mov	r8, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	4616      	mov	r6, r2
 80083f2:	d50f      	bpl.n	8008414 <_svfiprintf_r+0x34>
 80083f4:	690b      	ldr	r3, [r1, #16]
 80083f6:	b96b      	cbnz	r3, 8008414 <_svfiprintf_r+0x34>
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	f7ff ff3d 	bl	8008278 <_malloc_r>
 80083fe:	6020      	str	r0, [r4, #0]
 8008400:	6120      	str	r0, [r4, #16]
 8008402:	b928      	cbnz	r0, 8008410 <_svfiprintf_r+0x30>
 8008404:	230c      	movs	r3, #12
 8008406:	f8c8 3000 	str.w	r3, [r8]
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
 800840e:	e0c8      	b.n	80085a2 <_svfiprintf_r+0x1c2>
 8008410:	2340      	movs	r3, #64	; 0x40
 8008412:	6163      	str	r3, [r4, #20]
 8008414:	2300      	movs	r3, #0
 8008416:	9309      	str	r3, [sp, #36]	; 0x24
 8008418:	2320      	movs	r3, #32
 800841a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800841e:	2330      	movs	r3, #48	; 0x30
 8008420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008424:	9503      	str	r5, [sp, #12]
 8008426:	f04f 0b01 	mov.w	fp, #1
 800842a:	4637      	mov	r7, r6
 800842c:	463d      	mov	r5, r7
 800842e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008432:	b10b      	cbz	r3, 8008438 <_svfiprintf_r+0x58>
 8008434:	2b25      	cmp	r3, #37	; 0x25
 8008436:	d13e      	bne.n	80084b6 <_svfiprintf_r+0xd6>
 8008438:	ebb7 0a06 	subs.w	sl, r7, r6
 800843c:	d00b      	beq.n	8008456 <_svfiprintf_r+0x76>
 800843e:	4653      	mov	r3, sl
 8008440:	4632      	mov	r2, r6
 8008442:	4621      	mov	r1, r4
 8008444:	4640      	mov	r0, r8
 8008446:	f7ff ff71 	bl	800832c <__ssputs_r>
 800844a:	3001      	adds	r0, #1
 800844c:	f000 80a4 	beq.w	8008598 <_svfiprintf_r+0x1b8>
 8008450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008452:	4453      	add	r3, sl
 8008454:	9309      	str	r3, [sp, #36]	; 0x24
 8008456:	783b      	ldrb	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 809d 	beq.w	8008598 <_svfiprintf_r+0x1b8>
 800845e:	2300      	movs	r3, #0
 8008460:	f04f 32ff 	mov.w	r2, #4294967295
 8008464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	9307      	str	r3, [sp, #28]
 800846c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008470:	931a      	str	r3, [sp, #104]	; 0x68
 8008472:	462f      	mov	r7, r5
 8008474:	2205      	movs	r2, #5
 8008476:	f817 1b01 	ldrb.w	r1, [r7], #1
 800847a:	4850      	ldr	r0, [pc, #320]	; (80085bc <_svfiprintf_r+0x1dc>)
 800847c:	f7f7 feb0 	bl	80001e0 <memchr>
 8008480:	9b04      	ldr	r3, [sp, #16]
 8008482:	b9d0      	cbnz	r0, 80084ba <_svfiprintf_r+0xda>
 8008484:	06d9      	lsls	r1, r3, #27
 8008486:	bf44      	itt	mi
 8008488:	2220      	movmi	r2, #32
 800848a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800848e:	071a      	lsls	r2, r3, #28
 8008490:	bf44      	itt	mi
 8008492:	222b      	movmi	r2, #43	; 0x2b
 8008494:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008498:	782a      	ldrb	r2, [r5, #0]
 800849a:	2a2a      	cmp	r2, #42	; 0x2a
 800849c:	d015      	beq.n	80084ca <_svfiprintf_r+0xea>
 800849e:	9a07      	ldr	r2, [sp, #28]
 80084a0:	462f      	mov	r7, r5
 80084a2:	2000      	movs	r0, #0
 80084a4:	250a      	movs	r5, #10
 80084a6:	4639      	mov	r1, r7
 80084a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ac:	3b30      	subs	r3, #48	; 0x30
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d94d      	bls.n	800854e <_svfiprintf_r+0x16e>
 80084b2:	b1b8      	cbz	r0, 80084e4 <_svfiprintf_r+0x104>
 80084b4:	e00f      	b.n	80084d6 <_svfiprintf_r+0xf6>
 80084b6:	462f      	mov	r7, r5
 80084b8:	e7b8      	b.n	800842c <_svfiprintf_r+0x4c>
 80084ba:	4a40      	ldr	r2, [pc, #256]	; (80085bc <_svfiprintf_r+0x1dc>)
 80084bc:	1a80      	subs	r0, r0, r2
 80084be:	fa0b f000 	lsl.w	r0, fp, r0
 80084c2:	4318      	orrs	r0, r3
 80084c4:	9004      	str	r0, [sp, #16]
 80084c6:	463d      	mov	r5, r7
 80084c8:	e7d3      	b.n	8008472 <_svfiprintf_r+0x92>
 80084ca:	9a03      	ldr	r2, [sp, #12]
 80084cc:	1d11      	adds	r1, r2, #4
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	9103      	str	r1, [sp, #12]
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	db01      	blt.n	80084da <_svfiprintf_r+0xfa>
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	e004      	b.n	80084e4 <_svfiprintf_r+0x104>
 80084da:	4252      	negs	r2, r2
 80084dc:	f043 0302 	orr.w	r3, r3, #2
 80084e0:	9207      	str	r2, [sp, #28]
 80084e2:	9304      	str	r3, [sp, #16]
 80084e4:	783b      	ldrb	r3, [r7, #0]
 80084e6:	2b2e      	cmp	r3, #46	; 0x2e
 80084e8:	d10c      	bne.n	8008504 <_svfiprintf_r+0x124>
 80084ea:	787b      	ldrb	r3, [r7, #1]
 80084ec:	2b2a      	cmp	r3, #42	; 0x2a
 80084ee:	d133      	bne.n	8008558 <_svfiprintf_r+0x178>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	1d1a      	adds	r2, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	9203      	str	r2, [sp, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bfb8      	it	lt
 80084fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008500:	3702      	adds	r7, #2
 8008502:	9305      	str	r3, [sp, #20]
 8008504:	4d2e      	ldr	r5, [pc, #184]	; (80085c0 <_svfiprintf_r+0x1e0>)
 8008506:	7839      	ldrb	r1, [r7, #0]
 8008508:	2203      	movs	r2, #3
 800850a:	4628      	mov	r0, r5
 800850c:	f7f7 fe68 	bl	80001e0 <memchr>
 8008510:	b138      	cbz	r0, 8008522 <_svfiprintf_r+0x142>
 8008512:	2340      	movs	r3, #64	; 0x40
 8008514:	1b40      	subs	r0, r0, r5
 8008516:	fa03 f000 	lsl.w	r0, r3, r0
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	4303      	orrs	r3, r0
 800851e:	3701      	adds	r7, #1
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	7839      	ldrb	r1, [r7, #0]
 8008524:	4827      	ldr	r0, [pc, #156]	; (80085c4 <_svfiprintf_r+0x1e4>)
 8008526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800852a:	2206      	movs	r2, #6
 800852c:	1c7e      	adds	r6, r7, #1
 800852e:	f7f7 fe57 	bl	80001e0 <memchr>
 8008532:	2800      	cmp	r0, #0
 8008534:	d038      	beq.n	80085a8 <_svfiprintf_r+0x1c8>
 8008536:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <_svfiprintf_r+0x1e8>)
 8008538:	bb13      	cbnz	r3, 8008580 <_svfiprintf_r+0x1a0>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	3307      	adds	r3, #7
 800853e:	f023 0307 	bic.w	r3, r3, #7
 8008542:	3308      	adds	r3, #8
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	444b      	add	r3, r9
 800854a:	9309      	str	r3, [sp, #36]	; 0x24
 800854c:	e76d      	b.n	800842a <_svfiprintf_r+0x4a>
 800854e:	fb05 3202 	mla	r2, r5, r2, r3
 8008552:	2001      	movs	r0, #1
 8008554:	460f      	mov	r7, r1
 8008556:	e7a6      	b.n	80084a6 <_svfiprintf_r+0xc6>
 8008558:	2300      	movs	r3, #0
 800855a:	3701      	adds	r7, #1
 800855c:	9305      	str	r3, [sp, #20]
 800855e:	4619      	mov	r1, r3
 8008560:	250a      	movs	r5, #10
 8008562:	4638      	mov	r0, r7
 8008564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008568:	3a30      	subs	r2, #48	; 0x30
 800856a:	2a09      	cmp	r2, #9
 800856c:	d903      	bls.n	8008576 <_svfiprintf_r+0x196>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0c8      	beq.n	8008504 <_svfiprintf_r+0x124>
 8008572:	9105      	str	r1, [sp, #20]
 8008574:	e7c6      	b.n	8008504 <_svfiprintf_r+0x124>
 8008576:	fb05 2101 	mla	r1, r5, r1, r2
 800857a:	2301      	movs	r3, #1
 800857c:	4607      	mov	r7, r0
 800857e:	e7f0      	b.n	8008562 <_svfiprintf_r+0x182>
 8008580:	ab03      	add	r3, sp, #12
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	4622      	mov	r2, r4
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <_svfiprintf_r+0x1ec>)
 8008588:	a904      	add	r1, sp, #16
 800858a:	4640      	mov	r0, r8
 800858c:	f7fc f85e 	bl	800464c <_printf_float>
 8008590:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008594:	4681      	mov	r9, r0
 8008596:	d1d6      	bne.n	8008546 <_svfiprintf_r+0x166>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	065b      	lsls	r3, r3, #25
 800859c:	f53f af35 	bmi.w	800840a <_svfiprintf_r+0x2a>
 80085a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a2:	b01d      	add	sp, #116	; 0x74
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	ab03      	add	r3, sp, #12
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	4622      	mov	r2, r4
 80085ae:	4b07      	ldr	r3, [pc, #28]	; (80085cc <_svfiprintf_r+0x1ec>)
 80085b0:	a904      	add	r1, sp, #16
 80085b2:	4640      	mov	r0, r8
 80085b4:	f7fc fb00 	bl	8004bb8 <_printf_i>
 80085b8:	e7ea      	b.n	8008590 <_svfiprintf_r+0x1b0>
 80085ba:	bf00      	nop
 80085bc:	0800982c 	.word	0x0800982c
 80085c0:	08009832 	.word	0x08009832
 80085c4:	08009836 	.word	0x08009836
 80085c8:	0800464d 	.word	0x0800464d
 80085cc:	0800832d 	.word	0x0800832d

080085d0 <__sfputc_r>:
 80085d0:	6893      	ldr	r3, [r2, #8]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	b410      	push	{r4}
 80085d8:	6093      	str	r3, [r2, #8]
 80085da:	da08      	bge.n	80085ee <__sfputc_r+0x1e>
 80085dc:	6994      	ldr	r4, [r2, #24]
 80085de:	42a3      	cmp	r3, r4
 80085e0:	db01      	blt.n	80085e6 <__sfputc_r+0x16>
 80085e2:	290a      	cmp	r1, #10
 80085e4:	d103      	bne.n	80085ee <__sfputc_r+0x1e>
 80085e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ea:	f7fd bd6d 	b.w	80060c8 <__swbuf_r>
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	1c58      	adds	r0, r3, #1
 80085f2:	6010      	str	r0, [r2, #0]
 80085f4:	7019      	strb	r1, [r3, #0]
 80085f6:	4608      	mov	r0, r1
 80085f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <__sfputs_r>:
 80085fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008600:	4606      	mov	r6, r0
 8008602:	460f      	mov	r7, r1
 8008604:	4614      	mov	r4, r2
 8008606:	18d5      	adds	r5, r2, r3
 8008608:	42ac      	cmp	r4, r5
 800860a:	d101      	bne.n	8008610 <__sfputs_r+0x12>
 800860c:	2000      	movs	r0, #0
 800860e:	e007      	b.n	8008620 <__sfputs_r+0x22>
 8008610:	463a      	mov	r2, r7
 8008612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff ffda 	bl	80085d0 <__sfputc_r>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d1f3      	bne.n	8008608 <__sfputs_r+0xa>
 8008620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008624 <_vfiprintf_r>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	460c      	mov	r4, r1
 800862a:	b09d      	sub	sp, #116	; 0x74
 800862c:	4617      	mov	r7, r2
 800862e:	461d      	mov	r5, r3
 8008630:	4606      	mov	r6, r0
 8008632:	b118      	cbz	r0, 800863c <_vfiprintf_r+0x18>
 8008634:	6983      	ldr	r3, [r0, #24]
 8008636:	b90b      	cbnz	r3, 800863c <_vfiprintf_r+0x18>
 8008638:	f7fe fd4c 	bl	80070d4 <__sinit>
 800863c:	4b7c      	ldr	r3, [pc, #496]	; (8008830 <_vfiprintf_r+0x20c>)
 800863e:	429c      	cmp	r4, r3
 8008640:	d158      	bne.n	80086f4 <_vfiprintf_r+0xd0>
 8008642:	6874      	ldr	r4, [r6, #4]
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	0718      	lsls	r0, r3, #28
 8008648:	d55e      	bpl.n	8008708 <_vfiprintf_r+0xe4>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d05b      	beq.n	8008708 <_vfiprintf_r+0xe4>
 8008650:	2300      	movs	r3, #0
 8008652:	9309      	str	r3, [sp, #36]	; 0x24
 8008654:	2320      	movs	r3, #32
 8008656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800865a:	2330      	movs	r3, #48	; 0x30
 800865c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008660:	9503      	str	r5, [sp, #12]
 8008662:	f04f 0b01 	mov.w	fp, #1
 8008666:	46b8      	mov	r8, r7
 8008668:	4645      	mov	r5, r8
 800866a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800866e:	b10b      	cbz	r3, 8008674 <_vfiprintf_r+0x50>
 8008670:	2b25      	cmp	r3, #37	; 0x25
 8008672:	d154      	bne.n	800871e <_vfiprintf_r+0xfa>
 8008674:	ebb8 0a07 	subs.w	sl, r8, r7
 8008678:	d00b      	beq.n	8008692 <_vfiprintf_r+0x6e>
 800867a:	4653      	mov	r3, sl
 800867c:	463a      	mov	r2, r7
 800867e:	4621      	mov	r1, r4
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff ffbc 	bl	80085fe <__sfputs_r>
 8008686:	3001      	adds	r0, #1
 8008688:	f000 80c2 	beq.w	8008810 <_vfiprintf_r+0x1ec>
 800868c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868e:	4453      	add	r3, sl
 8008690:	9309      	str	r3, [sp, #36]	; 0x24
 8008692:	f898 3000 	ldrb.w	r3, [r8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 80ba 	beq.w	8008810 <_vfiprintf_r+0x1ec>
 800869c:	2300      	movs	r3, #0
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	9307      	str	r3, [sp, #28]
 80086aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ae:	931a      	str	r3, [sp, #104]	; 0x68
 80086b0:	46a8      	mov	r8, r5
 80086b2:	2205      	movs	r2, #5
 80086b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80086b8:	485e      	ldr	r0, [pc, #376]	; (8008834 <_vfiprintf_r+0x210>)
 80086ba:	f7f7 fd91 	bl	80001e0 <memchr>
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	bb78      	cbnz	r0, 8008722 <_vfiprintf_r+0xfe>
 80086c2:	06d9      	lsls	r1, r3, #27
 80086c4:	bf44      	itt	mi
 80086c6:	2220      	movmi	r2, #32
 80086c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086cc:	071a      	lsls	r2, r3, #28
 80086ce:	bf44      	itt	mi
 80086d0:	222b      	movmi	r2, #43	; 0x2b
 80086d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086d6:	782a      	ldrb	r2, [r5, #0]
 80086d8:	2a2a      	cmp	r2, #42	; 0x2a
 80086da:	d02a      	beq.n	8008732 <_vfiprintf_r+0x10e>
 80086dc:	9a07      	ldr	r2, [sp, #28]
 80086de:	46a8      	mov	r8, r5
 80086e0:	2000      	movs	r0, #0
 80086e2:	250a      	movs	r5, #10
 80086e4:	4641      	mov	r1, r8
 80086e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ea:	3b30      	subs	r3, #48	; 0x30
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	d969      	bls.n	80087c4 <_vfiprintf_r+0x1a0>
 80086f0:	b360      	cbz	r0, 800874c <_vfiprintf_r+0x128>
 80086f2:	e024      	b.n	800873e <_vfiprintf_r+0x11a>
 80086f4:	4b50      	ldr	r3, [pc, #320]	; (8008838 <_vfiprintf_r+0x214>)
 80086f6:	429c      	cmp	r4, r3
 80086f8:	d101      	bne.n	80086fe <_vfiprintf_r+0xda>
 80086fa:	68b4      	ldr	r4, [r6, #8]
 80086fc:	e7a2      	b.n	8008644 <_vfiprintf_r+0x20>
 80086fe:	4b4f      	ldr	r3, [pc, #316]	; (800883c <_vfiprintf_r+0x218>)
 8008700:	429c      	cmp	r4, r3
 8008702:	bf08      	it	eq
 8008704:	68f4      	ldreq	r4, [r6, #12]
 8008706:	e79d      	b.n	8008644 <_vfiprintf_r+0x20>
 8008708:	4621      	mov	r1, r4
 800870a:	4630      	mov	r0, r6
 800870c:	f7fd fd2e 	bl	800616c <__swsetup_r>
 8008710:	2800      	cmp	r0, #0
 8008712:	d09d      	beq.n	8008650 <_vfiprintf_r+0x2c>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	b01d      	add	sp, #116	; 0x74
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	46a8      	mov	r8, r5
 8008720:	e7a2      	b.n	8008668 <_vfiprintf_r+0x44>
 8008722:	4a44      	ldr	r2, [pc, #272]	; (8008834 <_vfiprintf_r+0x210>)
 8008724:	1a80      	subs	r0, r0, r2
 8008726:	fa0b f000 	lsl.w	r0, fp, r0
 800872a:	4318      	orrs	r0, r3
 800872c:	9004      	str	r0, [sp, #16]
 800872e:	4645      	mov	r5, r8
 8008730:	e7be      	b.n	80086b0 <_vfiprintf_r+0x8c>
 8008732:	9a03      	ldr	r2, [sp, #12]
 8008734:	1d11      	adds	r1, r2, #4
 8008736:	6812      	ldr	r2, [r2, #0]
 8008738:	9103      	str	r1, [sp, #12]
 800873a:	2a00      	cmp	r2, #0
 800873c:	db01      	blt.n	8008742 <_vfiprintf_r+0x11e>
 800873e:	9207      	str	r2, [sp, #28]
 8008740:	e004      	b.n	800874c <_vfiprintf_r+0x128>
 8008742:	4252      	negs	r2, r2
 8008744:	f043 0302 	orr.w	r3, r3, #2
 8008748:	9207      	str	r2, [sp, #28]
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f898 3000 	ldrb.w	r3, [r8]
 8008750:	2b2e      	cmp	r3, #46	; 0x2e
 8008752:	d10e      	bne.n	8008772 <_vfiprintf_r+0x14e>
 8008754:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008758:	2b2a      	cmp	r3, #42	; 0x2a
 800875a:	d138      	bne.n	80087ce <_vfiprintf_r+0x1aa>
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	1d1a      	adds	r2, r3, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	9203      	str	r2, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	bfb8      	it	lt
 8008768:	f04f 33ff 	movlt.w	r3, #4294967295
 800876c:	f108 0802 	add.w	r8, r8, #2
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	4d33      	ldr	r5, [pc, #204]	; (8008840 <_vfiprintf_r+0x21c>)
 8008774:	f898 1000 	ldrb.w	r1, [r8]
 8008778:	2203      	movs	r2, #3
 800877a:	4628      	mov	r0, r5
 800877c:	f7f7 fd30 	bl	80001e0 <memchr>
 8008780:	b140      	cbz	r0, 8008794 <_vfiprintf_r+0x170>
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	1b40      	subs	r0, r0, r5
 8008786:	fa03 f000 	lsl.w	r0, r3, r0
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	4303      	orrs	r3, r0
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	f898 1000 	ldrb.w	r1, [r8]
 8008798:	482a      	ldr	r0, [pc, #168]	; (8008844 <_vfiprintf_r+0x220>)
 800879a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800879e:	2206      	movs	r2, #6
 80087a0:	f108 0701 	add.w	r7, r8, #1
 80087a4:	f7f7 fd1c 	bl	80001e0 <memchr>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d037      	beq.n	800881c <_vfiprintf_r+0x1f8>
 80087ac:	4b26      	ldr	r3, [pc, #152]	; (8008848 <_vfiprintf_r+0x224>)
 80087ae:	bb1b      	cbnz	r3, 80087f8 <_vfiprintf_r+0x1d4>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	3307      	adds	r3, #7
 80087b4:	f023 0307 	bic.w	r3, r3, #7
 80087b8:	3308      	adds	r3, #8
 80087ba:	9303      	str	r3, [sp, #12]
 80087bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087be:	444b      	add	r3, r9
 80087c0:	9309      	str	r3, [sp, #36]	; 0x24
 80087c2:	e750      	b.n	8008666 <_vfiprintf_r+0x42>
 80087c4:	fb05 3202 	mla	r2, r5, r2, r3
 80087c8:	2001      	movs	r0, #1
 80087ca:	4688      	mov	r8, r1
 80087cc:	e78a      	b.n	80086e4 <_vfiprintf_r+0xc0>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f108 0801 	add.w	r8, r8, #1
 80087d4:	9305      	str	r3, [sp, #20]
 80087d6:	4619      	mov	r1, r3
 80087d8:	250a      	movs	r5, #10
 80087da:	4640      	mov	r0, r8
 80087dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e0:	3a30      	subs	r2, #48	; 0x30
 80087e2:	2a09      	cmp	r2, #9
 80087e4:	d903      	bls.n	80087ee <_vfiprintf_r+0x1ca>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0c3      	beq.n	8008772 <_vfiprintf_r+0x14e>
 80087ea:	9105      	str	r1, [sp, #20]
 80087ec:	e7c1      	b.n	8008772 <_vfiprintf_r+0x14e>
 80087ee:	fb05 2101 	mla	r1, r5, r1, r2
 80087f2:	2301      	movs	r3, #1
 80087f4:	4680      	mov	r8, r0
 80087f6:	e7f0      	b.n	80087da <_vfiprintf_r+0x1b6>
 80087f8:	ab03      	add	r3, sp, #12
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4622      	mov	r2, r4
 80087fe:	4b13      	ldr	r3, [pc, #76]	; (800884c <_vfiprintf_r+0x228>)
 8008800:	a904      	add	r1, sp, #16
 8008802:	4630      	mov	r0, r6
 8008804:	f7fb ff22 	bl	800464c <_printf_float>
 8008808:	f1b0 3fff 	cmp.w	r0, #4294967295
 800880c:	4681      	mov	r9, r0
 800880e:	d1d5      	bne.n	80087bc <_vfiprintf_r+0x198>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	065b      	lsls	r3, r3, #25
 8008814:	f53f af7e 	bmi.w	8008714 <_vfiprintf_r+0xf0>
 8008818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800881a:	e77d      	b.n	8008718 <_vfiprintf_r+0xf4>
 800881c:	ab03      	add	r3, sp, #12
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4622      	mov	r2, r4
 8008822:	4b0a      	ldr	r3, [pc, #40]	; (800884c <_vfiprintf_r+0x228>)
 8008824:	a904      	add	r1, sp, #16
 8008826:	4630      	mov	r0, r6
 8008828:	f7fc f9c6 	bl	8004bb8 <_printf_i>
 800882c:	e7ec      	b.n	8008808 <_vfiprintf_r+0x1e4>
 800882e:	bf00      	nop
 8008830:	080096e0 	.word	0x080096e0
 8008834:	0800982c 	.word	0x0800982c
 8008838:	08009700 	.word	0x08009700
 800883c:	080096c0 	.word	0x080096c0
 8008840:	08009832 	.word	0x08009832
 8008844:	08009836 	.word	0x08009836
 8008848:	0800464d 	.word	0x0800464d
 800884c:	080085ff 	.word	0x080085ff

08008850 <__svfiscanf_r>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008858:	460c      	mov	r4, r1
 800885a:	2100      	movs	r1, #0
 800885c:	9144      	str	r1, [sp, #272]	; 0x110
 800885e:	9145      	str	r1, [sp, #276]	; 0x114
 8008860:	499f      	ldr	r1, [pc, #636]	; (8008ae0 <__svfiscanf_r+0x290>)
 8008862:	91a0      	str	r1, [sp, #640]	; 0x280
 8008864:	f10d 0804 	add.w	r8, sp, #4
 8008868:	499e      	ldr	r1, [pc, #632]	; (8008ae4 <__svfiscanf_r+0x294>)
 800886a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008ae8 <__svfiscanf_r+0x298>
 800886e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008872:	4606      	mov	r6, r0
 8008874:	4692      	mov	sl, r2
 8008876:	91a1      	str	r1, [sp, #644]	; 0x284
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	270a      	movs	r7, #10
 800887c:	f89a 3000 	ldrb.w	r3, [sl]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 812a 	beq.w	8008ada <__svfiscanf_r+0x28a>
 8008886:	4655      	mov	r5, sl
 8008888:	f7fe fff4 	bl	8007874 <__locale_ctype_ptr>
 800888c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008890:	4458      	add	r0, fp
 8008892:	7843      	ldrb	r3, [r0, #1]
 8008894:	f013 0308 	ands.w	r3, r3, #8
 8008898:	d01c      	beq.n	80088d4 <__svfiscanf_r+0x84>
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dd12      	ble.n	80088c6 <__svfiscanf_r+0x76>
 80088a0:	f7fe ffe8 	bl	8007874 <__locale_ctype_ptr>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	4410      	add	r0, r2
 80088aa:	7842      	ldrb	r2, [r0, #1]
 80088ac:	0712      	lsls	r2, r2, #28
 80088ae:	d401      	bmi.n	80088b4 <__svfiscanf_r+0x64>
 80088b0:	46aa      	mov	sl, r5
 80088b2:	e7e3      	b.n	800887c <__svfiscanf_r+0x2c>
 80088b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088b6:	3201      	adds	r2, #1
 80088b8:	9245      	str	r2, [sp, #276]	; 0x114
 80088ba:	6862      	ldr	r2, [r4, #4]
 80088bc:	3301      	adds	r3, #1
 80088be:	3a01      	subs	r2, #1
 80088c0:	6062      	str	r2, [r4, #4]
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	e7e9      	b.n	800889a <__svfiscanf_r+0x4a>
 80088c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088c8:	4621      	mov	r1, r4
 80088ca:	4630      	mov	r0, r6
 80088cc:	4798      	blx	r3
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d0e6      	beq.n	80088a0 <__svfiscanf_r+0x50>
 80088d2:	e7ed      	b.n	80088b0 <__svfiscanf_r+0x60>
 80088d4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80088d8:	f040 8082 	bne.w	80089e0 <__svfiscanf_r+0x190>
 80088dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80088de:	9341      	str	r3, [sp, #260]	; 0x104
 80088e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80088e4:	2b2a      	cmp	r3, #42	; 0x2a
 80088e6:	d103      	bne.n	80088f0 <__svfiscanf_r+0xa0>
 80088e8:	2310      	movs	r3, #16
 80088ea:	9341      	str	r3, [sp, #260]	; 0x104
 80088ec:	f10a 0502 	add.w	r5, sl, #2
 80088f0:	46aa      	mov	sl, r5
 80088f2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80088f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80088fa:	2a09      	cmp	r2, #9
 80088fc:	d922      	bls.n	8008944 <__svfiscanf_r+0xf4>
 80088fe:	2203      	movs	r2, #3
 8008900:	4879      	ldr	r0, [pc, #484]	; (8008ae8 <__svfiscanf_r+0x298>)
 8008902:	f7f7 fc6d 	bl	80001e0 <memchr>
 8008906:	b138      	cbz	r0, 8008918 <__svfiscanf_r+0xc8>
 8008908:	eba0 0309 	sub.w	r3, r0, r9
 800890c:	2001      	movs	r0, #1
 800890e:	4098      	lsls	r0, r3
 8008910:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008912:	4318      	orrs	r0, r3
 8008914:	9041      	str	r0, [sp, #260]	; 0x104
 8008916:	46aa      	mov	sl, r5
 8008918:	f89a 3000 	ldrb.w	r3, [sl]
 800891c:	2b67      	cmp	r3, #103	; 0x67
 800891e:	f10a 0501 	add.w	r5, sl, #1
 8008922:	d82b      	bhi.n	800897c <__svfiscanf_r+0x12c>
 8008924:	2b65      	cmp	r3, #101	; 0x65
 8008926:	f080 809f 	bcs.w	8008a68 <__svfiscanf_r+0x218>
 800892a:	2b47      	cmp	r3, #71	; 0x47
 800892c:	d810      	bhi.n	8008950 <__svfiscanf_r+0x100>
 800892e:	2b45      	cmp	r3, #69	; 0x45
 8008930:	f080 809a 	bcs.w	8008a68 <__svfiscanf_r+0x218>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d06c      	beq.n	8008a12 <__svfiscanf_r+0x1c2>
 8008938:	2b25      	cmp	r3, #37	; 0x25
 800893a:	d051      	beq.n	80089e0 <__svfiscanf_r+0x190>
 800893c:	2303      	movs	r3, #3
 800893e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008940:	9742      	str	r7, [sp, #264]	; 0x108
 8008942:	e027      	b.n	8008994 <__svfiscanf_r+0x144>
 8008944:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008946:	fb07 1303 	mla	r3, r7, r3, r1
 800894a:	3b30      	subs	r3, #48	; 0x30
 800894c:	9343      	str	r3, [sp, #268]	; 0x10c
 800894e:	e7cf      	b.n	80088f0 <__svfiscanf_r+0xa0>
 8008950:	2b5b      	cmp	r3, #91	; 0x5b
 8008952:	d06a      	beq.n	8008a2a <__svfiscanf_r+0x1da>
 8008954:	d80c      	bhi.n	8008970 <__svfiscanf_r+0x120>
 8008956:	2b58      	cmp	r3, #88	; 0x58
 8008958:	d1f0      	bne.n	800893c <__svfiscanf_r+0xec>
 800895a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800895c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008960:	9241      	str	r2, [sp, #260]	; 0x104
 8008962:	2210      	movs	r2, #16
 8008964:	9242      	str	r2, [sp, #264]	; 0x108
 8008966:	2b6e      	cmp	r3, #110	; 0x6e
 8008968:	bf8c      	ite	hi
 800896a:	2304      	movhi	r3, #4
 800896c:	2303      	movls	r3, #3
 800896e:	e010      	b.n	8008992 <__svfiscanf_r+0x142>
 8008970:	2b63      	cmp	r3, #99	; 0x63
 8008972:	d065      	beq.n	8008a40 <__svfiscanf_r+0x1f0>
 8008974:	2b64      	cmp	r3, #100	; 0x64
 8008976:	d1e1      	bne.n	800893c <__svfiscanf_r+0xec>
 8008978:	9742      	str	r7, [sp, #264]	; 0x108
 800897a:	e7f4      	b.n	8008966 <__svfiscanf_r+0x116>
 800897c:	2b70      	cmp	r3, #112	; 0x70
 800897e:	d04b      	beq.n	8008a18 <__svfiscanf_r+0x1c8>
 8008980:	d826      	bhi.n	80089d0 <__svfiscanf_r+0x180>
 8008982:	2b6e      	cmp	r3, #110	; 0x6e
 8008984:	d062      	beq.n	8008a4c <__svfiscanf_r+0x1fc>
 8008986:	d84c      	bhi.n	8008a22 <__svfiscanf_r+0x1d2>
 8008988:	2b69      	cmp	r3, #105	; 0x69
 800898a:	d1d7      	bne.n	800893c <__svfiscanf_r+0xec>
 800898c:	2300      	movs	r3, #0
 800898e:	9342      	str	r3, [sp, #264]	; 0x108
 8008990:	2303      	movs	r3, #3
 8008992:	9347      	str	r3, [sp, #284]	; 0x11c
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd68      	ble.n	8008a6c <__svfiscanf_r+0x21c>
 800899a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800899c:	0659      	lsls	r1, r3, #25
 800899e:	d407      	bmi.n	80089b0 <__svfiscanf_r+0x160>
 80089a0:	f7fe ff68 	bl	8007874 <__locale_ctype_ptr>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	4410      	add	r0, r2
 80089aa:	7842      	ldrb	r2, [r0, #1]
 80089ac:	0712      	lsls	r2, r2, #28
 80089ae:	d464      	bmi.n	8008a7a <__svfiscanf_r+0x22a>
 80089b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	dc73      	bgt.n	8008a9e <__svfiscanf_r+0x24e>
 80089b6:	466b      	mov	r3, sp
 80089b8:	4622      	mov	r2, r4
 80089ba:	a941      	add	r1, sp, #260	; 0x104
 80089bc:	4630      	mov	r0, r6
 80089be:	f000 f8bf 	bl	8008b40 <_scanf_chars>
 80089c2:	2801      	cmp	r0, #1
 80089c4:	f000 8089 	beq.w	8008ada <__svfiscanf_r+0x28a>
 80089c8:	2802      	cmp	r0, #2
 80089ca:	f47f af71 	bne.w	80088b0 <__svfiscanf_r+0x60>
 80089ce:	e01d      	b.n	8008a0c <__svfiscanf_r+0x1bc>
 80089d0:	2b75      	cmp	r3, #117	; 0x75
 80089d2:	d0d1      	beq.n	8008978 <__svfiscanf_r+0x128>
 80089d4:	2b78      	cmp	r3, #120	; 0x78
 80089d6:	d0c0      	beq.n	800895a <__svfiscanf_r+0x10a>
 80089d8:	2b73      	cmp	r3, #115	; 0x73
 80089da:	d1af      	bne.n	800893c <__svfiscanf_r+0xec>
 80089dc:	2302      	movs	r3, #2
 80089de:	e7d8      	b.n	8008992 <__svfiscanf_r+0x142>
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dd0c      	ble.n	8008a00 <__svfiscanf_r+0x1b0>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	455a      	cmp	r2, fp
 80089ec:	d175      	bne.n	8008ada <__svfiscanf_r+0x28a>
 80089ee:	3301      	adds	r3, #1
 80089f0:	6862      	ldr	r2, [r4, #4]
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80089f6:	3a01      	subs	r2, #1
 80089f8:	3301      	adds	r3, #1
 80089fa:	6062      	str	r2, [r4, #4]
 80089fc:	9345      	str	r3, [sp, #276]	; 0x114
 80089fe:	e757      	b.n	80088b0 <__svfiscanf_r+0x60>
 8008a00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a02:	4621      	mov	r1, r4
 8008a04:	4630      	mov	r0, r6
 8008a06:	4798      	blx	r3
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d0ec      	beq.n	80089e6 <__svfiscanf_r+0x196>
 8008a0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d159      	bne.n	8008ac6 <__svfiscanf_r+0x276>
 8008a12:	f04f 30ff 	mov.w	r0, #4294967295
 8008a16:	e05c      	b.n	8008ad2 <__svfiscanf_r+0x282>
 8008a18:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a1a:	f042 0220 	orr.w	r2, r2, #32
 8008a1e:	9241      	str	r2, [sp, #260]	; 0x104
 8008a20:	e79b      	b.n	800895a <__svfiscanf_r+0x10a>
 8008a22:	2308      	movs	r3, #8
 8008a24:	9342      	str	r3, [sp, #264]	; 0x108
 8008a26:	2304      	movs	r3, #4
 8008a28:	e7b3      	b.n	8008992 <__svfiscanf_r+0x142>
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	f000 fabb 	bl	8008fa8 <__sccl>
 8008a32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a38:	9341      	str	r3, [sp, #260]	; 0x104
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e7a8      	b.n	8008992 <__svfiscanf_r+0x142>
 8008a40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a46:	9341      	str	r3, [sp, #260]	; 0x104
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e7a2      	b.n	8008992 <__svfiscanf_r+0x142>
 8008a4c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008a4e:	06c3      	lsls	r3, r0, #27
 8008a50:	f53f af2e 	bmi.w	80088b0 <__svfiscanf_r+0x60>
 8008a54:	9b00      	ldr	r3, [sp, #0]
 8008a56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a58:	1d19      	adds	r1, r3, #4
 8008a5a:	9100      	str	r1, [sp, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	07c0      	lsls	r0, r0, #31
 8008a60:	bf4c      	ite	mi
 8008a62:	801a      	strhmi	r2, [r3, #0]
 8008a64:	601a      	strpl	r2, [r3, #0]
 8008a66:	e723      	b.n	80088b0 <__svfiscanf_r+0x60>
 8008a68:	2305      	movs	r3, #5
 8008a6a:	e792      	b.n	8008992 <__svfiscanf_r+0x142>
 8008a6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4630      	mov	r0, r6
 8008a72:	4798      	blx	r3
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d090      	beq.n	800899a <__svfiscanf_r+0x14a>
 8008a78:	e7c8      	b.n	8008a0c <__svfiscanf_r+0x1bc>
 8008a7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a7c:	3201      	adds	r2, #1
 8008a7e:	9245      	str	r2, [sp, #276]	; 0x114
 8008a80:	6862      	ldr	r2, [r4, #4]
 8008a82:	3a01      	subs	r2, #1
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	6062      	str	r2, [r4, #4]
 8008a88:	dd02      	ble.n	8008a90 <__svfiscanf_r+0x240>
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	e787      	b.n	80089a0 <__svfiscanf_r+0x150>
 8008a90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a92:	4621      	mov	r1, r4
 8008a94:	4630      	mov	r0, r6
 8008a96:	4798      	blx	r3
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d081      	beq.n	80089a0 <__svfiscanf_r+0x150>
 8008a9c:	e7b6      	b.n	8008a0c <__svfiscanf_r+0x1bc>
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	dc06      	bgt.n	8008ab0 <__svfiscanf_r+0x260>
 8008aa2:	466b      	mov	r3, sp
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	a941      	add	r1, sp, #260	; 0x104
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f8ad 	bl	8008c08 <_scanf_i>
 8008aae:	e788      	b.n	80089c2 <__svfiscanf_r+0x172>
 8008ab0:	4b0e      	ldr	r3, [pc, #56]	; (8008aec <__svfiscanf_r+0x29c>)
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f43f aefc 	beq.w	80088b0 <__svfiscanf_r+0x60>
 8008ab8:	466b      	mov	r3, sp
 8008aba:	4622      	mov	r2, r4
 8008abc:	a941      	add	r1, sp, #260	; 0x104
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7fc f98c 	bl	8004ddc <_scanf_float>
 8008ac4:	e77d      	b.n	80089c2 <__svfiscanf_r+0x172>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008acc:	bf18      	it	ne
 8008ace:	f04f 30ff 	movne.w	r0, #4294967295
 8008ad2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008adc:	e7f9      	b.n	8008ad2 <__svfiscanf_r+0x282>
 8008ade:	bf00      	nop
 8008ae0:	08009245 	.word	0x08009245
 8008ae4:	08008e71 	.word	0x08008e71
 8008ae8:	08009832 	.word	0x08009832
 8008aec:	08004ddd 	.word	0x08004ddd

08008af0 <_vfiscanf_r>:
 8008af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af4:	460c      	mov	r4, r1
 8008af6:	4616      	mov	r6, r2
 8008af8:	461f      	mov	r7, r3
 8008afa:	4605      	mov	r5, r0
 8008afc:	b118      	cbz	r0, 8008b06 <_vfiscanf_r+0x16>
 8008afe:	6983      	ldr	r3, [r0, #24]
 8008b00:	b90b      	cbnz	r3, 8008b06 <_vfiscanf_r+0x16>
 8008b02:	f7fe fae7 	bl	80070d4 <__sinit>
 8008b06:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <_vfiscanf_r+0x44>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	d108      	bne.n	8008b1e <_vfiscanf_r+0x2e>
 8008b0c:	686c      	ldr	r4, [r5, #4]
 8008b0e:	463b      	mov	r3, r7
 8008b10:	4632      	mov	r2, r6
 8008b12:	4621      	mov	r1, r4
 8008b14:	4628      	mov	r0, r5
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f7ff be99 	b.w	8008850 <__svfiscanf_r>
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <_vfiscanf_r+0x48>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d101      	bne.n	8008b28 <_vfiscanf_r+0x38>
 8008b24:	68ac      	ldr	r4, [r5, #8]
 8008b26:	e7f2      	b.n	8008b0e <_vfiscanf_r+0x1e>
 8008b28:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <_vfiscanf_r+0x4c>)
 8008b2a:	429c      	cmp	r4, r3
 8008b2c:	bf08      	it	eq
 8008b2e:	68ec      	ldreq	r4, [r5, #12]
 8008b30:	e7ed      	b.n	8008b0e <_vfiscanf_r+0x1e>
 8008b32:	bf00      	nop
 8008b34:	080096e0 	.word	0x080096e0
 8008b38:	08009700 	.word	0x08009700
 8008b3c:	080096c0 	.word	0x080096c0

08008b40 <_scanf_chars>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	4615      	mov	r5, r2
 8008b46:	688a      	ldr	r2, [r1, #8]
 8008b48:	4680      	mov	r8, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b932      	cbnz	r2, 8008b5c <_scanf_chars+0x1c>
 8008b4e:	698a      	ldr	r2, [r1, #24]
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	bf14      	ite	ne
 8008b54:	f04f 32ff 	movne.w	r2, #4294967295
 8008b58:	2201      	moveq	r2, #1
 8008b5a:	608a      	str	r2, [r1, #8]
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	06d1      	lsls	r1, r2, #27
 8008b60:	bf5f      	itttt	pl
 8008b62:	681a      	ldrpl	r2, [r3, #0]
 8008b64:	1d11      	addpl	r1, r2, #4
 8008b66:	6019      	strpl	r1, [r3, #0]
 8008b68:	6817      	ldrpl	r7, [r2, #0]
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	69a3      	ldr	r3, [r4, #24]
 8008b6e:	b1db      	cbz	r3, 8008ba8 <_scanf_chars+0x68>
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d107      	bne.n	8008b84 <_scanf_chars+0x44>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	6962      	ldr	r2, [r4, #20]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	5cd3      	ldrb	r3, [r2, r3]
 8008b7c:	b9a3      	cbnz	r3, 8008ba8 <_scanf_chars+0x68>
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	d132      	bne.n	8008be8 <_scanf_chars+0xa8>
 8008b82:	e006      	b.n	8008b92 <_scanf_chars+0x52>
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d007      	beq.n	8008b98 <_scanf_chars+0x58>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	d12d      	bne.n	8008be8 <_scanf_chars+0xa8>
 8008b8c:	69a3      	ldr	r3, [r4, #24]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d12a      	bne.n	8008be8 <_scanf_chars+0xa8>
 8008b92:	2001      	movs	r0, #1
 8008b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b98:	f7fe fe6c 	bl	8007874 <__locale_ctype_ptr>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	4418      	add	r0, r3
 8008ba2:	7843      	ldrb	r3, [r0, #1]
 8008ba4:	071b      	lsls	r3, r3, #28
 8008ba6:	d4ef      	bmi.n	8008b88 <_scanf_chars+0x48>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	06da      	lsls	r2, r3, #27
 8008bac:	bf5e      	ittt	pl
 8008bae:	682b      	ldrpl	r3, [r5, #0]
 8008bb0:	781b      	ldrbpl	r3, [r3, #0]
 8008bb2:	703b      	strbpl	r3, [r7, #0]
 8008bb4:	682a      	ldr	r2, [r5, #0]
 8008bb6:	686b      	ldr	r3, [r5, #4]
 8008bb8:	f102 0201 	add.w	r2, r2, #1
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	68a2      	ldr	r2, [r4, #8]
 8008bc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bc4:	f102 32ff 	add.w	r2, r2, #4294967295
 8008bc8:	606b      	str	r3, [r5, #4]
 8008bca:	f106 0601 	add.w	r6, r6, #1
 8008bce:	bf58      	it	pl
 8008bd0:	3701      	addpl	r7, #1
 8008bd2:	60a2      	str	r2, [r4, #8]
 8008bd4:	b142      	cbz	r2, 8008be8 <_scanf_chars+0xa8>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dcc8      	bgt.n	8008b6c <_scanf_chars+0x2c>
 8008bda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bde:	4629      	mov	r1, r5
 8008be0:	4640      	mov	r0, r8
 8008be2:	4798      	blx	r3
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d0c1      	beq.n	8008b6c <_scanf_chars+0x2c>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	f013 0310 	ands.w	r3, r3, #16
 8008bee:	d105      	bne.n	8008bfc <_scanf_chars+0xbc>
 8008bf0:	68e2      	ldr	r2, [r4, #12]
 8008bf2:	3201      	adds	r2, #1
 8008bf4:	60e2      	str	r2, [r4, #12]
 8008bf6:	69a2      	ldr	r2, [r4, #24]
 8008bf8:	b102      	cbz	r2, 8008bfc <_scanf_chars+0xbc>
 8008bfa:	703b      	strb	r3, [r7, #0]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	441e      	add	r6, r3
 8008c00:	6126      	str	r6, [r4, #16]
 8008c02:	2000      	movs	r0, #0
 8008c04:	e7c6      	b.n	8008b94 <_scanf_chars+0x54>
	...

08008c08 <_scanf_i>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	469a      	mov	sl, r3
 8008c0e:	4b74      	ldr	r3, [pc, #464]	; (8008de0 <_scanf_i+0x1d8>)
 8008c10:	460c      	mov	r4, r1
 8008c12:	4683      	mov	fp, r0
 8008c14:	4616      	mov	r6, r2
 8008c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	ab03      	add	r3, sp, #12
 8008c1e:	68a7      	ldr	r7, [r4, #8]
 8008c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008c24:	4b6f      	ldr	r3, [pc, #444]	; (8008de4 <_scanf_i+0x1dc>)
 8008c26:	69a1      	ldr	r1, [r4, #24]
 8008c28:	4a6f      	ldr	r2, [pc, #444]	; (8008de8 <_scanf_i+0x1e0>)
 8008c2a:	2903      	cmp	r1, #3
 8008c2c:	bf08      	it	eq
 8008c2e:	461a      	moveq	r2, r3
 8008c30:	1e7b      	subs	r3, r7, #1
 8008c32:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008c36:	bf84      	itt	hi
 8008c38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c3c:	60a3      	strhi	r3, [r4, #8]
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	9200      	str	r2, [sp, #0]
 8008c42:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008c46:	bf88      	it	hi
 8008c48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c4c:	f104 091c 	add.w	r9, r4, #28
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bf8c      	ite	hi
 8008c54:	197f      	addhi	r7, r7, r5
 8008c56:	2700      	movls	r7, #0
 8008c58:	464b      	mov	r3, r9
 8008c5a:	f04f 0800 	mov.w	r8, #0
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	6831      	ldr	r1, [r6, #0]
 8008c62:	ab03      	add	r3, sp, #12
 8008c64:	2202      	movs	r2, #2
 8008c66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008c6a:	7809      	ldrb	r1, [r1, #0]
 8008c6c:	f7f7 fab8 	bl	80001e0 <memchr>
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	b330      	cbz	r0, 8008cc2 <_scanf_i+0xba>
 8008c74:	f1b8 0f01 	cmp.w	r8, #1
 8008c78:	d15a      	bne.n	8008d30 <_scanf_i+0x128>
 8008c7a:	6862      	ldr	r2, [r4, #4]
 8008c7c:	b92a      	cbnz	r2, 8008c8a <_scanf_i+0x82>
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	2108      	movs	r1, #8
 8008c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c86:	6061      	str	r1, [r4, #4]
 8008c88:	6022      	str	r2, [r4, #0]
 8008c8a:	6822      	ldr	r2, [r4, #0]
 8008c8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008c90:	6022      	str	r2, [r4, #0]
 8008c92:	68a2      	ldr	r2, [r4, #8]
 8008c94:	1e51      	subs	r1, r2, #1
 8008c96:	60a1      	str	r1, [r4, #8]
 8008c98:	b19a      	cbz	r2, 8008cc2 <_scanf_i+0xba>
 8008c9a:	6832      	ldr	r2, [r6, #0]
 8008c9c:	1c51      	adds	r1, r2, #1
 8008c9e:	6031      	str	r1, [r6, #0]
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	1c5d      	adds	r5, r3, #1
 8008ca6:	6873      	ldr	r3, [r6, #4]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	6073      	str	r3, [r6, #4]
 8008cae:	dc07      	bgt.n	8008cc0 <_scanf_i+0xb8>
 8008cb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4658      	mov	r0, fp
 8008cb8:	4798      	blx	r3
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f040 8086 	bne.w	8008dcc <_scanf_i+0x1c4>
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	f1b8 0f03 	cmp.w	r8, #3
 8008cca:	d1c8      	bne.n	8008c5e <_scanf_i+0x56>
 8008ccc:	6862      	ldr	r2, [r4, #4]
 8008cce:	b90a      	cbnz	r2, 8008cd4 <_scanf_i+0xcc>
 8008cd0:	220a      	movs	r2, #10
 8008cd2:	6062      	str	r2, [r4, #4]
 8008cd4:	6862      	ldr	r2, [r4, #4]
 8008cd6:	4945      	ldr	r1, [pc, #276]	; (8008dec <_scanf_i+0x1e4>)
 8008cd8:	6960      	ldr	r0, [r4, #20]
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	1a89      	subs	r1, r1, r2
 8008cde:	f000 f963 	bl	8008fa8 <__sccl>
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	f04f 0800 	mov.w	r8, #0
 8008ce8:	461d      	mov	r5, r3
 8008cea:	68a3      	ldr	r3, [r4, #8]
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d03a      	beq.n	8008d68 <_scanf_i+0x160>
 8008cf2:	6831      	ldr	r1, [r6, #0]
 8008cf4:	6960      	ldr	r0, [r4, #20]
 8008cf6:	f891 c000 	ldrb.w	ip, [r1]
 8008cfa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d032      	beq.n	8008d68 <_scanf_i+0x160>
 8008d02:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008d06:	d121      	bne.n	8008d4c <_scanf_i+0x144>
 8008d08:	0510      	lsls	r0, r2, #20
 8008d0a:	d51f      	bpl.n	8008d4c <_scanf_i+0x144>
 8008d0c:	f108 0801 	add.w	r8, r8, #1
 8008d10:	b117      	cbz	r7, 8008d18 <_scanf_i+0x110>
 8008d12:	3301      	adds	r3, #1
 8008d14:	3f01      	subs	r7, #1
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	6873      	ldr	r3, [r6, #4]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	6073      	str	r3, [r6, #4]
 8008d20:	dd1b      	ble.n	8008d5a <_scanf_i+0x152>
 8008d22:	6833      	ldr	r3, [r6, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	6033      	str	r3, [r6, #0]
 8008d28:	68a3      	ldr	r3, [r4, #8]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	e7dc      	b.n	8008cea <_scanf_i+0xe2>
 8008d30:	f1b8 0f02 	cmp.w	r8, #2
 8008d34:	d1ad      	bne.n	8008c92 <_scanf_i+0x8a>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008d3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d40:	d1bf      	bne.n	8008cc2 <_scanf_i+0xba>
 8008d42:	2110      	movs	r1, #16
 8008d44:	6061      	str	r1, [r4, #4]
 8008d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d4a:	e7a1      	b.n	8008c90 <_scanf_i+0x88>
 8008d4c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008d50:	6022      	str	r2, [r4, #0]
 8008d52:	780b      	ldrb	r3, [r1, #0]
 8008d54:	702b      	strb	r3, [r5, #0]
 8008d56:	3501      	adds	r5, #1
 8008d58:	e7de      	b.n	8008d18 <_scanf_i+0x110>
 8008d5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4658      	mov	r0, fp
 8008d62:	4798      	blx	r3
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d0df      	beq.n	8008d28 <_scanf_i+0x120>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	05d9      	lsls	r1, r3, #23
 8008d6c:	d50c      	bpl.n	8008d88 <_scanf_i+0x180>
 8008d6e:	454d      	cmp	r5, r9
 8008d70:	d908      	bls.n	8008d84 <_scanf_i+0x17c>
 8008d72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	4798      	blx	r3
 8008d80:	1e6f      	subs	r7, r5, #1
 8008d82:	463d      	mov	r5, r7
 8008d84:	454d      	cmp	r5, r9
 8008d86:	d029      	beq.n	8008ddc <_scanf_i+0x1d4>
 8008d88:	6822      	ldr	r2, [r4, #0]
 8008d8a:	f012 0210 	ands.w	r2, r2, #16
 8008d8e:	d113      	bne.n	8008db8 <_scanf_i+0x1b0>
 8008d90:	702a      	strb	r2, [r5, #0]
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	9e00      	ldr	r6, [sp, #0]
 8008d96:	4649      	mov	r1, r9
 8008d98:	4658      	mov	r0, fp
 8008d9a:	47b0      	blx	r6
 8008d9c:	f8da 3000 	ldr.w	r3, [sl]
 8008da0:	6821      	ldr	r1, [r4, #0]
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	f8ca 2000 	str.w	r2, [sl]
 8008da8:	f011 0f20 	tst.w	r1, #32
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	d010      	beq.n	8008dd2 <_scanf_i+0x1ca>
 8008db0:	6018      	str	r0, [r3, #0]
 8008db2:	68e3      	ldr	r3, [r4, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60e3      	str	r3, [r4, #12]
 8008db8:	eba5 0509 	sub.w	r5, r5, r9
 8008dbc:	44a8      	add	r8, r5
 8008dbe:	6925      	ldr	r5, [r4, #16]
 8008dc0:	4445      	add	r5, r8
 8008dc2:	6125      	str	r5, [r4, #16]
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	b007      	add	sp, #28
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dcc:	f04f 0800 	mov.w	r8, #0
 8008dd0:	e7ca      	b.n	8008d68 <_scanf_i+0x160>
 8008dd2:	07ca      	lsls	r2, r1, #31
 8008dd4:	bf4c      	ite	mi
 8008dd6:	8018      	strhmi	r0, [r3, #0]
 8008dd8:	6018      	strpl	r0, [r3, #0]
 8008dda:	e7ea      	b.n	8008db2 <_scanf_i+0x1aa>
 8008ddc:	2001      	movs	r0, #1
 8008dde:	e7f2      	b.n	8008dc6 <_scanf_i+0x1be>
 8008de0:	080095d0 	.word	0x080095d0
 8008de4:	08006079 	.word	0x08006079
 8008de8:	080091ad 	.word	0x080091ad
 8008dec:	0800984d 	.word	0x0800984d

08008df0 <_putc_r>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	460d      	mov	r5, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	4606      	mov	r6, r0
 8008df8:	b118      	cbz	r0, 8008e02 <_putc_r+0x12>
 8008dfa:	6983      	ldr	r3, [r0, #24]
 8008dfc:	b90b      	cbnz	r3, 8008e02 <_putc_r+0x12>
 8008dfe:	f7fe f969 	bl	80070d4 <__sinit>
 8008e02:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <_putc_r+0x60>)
 8008e04:	429c      	cmp	r4, r3
 8008e06:	d112      	bne.n	8008e2e <_putc_r+0x3e>
 8008e08:	6874      	ldr	r4, [r6, #4]
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	60a3      	str	r3, [r4, #8]
 8008e12:	da16      	bge.n	8008e42 <_putc_r+0x52>
 8008e14:	69a2      	ldr	r2, [r4, #24]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	db02      	blt.n	8008e20 <_putc_r+0x30>
 8008e1a:	b2eb      	uxtb	r3, r5
 8008e1c:	2b0a      	cmp	r3, #10
 8008e1e:	d110      	bne.n	8008e42 <_putc_r+0x52>
 8008e20:	4622      	mov	r2, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	4630      	mov	r0, r6
 8008e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e2a:	f7fd b94d 	b.w	80060c8 <__swbuf_r>
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <_putc_r+0x64>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	d101      	bne.n	8008e38 <_putc_r+0x48>
 8008e34:	68b4      	ldr	r4, [r6, #8]
 8008e36:	e7e8      	b.n	8008e0a <_putc_r+0x1a>
 8008e38:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <_putc_r+0x68>)
 8008e3a:	429c      	cmp	r4, r3
 8008e3c:	bf08      	it	eq
 8008e3e:	68f4      	ldreq	r4, [r6, #12]
 8008e40:	e7e3      	b.n	8008e0a <_putc_r+0x1a>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	6022      	str	r2, [r4, #0]
 8008e48:	701d      	strb	r5, [r3, #0]
 8008e4a:	b2e8      	uxtb	r0, r5
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	bf00      	nop
 8008e50:	080096e0 	.word	0x080096e0
 8008e54:	08009700 	.word	0x08009700
 8008e58:	080096c0 	.word	0x080096c0

08008e5c <lflush>:
 8008e5c:	8983      	ldrh	r3, [r0, #12]
 8008e5e:	f003 0309 	and.w	r3, r3, #9
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	d101      	bne.n	8008e6a <lflush+0xe>
 8008e66:	f7fe b8e3 	b.w	8007030 <fflush>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	4770      	bx	lr
	...

08008e70 <__srefill_r>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	460c      	mov	r4, r1
 8008e74:	4605      	mov	r5, r0
 8008e76:	b118      	cbz	r0, 8008e80 <__srefill_r+0x10>
 8008e78:	6983      	ldr	r3, [r0, #24]
 8008e7a:	b90b      	cbnz	r3, 8008e80 <__srefill_r+0x10>
 8008e7c:	f7fe f92a 	bl	80070d4 <__sinit>
 8008e80:	4b3c      	ldr	r3, [pc, #240]	; (8008f74 <__srefill_r+0x104>)
 8008e82:	429c      	cmp	r4, r3
 8008e84:	d10a      	bne.n	8008e9c <__srefill_r+0x2c>
 8008e86:	686c      	ldr	r4, [r5, #4]
 8008e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	b293      	uxth	r3, r2
 8008e92:	069e      	lsls	r6, r3, #26
 8008e94:	d50c      	bpl.n	8008eb0 <__srefill_r+0x40>
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	e067      	b.n	8008f6c <__srefill_r+0xfc>
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <__srefill_r+0x108>)
 8008e9e:	429c      	cmp	r4, r3
 8008ea0:	d101      	bne.n	8008ea6 <__srefill_r+0x36>
 8008ea2:	68ac      	ldr	r4, [r5, #8]
 8008ea4:	e7f0      	b.n	8008e88 <__srefill_r+0x18>
 8008ea6:	4b35      	ldr	r3, [pc, #212]	; (8008f7c <__srefill_r+0x10c>)
 8008ea8:	429c      	cmp	r4, r3
 8008eaa:	bf08      	it	eq
 8008eac:	68ec      	ldreq	r4, [r5, #12]
 8008eae:	e7eb      	b.n	8008e88 <__srefill_r+0x18>
 8008eb0:	0758      	lsls	r0, r3, #29
 8008eb2:	d449      	bmi.n	8008f48 <__srefill_r+0xd8>
 8008eb4:	06d9      	lsls	r1, r3, #27
 8008eb6:	d405      	bmi.n	8008ec4 <__srefill_r+0x54>
 8008eb8:	2309      	movs	r3, #9
 8008eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	81a2      	strh	r2, [r4, #12]
 8008ec2:	e7e8      	b.n	8008e96 <__srefill_r+0x26>
 8008ec4:	071a      	lsls	r2, r3, #28
 8008ec6:	d50b      	bpl.n	8008ee0 <__srefill_r+0x70>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7fe f886 	bl	8006fdc <_fflush_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1e0      	bne.n	8008e96 <__srefill_r+0x26>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	60a0      	str	r0, [r4, #8]
 8008ed8:	f023 0308 	bic.w	r3, r3, #8
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	61a0      	str	r0, [r4, #24]
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f043 0304 	orr.w	r3, r3, #4
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	b91b      	cbnz	r3, 8008ef4 <__srefill_r+0x84>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f7fe fd02 	bl	80078f8 <__smakebuf_r>
 8008ef4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008ef8:	b2be      	uxth	r6, r7
 8008efa:	07b3      	lsls	r3, r6, #30
 8008efc:	d00f      	beq.n	8008f1e <__srefill_r+0xae>
 8008efe:	2301      	movs	r3, #1
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	4b1f      	ldr	r3, [pc, #124]	; (8008f80 <__srefill_r+0x110>)
 8008f04:	491f      	ldr	r1, [pc, #124]	; (8008f84 <__srefill_r+0x114>)
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	f006 0609 	and.w	r6, r6, #9
 8008f0c:	f7fe f94e 	bl	80071ac <_fwalk>
 8008f10:	2e09      	cmp	r6, #9
 8008f12:	81a7      	strh	r7, [r4, #12]
 8008f14:	d103      	bne.n	8008f1e <__srefill_r+0xae>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7fd ffd9 	bl	8006ed0 <__sflush_r>
 8008f1e:	6922      	ldr	r2, [r4, #16]
 8008f20:	6022      	str	r2, [r4, #0]
 8008f22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f24:	6963      	ldr	r3, [r4, #20]
 8008f26:	6a21      	ldr	r1, [r4, #32]
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b0      	blx	r6
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	6060      	str	r0, [r4, #4]
 8008f30:	dc1d      	bgt.n	8008f6e <__srefill_r+0xfe>
 8008f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f36:	bf17      	itett	ne
 8008f38:	2200      	movne	r2, #0
 8008f3a:	f043 0320 	orreq.w	r3, r3, #32
 8008f3e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008f42:	6062      	strne	r2, [r4, #4]
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	e7a6      	b.n	8008e96 <__srefill_r+0x26>
 8008f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	d0cc      	beq.n	8008ee8 <__srefill_r+0x78>
 8008f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f52:	4299      	cmp	r1, r3
 8008f54:	d002      	beq.n	8008f5c <__srefill_r+0xec>
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7ff f940 	bl	80081dc <_free_r>
 8008f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f5e:	6063      	str	r3, [r4, #4]
 8008f60:	2000      	movs	r0, #0
 8008f62:	6360      	str	r0, [r4, #52]	; 0x34
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0bf      	beq.n	8008ee8 <__srefill_r+0x78>
 8008f68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e7fc      	b.n	8008f6c <__srefill_r+0xfc>
 8008f72:	bf00      	nop
 8008f74:	080096e0 	.word	0x080096e0
 8008f78:	08009700 	.word	0x08009700
 8008f7c:	080096c0 	.word	0x080096c0
 8008f80:	08009624 	.word	0x08009624
 8008f84:	08008e5d 	.word	0x08008e5d

08008f88 <_sbrk_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4c06      	ldr	r4, [pc, #24]	; (8008fa4 <_sbrk_r+0x1c>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4605      	mov	r5, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	f7f8 ff72 	bl	8001e7c <_sbrk>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_sbrk_r+0x1a>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_sbrk_r+0x1a>
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20000288 	.word	0x20000288

08008fa8 <__sccl>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	780b      	ldrb	r3, [r1, #0]
 8008fac:	2b5e      	cmp	r3, #94	; 0x5e
 8008fae:	bf13      	iteet	ne
 8008fb0:	1c4a      	addne	r2, r1, #1
 8008fb2:	1c8a      	addeq	r2, r1, #2
 8008fb4:	784b      	ldrbeq	r3, [r1, #1]
 8008fb6:	2100      	movne	r1, #0
 8008fb8:	bf08      	it	eq
 8008fba:	2101      	moveq	r1, #1
 8008fbc:	1e44      	subs	r4, r0, #1
 8008fbe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008fc2:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008fc6:	42ac      	cmp	r4, r5
 8008fc8:	d1fb      	bne.n	8008fc2 <__sccl+0x1a>
 8008fca:	b913      	cbnz	r3, 8008fd2 <__sccl+0x2a>
 8008fcc:	3a01      	subs	r2, #1
 8008fce:	4610      	mov	r0, r2
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	f081 0401 	eor.w	r4, r1, #1
 8008fd6:	54c4      	strb	r4, [r0, r3]
 8008fd8:	1c51      	adds	r1, r2, #1
 8008fda:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008fde:	2d2d      	cmp	r5, #45	; 0x2d
 8008fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8008fe4:	460a      	mov	r2, r1
 8008fe6:	d006      	beq.n	8008ff6 <__sccl+0x4e>
 8008fe8:	2d5d      	cmp	r5, #93	; 0x5d
 8008fea:	d0f0      	beq.n	8008fce <__sccl+0x26>
 8008fec:	b90d      	cbnz	r5, 8008ff2 <__sccl+0x4a>
 8008fee:	4632      	mov	r2, r6
 8008ff0:	e7ed      	b.n	8008fce <__sccl+0x26>
 8008ff2:	462b      	mov	r3, r5
 8008ff4:	e7ef      	b.n	8008fd6 <__sccl+0x2e>
 8008ff6:	780e      	ldrb	r6, [r1, #0]
 8008ff8:	2e5d      	cmp	r6, #93	; 0x5d
 8008ffa:	d0fa      	beq.n	8008ff2 <__sccl+0x4a>
 8008ffc:	42b3      	cmp	r3, r6
 8008ffe:	dcf8      	bgt.n	8008ff2 <__sccl+0x4a>
 8009000:	3301      	adds	r3, #1
 8009002:	429e      	cmp	r6, r3
 8009004:	54c4      	strb	r4, [r0, r3]
 8009006:	dcfb      	bgt.n	8009000 <__sccl+0x58>
 8009008:	3102      	adds	r1, #2
 800900a:	e7e6      	b.n	8008fda <__sccl+0x32>

0800900c <__sread>:
 800900c:	b510      	push	{r4, lr}
 800900e:	460c      	mov	r4, r1
 8009010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009014:	f000 fa2e 	bl	8009474 <_read_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	bfab      	itete	ge
 800901c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800901e:	89a3      	ldrhlt	r3, [r4, #12]
 8009020:	181b      	addge	r3, r3, r0
 8009022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009026:	bfac      	ite	ge
 8009028:	6563      	strge	r3, [r4, #84]	; 0x54
 800902a:	81a3      	strhlt	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__swrite>:
 800902e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009032:	461f      	mov	r7, r3
 8009034:	898b      	ldrh	r3, [r1, #12]
 8009036:	05db      	lsls	r3, r3, #23
 8009038:	4605      	mov	r5, r0
 800903a:	460c      	mov	r4, r1
 800903c:	4616      	mov	r6, r2
 800903e:	d505      	bpl.n	800904c <__swrite+0x1e>
 8009040:	2302      	movs	r3, #2
 8009042:	2200      	movs	r2, #0
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	f000 f9c0 	bl	80093cc <_lseek_r>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	4632      	mov	r2, r6
 800905a:	463b      	mov	r3, r7
 800905c:	4628      	mov	r0, r5
 800905e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	f000 b96f 	b.w	8009344 <_write_r>

08009066 <__sseek>:
 8009066:	b510      	push	{r4, lr}
 8009068:	460c      	mov	r4, r1
 800906a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906e:	f000 f9ad 	bl	80093cc <_lseek_r>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	bf15      	itete	ne
 8009078:	6560      	strne	r0, [r4, #84]	; 0x54
 800907a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800907e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009082:	81a3      	strheq	r3, [r4, #12]
 8009084:	bf18      	it	ne
 8009086:	81a3      	strhne	r3, [r4, #12]
 8009088:	bd10      	pop	{r4, pc}

0800908a <__sclose>:
 800908a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908e:	f000 b96b 	b.w	8009368 <_close_r>

08009092 <strncmp>:
 8009092:	b510      	push	{r4, lr}
 8009094:	b16a      	cbz	r2, 80090b2 <strncmp+0x20>
 8009096:	3901      	subs	r1, #1
 8009098:	1884      	adds	r4, r0, r2
 800909a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800909e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d103      	bne.n	80090ae <strncmp+0x1c>
 80090a6:	42a0      	cmp	r0, r4
 80090a8:	d001      	beq.n	80090ae <strncmp+0x1c>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1f5      	bne.n	800909a <strncmp+0x8>
 80090ae:	1a98      	subs	r0, r3, r2
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	4610      	mov	r0, r2
 80090b4:	e7fc      	b.n	80090b0 <strncmp+0x1e>

080090b6 <_strtoul_l.isra.0>:
 80090b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ba:	4680      	mov	r8, r0
 80090bc:	4689      	mov	r9, r1
 80090be:	4692      	mov	sl, r2
 80090c0:	461e      	mov	r6, r3
 80090c2:	460f      	mov	r7, r1
 80090c4:	463d      	mov	r5, r7
 80090c6:	9808      	ldr	r0, [sp, #32]
 80090c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090cc:	f7fe fbce 	bl	800786c <__locale_ctype_ptr_l>
 80090d0:	4420      	add	r0, r4
 80090d2:	7843      	ldrb	r3, [r0, #1]
 80090d4:	f013 0308 	ands.w	r3, r3, #8
 80090d8:	d130      	bne.n	800913c <_strtoul_l.isra.0+0x86>
 80090da:	2c2d      	cmp	r4, #45	; 0x2d
 80090dc:	d130      	bne.n	8009140 <_strtoul_l.isra.0+0x8a>
 80090de:	787c      	ldrb	r4, [r7, #1]
 80090e0:	1cbd      	adds	r5, r7, #2
 80090e2:	2101      	movs	r1, #1
 80090e4:	2e00      	cmp	r6, #0
 80090e6:	d05c      	beq.n	80091a2 <_strtoul_l.isra.0+0xec>
 80090e8:	2e10      	cmp	r6, #16
 80090ea:	d109      	bne.n	8009100 <_strtoul_l.isra.0+0x4a>
 80090ec:	2c30      	cmp	r4, #48	; 0x30
 80090ee:	d107      	bne.n	8009100 <_strtoul_l.isra.0+0x4a>
 80090f0:	782b      	ldrb	r3, [r5, #0]
 80090f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090f6:	2b58      	cmp	r3, #88	; 0x58
 80090f8:	d14e      	bne.n	8009198 <_strtoul_l.isra.0+0xe2>
 80090fa:	786c      	ldrb	r4, [r5, #1]
 80090fc:	2610      	movs	r6, #16
 80090fe:	3502      	adds	r5, #2
 8009100:	f04f 32ff 	mov.w	r2, #4294967295
 8009104:	2300      	movs	r3, #0
 8009106:	fbb2 f2f6 	udiv	r2, r2, r6
 800910a:	fb06 fc02 	mul.w	ip, r6, r2
 800910e:	ea6f 0c0c 	mvn.w	ip, ip
 8009112:	4618      	mov	r0, r3
 8009114:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009118:	2f09      	cmp	r7, #9
 800911a:	d817      	bhi.n	800914c <_strtoul_l.isra.0+0x96>
 800911c:	463c      	mov	r4, r7
 800911e:	42a6      	cmp	r6, r4
 8009120:	dd23      	ble.n	800916a <_strtoul_l.isra.0+0xb4>
 8009122:	2b00      	cmp	r3, #0
 8009124:	db1e      	blt.n	8009164 <_strtoul_l.isra.0+0xae>
 8009126:	4282      	cmp	r2, r0
 8009128:	d31c      	bcc.n	8009164 <_strtoul_l.isra.0+0xae>
 800912a:	d101      	bne.n	8009130 <_strtoul_l.isra.0+0x7a>
 800912c:	45a4      	cmp	ip, r4
 800912e:	db19      	blt.n	8009164 <_strtoul_l.isra.0+0xae>
 8009130:	fb00 4006 	mla	r0, r0, r6, r4
 8009134:	2301      	movs	r3, #1
 8009136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800913a:	e7eb      	b.n	8009114 <_strtoul_l.isra.0+0x5e>
 800913c:	462f      	mov	r7, r5
 800913e:	e7c1      	b.n	80090c4 <_strtoul_l.isra.0+0xe>
 8009140:	2c2b      	cmp	r4, #43	; 0x2b
 8009142:	bf04      	itt	eq
 8009144:	1cbd      	addeq	r5, r7, #2
 8009146:	787c      	ldrbeq	r4, [r7, #1]
 8009148:	4619      	mov	r1, r3
 800914a:	e7cb      	b.n	80090e4 <_strtoul_l.isra.0+0x2e>
 800914c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009150:	2f19      	cmp	r7, #25
 8009152:	d801      	bhi.n	8009158 <_strtoul_l.isra.0+0xa2>
 8009154:	3c37      	subs	r4, #55	; 0x37
 8009156:	e7e2      	b.n	800911e <_strtoul_l.isra.0+0x68>
 8009158:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800915c:	2f19      	cmp	r7, #25
 800915e:	d804      	bhi.n	800916a <_strtoul_l.isra.0+0xb4>
 8009160:	3c57      	subs	r4, #87	; 0x57
 8009162:	e7dc      	b.n	800911e <_strtoul_l.isra.0+0x68>
 8009164:	f04f 33ff 	mov.w	r3, #4294967295
 8009168:	e7e5      	b.n	8009136 <_strtoul_l.isra.0+0x80>
 800916a:	2b00      	cmp	r3, #0
 800916c:	da09      	bge.n	8009182 <_strtoul_l.isra.0+0xcc>
 800916e:	2322      	movs	r3, #34	; 0x22
 8009170:	f8c8 3000 	str.w	r3, [r8]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	f1ba 0f00 	cmp.w	sl, #0
 800917c:	d107      	bne.n	800918e <_strtoul_l.isra.0+0xd8>
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	b101      	cbz	r1, 8009186 <_strtoul_l.isra.0+0xd0>
 8009184:	4240      	negs	r0, r0
 8009186:	f1ba 0f00 	cmp.w	sl, #0
 800918a:	d0f8      	beq.n	800917e <_strtoul_l.isra.0+0xc8>
 800918c:	b10b      	cbz	r3, 8009192 <_strtoul_l.isra.0+0xdc>
 800918e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009192:	f8ca 9000 	str.w	r9, [sl]
 8009196:	e7f2      	b.n	800917e <_strtoul_l.isra.0+0xc8>
 8009198:	2430      	movs	r4, #48	; 0x30
 800919a:	2e00      	cmp	r6, #0
 800919c:	d1b0      	bne.n	8009100 <_strtoul_l.isra.0+0x4a>
 800919e:	2608      	movs	r6, #8
 80091a0:	e7ae      	b.n	8009100 <_strtoul_l.isra.0+0x4a>
 80091a2:	2c30      	cmp	r4, #48	; 0x30
 80091a4:	d0a4      	beq.n	80090f0 <_strtoul_l.isra.0+0x3a>
 80091a6:	260a      	movs	r6, #10
 80091a8:	e7aa      	b.n	8009100 <_strtoul_l.isra.0+0x4a>
	...

080091ac <_strtoul_r>:
 80091ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ae:	4c06      	ldr	r4, [pc, #24]	; (80091c8 <_strtoul_r+0x1c>)
 80091b0:	4d06      	ldr	r5, [pc, #24]	; (80091cc <_strtoul_r+0x20>)
 80091b2:	6824      	ldr	r4, [r4, #0]
 80091b4:	6a24      	ldr	r4, [r4, #32]
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	bf08      	it	eq
 80091ba:	462c      	moveq	r4, r5
 80091bc:	9400      	str	r4, [sp, #0]
 80091be:	f7ff ff7a 	bl	80090b6 <_strtoul_l.isra.0>
 80091c2:	b003      	add	sp, #12
 80091c4:	bd30      	pop	{r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	2000000c 	.word	0x2000000c
 80091cc:	20000070 	.word	0x20000070

080091d0 <__submore>:
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80091d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091dc:	4299      	cmp	r1, r3
 80091de:	d11d      	bne.n	800921c <__submore+0x4c>
 80091e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091e4:	f7ff f848 	bl	8008278 <_malloc_r>
 80091e8:	b918      	cbnz	r0, 80091f2 <__submore+0x22>
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80091f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80091fc:	6360      	str	r0, [r4, #52]	; 0x34
 80091fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009202:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009206:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800920a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800920e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009212:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009216:	6020      	str	r0, [r4, #0]
 8009218:	2000      	movs	r0, #0
 800921a:	e7e8      	b.n	80091ee <__submore+0x1e>
 800921c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800921e:	0077      	lsls	r7, r6, #1
 8009220:	463a      	mov	r2, r7
 8009222:	f000 f900 	bl	8009426 <_realloc_r>
 8009226:	4605      	mov	r5, r0
 8009228:	2800      	cmp	r0, #0
 800922a:	d0de      	beq.n	80091ea <__submore+0x1a>
 800922c:	eb00 0806 	add.w	r8, r0, r6
 8009230:	4601      	mov	r1, r0
 8009232:	4632      	mov	r2, r6
 8009234:	4640      	mov	r0, r8
 8009236:	f7fe fbb9 	bl	80079ac <memcpy>
 800923a:	f8c4 8000 	str.w	r8, [r4]
 800923e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009242:	e7e9      	b.n	8009218 <__submore+0x48>

08009244 <_ungetc_r>:
 8009244:	1c4b      	adds	r3, r1, #1
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	4606      	mov	r6, r0
 800924a:	460d      	mov	r5, r1
 800924c:	4614      	mov	r4, r2
 800924e:	d103      	bne.n	8009258 <_ungetc_r+0x14>
 8009250:	f04f 35ff 	mov.w	r5, #4294967295
 8009254:	4628      	mov	r0, r5
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	b118      	cbz	r0, 8009262 <_ungetc_r+0x1e>
 800925a:	6983      	ldr	r3, [r0, #24]
 800925c:	b90b      	cbnz	r3, 8009262 <_ungetc_r+0x1e>
 800925e:	f7fd ff39 	bl	80070d4 <__sinit>
 8009262:	4b2e      	ldr	r3, [pc, #184]	; (800931c <_ungetc_r+0xd8>)
 8009264:	429c      	cmp	r4, r3
 8009266:	d12c      	bne.n	80092c2 <_ungetc_r+0x7e>
 8009268:	6874      	ldr	r4, [r6, #4]
 800926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926e:	f023 0320 	bic.w	r3, r3, #32
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	b29b      	uxth	r3, r3
 8009276:	0759      	lsls	r1, r3, #29
 8009278:	d413      	bmi.n	80092a2 <_ungetc_r+0x5e>
 800927a:	06da      	lsls	r2, r3, #27
 800927c:	d5e8      	bpl.n	8009250 <_ungetc_r+0xc>
 800927e:	071b      	lsls	r3, r3, #28
 8009280:	d50b      	bpl.n	800929a <_ungetc_r+0x56>
 8009282:	4621      	mov	r1, r4
 8009284:	4630      	mov	r0, r6
 8009286:	f7fd fea9 	bl	8006fdc <_fflush_r>
 800928a:	2800      	cmp	r0, #0
 800928c:	d1e0      	bne.n	8009250 <_ungetc_r+0xc>
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	60a0      	str	r0, [r4, #8]
 8009292:	f023 0308 	bic.w	r3, r3, #8
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	61a0      	str	r0, [r4, #24]
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f043 0304 	orr.w	r3, r3, #4
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a4:	6862      	ldr	r2, [r4, #4]
 80092a6:	b2ed      	uxtb	r5, r5
 80092a8:	b1e3      	cbz	r3, 80092e4 <_ungetc_r+0xa0>
 80092aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092ac:	4293      	cmp	r3, r2
 80092ae:	dd12      	ble.n	80092d6 <_ungetc_r+0x92>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	1e5a      	subs	r2, r3, #1
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	f803 5c01 	strb.w	r5, [r3, #-1]
 80092ba:	6863      	ldr	r3, [r4, #4]
 80092bc:	3301      	adds	r3, #1
 80092be:	6063      	str	r3, [r4, #4]
 80092c0:	e7c8      	b.n	8009254 <_ungetc_r+0x10>
 80092c2:	4b17      	ldr	r3, [pc, #92]	; (8009320 <_ungetc_r+0xdc>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	d101      	bne.n	80092cc <_ungetc_r+0x88>
 80092c8:	68b4      	ldr	r4, [r6, #8]
 80092ca:	e7ce      	b.n	800926a <_ungetc_r+0x26>
 80092cc:	4b15      	ldr	r3, [pc, #84]	; (8009324 <_ungetc_r+0xe0>)
 80092ce:	429c      	cmp	r4, r3
 80092d0:	bf08      	it	eq
 80092d2:	68f4      	ldreq	r4, [r6, #12]
 80092d4:	e7c9      	b.n	800926a <_ungetc_r+0x26>
 80092d6:	4621      	mov	r1, r4
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ff79 	bl	80091d0 <__submore>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0e6      	beq.n	80092b0 <_ungetc_r+0x6c>
 80092e2:	e7b5      	b.n	8009250 <_ungetc_r+0xc>
 80092e4:	6921      	ldr	r1, [r4, #16]
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	b151      	cbz	r1, 8009300 <_ungetc_r+0xbc>
 80092ea:	4299      	cmp	r1, r3
 80092ec:	d208      	bcs.n	8009300 <_ungetc_r+0xbc>
 80092ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80092f2:	42a9      	cmp	r1, r5
 80092f4:	d104      	bne.n	8009300 <_ungetc_r+0xbc>
 80092f6:	3b01      	subs	r3, #1
 80092f8:	3201      	adds	r2, #1
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	6062      	str	r2, [r4, #4]
 80092fe:	e7a9      	b.n	8009254 <_ungetc_r+0x10>
 8009300:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009308:	6363      	str	r3, [r4, #52]	; 0x34
 800930a:	2303      	movs	r3, #3
 800930c:	63a3      	str	r3, [r4, #56]	; 0x38
 800930e:	4623      	mov	r3, r4
 8009310:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	2301      	movs	r3, #1
 8009318:	e7d1      	b.n	80092be <_ungetc_r+0x7a>
 800931a:	bf00      	nop
 800931c:	080096e0 	.word	0x080096e0
 8009320:	08009700 	.word	0x08009700
 8009324:	080096c0 	.word	0x080096c0

08009328 <__ascii_wctomb>:
 8009328:	b149      	cbz	r1, 800933e <__ascii_wctomb+0x16>
 800932a:	2aff      	cmp	r2, #255	; 0xff
 800932c:	bf85      	ittet	hi
 800932e:	238a      	movhi	r3, #138	; 0x8a
 8009330:	6003      	strhi	r3, [r0, #0]
 8009332:	700a      	strbls	r2, [r1, #0]
 8009334:	f04f 30ff 	movhi.w	r0, #4294967295
 8009338:	bf98      	it	ls
 800933a:	2001      	movls	r0, #1
 800933c:	4770      	bx	lr
 800933e:	4608      	mov	r0, r1
 8009340:	4770      	bx	lr
	...

08009344 <_write_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4c07      	ldr	r4, [pc, #28]	; (8009364 <_write_r+0x20>)
 8009348:	4605      	mov	r5, r0
 800934a:	4608      	mov	r0, r1
 800934c:	4611      	mov	r1, r2
 800934e:	2200      	movs	r2, #0
 8009350:	6022      	str	r2, [r4, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	f7f8 fd3c 	bl	8001dd0 <_write>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_write_r+0x1e>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	b103      	cbz	r3, 8009362 <_write_r+0x1e>
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	20000288 	.word	0x20000288

08009368 <_close_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4c06      	ldr	r4, [pc, #24]	; (8009384 <_close_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4605      	mov	r5, r0
 8009370:	4608      	mov	r0, r1
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	f7f8 fd4e 	bl	8001e14 <_close>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_close_r+0x1a>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	b103      	cbz	r3, 8009382 <_close_r+0x1a>
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000288 	.word	0x20000288

08009388 <_fstat_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4c07      	ldr	r4, [pc, #28]	; (80093a8 <_fstat_r+0x20>)
 800938c:	2300      	movs	r3, #0
 800938e:	4605      	mov	r5, r0
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	f7f8 fd49 	bl	8001e2c <_fstat>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	d102      	bne.n	80093a4 <_fstat_r+0x1c>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	b103      	cbz	r3, 80093a4 <_fstat_r+0x1c>
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	bd38      	pop	{r3, r4, r5, pc}
 80093a6:	bf00      	nop
 80093a8:	20000288 	.word	0x20000288

080093ac <_isatty_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4c06      	ldr	r4, [pc, #24]	; (80093c8 <_isatty_r+0x1c>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4605      	mov	r5, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	f7f8 fd48 	bl	8001e4c <_isatty>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_isatty_r+0x1a>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_isatty_r+0x1a>
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000288 	.word	0x20000288

080093cc <_lseek_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4c07      	ldr	r4, [pc, #28]	; (80093ec <_lseek_r+0x20>)
 80093d0:	4605      	mov	r5, r0
 80093d2:	4608      	mov	r0, r1
 80093d4:	4611      	mov	r1, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7f8 fd41 	bl	8001e62 <_lseek>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_lseek_r+0x1e>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_lseek_r+0x1e>
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000288 	.word	0x20000288

080093f0 <memmove>:
 80093f0:	4288      	cmp	r0, r1
 80093f2:	b510      	push	{r4, lr}
 80093f4:	eb01 0302 	add.w	r3, r1, r2
 80093f8:	d807      	bhi.n	800940a <memmove+0x1a>
 80093fa:	1e42      	subs	r2, r0, #1
 80093fc:	4299      	cmp	r1, r3
 80093fe:	d00a      	beq.n	8009416 <memmove+0x26>
 8009400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009404:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009408:	e7f8      	b.n	80093fc <memmove+0xc>
 800940a:	4283      	cmp	r3, r0
 800940c:	d9f5      	bls.n	80093fa <memmove+0xa>
 800940e:	1881      	adds	r1, r0, r2
 8009410:	1ad2      	subs	r2, r2, r3
 8009412:	42d3      	cmn	r3, r2
 8009414:	d100      	bne.n	8009418 <memmove+0x28>
 8009416:	bd10      	pop	{r4, pc}
 8009418:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800941c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009420:	e7f7      	b.n	8009412 <memmove+0x22>

08009422 <__malloc_lock>:
 8009422:	4770      	bx	lr

08009424 <__malloc_unlock>:
 8009424:	4770      	bx	lr

08009426 <_realloc_r>:
 8009426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009428:	4607      	mov	r7, r0
 800942a:	4614      	mov	r4, r2
 800942c:	460e      	mov	r6, r1
 800942e:	b921      	cbnz	r1, 800943a <_realloc_r+0x14>
 8009430:	4611      	mov	r1, r2
 8009432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009436:	f7fe bf1f 	b.w	8008278 <_malloc_r>
 800943a:	b922      	cbnz	r2, 8009446 <_realloc_r+0x20>
 800943c:	f7fe fece 	bl	80081dc <_free_r>
 8009440:	4625      	mov	r5, r4
 8009442:	4628      	mov	r0, r5
 8009444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009446:	f000 f827 	bl	8009498 <_malloc_usable_size_r>
 800944a:	42a0      	cmp	r0, r4
 800944c:	d20f      	bcs.n	800946e <_realloc_r+0x48>
 800944e:	4621      	mov	r1, r4
 8009450:	4638      	mov	r0, r7
 8009452:	f7fe ff11 	bl	8008278 <_malloc_r>
 8009456:	4605      	mov	r5, r0
 8009458:	2800      	cmp	r0, #0
 800945a:	d0f2      	beq.n	8009442 <_realloc_r+0x1c>
 800945c:	4631      	mov	r1, r6
 800945e:	4622      	mov	r2, r4
 8009460:	f7fe faa4 	bl	80079ac <memcpy>
 8009464:	4631      	mov	r1, r6
 8009466:	4638      	mov	r0, r7
 8009468:	f7fe feb8 	bl	80081dc <_free_r>
 800946c:	e7e9      	b.n	8009442 <_realloc_r+0x1c>
 800946e:	4635      	mov	r5, r6
 8009470:	e7e7      	b.n	8009442 <_realloc_r+0x1c>
	...

08009474 <_read_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4c07      	ldr	r4, [pc, #28]	; (8009494 <_read_r+0x20>)
 8009478:	4605      	mov	r5, r0
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	2200      	movs	r2, #0
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f8 fc86 	bl	8001d94 <_read>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_read_r+0x1e>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	b103      	cbz	r3, 8009492 <_read_r+0x1e>
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000288 	.word	0x20000288

08009498 <_malloc_usable_size_r>:
 8009498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800949c:	1f18      	subs	r0, r3, #4
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bfbc      	itt	lt
 80094a2:	580b      	ldrlt	r3, [r1, r0]
 80094a4:	18c0      	addlt	r0, r0, r3
 80094a6:	4770      	bx	lr

080094a8 <_init>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	bf00      	nop
 80094ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ae:	bc08      	pop	{r3}
 80094b0:	469e      	mov	lr, r3
 80094b2:	4770      	bx	lr

080094b4 <_fini>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr
