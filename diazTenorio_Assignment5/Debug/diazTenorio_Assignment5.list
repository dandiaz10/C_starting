
diazTenorio_Assignment5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08009390  08009390  00019390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097ec  080097ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f4  080097f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  080099d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080099d8  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cffd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f25  00000000  00000000  0002d209  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  0002f130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a94  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009714  00000000  00000000  00051f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c29d4  00000000  00000000  0005b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  0011e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009374 	.word	0x08009374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009374 	.word	0x08009374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fba8 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 fb98 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fe0:	f7ff ffd2 	bl	8000f88 <GPIO_SetBits>
 8000fe4:	e003      	b.n	8000fee <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fea:	f7ff ffdd 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000ffc:	f7ff ffc4 	bl	8000f88 <GPIO_SetBits>
 8001000:	e003      	b.n	800100a <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001002:	2120      	movs	r1, #32
 8001004:	4817      	ldr	r0, [pc, #92]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001006:	f7ff ffcf 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001018:	f7ff ffb6 	bl	8000f88 <GPIO_SetBits>
 800101c:	e003      	b.n	8001026 <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001022:	f7ff ffc1 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da04      	bge.n	8001038 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001032:	f7ff ffa9 	bl	8000f88 <GPIO_SetBits>
 8001036:	e003      	b.n	8001040 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 800103c:	f7ff ffb4 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001040:	2201      	movs	r2, #1
 8001042:	2102      	movs	r1, #2
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001046:	f001 fb53 	bl	80026f0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800104a:	2002      	movs	r0, #2
 800104c:	f001 f8c6 	bl	80021dc <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001056:	f001 fb4b 	bl	80026f0 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	48000400 	.word	0x48000400

08001068 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800107c:	2110      	movs	r1, #16
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 8001080:	f7ff ff82 	bl	8000f88 <GPIO_SetBits>
 8001084:	e003      	b.n	800108e <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001086:	2110      	movs	r1, #16
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800108a:	f7ff ff8d 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001098:	2120      	movs	r1, #32
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800109c:	f7ff ff74 	bl	8000f88 <GPIO_SetBits>
 80010a0:	e003      	b.n	80010aa <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80010a2:	2120      	movs	r1, #32
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010a6:	f7ff ff7f 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010b8:	f7ff ff66 	bl	8000f88 <GPIO_SetBits>
 80010bc:	e003      	b.n	80010c6 <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010c2:	f7ff ff71 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010d4:	f7ff ff58 	bl	8000f88 <GPIO_SetBits>
 80010d8:	e003      	b.n	80010e2 <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010de:	f7ff ff63 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010e8:	f001 fb02 	bl	80026f0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80010ec:	2002      	movs	r0, #2
 80010ee:	f001 f875 	bl	80021dc <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010f8:	f001 fafa 	bl	80026f0 <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400

08001108 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff57 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffa3 	bl	8001068 <hd44780_wr_lo_nibble>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <hd44780_wr_cmd+0x24>)
 800113c:	f001 fad8 	bl	80026f0 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffe0 	bl	8001108 <hd44780_write>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400

08001154 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 800115e:	2201      	movs	r2, #1
 8001160:	2101      	movs	r1, #1
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <hd44780_wr_data+0x24>)
 8001164:	f001 fac4 	bl	80026f0 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffcc 	bl	8001108 <hd44780_write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	48000400 	.word	0x48000400

0800117c <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HD44780_Init+0xbc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <HD44780_Init+0xbc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HD44780_Init+0xbc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800119a:	23f0      	movs	r3, #240	; 0xf0
 800119c:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <HD44780_Init+0xc0>)
 80011b0:	f001 f91c 	bl	80023ec <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80011b4:	230b      	movs	r3, #11
 80011b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <HD44780_Init+0xc0>)
 80011ca:	f001 f90f 	bl	80023ec <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <HD44780_Init+0xc0>)
 80011d4:	f001 fa8c 	bl	80026f0 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HD44780_Init+0xc0>)
 80011de:	f001 fa87 	bl	80026f0 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <HD44780_Init+0xc0>)
 80011e8:	f001 fa82 	bl	80026f0 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80011ec:	2010      	movs	r0, #16
 80011ee:	f000 fff5 	bl	80021dc <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f7ff fee8 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80011f8:	2005      	movs	r0, #5
 80011fa:	f000 ffef 	bl	80021dc <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011fe:	2030      	movs	r0, #48	; 0x30
 8001200:	f7ff fee2 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8001204:	2001      	movs	r0, #1
 8001206:	f000 ffe9 	bl	80021dc <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f7ff fedc 	bl	8000fc8 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8001210:	2020      	movs	r0, #32
 8001212:	f7ff fed9 	bl	8000fc8 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f7ff ff88 	bl	800112c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 800121c:	200c      	movs	r0, #12
 800121e:	f7ff ff85 	bl	800112c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff82 	bl	800112c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff ff7f 	bl	800112c <hd44780_wr_cmd>

}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff81 	bl	8001154 <hd44780_wr_data>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d901      	bls.n	800127a <HD44780_GotoXY+0x1e>
		x = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d901      	bls.n	8001284 <HD44780_GotoXY+0x28>
		y = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d816      	bhi.n	80012b8 <HD44780_GotoXY+0x5c>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HD44780_GotoXY+0x34>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a7 	.word	0x080012a7
 8001298:	080012ad 	.word	0x080012ad
 800129c:	080012b3 	.word	0x080012b3
	case 0:
		copy_y = 0x80;
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	73fb      	strb	r3, [r7, #15]
		break;
 80012a4:	e008      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	73fb      	strb	r3, [r7, #15]
		break;
 80012aa:	e005      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 80012ac:	2394      	movs	r3, #148	; 0x94
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e002      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 80012b2:	23d4      	movs	r3, #212	; 0xd4
 80012b4:	73fb      	strb	r3, [r7, #15]
		break;
 80012b6:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4413      	add	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <hd44780_wr_cmd>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop

080012d0 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffab 	bl	8001240 <HD44780_PutChar>
		i++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ef      	bne.n	80012dc <HD44780_PutStr+0xc>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ff0f 	bl	800112c <hd44780_wr_cmd>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <deBounceInit>:
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}


void deBounceInit(uint16_t pin, char port, int8_t mode)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	460b      	mov	r3, r1
 8001320:	717b      	strb	r3, [r7, #5]
 8001322:	4613      	mov	r3, r2
 8001324:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struc
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]

	switch(mode)
 800133e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <deBounceInit+0x38>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <deBounceInit+0x3e>
 800134a:	e005      	b.n	8001358 <deBounceInit+0x44>
	{
		case 0:
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
			break;
 8001350:	e002      	b.n	8001358 <deBounceInit+0x44>
		case 1:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
			break;
 8001356:	bf00      	nop
	}

	switch(port)
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	2b42      	cmp	r3, #66	; 0x42
 800135c:	d00c      	beq.n	8001378 <deBounceInit+0x64>
 800135e:	2b43      	cmp	r3, #67	; 0x43
 8001360:	d011      	beq.n	8001386 <deBounceInit+0x72>
 8001362:	2b41      	cmp	r3, #65	; 0x41
 8001364:	d000      	beq.n	8001368 <deBounceInit+0x54>
		case 'C':
				HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
				break;
	}

}
 8001366:	e015      	b.n	8001394 <deBounceInit+0x80>
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f001 f83b 	bl	80023ec <HAL_GPIO_Init>
			break;
 8001376:	e00d      	b.n	8001394 <deBounceInit+0x80>
				HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <deBounceInit+0x88>)
 8001380:	f001 f834 	bl	80023ec <HAL_GPIO_Init>
				break;
 8001384:	e006      	b.n	8001394 <deBounceInit+0x80>
				HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <deBounceInit+0x8c>)
 800138e:	f001 f82d 	bl	80023ec <HAL_GPIO_Init>
				break;
 8001392:	bf00      	nop
}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800

080013a4 <deBounceReadPin>:

int8_t deBounceReadPin(uint16_t pin, char port, int8_t mode)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	717b      	strb	r3, [r7, #5]
 80013b2:	4613      	mov	r3, r2
 80013b4:	713b      	strb	r3, [r7, #4]


	GPIO_PinState pinState = GPIO_PIN_RESET; // pin status
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]

	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval = 50; // stable interval
 80013ba:	2332      	movs	r3, #50	; 0x32
 80013bc:	73fb      	strb	r3, [r7, #15]

	int32_t msTimeStamp=HAL_GetTick();
 80013be:	f000 ff01 	bl	80021c4 <HAL_GetTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	613b      	str	r3, [r7, #16]

	switch(port)
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	2b42      	cmp	r3, #66	; 0x42
 80013ca:	d00c      	beq.n	80013e6 <deBounceReadPin+0x42>
 80013cc:	2b43      	cmp	r3, #67	; 0x43
 80013ce:	d012      	beq.n	80013f6 <deBounceReadPin+0x52>
 80013d0:	2b41      	cmp	r3, #65	; 0x41
 80013d2:	d118      	bne.n	8001406 <deBounceReadPin+0x62>
		{
			case 'A':

				pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f001 f970 	bl	80026c0 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]
				break;
 80013e4:	e00f      	b.n	8001406 <deBounceReadPin+0x62>
			case 'B':
				pinState = HAL_GPIO_ReadPin(GPIOB, pin);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	482b      	ldr	r0, [pc, #172]	; (8001498 <deBounceReadPin+0xf4>)
 80013ec:	f001 f968 	bl	80026c0 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	75fb      	strb	r3, [r7, #23]
					break;
 80013f4:	e007      	b.n	8001406 <deBounceReadPin+0x62>
			case 'C':
				pinState = HAL_GPIO_ReadPin(GPIOC, pin);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4828      	ldr	r0, [pc, #160]	; (800149c <deBounceReadPin+0xf8>)
 80013fc:	f001 f960 	bl	80026c0 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	75fb      	strb	r3, [r7, #23]
					break;
 8001404:	bf00      	nop
		}

	if(pinState == GPIO_PIN_RESET) //check if the button  is pressed
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <deBounceReadPin+0x6e>
	{
		pinStateWeAreLookingFor = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	75bb      	strb	r3, [r7, #22]
 8001410:	e033      	b.n	800147a <deBounceReadPin+0xd6>
	}
	else
	{
		pinStateWeAreLookingFor = 1;
 8001412:	2301      	movs	r3, #1
 8001414:	75bb      	strb	r3, [r7, #22]
	}

	while(HAL_GetTick() < (msTimeStamp + stableInterval))
 8001416:	e030      	b.n	800147a <deBounceReadPin+0xd6>
	{

		switch(port)
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	2b42      	cmp	r3, #66	; 0x42
 800141c:	d00c      	beq.n	8001438 <deBounceReadPin+0x94>
 800141e:	2b43      	cmp	r3, #67	; 0x43
 8001420:	d012      	beq.n	8001448 <deBounceReadPin+0xa4>
 8001422:	2b41      	cmp	r3, #65	; 0x41
 8001424:	d118      	bne.n	8001458 <deBounceReadPin+0xb4>
		{
			case 'A':

				pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f001 f947 	bl	80026c0 <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	75fb      	strb	r3, [r7, #23]
				break;
 8001436:	e00f      	b.n	8001458 <deBounceReadPin+0xb4>
			case 'B':
				pinState = HAL_GPIO_ReadPin(GPIOB, pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4619      	mov	r1, r3
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <deBounceReadPin+0xf4>)
 800143e:	f001 f93f 	bl	80026c0 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
					break;
 8001446:	e007      	b.n	8001458 <deBounceReadPin+0xb4>
			case 'C':
				pinState = HAL_GPIO_ReadPin(GPIOC, pin);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <deBounceReadPin+0xf8>)
 800144e:	f001 f937 	bl	80026c0 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	75fb      	strb	r3, [r7, #23]
					break;
 8001456:	bf00      	nop
		}
		if (pinState != pinStateWeAreLookingFor)
 8001458:	7dfa      	ldrb	r2, [r7, #23]
 800145a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800145e:	429a      	cmp	r2, r3
 8001460:	d00b      	beq.n	800147a <deBounceReadPin+0xd6>
		{
			pinStateWeAreLookingFor =! pinStateWeAreLookingFor;
 8001462:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf0c      	ite	eq
 800146a:	2301      	moveq	r3, #1
 800146c:	2300      	movne	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	75bb      	strb	r3, [r7, #22]
			msTimeStamp = HAL_GetTick();
 8001472:	f000 fea7 	bl	80021c4 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	613b      	str	r3, [r7, #16]
	while(HAL_GetTick() < (msTimeStamp + stableInterval))
 800147a:	f000 fea3 	bl	80021c4 <HAL_GetTick>
 800147e:	4601      	mov	r1, r0
 8001480:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4413      	add	r3, r2
 8001488:	4299      	cmp	r1, r3
 800148a:	d3c5      	bcc.n	8001418 <deBounceReadPin+0x74>
		}
	}

	return (pinStateWeAreLookingFor);
 800148c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b0b3      	sub	sp, #204	; 0xcc
 80014a4:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80014a6:	f000 fe28 	bl	80020fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 fabb 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 fb6b 	bl	8001b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b2:	f000 fb39 	bl	8001b28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HD44780_Init();
 80014b6:	f7ff fe61 	bl	800117c <HD44780_Init>

   //Initializing push buttons variables
   	char port = 'A';
 80014ba:	2341      	movs	r3, #65	; 0x41
 80014bc:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
   	int8_t mode = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
   	int16_t buttonsPin[] = {GPIO_PIN_3,GPIO_PIN_4,GPIO_PIN_7,GPIO_PIN_8};// pins for the PB
 80014c6:	4ace      	ldr	r2, [pc, #824]	; (8001800 <main+0x360>)
 80014c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d0:	e883 0003 	stmia.w	r3, {r0, r1}
   	int8_t numberOfButtons = (sizeof(buttonsPin))/(sizeof(buttonsPin[0]));// number of PBs used
 80014d4:	2304      	movs	r3, #4
 80014d6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

   	deBounceInit(buttonsPin[0], port, mode); //push1 PA3
 80014da:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f997 20bc 	ldrsb.w	r2, [r7, #188]	; 0xbc
 80014e4:	f897 10bd 	ldrb.w	r1, [r7, #189]	; 0xbd
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff13 	bl	8001314 <deBounceInit>
   	deBounceInit(buttonsPin[1], port, mode); //push2 PA4
 80014ee:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f997 20bc 	ldrsb.w	r2, [r7, #188]	; 0xbc
 80014f8:	f897 10bd 	ldrb.w	r1, [r7, #189]	; 0xbd
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff09 	bl	8001314 <deBounceInit>
   	deBounceInit(buttonsPin[2], port, mode); //push3 PA7
 8001502:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001506:	b29b      	uxth	r3, r3
 8001508:	f997 20bc 	ldrsb.w	r2, [r7, #188]	; 0xbc
 800150c:	f897 10bd 	ldrb.w	r1, [r7, #189]	; 0xbd
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff feff 	bl	8001314 <deBounceInit>
 	deBounceInit(buttonsPin[3], port, mode); //pushOK PA8
 8001516:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800151a:	b29b      	uxth	r3, r3
 800151c:	f997 20bc 	ldrsb.w	r2, [r7, #188]	; 0xbc
 8001520:	f897 10bd 	ldrb.w	r1, [r7, #189]	; 0xbd
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fef5 	bl	8001314 <deBounceInit>

 	// initializing variables
	int8_t state = 1; //state machine state
 800152a:	2301      	movs	r3, #1
 800152c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	const int processingTime = 5000; //delay time when is processing
 8001530:	f241 3388 	movw	r3, #5000	; 0x1388
 8001534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	char printBuffer [16] = { 0 };
 8001538:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]

	char stringData[73] = {0}; //input
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2249      	movs	r2, #73	; 0x49
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f896 	bl	8004680 <memset>
	//{"$GPGGA,014729.10,4303.5753,N,08019.0810,W,1,6,1.761,214.682,M,0,M,0,*5D"}; //
	//$GPGGA,14732.4,4306.6233,N,8042.15,W,1,5,1.761,215.74,M,0,M,0,*5D


	struct gpsData message;
	int8_t position = 6;
 8001554:	2306      	movs	r3, #6
 8001556:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
	int8_t buttonPushed = 0; //which button is pressed
 800155a:	2300      	movs	r3, #0
 800155c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

	float time = 0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int hours = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int minutes = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float seconds = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float latitude = 0;
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int degrees = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	int minutess = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float decimal = 0;
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float longitude = 0;
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float altitude = 0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(state)
 80015a8:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
 80015ac:	3b01      	subs	r3, #1
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d8fa      	bhi.n	80015a8 <main+0x108>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <main+0x118>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015d5 	.word	0x080015d5
 80015bc:	080015fd 	.word	0x080015fd
 80015c0:	080016c1 	.word	0x080016c1
 80015c4:	08001727 	.word	0x08001727
 80015c8:	08001835 	.word	0x08001835
 80015cc:	080018eb 	.word	0x080018eb
 80015d0:	080019af 	.word	0x080019af
	  {
	  case 1: // Retreiving Data

		  printLcdVcn("Retrieving Data"," ");
 80015d4:	498b      	ldr	r1, [pc, #556]	; (8001804 <main+0x364>)
 80015d6:	488c      	ldr	r0, [pc, #560]	; (8001808 <main+0x368>)
 80015d8:	f000 fbba 	bl	8001d50 <printLcdVcn>
		  scanf("%s",stringData); //waiting for data through putty
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4619      	mov	r1, r3
 80015e2:	488a      	ldr	r0, [pc, #552]	; (800180c <main+0x36c>)
 80015e4:	f003 fd40 	bl	8005068 <iscanf>
		  printf("%s \r\n",stringData);
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4619      	mov	r1, r3
 80015ee:	4888      	ldr	r0, [pc, #544]	; (8001810 <main+0x370>)
 80015f0:	f003 fcaa 	bl	8004f48 <iprintf>

		  state = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	  break;
 80015fa:	e202      	b.n	8001a02 <main+0x562>

	  case 2:// Processing Data (split data)

		    printLcdVcn("Processing Data..."," ");
 80015fc:	4981      	ldr	r1, [pc, #516]	; (8001804 <main+0x364>)
 80015fe:	4885      	ldr	r0, [pc, #532]	; (8001814 <main+0x374>)
 8001600:	f000 fba6 	bl	8001d50 <printLcdVcn>

			const char *delim = ",";
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <main+0x378>)
 8001606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			message.time = strtok(stringData,delim);
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fbd8 	bl	8005dc8 <strtok>
 8001618:	4603      	mov	r3, r0
 800161a:	607b      	str	r3, [r7, #4]
			message.time = strtok(NULL,delim);
 800161c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001620:	2000      	movs	r0, #0
 8001622:	f004 fbd1 	bl	8005dc8 <strtok>
 8001626:	4603      	mov	r3, r0
 8001628:	607b      	str	r3, [r7, #4]

			message.latitude = strtok(NULL,delim);
 800162a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800162e:	2000      	movs	r0, #0
 8001630:	f004 fbca 	bl	8005dc8 <strtok>
 8001634:	4603      	mov	r3, r0
 8001636:	60bb      	str	r3, [r7, #8]
			message.latitudeM = strtok(NULL,delim);
 8001638:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800163c:	2000      	movs	r0, #0
 800163e:	f004 fbc3 	bl	8005dc8 <strtok>
 8001642:	4603      	mov	r3, r0
 8001644:	60fb      	str	r3, [r7, #12]

			message.longitude = strtok(NULL,delim);
 8001646:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800164a:	2000      	movs	r0, #0
 800164c:	f004 fbbc 	bl	8005dc8 <strtok>
 8001650:	4603      	mov	r3, r0
 8001652:	613b      	str	r3, [r7, #16]
			message.longitudeM = strtok(NULL,delim);
 8001654:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001658:	2000      	movs	r0, #0
 800165a:	f004 fbb5 	bl	8005dc8 <strtok>
 800165e:	4603      	mov	r3, r0
 8001660:	617b      	str	r3, [r7, #20]

			while( position < 10)
 8001662:	e020      	b.n	80016a6 <main+0x206>
			{

				if(position == 9){
 8001664:	f997 30be 	ldrsb.w	r3, [r7, #190]	; 0xbe
 8001668:	2b09      	cmp	r3, #9
 800166a:	d10e      	bne.n	800168a <main+0x1ea>
					message.altitude = strtok(NULL,delim);
 800166c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001670:	2000      	movs	r0, #0
 8001672:	f004 fba9 	bl	8005dc8 <strtok>
 8001676:	4603      	mov	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]
					message.altitudeM = strtok(NULL,delim);
 800167a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800167e:	2000      	movs	r0, #0
 8001680:	f004 fba2 	bl	8005dc8 <strtok>
 8001684:	4603      	mov	r3, r0
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	e006      	b.n	8001698 <main+0x1f8>
				}
				else
				{
					message.altitudeM = strtok(NULL,delim);
 800168a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800168e:	2000      	movs	r0, #0
 8001690:	f004 fb9a 	bl	8005dc8 <strtok>
 8001694:	4603      	mov	r3, r0
 8001696:	61fb      	str	r3, [r7, #28]
				}

					position ++;
 8001698:	f997 30be 	ldrsb.w	r3, [r7, #190]	; 0xbe
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			while( position < 10)
 80016a6:	f997 30be 	ldrsb.w	r3, [r7, #190]	; 0xbe
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	ddda      	ble.n	8001664 <main+0x1c4>
			}

		    HAL_Delay(processingTime);
 80016ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fd92 	bl	80021dc <HAL_Delay>

		    state = 3;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		  break;
 80016be:	e1a0      	b.n	8001a02 <main+0x562>

	  case 3: //task selection
		  printLcdVcn("1)Time,2)Latitu", "3)Longi,4)Altitu");
 80016c0:	4956      	ldr	r1, [pc, #344]	; (800181c <main+0x37c>)
 80016c2:	4857      	ldr	r0, [pc, #348]	; (8001820 <main+0x380>)
 80016c4:	f000 fb44 	bl	8001d50 <printLcdVcn>
		  buttonPushed = readPush(buttonsPin, numberOfButtons, port, mode);//wait for PB
 80016c8:	f997 30bc 	ldrsb.w	r3, [r7, #188]	; 0xbc
 80016cc:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 80016d0:	f997 10bb 	ldrsb.w	r1, [r7, #187]	; 0xbb
 80016d4:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80016d8:	f000 faae 	bl	8001c38 <readPush>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

		  switch (buttonPushed){ //which PB was pressed
 80016e2:	f997 30b3 	ldrsb.w	r3, [r7, #179]	; 0xb3
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	f200 818a 	bhi.w	8001a00 <main+0x560>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <main+0x254>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001705 	.word	0x08001705
 80016f8:	0800170d 	.word	0x0800170d
 80016fc:	08001715 	.word	0x08001715
 8001700:	0800171d 	.word	0x0800171d
		  	  case 0: //PB 1
		  		  	 state = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			  break;
 800170a:	e00b      	b.n	8001724 <main+0x284>
		  	  case 1: //PB 2
		  		  	  state = 5;
 800170c:	2305      	movs	r3, #5
 800170e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		  	  break;
 8001712:	e007      	b.n	8001724 <main+0x284>
		  	  case 2: //PB 3
		  		  	  state = 6;
 8001714:	2306      	movs	r3, #6
 8001716:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			  break;
 800171a:	e003      	b.n	8001724 <main+0x284>
		  	  case 3: //PB 4
		  		      state =7;
 800171c:	2307      	movs	r3, #7
 800171e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		  	  break;
 8001722:	bf00      	nop
		  }

	  break;
 8001724:	e16c      	b.n	8001a00 <main+0x560>

	  case 4://Time

		time = atof(message.time);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 ff79 	bl	8004620 <atof>
 800172e:	ec54 3b10 	vmov	r3, r4, d0
 8001732:	4618      	mov	r0, r3
 8001734:	4621      	mov	r1, r4
 8001736:	f7ff fa57 	bl	8000be8 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		hours = time/10000;
 8001740:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001744:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001830 <main+0x390>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		minutes = (time - (hours*10000))/100;
 8001758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001770:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001774:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800182c <main+0x38c>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		seconds = (time - (hours*10000)-(minutes*100));
 8001788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800178c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80017a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017a8:	2264      	movs	r2, #100	; 0x64
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ba:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

		sprintf(printBuffer," %dh %dm %2.2fs",hours, minutes, seconds);
 80017be:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80017ce:	e9cd 3400 	strd	r3, r4, [sp]
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80017da:	4912      	ldr	r1, [pc, #72]	; (8001824 <main+0x384>)
 80017dc:	f003 fc5c 	bl	8005098 <siprintf>
		printLcdVcn("Time:" ,printBuffer);
 80017e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4810      	ldr	r0, [pc, #64]	; (8001828 <main+0x388>)
 80017e8:	f000 fab2 	bl	8001d50 <printLcdVcn>

		HAL_Delay(processingTime); //wait for 5 sec
 80017ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fcf3 	bl	80021dc <HAL_Delay>

		state = 3; //go to Task selection
 80017f6:	2303      	movs	r3, #3
 80017f8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	 break;
 80017fc:	e101      	b.n	8001a02 <main+0x562>
 80017fe:	bf00      	nop
 8001800:	08009458 	.word	0x08009458
 8001804:	08009390 	.word	0x08009390
 8001808:	08009394 	.word	0x08009394
 800180c:	080093a4 	.word	0x080093a4
 8001810:	080093a8 	.word	0x080093a8
 8001814:	080093b0 	.word	0x080093b0
 8001818:	080093c4 	.word	0x080093c4
 800181c:	080093c8 	.word	0x080093c8
 8001820:	080093dc 	.word	0x080093dc
 8001824:	080093ec 	.word	0x080093ec
 8001828:	080093fc 	.word	0x080093fc
 800182c:	42c80000 	.word	0x42c80000
 8001830:	461c4000 	.word	0x461c4000

	  case 5://latitude

		latitude = atoff(message.latitude);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fef5 	bl	8004626 <atoff>
 800183c:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
		degrees = latitude/100;
 8001840:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001844:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 800182c <main+0x38c>
 8001848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001850:	ee17 3a90 	vmov	r3, s15
 8001854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		minutess = latitude - (degrees*100);
 8001858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800185c:	2264      	movs	r2, #100	; 0x64
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800186e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 3a90 	vmov	r3, s15
 800187a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		decimal = (latitude - ((degrees*100)+minutess))*10000;
 800187e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001882:	2264      	movs	r2, #100	; 0x64
 8001884:	fb02 f203 	mul.w	r2, r2, r3
 8001888:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800188c:	4413      	add	r3, r2
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189e:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8001830 <main+0x390>
 80018a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(printBuffer," %dd %dm %.0fdd",degrees, minutess, decimal);
 80018aa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80018ae:	f7fe fe4b 	bl	8000548 <__aeabi_f2d>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80018ba:	e9cd 3400 	strd	r3, r4, [sp]
 80018be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018c6:	494f      	ldr	r1, [pc, #316]	; (8001a04 <main+0x564>)
 80018c8:	f003 fbe6 	bl	8005098 <siprintf>
		printLcdVcn("Latitude:",printBuffer);
 80018cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018d0:	4619      	mov	r1, r3
 80018d2:	484d      	ldr	r0, [pc, #308]	; (8001a08 <main+0x568>)
 80018d4:	f000 fa3c 	bl	8001d50 <printLcdVcn>

		HAL_Delay(processingTime); //wait for 5 sec
 80018d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fc7d 	bl	80021dc <HAL_Delay>

		state = 3; // go to Task selection
 80018e2:	2303      	movs	r3, #3
 80018e4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	  break;
 80018e8:	e08b      	b.n	8001a02 <main+0x562>

	  case 6://Longitude

        longitude = atof(message.longitude);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fe97 	bl	8004620 <atof>
 80018f2:	ec54 3b10 	vmov	r3, r4, d0
 80018f6:	4618      	mov	r0, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	f7ff f975 	bl	8000be8 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        degrees = longitude/100;
 8001904:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001908:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001a0c <main+0x56c>
 800190c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001914:	ee17 3a90 	vmov	r3, s15
 8001918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        minutess = longitude - (degrees*100);
 800191c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001920:	2264      	movs	r2, #100	; 0x64
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        decimal = (longitude - ((degrees*100)+minutess))*10000;
 8001942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001946:	2264      	movs	r2, #100	; 0x64
 8001948:	fb02 f203 	mul.w	r2, r2, r3
 800194c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001950:	4413      	add	r3, r2
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001a10 <main+0x570>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(printBuffer," %dd %dm %4.0fdd",degrees, minutess, decimal);
 800196e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001972:	f7fe fde9 	bl	8000548 <__aeabi_f2d>
 8001976:	4603      	mov	r3, r0
 8001978:	460c      	mov	r4, r1
 800197a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800197e:	e9cd 3400 	strd	r3, r4, [sp]
 8001982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001986:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800198a:	4922      	ldr	r1, [pc, #136]	; (8001a14 <main+0x574>)
 800198c:	f003 fb84 	bl	8005098 <siprintf>
		printLcdVcn("longitude:",printBuffer);
 8001990:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001994:	4619      	mov	r1, r3
 8001996:	4820      	ldr	r0, [pc, #128]	; (8001a18 <main+0x578>)
 8001998:	f000 f9da 	bl	8001d50 <printLcdVcn>

		HAL_Delay(processingTime);//wait for 5 sec
 800199c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fc1b 	bl	80021dc <HAL_Delay>

		state=3; //go to task selection
 80019a6:	2303      	movs	r3, #3
 80019a8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      break;
 80019ac:	e029      	b.n	8001a02 <main+0x562>

	  case 7: //Altitude
		  altitude = atof(message.altitude);
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fe35 	bl	8004620 <atof>
 80019b6:	ec54 3b10 	vmov	r3, r4, d0
 80019ba:	4618      	mov	r0, r3
 80019bc:	4621      	mov	r1, r4
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  sprintf(printBuffer, " %.3f meter",altitude);
 80019c8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80019cc:	f7fe fdbc 	bl	8000548 <__aeabi_f2d>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	490f      	ldr	r1, [pc, #60]	; (8001a1c <main+0x57c>)
 80019de:	f003 fb5b 	bl	8005098 <siprintf>
		  printLcdVcn("Altitude", printBuffer);
 80019e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019e6:	4619      	mov	r1, r3
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <main+0x580>)
 80019ea:	f000 f9b1 	bl	8001d50 <printLcdVcn>

		  HAL_Delay(processingTime); //wait for 5 sec
 80019ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fbf2 	bl	80021dc <HAL_Delay>

		  state= 3; //go to task selection
 80019f8:	2303      	movs	r3, #3
 80019fa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  break;
 80019fe:	e000      	b.n	8001a02 <main+0x562>
	  break;
 8001a00:	bf00      	nop
	  switch(state)
 8001a02:	e5d1      	b.n	80015a8 <main+0x108>
 8001a04:	08009404 	.word	0x08009404
 8001a08:	08009414 	.word	0x08009414
 8001a0c:	42c80000 	.word	0x42c80000
 8001a10:	461c4000 	.word	0x461c4000
 8001a14:	08009420 	.word	0x08009420
 8001a18:	08009434 	.word	0x08009434
 8001a1c:	08009440 	.word	0x08009440
 8001a20:	0800944c 	.word	0x0800944c

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0ac      	sub	sp, #176	; 0xb0
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a2e:	2244      	movs	r2, #68	; 0x44
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fe24 	bl	8004680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2254      	movs	r2, #84	; 0x54
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fe16 	bl	8004680 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001a54:	f000 fe64 	bl	8002720 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a58:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <SystemClock_Config+0x100>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <SystemClock_Config+0x100>)
 8001a60:	f023 0318 	bic.w	r3, r3, #24
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a68:	2314      	movs	r3, #20
 8001a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a7c:	2360      	movs	r3, #96	; 0x60
 8001a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a94:	2310      	movs	r3, #16
 8001a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fea9 	bl	8002808 <HAL_RCC_OscConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001abc:	f000 f970 	bl	8001da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fab4 	bl	8003048 <HAL_RCC_ClockConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ae6:	f000 f95b 	bl	8001da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fcab 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001b00:	f000 f94e 	bl	8001da0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b08:	f000 fe28 	bl	800275c <HAL_PWREx_ControlVoltageScaling>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001b12:	f000 f945 	bl	8001da0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b16:	f001 fe8d 	bl	8003834 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b1a:	bf00      	nop
 8001b1c:	37b0      	adds	r7, #176	; 0xb0
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000

08001b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <MX_USART2_UART_Init+0x5c>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USART2_UART_Init+0x58>)
 8001b6c:	f001 ff62 	bl	8003a34 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 f913 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000204 	.word	0x20000204
 8001b84:	40004400 	.word	0x40004400

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_GPIO_Init+0xa8>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001be6:	2200      	movs	r2, #0
 8001be8:	21fb      	movs	r1, #251	; 0xfb
 8001bea:	4812      	ldr	r0, [pc, #72]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bec:	f000 fd80 	bl	80026f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8001bf0:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8001bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f000 fbf0 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001c0c:	23fb      	movs	r3, #251	; 0xfb
 8001c0e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001c24:	f000 fbe2 	bl	80023ec <HAL_GPIO_Init>

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000400 	.word	0x48000400

08001c38 <readPush>:
  * 					 char port: port of the pin input.
  * 				     int8_t mode: mode of the pin input. 0 for Pullup and 1 Pulldown
  *
  * RETURN			   : int8_t button: the number of the PB pressed.
  */
int8_t readPush(int16_t buttonsPin [], int8_t numberOfButtons, char port, int8_t mode) {
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	70fb      	strb	r3, [r7, #3]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70bb      	strb	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	707b      	strb	r3, [r7, #1]
 8001c52:	466b      	mov	r3, sp
 8001c54:	461d      	mov	r5, r3

int8_t button = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	74fb      	strb	r3, [r7, #19]
int8_t pushContains [numberOfButtons];
 8001c5a:	f997 0003 	ldrsb.w	r0, [r7, #3]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	f04f 0400 	mov.w	r4, #0
 8001c74:	00d4      	lsls	r4, r2, #3
 8001c76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c7a:	00cb      	lsls	r3, r1, #3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	00d4      	lsls	r4, r2, #3
 8001c8e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c92:	00cb      	lsls	r3, r1, #3
 8001c94:	4603      	mov	r3, r0
 8001c96:	3307      	adds	r3, #7
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001ca0:	466b      	mov	r3, sp
 8001ca2:	3300      	adds	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]

for(int i = 0; i < numberOfButtons; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e016      	b.n	8001cda <readPush+0xa2>
{
	pushContains[i] = deBounceReadPin(buttonsPin[i], port, mode); // read PB 1
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001cbe:	78b9      	ldrb	r1, [r7, #2]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fb6f 	bl	80013a4 <deBounceReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
for(int i = 0; i < numberOfButtons; i++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbe3      	blt.n	8001cac <readPush+0x74>
}


// check if a PB hasn't been pressed and is lower than the number of buttons
while(pushContains[button] && button < numberOfButtons)
 8001ce4:	e021      	b.n	8001d2a <readPush+0xf2>
		{
			pushContains[button] = deBounceReadPin(buttonsPin[button], port, mode);
 8001ce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	f997 4013 	ldrsb.w	r4, [r7, #19]
 8001cfa:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001cfe:	78b9      	ldrb	r1, [r7, #2]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fb4f 	bl	80013a4 <deBounceReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	551a      	strb	r2, [r3, r4]
			button ++;
 8001d0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	74fb      	strb	r3, [r7, #19]

			if(button == numberOfButtons) // restart the variable button
 8001d1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d101      	bne.n	8001d2a <readPush+0xf2>
			{
			button = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	74fb      	strb	r3, [r7, #19]
while(pushContains[button] && button < numberOfButtons)
 8001d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	56d3      	ldrsb	r3, [r2, r3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <readPush+0x10a>
 8001d36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbd1      	blt.n	8001ce6 <readPush+0xae>
			}
		}

return button;
 8001d42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d46:	46ad      	mov	sp, r5
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}

08001d50 <printLcdVcn>:
  * 					 char printBuffer2[]: the second line string to be printed.
  *
  * RETURN			   : no return.
  */
void printLcdVcn(char printBuffer1[], char printBuffer2[])
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]

//printing in the LCD
	HD44780_ClrScr();
 8001d5a:	f7ff fad3 	bl	8001304 <HD44780_ClrScr>
	HD44780_GotoXY(0, 0);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fa7b 	bl	800125c <HD44780_GotoXY>
	HD44780_PutStr(printBuffer1); //print LCD
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fab2 	bl	80012d0 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff fa74 	bl	800125c <HD44780_GotoXY>
	HD44780_PutStr(printBuffer2);
 8001d74:	6838      	ldr	r0, [r7, #0]
 8001d76:	f7ff faab 	bl	80012d0 <HD44780_PutStr>

 //printing the same values through the serial port
	printf(printBuffer1);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f003 f8e4 	bl	8004f48 <iprintf>
	printf(" ");
 8001d80:	2020      	movs	r0, #32
 8001d82:	f003 f8f9 	bl	8004f78 <putchar>
	printf(printBuffer2);
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f003 f8de 	bl	8004f48 <iprintf>
	printf(" \r \n");
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <printLcdVcn+0x4c>)
 8001d8e:	f003 f963 	bl	8005058 <puts>

}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08009460 	.word	0x08009460

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_MspInit+0x44>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_MspInit+0x44>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_MspInit+0x44>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x44>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_UART_MspInit+0xa0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d13a      	bne.n	8001e90 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f000 fac0 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8c:	f000 faae 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef4:	f000 f954 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001f08:	2301      	movs	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <_read+0x38>)
 8001f18:	f001 fe6d 	bl	8003bf6 <HAL_UART_Receive>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	607b      	str	r3, [r7, #4]

	return len;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000204 	.word	0x20000204

08001f38 <_write>:

int _write(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <_write+0x40>)
 8001f54:	f001 fdbc 	bl	8003ad0 <HAL_UART_Transmit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d002      	beq.n	8001f68 <_write+0x30>
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d101      	bne.n	8001f6c <_write+0x34>
	{
		Error_Handler();
 8001f68:	f7ff ff1a 	bl	8001da0 <Error_Handler>
	}

	return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000204 	.word	0x20000204

08001f7c <_close>:



int _close(int file)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa4:	605a      	str	r2, [r3, #4]
	return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_isatty>:

int _isatty(int file)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	return 1;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
	return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_sbrk+0x50>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x16>
		heap_end = &end;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <_sbrk+0x50>)
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <_sbrk+0x54>)
 8001ff8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <_sbrk+0x50>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <_sbrk+0x50>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	466a      	mov	r2, sp
 800200a:	4293      	cmp	r3, r2
 800200c:	d907      	bls.n	800201e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800200e:	f002 fb0d 	bl	800462c <__errno>
 8002012:	4602      	mov	r2, r0
 8002014:	230c      	movs	r3, #12
 8002016:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	e006      	b.n	800202c <_sbrk+0x48>
	}

	heap_end += incr;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <_sbrk+0x50>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a03      	ldr	r2, [pc, #12]	; (8002034 <_sbrk+0x50>)
 8002028:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200001f8 	.word	0x200001f8
 8002038:	20000290 	.word	0x20000290

0800203c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <SystemInit+0x64>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <SystemInit+0x64>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <SystemInit+0x68>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <SystemInit+0x68>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <SystemInit+0x68>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <SystemInit+0x68>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <SystemInit+0x68>)
 8002068:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800206c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <SystemInit+0x68>)
 8002074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002078:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <SystemInit+0x68>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <SystemInit+0x68>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <SystemInit+0x68>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SystemInit+0x64>)
 800208e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002092:	609a      	str	r2, [r3, #8]
#endif
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00
 80020a4:	40021000 	.word	0x40021000

080020a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020ae:	e003      	b.n	80020b8 <LoopCopyDataInit>

080020b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020b6:	3104      	adds	r1, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80020bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020c0:	d3f6      	bcc.n	80020b0 <CopyDataInit>
	ldr	r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020c4:	e002      	b.n	80020cc <LoopFillZerobss>

080020c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020c8:	f842 3b04 	str.w	r3, [r2], #4

080020cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <LoopForever+0x16>)
	cmp	r2, r3
 80020ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020d0:	d3f9      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020d2:	f7ff ffb3 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f002 faaf 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020da:	f7ff f9e1 	bl	80014a0 <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020e0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80020e4:	080097fc 	.word	0x080097fc
	ldr	r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020ec:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80020f0:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80020f4:	2000028c 	.word	0x2000028c

080020f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC1_IRQHandler>

080020fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 f93d 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210a:	2000      	movs	r0, #0
 800210c:	f000 f80e 	bl	800212c <HAL_InitTick>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e001      	b.n	8002120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800211c:	f7ff fe48 	bl	8001db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002120:	79fb      	ldrb	r3, [r7, #7]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_InitTick+0x68>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d022      	beq.n	8002186 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_InitTick+0x6c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_InitTick+0x68>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800214c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f93c 	bl	80023d2 <HAL_SYSTICK_Config>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10f      	bne.n	8002180 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	d809      	bhi.n	800217a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002166:	2200      	movs	r2, #0
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	f04f 30ff 	mov.w	r0, #4294967295
 800216e:	f000 f914 	bl	800239a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_InitTick+0x70>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e007      	b.n	800218a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e004      	b.n	800218a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000008 	.word	0x20000008
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_IncTick+0x1c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_IncTick+0x20>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a03      	ldr	r2, [pc, #12]	; (80021bc <HAL_IncTick+0x1c>)
 80021b0:	6013      	str	r3, [r2, #0]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20000284 	.word	0x20000284
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_GetTick+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000284 	.word	0x20000284

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff ffee 	bl	80021c4 <HAL_GetTick>
 80021e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d004      	beq.n	8002200 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_Delay+0x40>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002200:	bf00      	nop
 8002202:	f7ff ffdf 	bl	80021c4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	429a      	cmp	r2, r3
 8002210:	d8f7      	bhi.n	8002202 <HAL_Delay+0x26>
  {
  }
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff47 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff5c 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffb0 	bl	8002340 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e148      	b.n	800268e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 813a 	beq.w	8002688 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00b      	beq.n	8002434 <HAL_GPIO_Init+0x48>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002428:	2b11      	cmp	r3, #17
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b12      	cmp	r3, #18
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0xea>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8094 	beq.w	8002688 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002560:	4b52      	ldr	r3, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x2c0>)
 8002562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x2c0>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6613      	str	r3, [r2, #96]	; 0x60
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_GPIO_Init+0x2c0>)
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002578:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <HAL_GPIO_Init+0x2c4>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a2:	d00d      	beq.n	80025c0 <HAL_GPIO_Init+0x1d4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <HAL_GPIO_Init+0x1d0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_GPIO_Init+0x2cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_GPIO_Init+0x1cc>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e004      	b.n	80025c2 <HAL_GPIO_Init+0x1d6>
 80025b8:	2307      	movs	r3, #7
 80025ba:	e002      	b.n	80025c2 <HAL_GPIO_Init+0x1d6>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_GPIO_Init+0x1d6>
 80025c0:	2300      	movs	r3, #0
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	f002 0203 	and.w	r2, r2, #3
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	4093      	lsls	r3, r2
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025d2:	4937      	ldr	r1, [pc, #220]	; (80026b0 <HAL_GPIO_Init+0x2c4>)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002604:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f aeaf 	bne.w	80023fc <HAL_GPIO_Init+0x10>
  }
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	48000400 	.word	0x48000400
 80026b8:	48000800 	.word	0x48000800
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800270c:	e002      	b.n	8002714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40007000 	.word	0x40007000

08002740 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_PWREx_GetVoltageRange+0x18>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40007000 	.word	0x40007000

0800275c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276a:	d130      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002778:	d038      	beq.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2232      	movs	r2, #50	; 0x32
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0c9b      	lsrs	r3, r3, #18
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a0:	e002      	b.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b4:	d102      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f2      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c8:	d110      	bne.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e00f      	b.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d007      	beq.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e4:	4a05      	ldr	r2, [pc, #20]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40007000 	.word	0x40007000
 8002800:	20000000 	.word	0x20000000
 8002804:	431bde83 	.word	0x431bde83

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f000 bc11 	b.w	800303e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281c:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002826:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80e4 	beq.w	8002a06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_RCC_OscConfig+0x4c>
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	f040 808b 	bne.w	8002962 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b01      	cmp	r3, #1
 8002850:	f040 8087 	bne.w	8002962 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x64>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e3e8      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <HAL_RCC_OscConfig+0x7e>
 800287c:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002884:	e005      	b.n	8002892 <HAL_RCC_OscConfig+0x8a>
 8002886:	4b86      	ldr	r3, [pc, #536]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002892:	4293      	cmp	r3, r2
 8002894:	d223      	bcs.n	80028de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fd78 	bl	8003390 <RCC_SetFlashLatencyFromMSIRange>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e3c9      	b.n	800303e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7c      	ldr	r2, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b7a      	ldr	r3, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4977      	ldr	r1, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	4972      	ldr	r1, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
 80028dc:	e025      	b.n	800292a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028de:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6f      	ldr	r2, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	496a      	ldr	r1, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	4965      	ldr	r1, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fd38 	bl	8003390 <RCC_SetFlashLatencyFromMSIRange>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e389      	b.n	800303e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800292a:	f000 fc6f 	bl	800320c <HAL_RCC_GetSysClockFreq>
 800292e:	4601      	mov	r1, r0
 8002930:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	4a5a      	ldr	r2, [pc, #360]	; (8002aa4 <HAL_RCC_OscConfig+0x29c>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	fa21 f303 	lsr.w	r3, r1, r3
 8002946:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_OscConfig+0x2a0>)
 8002948:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800294a:	4b58      	ldr	r3, [pc, #352]	; (8002aac <HAL_RCC_OscConfig+0x2a4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fbec 	bl	800212c <HAL_InitTick>
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d052      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	e36d      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d032      	beq.n	80029d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800296a:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a4c      	ldr	r2, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002976:	f7ff fc25 	bl	80021c4 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297e:	f7ff fc21 	bl	80021c4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e356      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3f      	ldr	r2, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029a2:	f043 0308 	orr.w	r3, r3, #8
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	493a      	ldr	r1, [pc, #232]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
 80029ce:	e01a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029d0:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a32      	ldr	r2, [pc, #200]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fbf2 	bl	80021c4 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e4:	f7ff fbee 	bl	80021c4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e323      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1dc>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d073      	beq.n	8002afa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x21c>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d10e      	bne.n	8002a3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d063      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d15f      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e300      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x24c>
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e01d      	b.n	8002a90 <HAL_RCC_OscConfig+0x288>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x270>
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x288>
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <HAL_RCC_OscConfig+0x298>)
 8002a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7ff fb94 	bl	80021c4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	e010      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2ba>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08009470 	.word	0x08009470
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fb88 	bl	80021c4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e2bd      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac2:	4baf      	ldr	r3, [pc, #700]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2a8>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fb78 	bl	80021c4 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff fb74 	bl	80021c4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e2a9      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aea:	4ba5      	ldr	r3, [pc, #660]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2d0>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d060      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_OscConfig+0x310>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d119      	bne.n	8002b46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d116      	bne.n	8002b46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b18:	4b99      	ldr	r3, [pc, #612]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_OscConfig+0x328>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e286      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b93      	ldr	r3, [pc, #588]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	4990      	ldr	r1, [pc, #576]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b44:	e040      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d023      	beq.n	8002b96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4e:	4b8c      	ldr	r3, [pc, #560]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a8b      	ldr	r2, [pc, #556]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7ff fb33 	bl	80021c4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7ff fb2f 	bl	80021c4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e264      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b74:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b7f      	ldr	r3, [pc, #508]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	497c      	ldr	r1, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	e018      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a79      	ldr	r2, [pc, #484]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fb0f 	bl	80021c4 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff fb0b 	bl	80021c4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e240      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bbc:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d03c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	4a67      	ldr	r2, [pc, #412]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7ff faea 	bl	80021c4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7ff fae6 	bl	80021c4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e21b      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c06:	4b5e      	ldr	r3, [pc, #376]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ef      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x3ec>
 8002c14:	e01b      	b.n	8002c4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c16:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7ff facd 	bl	80021c4 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7ff fac9 	bl	80021c4 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1fe      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c40:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ef      	bne.n	8002c2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80a6 	beq.w	8002da8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c60:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4a43      	ldr	r2, [pc, #268]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
 8002c78:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d118      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca0:	f7ff fa90 	bl	80021c4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7ff fa8c 	bl	80021c4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1c1      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cba:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4d8>
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cde:	e024      	b.n	8002d2a <HAL_RCC_OscConfig+0x522>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d110      	bne.n	8002d0a <HAL_RCC_OscConfig+0x502>
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d08:	e00f      	b.n	8002d2a <HAL_RCC_OscConfig+0x522>
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d22:	f023 0304 	bic.w	r3, r3, #4
 8002d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7ff fa47 	bl	80021c4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7ff fa43 	bl	80021c4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e176      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ed      	beq.n	8002d3a <HAL_RCC_OscConfig+0x532>
 8002d5e:	e01a      	b.n	8002d96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7ff fa30 	bl	80021c4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d66:	e00f      	b.n	8002d88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7ff fa2c 	bl	80021c4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d906      	bls.n	8002d88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e15f      	b.n	800303e <HAL_RCC_OscConfig+0x836>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d88:	4baa      	ldr	r3, [pc, #680]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e8      	bne.n	8002d68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4ba5      	ldr	r3, [pc, #660]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	4aa4      	ldr	r2, [pc, #656]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dbc:	4b9d      	ldr	r3, [pc, #628]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc2:	4a9c      	ldr	r2, [pc, #624]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7ff f9fa 	bl	80021c4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd4:	f7ff f9f6 	bl	80021c4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e12b      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002de6:	4b93      	ldr	r3, [pc, #588]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ef      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x5cc>
 8002df4:	e01b      	b.n	8002e2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002df6:	4b8f      	ldr	r3, [pc, #572]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dfc:	4a8d      	ldr	r2, [pc, #564]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7ff f9dd 	bl	80021c4 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0e:	f7ff f9d9 	bl	80021c4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e10e      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e20:	4b84      	ldr	r3, [pc, #528]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ef      	bne.n	8002e0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8102 	beq.w	800303c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 80c5 	bne.w	8002fcc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e42:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0203 	and.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d12c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	3b01      	subs	r3, #1
 8002e62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d123      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d11b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d113      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d067      	beq.n	8002f80 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d062      	beq.n	8002f7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0bb      	b.n	800303e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ed2:	f7ff f977 	bl	80021c4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7ff f973 	bl	80021c4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0a8      	b.n	800303e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <HAL_RCC_OscConfig+0x830>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f08:	3a01      	subs	r2, #1
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f12:	0212      	lsls	r2, r2, #8
 8002f14:	4311      	orrs	r1, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0552      	lsls	r2, r2, #21
 8002f20:	4311      	orrs	r1, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f26:	0852      	lsrs	r2, r2, #1
 8002f28:	3a01      	subs	r2, #1
 8002f2a:	0652      	lsls	r2, r2, #25
 8002f2c:	4311      	orrs	r1, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f32:	06d2      	lsls	r2, r2, #27
 8002f34:	430a      	orrs	r2, r1
 8002f36:	493f      	ldr	r1, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a39      	ldr	r2, [pc, #228]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f54:	f7ff f936 	bl	80021c4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7ff f932 	bl	80021c4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e067      	b.n	800303e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7a:	e05f      	b.n	800303c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e05e      	b.n	800303e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f80:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d157      	bne.n	800303c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a28      	ldr	r2, [pc, #160]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fa4:	f7ff f90e 	bl	80021c4 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7ff f90a 	bl	80021c4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e03f      	b.n	800303e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x7a4>
 8002fca:	e037      	b.n	800303c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d02d      	beq.n	800302e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002ff0:	f023 0303 	bic.w	r3, r3, #3
 8002ff4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8002ffc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7ff f8dd 	bl	80021c4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7ff f8d9 	bl	80021c4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e00e      	b.n	800303e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <HAL_RCC_OscConfig+0x82c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x806>
 800302c:	e006      	b.n	800303c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e005      	b.n	800303e <HAL_RCC_OscConfig+0x836>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop

08003048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0c8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d910      	bls.n	800308c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 0207 	bic.w	r2, r3, #7
 8003072:	4961      	ldr	r1, [pc, #388]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0b0      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04c      	beq.n	8003132 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a0:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e09e      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d115      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e092      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d0:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e086      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e07e      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 0203 	bic.w	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	493f      	ldr	r1, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003102:	f7ff f85f 	bl	80021c4 <HAL_GetTick>
 8003106:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003108:	e00a      	b.n	8003120 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310a:	f7ff f85b 	bl	80021c4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e066      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003120:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 020c 	and.w	r2, r3, #12
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	429a      	cmp	r2, r3
 8003130:	d1eb      	bne.n	800310a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	492c      	ldr	r1, [pc, #176]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d210      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	4924      	ldr	r1, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e036      	b.n	80031ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4918      	ldr	r1, [pc, #96]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4910      	ldr	r1, [pc, #64]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031be:	f000 f825 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031c2:	4601      	mov	r1, r0
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_RCC_ClockConfig+0x1b4>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	fa21 f303 	lsr.w	r3, r1, r3
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe ffa2 	bl	800212c <HAL_InitTick>
 80031e8:	4603      	mov	r3, r0
 80031ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ec:	7afb      	ldrb	r3, [r7, #11]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
 8003200:	08009470 	.word	0x08009470
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003224:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x34>
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d121      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d11e      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003240:	4b33      	ldr	r3, [pc, #204]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e005      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d102      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e004      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d101      	bne.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_GetSysClockFreq+0x110>)
 8003292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d133      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d002      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80032ae:	e005      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032b2:	617b      	str	r3, [r7, #20]
      break;
 80032b4:	e005      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_GetSysClockFreq+0x110>)
 80032b8:	617b      	str	r3, [r7, #20]
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	617b      	str	r3, [r7, #20]
      break;
 80032c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	3301      	adds	r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	fb02 f203 	mul.w	r2, r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0e5b      	lsrs	r3, r3, #25
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003302:	69bb      	ldr	r3, [r7, #24]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3724      	adds	r7, #36	; 0x24
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40021000 	.word	0x40021000
 8003314:	08009488 	.word	0x08009488
 8003318:	00f42400 	.word	0x00f42400
 800331c:	007a1200 	.word	0x007a1200

08003320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_GetHCLKFreq+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800333c:	f7ff fff0 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003340:	4601      	mov	r1, r0
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	08009480 	.word	0x08009480

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003368:	f7ff ffda 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 800336c:	4601      	mov	r1, r0
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_RCC_GetPCLK2Freq+0x28>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	08009480 	.word	0x08009480

08003390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800339c:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a8:	f7ff f9ca 	bl	8002740 <HAL_PWREx_GetVoltageRange>
 80033ac:	6178      	str	r0, [r7, #20]
 80033ae:	e014      	b.n	80033da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	4a24      	ldr	r2, [pc, #144]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6593      	str	r3, [r2, #88]	; 0x58
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c8:	f7ff f9ba 	bl	8002740 <HAL_PWREx_GetVoltageRange>
 80033cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d10b      	bne.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b80      	cmp	r3, #128	; 0x80
 80033e6:	d919      	bls.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2ba0      	cmp	r3, #160	; 0xa0
 80033ec:	d902      	bls.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ee:	2302      	movs	r3, #2
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e013      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f4:	2301      	movs	r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	e010      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d902      	bls.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003400:	2303      	movs	r3, #3
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e00a      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d102      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800340c:	2302      	movs	r3, #2
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e004      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b70      	cmp	r3, #112	; 0x70
 8003416:	d101      	bne.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003418:	2301      	movs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 0207 	bic.w	r2, r3, #7
 8003424:	4909      	ldr	r1, [pc, #36]	; (800344c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	40022000 	.word	0x40022000

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003458:	2300      	movs	r3, #0
 800345a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800345c:	2300      	movs	r3, #0
 800345e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02f      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003474:	d005      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003476:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800347a:	d015      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003480:	e00f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003482:	4bac      	ldr	r3, [pc, #688]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4aab      	ldr	r2, [pc, #684]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348e:	e00c      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f9dc 	bl	8003854 <RCCEx_PLLSAI1_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a0:	e003      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	74fb      	strb	r3, [r7, #19]
      break;
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4ba0      	ldr	r3, [pc, #640]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	499d      	ldr	r1, [pc, #628]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034c6:	e001      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8099 	beq.w	800360c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034de:	4b95      	ldr	r3, [pc, #596]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b8f      	ldr	r3, [pc, #572]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a8e      	ldr	r2, [pc, #568]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003500:	4b8c      	ldr	r3, [pc, #560]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350c:	2301      	movs	r3, #1
 800350e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003510:	4b89      	ldr	r3, [pc, #548]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a88      	ldr	r2, [pc, #544]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351c:	f7fe fe52 	bl	80021c4 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003522:	e009      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fe fe4e 	bl	80021c4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d902      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	74fb      	strb	r3, [r7, #19]
        break;
 8003536:	e005      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003538:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0ef      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d155      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800354a:	4b7a      	ldr	r3, [pc, #488]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003554:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	429a      	cmp	r2, r3
 8003564:	d019      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003566:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003570:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003582:	4b6c      	ldr	r3, [pc, #432]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	4a6a      	ldr	r2, [pc, #424]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003592:	4a68      	ldr	r2, [pc, #416]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d016      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fe0e 	bl	80021c4 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	e00b      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe fe0a 	bl	80021c4 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d902      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	74fb      	strb	r3, [r7, #19]
            break;
 80035c2:	e006      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c4:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0ec      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d8:	4b56      	ldr	r3, [pc, #344]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e6:	4953      	ldr	r1, [pc, #332]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ee:	e004      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
 80035f4:	e001      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fa:	7c7b      	ldrb	r3, [r7, #17]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b4c      	ldr	r3, [pc, #304]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	4a4b      	ldr	r2, [pc, #300]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003618:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4943      	ldr	r1, [pc, #268]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f023 020c 	bic.w	r2, r3, #12
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	493a      	ldr	r1, [pc, #232]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800365c:	4b35      	ldr	r3, [pc, #212]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	4932      	ldr	r1, [pc, #200]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800367e:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	4929      	ldr	r1, [pc, #164]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4921      	ldr	r1, [pc, #132]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	4918      	ldr	r1, [pc, #96]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4910      	ldr	r1, [pc, #64]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02c      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d10a      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003726:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a02      	ldr	r2, [pc, #8]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800372c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003730:	60d3      	str	r3, [r2, #12]
 8003732:	e015      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f881 	bl	8003854 <RCCEx_PLLSAI1_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376c:	4b30      	ldr	r3, [pc, #192]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	492d      	ldr	r1, [pc, #180]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d106      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e011      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f852 	bl	8003854 <RCCEx_PLLSAI1_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01c      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	4915      	ldr	r1, [pc, #84]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f82f 	bl	8003854 <RCCEx_PLLSAI1_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003826:	7cbb      	ldrb	r3, [r7, #18]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0203 	and.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d10d      	bne.n	800389a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
       ||
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003886:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
       ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d044      	beq.n	8003924 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e041      	b.n	8003924 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d00c      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x6e>
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d013      	beq.n	80038d4 <RCCEx_PLLSAI1_Config+0x80>
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d120      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038b0:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11d      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e01a      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d2:	e013      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038d4:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038f0:	e006      	b.n	8003900 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      break;
 80038f6:	e004      	b.n	8003902 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003900:	bf00      	nop
    }

    if(status == HAL_OK)
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003908:	4b49      	ldr	r3, [pc, #292]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	3b01      	subs	r3, #1
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	430b      	orrs	r3, r1
 800391e:	4944      	ldr	r1, [pc, #272]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d17c      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003930:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003936:	f7fe fc45 	bl	80021c4 <HAL_GetTick>
 800393a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800393c:	e009      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800393e:	f7fe fc41 	bl	80021c4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d902      	bls.n	8003952 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	73fb      	strb	r3, [r7, #15]
        break;
 8003950:	e005      	b.n	800395e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ef      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d15f      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d110      	bne.n	800398c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003972:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	0211      	lsls	r1, r2, #8
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68d2      	ldr	r2, [r2, #12]
 8003980:	06d2      	lsls	r2, r2, #27
 8003982:	430a      	orrs	r2, r1
 8003984:	492a      	ldr	r1, [pc, #168]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	610b      	str	r3, [r1, #16]
 800398a:	e027      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d112      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003992:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800399a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6892      	ldr	r2, [r2, #8]
 80039a2:	0211      	lsls	r1, r2, #8
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6912      	ldr	r2, [r2, #16]
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0552      	lsls	r2, r2, #21
 80039ae:	430a      	orrs	r2, r1
 80039b0:	491f      	ldr	r1, [pc, #124]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	610b      	str	r3, [r1, #16]
 80039b6:	e011      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6892      	ldr	r2, [r2, #8]
 80039c8:	0211      	lsls	r1, r2, #8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6952      	ldr	r2, [r2, #20]
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0652      	lsls	r2, r2, #25
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4916      	ldr	r1, [pc, #88]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fe fbec 	bl	80021c4 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f0:	f7fe fbe8 	bl	80021c4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
          break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ef      	beq.n	80039f0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e040      	b.n	8003ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe f9ce 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f98c 	bl	8003d90 <UART_SetConfig>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e022      	b.n	8003ac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fc66 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fced 	bl	80044a0 <UART_CheckIdleState>
 8003ac6:	4603      	mov	r3, r0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	f040 8081 	bne.w	8003bec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_UART_Transmit+0x26>
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e079      	b.n	8003bee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_UART_Transmit+0x38>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e072      	b.n	8003bee <HAL_UART_Transmit+0x11e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2221      	movs	r2, #33	; 0x21
 8003b1a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fb52 	bl	80021c4 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	d108      	bne.n	8003b4e <HAL_UART_Transmit+0x7e>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	e003      	b.n	8003b56 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003b5e:	e02d      	b.n	8003bbc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fcdd 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e039      	b.n	8003bee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	3302      	adds	r3, #2
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e008      	b.n	8003baa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1cb      	bne.n	8003b60 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fca9 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e005      	b.n	8003bee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08a      	sub	sp, #40	; 0x28
 8003bfa:	af02      	add	r7, sp, #8
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 80bb 	bne.w	8003d86 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_UART_Receive+0x26>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0b3      	b.n	8003d88 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Receive+0x38>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0ac      	b.n	8003d88 <HAL_UART_Receive+0x192>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2222      	movs	r2, #34	; 0x22
 8003c40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c42:	f7fe fabf 	bl	80021c4 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d10e      	bne.n	8003c80 <HAL_UART_Receive+0x8a>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <HAL_UART_Receive+0x80>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c74:	e02d      	b.n	8003cd2 <HAL_UART_Receive+0xdc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c7e:	e028      	b.n	8003cd2 <HAL_UART_Receive+0xdc>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10d      	bne.n	8003ca4 <HAL_UART_Receive+0xae>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_UART_Receive+0xa4>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c98:	e01b      	b.n	8003cd2 <HAL_UART_Receive+0xdc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	227f      	movs	r2, #127	; 0x7f
 8003c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca2:	e016      	b.n	8003cd2 <HAL_UART_Receive+0xdc>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cac:	d10d      	bne.n	8003cca <HAL_UART_Receive+0xd4>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Receive+0xca>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	227f      	movs	r2, #127	; 0x7f
 8003cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cbe:	e008      	b.n	8003cd2 <HAL_UART_Receive+0xdc>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	223f      	movs	r2, #63	; 0x3f
 8003cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cc8:	e003      	b.n	8003cd2 <HAL_UART_Receive+0xdc>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cd8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	d108      	bne.n	8003cf6 <HAL_UART_Receive+0x100>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e003      	b.n	8003cfe <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d06:	e033      	b.n	8003d70 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2120      	movs	r1, #32
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fc09 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e032      	b.n	8003d88 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10c      	bne.n	8003d42 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	8a7b      	ldrh	r3, [r7, #18]
 8003d32:	4013      	ands	r3, r2
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e00d      	b.n	8003d5e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	8a7b      	ldrh	r3, [r7, #18]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	4013      	ands	r3, r2
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1c5      	bne.n	8003d08 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d94:	b08a      	sub	sp, #40	; 0x28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4bb3      	ldr	r3, [pc, #716]	; (8004094 <UART_SetConfig+0x304>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4aa9      	ldr	r2, [pc, #676]	; (8004098 <UART_SetConfig+0x308>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	430a      	orrs	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4aa0      	ldr	r2, [pc, #640]	; (800409c <UART_SetConfig+0x30c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d126      	bne.n	8003e6e <UART_SetConfig+0xde>
 8003e20:	4b9f      	ldr	r3, [pc, #636]	; (80040a0 <UART_SetConfig+0x310>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d81a      	bhi.n	8003e64 <UART_SetConfig+0xd4>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0xa4>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e55 	.word	0x08003e55
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e5d 	.word	0x08003e5d
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e080      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	e07c      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003e54:	2304      	movs	r3, #4
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5a:	e078      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e074      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003e64:	2310      	movs	r3, #16
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	bf00      	nop
 8003e6c:	e06f      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a8c      	ldr	r2, [pc, #560]	; (80040a4 <UART_SetConfig+0x314>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d138      	bne.n	8003eea <UART_SetConfig+0x15a>
 8003e78:	4b89      	ldr	r3, [pc, #548]	; (80040a0 <UART_SetConfig+0x310>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d82c      	bhi.n	8003ee0 <UART_SetConfig+0x150>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0xfc>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003ec1 	.word	0x08003ec1
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	08003ee1 	.word	0x08003ee1
 8003e98:	08003ee1 	.word	0x08003ee1
 8003e9c:	08003ed1 	.word	0x08003ed1
 8003ea0:	08003ee1 	.word	0x08003ee1
 8003ea4:	08003ee1 	.word	0x08003ee1
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003ec9 	.word	0x08003ec9
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ed9 	.word	0x08003ed9
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e042      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e03e      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e03a      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003ed8:	2308      	movs	r3, #8
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e036      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	bf00      	nop
 8003ee8:	e031      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6a      	ldr	r2, [pc, #424]	; (8004098 <UART_SetConfig+0x308>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d129      	bne.n	8003f48 <UART_SetConfig+0x1b8>
 8003ef4:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <UART_SetConfig+0x310>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d014      	beq.n	8003f2e <UART_SetConfig+0x19e>
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f08:	d802      	bhi.n	8003f10 <UART_SetConfig+0x180>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <UART_SetConfig+0x18e>
 8003f0e:	e016      	b.n	8003f3e <UART_SetConfig+0x1ae>
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f14:	d007      	beq.n	8003f26 <UART_SetConfig+0x196>
 8003f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1a:	d00c      	beq.n	8003f36 <UART_SetConfig+0x1a6>
 8003f1c:	e00f      	b.n	8003f3e <UART_SetConfig+0x1ae>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f24:	e013      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003f26:	2302      	movs	r3, #2
 8003f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2c:	e00f      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f34:	e00b      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003f36:	2308      	movs	r3, #8
 8003f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3c:	e007      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003f3e:	2310      	movs	r3, #16
 8003f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <UART_SetConfig+0x1be>
 8003f48:	2310      	movs	r3, #16
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a51      	ldr	r2, [pc, #324]	; (8004098 <UART_SetConfig+0x308>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	f040 80fa 	bne.w	800414e <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d823      	bhi.n	8003faa <UART_SetConfig+0x21a>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x1d8>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003fab 	.word	0x08003fab
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003fab 	.word	0x08003fab
 8003f78:	08003f9b 	.word	0x08003f9b
 8003f7c:	08003fab 	.word	0x08003fab
 8003f80:	08003fab 	.word	0x08003fab
 8003f84:	08003fab 	.word	0x08003fab
 8003f88:	08003fa3 	.word	0x08003fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7ff f9d4 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8003f90:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f92:	e00d      	b.n	8003fb0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003f94:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <UART_SetConfig+0x318>)
 8003f96:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f98:	e00a      	b.n	8003fb0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003f9a:	f7ff f937 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8003f9e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa0:	e006      	b.n	8003fb0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa8:	e002      	b.n	8003fb0 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	76fb      	strb	r3, [r7, #27]
        break;
 8003fae:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 81c6 	beq.w	8004344 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d305      	bcc.n	8003fd4 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d902      	bls.n	8003fda <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e1b4      	b.n	8004344 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8003fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	f200 80a2 	bhi.w	8004128 <UART_SetConfig+0x398>
 8003fe4:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <UART_SetConfig+0x25c>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	08004129 	.word	0x08004129
 8003ff4:	0800405f 	.word	0x0800405f
 8003ff8:	08004129 	.word	0x08004129
 8003ffc:	080040b1 	.word	0x080040b1
 8004000:	08004129 	.word	0x08004129
 8004004:	08004129 	.word	0x08004129
 8004008:	08004129 	.word	0x08004129
 800400c:	080040ff 	.word	0x080040ff
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff f992 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004014:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4619      	mov	r1, r3
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	0214      	lsls	r4, r2, #8
 8004028:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800402c:	020b      	lsls	r3, r1, #8
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6852      	ldr	r2, [r2, #4]
 8004032:	0852      	lsrs	r2, r2, #1
 8004034:	4611      	mov	r1, r2
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	eb13 0b01 	adds.w	fp, r3, r1
 800403e:	eb44 0c02 	adc.w	ip, r4, r2
 8004042:	4658      	mov	r0, fp
 8004044:	4661      	mov	r1, ip
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	461a      	mov	r2, r3
 8004050:	4623      	mov	r3, r4
 8004052:	f7fc fe19 	bl	8000c88 <__aeabi_uldivmod>
 8004056:	4603      	mov	r3, r0
 8004058:	460c      	mov	r4, r1
 800405a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800405c:	e067      	b.n	800412e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	f04f 0400 	mov.w	r4, #0
 8004068:	4910      	ldr	r1, [pc, #64]	; (80040ac <UART_SetConfig+0x31c>)
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	eb13 0b01 	adds.w	fp, r3, r1
 8004072:	eb44 0c02 	adc.w	ip, r4, r2
 8004076:	4658      	mov	r0, fp
 8004078:	4661      	mov	r1, ip
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	461a      	mov	r2, r3
 8004084:	4623      	mov	r3, r4
 8004086:	f7fc fdff 	bl	8000c88 <__aeabi_uldivmod>
 800408a:	4603      	mov	r3, r0
 800408c:	460c      	mov	r4, r1
 800408e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004090:	e04d      	b.n	800412e <UART_SetConfig+0x39e>
 8004092:	bf00      	nop
 8004094:	efff69f3 	.word	0xefff69f3
 8004098:	40008000 	.word	0x40008000
 800409c:	40013800 	.word	0x40013800
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40004400 	.word	0x40004400
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80040b0:	f7ff f8ac 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80040b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	0214      	lsls	r4, r2, #8
 80040c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040cc:	020b      	lsls	r3, r1, #8
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6852      	ldr	r2, [r2, #4]
 80040d2:	0852      	lsrs	r2, r2, #1
 80040d4:	4611      	mov	r1, r2
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	eb13 0b01 	adds.w	fp, r3, r1
 80040de:	eb44 0c02 	adc.w	ip, r4, r2
 80040e2:	4658      	mov	r0, fp
 80040e4:	4661      	mov	r1, ip
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f04f 0400 	mov.w	r4, #0
 80040ee:	461a      	mov	r2, r3
 80040f0:	4623      	mov	r3, r4
 80040f2:	f7fc fdc9 	bl	8000c88 <__aeabi_uldivmod>
 80040f6:	4603      	mov	r3, r0
 80040f8:	460c      	mov	r4, r1
 80040fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040fc:	e017      	b.n	800412e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	f04f 0400 	mov.w	r4, #0
 8004108:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800410c:	f144 0100 	adc.w	r1, r4, #0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	461a      	mov	r2, r3
 800411a:	4623      	mov	r3, r4
 800411c:	f7fc fdb4 	bl	8000c88 <__aeabi_uldivmod>
 8004120:	4603      	mov	r3, r0
 8004122:	460c      	mov	r4, r1
 8004124:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004126:	e002      	b.n	800412e <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	76fb      	strb	r3, [r7, #27]
            break;
 800412c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004134:	d308      	bcc.n	8004148 <UART_SetConfig+0x3b8>
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413c:	d204      	bcs.n	8004148 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e0fd      	b.n	8004344 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	76fb      	strb	r3, [r7, #27]
 800414c:	e0fa      	b.n	8004344 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004156:	f040 8083 	bne.w	8004260 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 800415a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800415e:	2b08      	cmp	r3, #8
 8004160:	d85e      	bhi.n	8004220 <UART_SetConfig+0x490>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0x3d8>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800418d 	.word	0x0800418d
 800416c:	080041ad 	.word	0x080041ad
 8004170:	080041cd 	.word	0x080041cd
 8004174:	08004221 	.word	0x08004221
 8004178:	080041e9 	.word	0x080041e9
 800417c:	08004221 	.word	0x08004221
 8004180:	08004221 	.word	0x08004221
 8004184:	08004221 	.word	0x08004221
 8004188:	08004209 	.word	0x08004209
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800418c:	f7ff f8d4 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004190:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	005a      	lsls	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041aa:	e03c      	b.n	8004226 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ac:	f7ff f8da 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 80041b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	005a      	lsls	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041ca:	e02c      	b.n	8004226 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80041d6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6852      	ldr	r2, [r2, #4]
 80041de:	fbb3 f3f2 	udiv	r3, r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041e6:	e01e      	b.n	8004226 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e8:	f7ff f810 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80041ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	005a      	lsls	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004206:	e00e      	b.n	8004226 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800421e:	e002      	b.n	8004226 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	76fb      	strb	r3, [r7, #27]
        break;
 8004224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b0f      	cmp	r3, #15
 800422a:	d916      	bls.n	800425a <UART_SetConfig+0x4ca>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004232:	d212      	bcs.n	800425a <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f023 030f 	bic.w	r3, r3, #15
 800423c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	b29b      	uxth	r3, r3
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	b29a      	uxth	r2, r3
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	4313      	orrs	r3, r2
 800424e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	89fa      	ldrh	r2, [r7, #14]
 8004256:	60da      	str	r2, [r3, #12]
 8004258:	e074      	b.n	8004344 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	76fb      	strb	r3, [r7, #27]
 800425e:	e071      	b.n	8004344 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004264:	2b08      	cmp	r3, #8
 8004266:	d85c      	bhi.n	8004322 <UART_SetConfig+0x592>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x4e0>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004295 	.word	0x08004295
 8004274:	080042b3 	.word	0x080042b3
 8004278:	080042d1 	.word	0x080042d1
 800427c:	08004323 	.word	0x08004323
 8004280:	080042ed 	.word	0x080042ed
 8004284:	08004323 	.word	0x08004323
 8004288:	08004323 	.word	0x08004323
 800428c:	08004323 	.word	0x08004323
 8004290:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7ff f850 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004298:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	085a      	lsrs	r2, r3, #1
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	441a      	add	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042b0:	e03a      	b.n	8004328 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b2:	f7ff f857 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 80042b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	085a      	lsrs	r2, r3, #1
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ce:	e02b      	b.n	8004328 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80042da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6852      	ldr	r2, [r2, #4]
 80042e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ea:	e01d      	b.n	8004328 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ec:	f7fe ff8e 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80042f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085a      	lsrs	r2, r3, #1
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	b29b      	uxth	r3, r3
 8004306:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004308:	e00e      	b.n	8004328 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004320:	e002      	b.n	8004328 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	76fb      	strb	r3, [r7, #27]
        break;
 8004326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b0f      	cmp	r3, #15
 800432c:	d908      	bls.n	8004340 <UART_SetConfig+0x5b0>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d204      	bcs.n	8004340 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e001      	b.n	8004344 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004350:	7efb      	ldrb	r3, [r7, #27]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044ae:	f7fd fe89 	bl	80021c4 <HAL_GetTick>
 80044b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d10e      	bne.n	80044e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f82a 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e020      	b.n	8004522 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d10e      	bne.n	800450c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f814 	bl	800452a <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00a      	b.n	8004522 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453a:	e05d      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d059      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004544:	f7fd fe3e 	bl	80021c4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <UART_WaitOnFlagUntilTimeout+0x30>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11b      	bne.n	8004592 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004568:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e042      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02b      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d123      	bne.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e00f      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d092      	beq.n	800453c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <atof>:
 8004620:	2100      	movs	r1, #0
 8004622:	f001 bb69 	b.w	8005cf8 <strtod>

08004626 <atoff>:
 8004626:	2100      	movs	r1, #0
 8004628:	f001 bb7a 	b.w	8005d20 <strtof>

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	; (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4e0d      	ldr	r6, [pc, #52]	; (8004670 <__libc_init_array+0x38>)
 800463c:	4c0d      	ldr	r4, [pc, #52]	; (8004674 <__libc_init_array+0x3c>)
 800463e:	1ba4      	subs	r4, r4, r6
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	2500      	movs	r5, #0
 8004644:	42a5      	cmp	r5, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	4e0b      	ldr	r6, [pc, #44]	; (8004678 <__libc_init_array+0x40>)
 800464a:	4c0c      	ldr	r4, [pc, #48]	; (800467c <__libc_init_array+0x44>)
 800464c:	f004 fe92 	bl	8009374 <_init>
 8004650:	1ba4      	subs	r4, r4, r6
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	2500      	movs	r5, #0
 8004656:	42a5      	cmp	r5, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004660:	4798      	blx	r3
 8004662:	3501      	adds	r5, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800466a:	4798      	blx	r3
 800466c:	3501      	adds	r5, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	080097f4 	.word	0x080097f4
 8004674:	080097f4 	.word	0x080097f4
 8004678:	080097f4 	.word	0x080097f4
 800467c:	080097f8 	.word	0x080097f8

08004680 <memset>:
 8004680:	4402      	add	r2, r0
 8004682:	4603      	mov	r3, r0
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <memset+0xa>
 8004688:	4770      	bx	lr
 800468a:	f803 1b01 	strb.w	r1, [r3], #1
 800468e:	e7f9      	b.n	8004684 <memset+0x4>

08004690 <__cvt>:
 8004690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	ec55 4b10 	vmov	r4, r5, d0
 8004698:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800469a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800469e:	2d00      	cmp	r5, #0
 80046a0:	460e      	mov	r6, r1
 80046a2:	4691      	mov	r9, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	bfb8      	it	lt
 80046a8:	4622      	movlt	r2, r4
 80046aa:	462b      	mov	r3, r5
 80046ac:	f027 0720 	bic.w	r7, r7, #32
 80046b0:	bfbb      	ittet	lt
 80046b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046b6:	461d      	movlt	r5, r3
 80046b8:	2300      	movge	r3, #0
 80046ba:	232d      	movlt	r3, #45	; 0x2d
 80046bc:	bfb8      	it	lt
 80046be:	4614      	movlt	r4, r2
 80046c0:	2f46      	cmp	r7, #70	; 0x46
 80046c2:	700b      	strb	r3, [r1, #0]
 80046c4:	d004      	beq.n	80046d0 <__cvt+0x40>
 80046c6:	2f45      	cmp	r7, #69	; 0x45
 80046c8:	d100      	bne.n	80046cc <__cvt+0x3c>
 80046ca:	3601      	adds	r6, #1
 80046cc:	2102      	movs	r1, #2
 80046ce:	e000      	b.n	80046d2 <__cvt+0x42>
 80046d0:	2103      	movs	r1, #3
 80046d2:	ab03      	add	r3, sp, #12
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	ab02      	add	r3, sp, #8
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4632      	mov	r2, r6
 80046dc:	4653      	mov	r3, sl
 80046de:	ec45 4b10 	vmov	d0, r4, r5
 80046e2:	f001 fd11 	bl	8006108 <_dtoa_r>
 80046e6:	2f47      	cmp	r7, #71	; 0x47
 80046e8:	4680      	mov	r8, r0
 80046ea:	d102      	bne.n	80046f2 <__cvt+0x62>
 80046ec:	f019 0f01 	tst.w	r9, #1
 80046f0:	d026      	beq.n	8004740 <__cvt+0xb0>
 80046f2:	2f46      	cmp	r7, #70	; 0x46
 80046f4:	eb08 0906 	add.w	r9, r8, r6
 80046f8:	d111      	bne.n	800471e <__cvt+0x8e>
 80046fa:	f898 3000 	ldrb.w	r3, [r8]
 80046fe:	2b30      	cmp	r3, #48	; 0x30
 8004700:	d10a      	bne.n	8004718 <__cvt+0x88>
 8004702:	2200      	movs	r2, #0
 8004704:	2300      	movs	r3, #0
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f7fc f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800470e:	b918      	cbnz	r0, 8004718 <__cvt+0x88>
 8004710:	f1c6 0601 	rsb	r6, r6, #1
 8004714:	f8ca 6000 	str.w	r6, [sl]
 8004718:	f8da 3000 	ldr.w	r3, [sl]
 800471c:	4499      	add	r9, r3
 800471e:	2200      	movs	r2, #0
 8004720:	2300      	movs	r3, #0
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f7fc f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800472a:	b938      	cbnz	r0, 800473c <__cvt+0xac>
 800472c:	2230      	movs	r2, #48	; 0x30
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	454b      	cmp	r3, r9
 8004732:	d205      	bcs.n	8004740 <__cvt+0xb0>
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	9103      	str	r1, [sp, #12]
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e7f8      	b.n	800472e <__cvt+0x9e>
 800473c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004744:	eba3 0308 	sub.w	r3, r3, r8
 8004748:	4640      	mov	r0, r8
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	b004      	add	sp, #16
 800474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004752 <__exponent>:
 8004752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004754:	2900      	cmp	r1, #0
 8004756:	4604      	mov	r4, r0
 8004758:	bfba      	itte	lt
 800475a:	4249      	neglt	r1, r1
 800475c:	232d      	movlt	r3, #45	; 0x2d
 800475e:	232b      	movge	r3, #43	; 0x2b
 8004760:	2909      	cmp	r1, #9
 8004762:	f804 2b02 	strb.w	r2, [r4], #2
 8004766:	7043      	strb	r3, [r0, #1]
 8004768:	dd20      	ble.n	80047ac <__exponent+0x5a>
 800476a:	f10d 0307 	add.w	r3, sp, #7
 800476e:	461f      	mov	r7, r3
 8004770:	260a      	movs	r6, #10
 8004772:	fb91 f5f6 	sdiv	r5, r1, r6
 8004776:	fb06 1115 	mls	r1, r6, r5, r1
 800477a:	3130      	adds	r1, #48	; 0x30
 800477c:	2d09      	cmp	r5, #9
 800477e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004782:	f103 32ff 	add.w	r2, r3, #4294967295
 8004786:	4629      	mov	r1, r5
 8004788:	dc09      	bgt.n	800479e <__exponent+0x4c>
 800478a:	3130      	adds	r1, #48	; 0x30
 800478c:	3b02      	subs	r3, #2
 800478e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004792:	42bb      	cmp	r3, r7
 8004794:	4622      	mov	r2, r4
 8004796:	d304      	bcc.n	80047a2 <__exponent+0x50>
 8004798:	1a10      	subs	r0, r2, r0
 800479a:	b003      	add	sp, #12
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479e:	4613      	mov	r3, r2
 80047a0:	e7e7      	b.n	8004772 <__exponent+0x20>
 80047a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a6:	f804 2b01 	strb.w	r2, [r4], #1
 80047aa:	e7f2      	b.n	8004792 <__exponent+0x40>
 80047ac:	2330      	movs	r3, #48	; 0x30
 80047ae:	4419      	add	r1, r3
 80047b0:	7083      	strb	r3, [r0, #2]
 80047b2:	1d02      	adds	r2, r0, #4
 80047b4:	70c1      	strb	r1, [r0, #3]
 80047b6:	e7ef      	b.n	8004798 <__exponent+0x46>

080047b8 <_printf_float>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	b08d      	sub	sp, #52	; 0x34
 80047be:	460c      	mov	r4, r1
 80047c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80047c4:	4616      	mov	r6, r2
 80047c6:	461f      	mov	r7, r3
 80047c8:	4605      	mov	r5, r0
 80047ca:	f002 ff37 	bl	800763c <_localeconv_r>
 80047ce:	6803      	ldr	r3, [r0, #0]
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb fcfc 	bl	80001d0 <strlen>
 80047d8:	2300      	movs	r3, #0
 80047da:	930a      	str	r3, [sp, #40]	; 0x28
 80047dc:	f8d8 3000 	ldr.w	r3, [r8]
 80047e0:	9005      	str	r0, [sp, #20]
 80047e2:	3307      	adds	r3, #7
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	f103 0208 	add.w	r2, r3, #8
 80047ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047f0:	f8d4 b000 	ldr.w	fp, [r4]
 80047f4:	f8c8 2000 	str.w	r2, [r8]
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004800:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004804:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004808:	9307      	str	r3, [sp, #28]
 800480a:	f8cd 8018 	str.w	r8, [sp, #24]
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
 8004812:	4ba7      	ldr	r3, [pc, #668]	; (8004ab0 <_printf_float+0x2f8>)
 8004814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004818:	f7fc f988 	bl	8000b2c <__aeabi_dcmpun>
 800481c:	bb70      	cbnz	r0, 800487c <_printf_float+0xc4>
 800481e:	f04f 32ff 	mov.w	r2, #4294967295
 8004822:	4ba3      	ldr	r3, [pc, #652]	; (8004ab0 <_printf_float+0x2f8>)
 8004824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004828:	f7fc f962 	bl	8000af0 <__aeabi_dcmple>
 800482c:	bb30      	cbnz	r0, 800487c <_printf_float+0xc4>
 800482e:	2200      	movs	r2, #0
 8004830:	2300      	movs	r3, #0
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	f7fc f951 	bl	8000adc <__aeabi_dcmplt>
 800483a:	b110      	cbz	r0, 8004842 <_printf_float+0x8a>
 800483c:	232d      	movs	r3, #45	; 0x2d
 800483e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004842:	4a9c      	ldr	r2, [pc, #624]	; (8004ab4 <_printf_float+0x2fc>)
 8004844:	4b9c      	ldr	r3, [pc, #624]	; (8004ab8 <_printf_float+0x300>)
 8004846:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800484a:	bf8c      	ite	hi
 800484c:	4690      	movhi	r8, r2
 800484e:	4698      	movls	r8, r3
 8004850:	2303      	movs	r3, #3
 8004852:	f02b 0204 	bic.w	r2, fp, #4
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	f04f 0900 	mov.w	r9, #0
 800485e:	9700      	str	r7, [sp, #0]
 8004860:	4633      	mov	r3, r6
 8004862:	aa0b      	add	r2, sp, #44	; 0x2c
 8004864:	4621      	mov	r1, r4
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f9e6 	bl	8004c38 <_printf_common>
 800486c:	3001      	adds	r0, #1
 800486e:	f040 808d 	bne.w	800498c <_printf_float+0x1d4>
 8004872:	f04f 30ff 	mov.w	r0, #4294967295
 8004876:	b00d      	add	sp, #52	; 0x34
 8004878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487c:	4642      	mov	r2, r8
 800487e:	464b      	mov	r3, r9
 8004880:	4640      	mov	r0, r8
 8004882:	4649      	mov	r1, r9
 8004884:	f7fc f952 	bl	8000b2c <__aeabi_dcmpun>
 8004888:	b110      	cbz	r0, 8004890 <_printf_float+0xd8>
 800488a:	4a8c      	ldr	r2, [pc, #560]	; (8004abc <_printf_float+0x304>)
 800488c:	4b8c      	ldr	r3, [pc, #560]	; (8004ac0 <_printf_float+0x308>)
 800488e:	e7da      	b.n	8004846 <_printf_float+0x8e>
 8004890:	6861      	ldr	r1, [r4, #4]
 8004892:	1c4b      	adds	r3, r1, #1
 8004894:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004898:	a80a      	add	r0, sp, #40	; 0x28
 800489a:	d13e      	bne.n	800491a <_printf_float+0x162>
 800489c:	2306      	movs	r3, #6
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	2300      	movs	r3, #0
 80048a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80048a6:	ab09      	add	r3, sp, #36	; 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	ec49 8b10 	vmov	d0, r8, r9
 80048ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	f8cd a004 	str.w	sl, [sp, #4]
 80048b8:	6861      	ldr	r1, [r4, #4]
 80048ba:	4628      	mov	r0, r5
 80048bc:	f7ff fee8 	bl	8004690 <__cvt>
 80048c0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80048c4:	2b47      	cmp	r3, #71	; 0x47
 80048c6:	4680      	mov	r8, r0
 80048c8:	d109      	bne.n	80048de <_printf_float+0x126>
 80048ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048cc:	1cd8      	adds	r0, r3, #3
 80048ce:	db02      	blt.n	80048d6 <_printf_float+0x11e>
 80048d0:	6862      	ldr	r2, [r4, #4]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	dd47      	ble.n	8004966 <_printf_float+0x1ae>
 80048d6:	f1aa 0a02 	sub.w	sl, sl, #2
 80048da:	fa5f fa8a 	uxtb.w	sl, sl
 80048de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80048e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048e4:	d824      	bhi.n	8004930 <_printf_float+0x178>
 80048e6:	3901      	subs	r1, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048ee:	9109      	str	r1, [sp, #36]	; 0x24
 80048f0:	f7ff ff2f 	bl	8004752 <__exponent>
 80048f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f6:	1813      	adds	r3, r2, r0
 80048f8:	2a01      	cmp	r2, #1
 80048fa:	4681      	mov	r9, r0
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	dc02      	bgt.n	8004906 <_printf_float+0x14e>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	07d1      	lsls	r1, r2, #31
 8004904:	d501      	bpl.n	800490a <_printf_float+0x152>
 8004906:	3301      	adds	r3, #1
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0a5      	beq.n	800485e <_printf_float+0xa6>
 8004912:	232d      	movs	r3, #45	; 0x2d
 8004914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004918:	e7a1      	b.n	800485e <_printf_float+0xa6>
 800491a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800491e:	f000 8177 	beq.w	8004c10 <_printf_float+0x458>
 8004922:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004926:	d1bb      	bne.n	80048a0 <_printf_float+0xe8>
 8004928:	2900      	cmp	r1, #0
 800492a:	d1b9      	bne.n	80048a0 <_printf_float+0xe8>
 800492c:	2301      	movs	r3, #1
 800492e:	e7b6      	b.n	800489e <_printf_float+0xe6>
 8004930:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004934:	d119      	bne.n	800496a <_printf_float+0x1b2>
 8004936:	2900      	cmp	r1, #0
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	dd0c      	ble.n	8004956 <_printf_float+0x19e>
 800493c:	6121      	str	r1, [r4, #16]
 800493e:	b913      	cbnz	r3, 8004946 <_printf_float+0x18e>
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	07d2      	lsls	r2, r2, #31
 8004944:	d502      	bpl.n	800494c <_printf_float+0x194>
 8004946:	3301      	adds	r3, #1
 8004948:	440b      	add	r3, r1
 800494a:	6123      	str	r3, [r4, #16]
 800494c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	e7d9      	b.n	800490a <_printf_float+0x152>
 8004956:	b913      	cbnz	r3, 800495e <_printf_float+0x1a6>
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	07d0      	lsls	r0, r2, #31
 800495c:	d501      	bpl.n	8004962 <_printf_float+0x1aa>
 800495e:	3302      	adds	r3, #2
 8004960:	e7f3      	b.n	800494a <_printf_float+0x192>
 8004962:	2301      	movs	r3, #1
 8004964:	e7f1      	b.n	800494a <_printf_float+0x192>
 8004966:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800496a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800496e:	4293      	cmp	r3, r2
 8004970:	db05      	blt.n	800497e <_printf_float+0x1c6>
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	6123      	str	r3, [r4, #16]
 8004976:	07d1      	lsls	r1, r2, #31
 8004978:	d5e8      	bpl.n	800494c <_printf_float+0x194>
 800497a:	3301      	adds	r3, #1
 800497c:	e7e5      	b.n	800494a <_printf_float+0x192>
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfd4      	ite	le
 8004982:	f1c3 0302 	rsble	r3, r3, #2
 8004986:	2301      	movgt	r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	e7de      	b.n	800494a <_printf_float+0x192>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	055a      	lsls	r2, r3, #21
 8004990:	d407      	bmi.n	80049a2 <_printf_float+0x1ea>
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	4642      	mov	r2, r8
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	d12b      	bne.n	80049f8 <_printf_float+0x240>
 80049a0:	e767      	b.n	8004872 <_printf_float+0xba>
 80049a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80049a6:	f240 80dc 	bls.w	8004b62 <_printf_float+0x3aa>
 80049aa:	2200      	movs	r2, #0
 80049ac:	2300      	movs	r3, #0
 80049ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b2:	f7fc f889 	bl	8000ac8 <__aeabi_dcmpeq>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d033      	beq.n	8004a22 <_printf_float+0x26a>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <_printf_float+0x30c>)
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	f43f af54 	beq.w	8004872 <_printf_float+0xba>
 80049ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	db02      	blt.n	80049d8 <_printf_float+0x220>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	07d8      	lsls	r0, r3, #31
 80049d6:	d50f      	bpl.n	80049f8 <_printf_float+0x240>
 80049d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f af45 	beq.w	8004872 <_printf_float+0xba>
 80049e8:	f04f 0800 	mov.w	r8, #0
 80049ec:	f104 091a 	add.w	r9, r4, #26
 80049f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4543      	cmp	r3, r8
 80049f6:	dc09      	bgt.n	8004a0c <_printf_float+0x254>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	079b      	lsls	r3, r3, #30
 80049fc:	f100 8103 	bmi.w	8004c06 <_printf_float+0x44e>
 8004a00:	68e0      	ldr	r0, [r4, #12]
 8004a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a04:	4298      	cmp	r0, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4618      	movlt	r0, r3
 8004a0a:	e734      	b.n	8004876 <_printf_float+0xbe>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	464a      	mov	r2, r9
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af2b 	beq.w	8004872 <_printf_float+0xba>
 8004a1c:	f108 0801 	add.w	r8, r8, #1
 8004a20:	e7e6      	b.n	80049f0 <_printf_float+0x238>
 8004a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc2b      	bgt.n	8004a80 <_printf_float+0x2c8>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <_printf_float+0x30c>)
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af1d 	beq.w	8004872 <_printf_float+0xba>
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	b923      	cbnz	r3, 8004a46 <_printf_float+0x28e>
 8004a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a3e:	b913      	cbnz	r3, 8004a46 <_printf_float+0x28e>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	d5d8      	bpl.n	80049f8 <_printf_float+0x240>
 8004a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f af0e 	beq.w	8004872 <_printf_float+0xba>
 8004a56:	f04f 0900 	mov.w	r9, #0
 8004a5a:	f104 0a1a 	add.w	sl, r4, #26
 8004a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a60:	425b      	negs	r3, r3
 8004a62:	454b      	cmp	r3, r9
 8004a64:	dc01      	bgt.n	8004a6a <_printf_float+0x2b2>
 8004a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a68:	e794      	b.n	8004994 <_printf_float+0x1dc>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4652      	mov	r2, sl
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f aefc 	beq.w	8004872 <_printf_float+0xba>
 8004a7a:	f109 0901 	add.w	r9, r9, #1
 8004a7e:	e7ee      	b.n	8004a5e <_printf_float+0x2a6>
 8004a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bfa8      	it	ge
 8004a88:	461a      	movge	r2, r3
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	4691      	mov	r9, r2
 8004a8e:	dd07      	ble.n	8004aa0 <_printf_float+0x2e8>
 8004a90:	4613      	mov	r3, r2
 8004a92:	4631      	mov	r1, r6
 8004a94:	4642      	mov	r2, r8
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f aee9 	beq.w	8004872 <_printf_float+0xba>
 8004aa0:	f104 031a 	add.w	r3, r4, #26
 8004aa4:	f04f 0b00 	mov.w	fp, #0
 8004aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004aac:	9306      	str	r3, [sp, #24]
 8004aae:	e015      	b.n	8004adc <_printf_float+0x324>
 8004ab0:	7fefffff 	.word	0x7fefffff
 8004ab4:	080094c0 	.word	0x080094c0
 8004ab8:	080094bc 	.word	0x080094bc
 8004abc:	080094c8 	.word	0x080094c8
 8004ac0:	080094c4 	.word	0x080094c4
 8004ac4:	080096e3 	.word	0x080096e3
 8004ac8:	2301      	movs	r3, #1
 8004aca:	9a06      	ldr	r2, [sp, #24]
 8004acc:	4631      	mov	r1, r6
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f aecd 	beq.w	8004872 <_printf_float+0xba>
 8004ad8:	f10b 0b01 	add.w	fp, fp, #1
 8004adc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ae0:	ebaa 0309 	sub.w	r3, sl, r9
 8004ae4:	455b      	cmp	r3, fp
 8004ae6:	dcef      	bgt.n	8004ac8 <_printf_float+0x310>
 8004ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aec:	429a      	cmp	r2, r3
 8004aee:	44d0      	add	r8, sl
 8004af0:	db15      	blt.n	8004b1e <_printf_float+0x366>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	07da      	lsls	r2, r3, #31
 8004af6:	d412      	bmi.n	8004b1e <_printf_float+0x366>
 8004af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004afc:	eba3 020a 	sub.w	r2, r3, sl
 8004b00:	eba3 0a01 	sub.w	sl, r3, r1
 8004b04:	4592      	cmp	sl, r2
 8004b06:	bfa8      	it	ge
 8004b08:	4692      	movge	sl, r2
 8004b0a:	f1ba 0f00 	cmp.w	sl, #0
 8004b0e:	dc0e      	bgt.n	8004b2e <_printf_float+0x376>
 8004b10:	f04f 0800 	mov.w	r8, #0
 8004b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b18:	f104 091a 	add.w	r9, r4, #26
 8004b1c:	e019      	b.n	8004b52 <_printf_float+0x39a>
 8004b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b8      	blx	r7
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d1e5      	bne.n	8004af8 <_printf_float+0x340>
 8004b2c:	e6a1      	b.n	8004872 <_printf_float+0xba>
 8004b2e:	4653      	mov	r3, sl
 8004b30:	4642      	mov	r2, r8
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1e9      	bne.n	8004b10 <_printf_float+0x358>
 8004b3c:	e699      	b.n	8004872 <_printf_float+0xba>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	464a      	mov	r2, r9
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f43f ae92 	beq.w	8004872 <_printf_float+0xba>
 8004b4e:	f108 0801 	add.w	r8, r8, #1
 8004b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	eba3 030a 	sub.w	r3, r3, sl
 8004b5c:	4543      	cmp	r3, r8
 8004b5e:	dcee      	bgt.n	8004b3e <_printf_float+0x386>
 8004b60:	e74a      	b.n	80049f8 <_printf_float+0x240>
 8004b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b64:	2a01      	cmp	r2, #1
 8004b66:	dc01      	bgt.n	8004b6c <_printf_float+0x3b4>
 8004b68:	07db      	lsls	r3, r3, #31
 8004b6a:	d53a      	bpl.n	8004be2 <_printf_float+0x42a>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4642      	mov	r2, r8
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	f43f ae7b 	beq.w	8004872 <_printf_float+0xba>
 8004b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b80:	4631      	mov	r1, r6
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	f108 0801 	add.w	r8, r8, #1
 8004b8c:	f43f ae71 	beq.w	8004872 <_printf_float+0xba>
 8004b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b92:	2200      	movs	r2, #0
 8004b94:	f103 3aff 	add.w	sl, r3, #4294967295
 8004b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f7fb ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ba2:	b9c8      	cbnz	r0, 8004bd8 <_printf_float+0x420>
 8004ba4:	4653      	mov	r3, sl
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d10e      	bne.n	8004bd0 <_printf_float+0x418>
 8004bb2:	e65e      	b.n	8004872 <_printf_float+0xba>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f ae57 	beq.w	8004872 <_printf_float+0xba>
 8004bc4:	f108 0801 	add.w	r8, r8, #1
 8004bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4543      	cmp	r3, r8
 8004bce:	dcf1      	bgt.n	8004bb4 <_printf_float+0x3fc>
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bd6:	e6de      	b.n	8004996 <_printf_float+0x1de>
 8004bd8:	f04f 0800 	mov.w	r8, #0
 8004bdc:	f104 0a1a 	add.w	sl, r4, #26
 8004be0:	e7f2      	b.n	8004bc8 <_printf_float+0x410>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e7df      	b.n	8004ba6 <_printf_float+0x3ee>
 8004be6:	2301      	movs	r3, #1
 8004be8:	464a      	mov	r2, r9
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b8      	blx	r7
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	f43f ae3e 	beq.w	8004872 <_printf_float+0xba>
 8004bf6:	f108 0801 	add.w	r8, r8, #1
 8004bfa:	68e3      	ldr	r3, [r4, #12]
 8004bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	4543      	cmp	r3, r8
 8004c02:	dcf0      	bgt.n	8004be6 <_printf_float+0x42e>
 8004c04:	e6fc      	b.n	8004a00 <_printf_float+0x248>
 8004c06:	f04f 0800 	mov.w	r8, #0
 8004c0a:	f104 0919 	add.w	r9, r4, #25
 8004c0e:	e7f4      	b.n	8004bfa <_printf_float+0x442>
 8004c10:	2900      	cmp	r1, #0
 8004c12:	f43f ae8b 	beq.w	800492c <_printf_float+0x174>
 8004c16:	2300      	movs	r3, #0
 8004c18:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c1c:	ab09      	add	r3, sp, #36	; 0x24
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	ec49 8b10 	vmov	d0, r8, r9
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	f8cd a004 	str.w	sl, [sp, #4]
 8004c2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7ff fd2e 	bl	8004690 <__cvt>
 8004c34:	4680      	mov	r8, r0
 8004c36:	e648      	b.n	80048ca <_printf_float+0x112>

08004c38 <_printf_common>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	4691      	mov	r9, r2
 8004c3e:	461f      	mov	r7, r3
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	bfb8      	it	lt
 8004c4c:	4613      	movlt	r3, r2
 8004c4e:	f8c9 3000 	str.w	r3, [r9]
 8004c52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c56:	4606      	mov	r6, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	b112      	cbz	r2, 8004c62 <_printf_common+0x2a>
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f8c9 3000 	str.w	r3, [r9]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	0699      	lsls	r1, r3, #26
 8004c66:	bf42      	ittt	mi
 8004c68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c6c:	3302      	addmi	r3, #2
 8004c6e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c72:	6825      	ldr	r5, [r4, #0]
 8004c74:	f015 0506 	ands.w	r5, r5, #6
 8004c78:	d107      	bne.n	8004c8a <_printf_common+0x52>
 8004c7a:	f104 0a19 	add.w	sl, r4, #25
 8004c7e:	68e3      	ldr	r3, [r4, #12]
 8004c80:	f8d9 2000 	ldr.w	r2, [r9]
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	42ab      	cmp	r3, r5
 8004c88:	dc28      	bgt.n	8004cdc <_printf_common+0xa4>
 8004c8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	3300      	adds	r3, #0
 8004c92:	bf18      	it	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	0692      	lsls	r2, r2, #26
 8004c98:	d42d      	bmi.n	8004cf6 <_printf_common+0xbe>
 8004c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	47c0      	blx	r8
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d020      	beq.n	8004cea <_printf_common+0xb2>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	68e5      	ldr	r5, [r4, #12]
 8004cac:	f8d9 2000 	ldr.w	r2, [r9]
 8004cb0:	f003 0306 	and.w	r3, r3, #6
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	bf08      	it	eq
 8004cb8:	1aad      	subeq	r5, r5, r2
 8004cba:	68a3      	ldr	r3, [r4, #8]
 8004cbc:	6922      	ldr	r2, [r4, #16]
 8004cbe:	bf0c      	ite	eq
 8004cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc4:	2500      	movne	r5, #0
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bfc4      	itt	gt
 8004cca:	1a9b      	subgt	r3, r3, r2
 8004ccc:	18ed      	addgt	r5, r5, r3
 8004cce:	f04f 0900 	mov.w	r9, #0
 8004cd2:	341a      	adds	r4, #26
 8004cd4:	454d      	cmp	r5, r9
 8004cd6:	d11a      	bne.n	8004d0e <_printf_common+0xd6>
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e008      	b.n	8004cee <_printf_common+0xb6>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d103      	bne.n	8004cf2 <_printf_common+0xba>
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	e7c3      	b.n	8004c7e <_printf_common+0x46>
 8004cf6:	18e1      	adds	r1, r4, r3
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	2030      	movs	r0, #48	; 0x30
 8004cfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d00:	4422      	add	r2, r4
 8004d02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	e7c5      	b.n	8004c9a <_printf_common+0x62>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4622      	mov	r2, r4
 8004d12:	4639      	mov	r1, r7
 8004d14:	4630      	mov	r0, r6
 8004d16:	47c0      	blx	r8
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d0e6      	beq.n	8004cea <_printf_common+0xb2>
 8004d1c:	f109 0901 	add.w	r9, r9, #1
 8004d20:	e7d8      	b.n	8004cd4 <_printf_common+0x9c>
	...

08004d24 <_printf_i>:
 8004d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	7e09      	ldrb	r1, [r1, #24]
 8004d30:	b085      	sub	sp, #20
 8004d32:	296e      	cmp	r1, #110	; 0x6e
 8004d34:	4617      	mov	r7, r2
 8004d36:	4606      	mov	r6, r0
 8004d38:	4698      	mov	r8, r3
 8004d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d3c:	f000 80b3 	beq.w	8004ea6 <_printf_i+0x182>
 8004d40:	d822      	bhi.n	8004d88 <_printf_i+0x64>
 8004d42:	2963      	cmp	r1, #99	; 0x63
 8004d44:	d036      	beq.n	8004db4 <_printf_i+0x90>
 8004d46:	d80a      	bhi.n	8004d5e <_printf_i+0x3a>
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	f000 80b9 	beq.w	8004ec0 <_printf_i+0x19c>
 8004d4e:	2958      	cmp	r1, #88	; 0x58
 8004d50:	f000 8083 	beq.w	8004e5a <_printf_i+0x136>
 8004d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d5c:	e032      	b.n	8004dc4 <_printf_i+0xa0>
 8004d5e:	2964      	cmp	r1, #100	; 0x64
 8004d60:	d001      	beq.n	8004d66 <_printf_i+0x42>
 8004d62:	2969      	cmp	r1, #105	; 0x69
 8004d64:	d1f6      	bne.n	8004d54 <_printf_i+0x30>
 8004d66:	6820      	ldr	r0, [r4, #0]
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	0605      	lsls	r5, r0, #24
 8004d6c:	f103 0104 	add.w	r1, r3, #4
 8004d70:	d52a      	bpl.n	8004dc8 <_printf_i+0xa4>
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	da03      	bge.n	8004d82 <_printf_i+0x5e>
 8004d7a:	222d      	movs	r2, #45	; 0x2d
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d82:	486f      	ldr	r0, [pc, #444]	; (8004f40 <_printf_i+0x21c>)
 8004d84:	220a      	movs	r2, #10
 8004d86:	e039      	b.n	8004dfc <_printf_i+0xd8>
 8004d88:	2973      	cmp	r1, #115	; 0x73
 8004d8a:	f000 809d 	beq.w	8004ec8 <_printf_i+0x1a4>
 8004d8e:	d808      	bhi.n	8004da2 <_printf_i+0x7e>
 8004d90:	296f      	cmp	r1, #111	; 0x6f
 8004d92:	d020      	beq.n	8004dd6 <_printf_i+0xb2>
 8004d94:	2970      	cmp	r1, #112	; 0x70
 8004d96:	d1dd      	bne.n	8004d54 <_printf_i+0x30>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f043 0320 	orr.w	r3, r3, #32
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	e003      	b.n	8004daa <_printf_i+0x86>
 8004da2:	2975      	cmp	r1, #117	; 0x75
 8004da4:	d017      	beq.n	8004dd6 <_printf_i+0xb2>
 8004da6:	2978      	cmp	r1, #120	; 0x78
 8004da8:	d1d4      	bne.n	8004d54 <_printf_i+0x30>
 8004daa:	2378      	movs	r3, #120	; 0x78
 8004dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db0:	4864      	ldr	r0, [pc, #400]	; (8004f44 <_printf_i+0x220>)
 8004db2:	e055      	b.n	8004e60 <_printf_i+0x13c>
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e08c      	b.n	8004ee2 <_printf_i+0x1be>
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6011      	str	r1, [r2, #0]
 8004dcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dd0:	bf18      	it	ne
 8004dd2:	b21b      	sxthne	r3, r3
 8004dd4:	e7cf      	b.n	8004d76 <_printf_i+0x52>
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	1d18      	adds	r0, r3, #4
 8004ddc:	6010      	str	r0, [r2, #0]
 8004dde:	0628      	lsls	r0, r5, #24
 8004de0:	d501      	bpl.n	8004de6 <_printf_i+0xc2>
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	e002      	b.n	8004dec <_printf_i+0xc8>
 8004de6:	0668      	lsls	r0, r5, #25
 8004de8:	d5fb      	bpl.n	8004de2 <_printf_i+0xbe>
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	4854      	ldr	r0, [pc, #336]	; (8004f40 <_printf_i+0x21c>)
 8004dee:	296f      	cmp	r1, #111	; 0x6f
 8004df0:	bf14      	ite	ne
 8004df2:	220a      	movne	r2, #10
 8004df4:	2208      	moveq	r2, #8
 8004df6:	2100      	movs	r1, #0
 8004df8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfc:	6865      	ldr	r5, [r4, #4]
 8004dfe:	60a5      	str	r5, [r4, #8]
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	f2c0 8095 	blt.w	8004f30 <_printf_i+0x20c>
 8004e06:	6821      	ldr	r1, [r4, #0]
 8004e08:	f021 0104 	bic.w	r1, r1, #4
 8004e0c:	6021      	str	r1, [r4, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d13d      	bne.n	8004e8e <_printf_i+0x16a>
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	f040 808e 	bne.w	8004f34 <_printf_i+0x210>
 8004e18:	4665      	mov	r5, ip
 8004e1a:	2a08      	cmp	r2, #8
 8004e1c:	d10b      	bne.n	8004e36 <_printf_i+0x112>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	07db      	lsls	r3, r3, #31
 8004e22:	d508      	bpl.n	8004e36 <_printf_i+0x112>
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	bfde      	ittt	le
 8004e2c:	2330      	movle	r3, #48	; 0x30
 8004e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e36:	ebac 0305 	sub.w	r3, ip, r5
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	f8cd 8000 	str.w	r8, [sp]
 8004e40:	463b      	mov	r3, r7
 8004e42:	aa03      	add	r2, sp, #12
 8004e44:	4621      	mov	r1, r4
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7ff fef6 	bl	8004c38 <_printf_common>
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d14d      	bne.n	8004eec <_printf_i+0x1c8>
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	b005      	add	sp, #20
 8004e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e5a:	4839      	ldr	r0, [pc, #228]	; (8004f40 <_printf_i+0x21c>)
 8004e5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	6821      	ldr	r1, [r4, #0]
 8004e64:	1d1d      	adds	r5, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6015      	str	r5, [r2, #0]
 8004e6a:	060a      	lsls	r2, r1, #24
 8004e6c:	d50b      	bpl.n	8004e86 <_printf_i+0x162>
 8004e6e:	07ca      	lsls	r2, r1, #31
 8004e70:	bf44      	itt	mi
 8004e72:	f041 0120 	orrmi.w	r1, r1, #32
 8004e76:	6021      	strmi	r1, [r4, #0]
 8004e78:	b91b      	cbnz	r3, 8004e82 <_printf_i+0x15e>
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	f022 0220 	bic.w	r2, r2, #32
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	2210      	movs	r2, #16
 8004e84:	e7b7      	b.n	8004df6 <_printf_i+0xd2>
 8004e86:	064d      	lsls	r5, r1, #25
 8004e88:	bf48      	it	mi
 8004e8a:	b29b      	uxthmi	r3, r3
 8004e8c:	e7ef      	b.n	8004e6e <_printf_i+0x14a>
 8004e8e:	4665      	mov	r5, ip
 8004e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e94:	fb02 3311 	mls	r3, r2, r1, r3
 8004e98:	5cc3      	ldrb	r3, [r0, r3]
 8004e9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d1f5      	bne.n	8004e90 <_printf_i+0x16c>
 8004ea4:	e7b9      	b.n	8004e1a <_printf_i+0xf6>
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	6961      	ldr	r1, [r4, #20]
 8004eac:	1d18      	adds	r0, r3, #4
 8004eae:	6010      	str	r0, [r2, #0]
 8004eb0:	0628      	lsls	r0, r5, #24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	d501      	bpl.n	8004eba <_printf_i+0x196>
 8004eb6:	6019      	str	r1, [r3, #0]
 8004eb8:	e002      	b.n	8004ec0 <_printf_i+0x19c>
 8004eba:	066a      	lsls	r2, r5, #25
 8004ebc:	d5fb      	bpl.n	8004eb6 <_printf_i+0x192>
 8004ebe:	8019      	strh	r1, [r3, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	4665      	mov	r5, ip
 8004ec6:	e7b9      	b.n	8004e3c <_printf_i+0x118>
 8004ec8:	6813      	ldr	r3, [r2, #0]
 8004eca:	1d19      	adds	r1, r3, #4
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	681d      	ldr	r5, [r3, #0]
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f7fb f983 	bl	80001e0 <memchr>
 8004eda:	b108      	cbz	r0, 8004ee0 <_printf_i+0x1bc>
 8004edc:	1b40      	subs	r0, r0, r5
 8004ede:	6060      	str	r0, [r4, #4]
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eea:	e7a7      	b.n	8004e3c <_printf_i+0x118>
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	462a      	mov	r2, r5
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	47c0      	blx	r8
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0aa      	beq.n	8004e50 <_printf_i+0x12c>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	079b      	lsls	r3, r3, #30
 8004efe:	d413      	bmi.n	8004f28 <_printf_i+0x204>
 8004f00:	68e0      	ldr	r0, [r4, #12]
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	4298      	cmp	r0, r3
 8004f06:	bfb8      	it	lt
 8004f08:	4618      	movlt	r0, r3
 8004f0a:	e7a3      	b.n	8004e54 <_printf_i+0x130>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	464a      	mov	r2, r9
 8004f10:	4639      	mov	r1, r7
 8004f12:	4630      	mov	r0, r6
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d09a      	beq.n	8004e50 <_printf_i+0x12c>
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	68e3      	ldr	r3, [r4, #12]
 8004f1e:	9a03      	ldr	r2, [sp, #12]
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	42ab      	cmp	r3, r5
 8004f24:	dcf2      	bgt.n	8004f0c <_printf_i+0x1e8>
 8004f26:	e7eb      	b.n	8004f00 <_printf_i+0x1dc>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	f104 0919 	add.w	r9, r4, #25
 8004f2e:	e7f5      	b.n	8004f1c <_printf_i+0x1f8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ac      	bne.n	8004e8e <_printf_i+0x16a>
 8004f34:	7803      	ldrb	r3, [r0, #0]
 8004f36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f3e:	e76c      	b.n	8004e1a <_printf_i+0xf6>
 8004f40:	080094cc 	.word	0x080094cc
 8004f44:	080094dd 	.word	0x080094dd

08004f48 <iprintf>:
 8004f48:	b40f      	push	{r0, r1, r2, r3}
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <iprintf+0x2c>)
 8004f4c:	b513      	push	{r0, r1, r4, lr}
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	b124      	cbz	r4, 8004f5c <iprintf+0x14>
 8004f52:	69a3      	ldr	r3, [r4, #24]
 8004f54:	b913      	cbnz	r3, 8004f5c <iprintf+0x14>
 8004f56:	4620      	mov	r0, r4
 8004f58:	f001 ff90 	bl	8006e7c <__sinit>
 8004f5c:	ab05      	add	r3, sp, #20
 8004f5e:	9a04      	ldr	r2, [sp, #16]
 8004f60:	68a1      	ldr	r1, [r4, #8]
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	4620      	mov	r0, r4
 8004f66:	f003 fa31 	bl	80083cc <_vfiprintf_r>
 8004f6a:	b002      	add	sp, #8
 8004f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f70:	b004      	add	sp, #16
 8004f72:	4770      	bx	lr
 8004f74:	2000000c 	.word	0x2000000c

08004f78 <putchar>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <putchar+0x24>)
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	4605      	mov	r5, r0
 8004f80:	b124      	cbz	r4, 8004f8c <putchar+0x14>
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	b913      	cbnz	r3, 8004f8c <putchar+0x14>
 8004f86:	4620      	mov	r0, r4
 8004f88:	f001 ff78 	bl	8006e7c <__sinit>
 8004f8c:	68a2      	ldr	r2, [r4, #8]
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4620      	mov	r0, r4
 8004f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f96:	f003 bdff 	b.w	8008b98 <_putc_r>
 8004f9a:	bf00      	nop
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <_puts_r>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	460e      	mov	r6, r1
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	b118      	cbz	r0, 8004fb0 <_puts_r+0x10>
 8004fa8:	6983      	ldr	r3, [r0, #24]
 8004faa:	b90b      	cbnz	r3, 8004fb0 <_puts_r+0x10>
 8004fac:	f001 ff66 	bl	8006e7c <__sinit>
 8004fb0:	69ab      	ldr	r3, [r5, #24]
 8004fb2:	68ac      	ldr	r4, [r5, #8]
 8004fb4:	b913      	cbnz	r3, 8004fbc <_puts_r+0x1c>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f001 ff60 	bl	8006e7c <__sinit>
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <_puts_r+0xac>)
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d117      	bne.n	8004ff2 <_puts_r+0x52>
 8004fc2:	686c      	ldr	r4, [r5, #4]
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	071b      	lsls	r3, r3, #28
 8004fc8:	d51d      	bpl.n	8005006 <_puts_r+0x66>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	b1db      	cbz	r3, 8005006 <_puts_r+0x66>
 8004fce:	3e01      	subs	r6, #1
 8004fd0:	68a3      	ldr	r3, [r4, #8]
 8004fd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	b9e9      	cbnz	r1, 8005018 <_puts_r+0x78>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da2e      	bge.n	800503e <_puts_r+0x9e>
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	210a      	movs	r1, #10
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 ff43 	bl	8005e70 <__swbuf_r>
 8004fea:	3001      	adds	r0, #1
 8004fec:	d011      	beq.n	8005012 <_puts_r+0x72>
 8004fee:	200a      	movs	r0, #10
 8004ff0:	e011      	b.n	8005016 <_puts_r+0x76>
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <_puts_r+0xb0>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	d101      	bne.n	8004ffc <_puts_r+0x5c>
 8004ff8:	68ac      	ldr	r4, [r5, #8]
 8004ffa:	e7e3      	b.n	8004fc4 <_puts_r+0x24>
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <_puts_r+0xb4>)
 8004ffe:	429c      	cmp	r4, r3
 8005000:	bf08      	it	eq
 8005002:	68ec      	ldreq	r4, [r5, #12]
 8005004:	e7de      	b.n	8004fc4 <_puts_r+0x24>
 8005006:	4621      	mov	r1, r4
 8005008:	4628      	mov	r0, r5
 800500a:	f000 ff83 	bl	8005f14 <__swsetup_r>
 800500e:	2800      	cmp	r0, #0
 8005010:	d0dd      	beq.n	8004fce <_puts_r+0x2e>
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	2b00      	cmp	r3, #0
 800501a:	da04      	bge.n	8005026 <_puts_r+0x86>
 800501c:	69a2      	ldr	r2, [r4, #24]
 800501e:	429a      	cmp	r2, r3
 8005020:	dc06      	bgt.n	8005030 <_puts_r+0x90>
 8005022:	290a      	cmp	r1, #10
 8005024:	d004      	beq.n	8005030 <_puts_r+0x90>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	6022      	str	r2, [r4, #0]
 800502c:	7019      	strb	r1, [r3, #0]
 800502e:	e7cf      	b.n	8004fd0 <_puts_r+0x30>
 8005030:	4622      	mov	r2, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 ff1c 	bl	8005e70 <__swbuf_r>
 8005038:	3001      	adds	r0, #1
 800503a:	d1c9      	bne.n	8004fd0 <_puts_r+0x30>
 800503c:	e7e9      	b.n	8005012 <_puts_r+0x72>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	200a      	movs	r0, #10
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	6022      	str	r2, [r4, #0]
 8005046:	7018      	strb	r0, [r3, #0]
 8005048:	e7e5      	b.n	8005016 <_puts_r+0x76>
 800504a:	bf00      	nop
 800504c:	08009570 	.word	0x08009570
 8005050:	08009590 	.word	0x08009590
 8005054:	08009550 	.word	0x08009550

08005058 <puts>:
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <puts+0xc>)
 800505a:	4601      	mov	r1, r0
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f7ff bf9f 	b.w	8004fa0 <_puts_r>
 8005062:	bf00      	nop
 8005064:	2000000c 	.word	0x2000000c

08005068 <iscanf>:
 8005068:	b40f      	push	{r0, r1, r2, r3}
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <iscanf+0x2c>)
 800506c:	b513      	push	{r0, r1, r4, lr}
 800506e:	681c      	ldr	r4, [r3, #0]
 8005070:	b124      	cbz	r4, 800507c <iscanf+0x14>
 8005072:	69a3      	ldr	r3, [r4, #24]
 8005074:	b913      	cbnz	r3, 800507c <iscanf+0x14>
 8005076:	4620      	mov	r0, r4
 8005078:	f001 ff00 	bl	8006e7c <__sinit>
 800507c:	ab05      	add	r3, sp, #20
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	6861      	ldr	r1, [r4, #4]
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	4620      	mov	r0, r4
 8005086:	f003 fc07 	bl	8008898 <_vfiscanf_r>
 800508a:	b002      	add	sp, #8
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	2000000c 	.word	0x2000000c

08005098 <siprintf>:
 8005098:	b40e      	push	{r1, r2, r3}
 800509a:	b500      	push	{lr}
 800509c:	b09c      	sub	sp, #112	; 0x70
 800509e:	ab1d      	add	r3, sp, #116	; 0x74
 80050a0:	9002      	str	r0, [sp, #8]
 80050a2:	9006      	str	r0, [sp, #24]
 80050a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050a8:	4809      	ldr	r0, [pc, #36]	; (80050d0 <siprintf+0x38>)
 80050aa:	9107      	str	r1, [sp, #28]
 80050ac:	9104      	str	r1, [sp, #16]
 80050ae:	4909      	ldr	r1, [pc, #36]	; (80050d4 <siprintf+0x3c>)
 80050b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b4:	9105      	str	r1, [sp, #20]
 80050b6:	6800      	ldr	r0, [r0, #0]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	a902      	add	r1, sp, #8
 80050bc:	f003 f864 	bl	8008188 <_svfiprintf_r>
 80050c0:	9b02      	ldr	r3, [sp, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	b01c      	add	sp, #112	; 0x70
 80050c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050cc:	b003      	add	sp, #12
 80050ce:	4770      	bx	lr
 80050d0:	2000000c 	.word	0x2000000c
 80050d4:	ffff0208 	.word	0xffff0208

080050d8 <sulp>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4604      	mov	r4, r0
 80050dc:	460d      	mov	r5, r1
 80050de:	ec45 4b10 	vmov	d0, r4, r5
 80050e2:	4616      	mov	r6, r2
 80050e4:	f002 fe0c 	bl	8007d00 <__ulp>
 80050e8:	ec51 0b10 	vmov	r0, r1, d0
 80050ec:	b17e      	cbz	r6, 800510e <sulp+0x36>
 80050ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80050f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dd09      	ble.n	800510e <sulp+0x36>
 80050fa:	051b      	lsls	r3, r3, #20
 80050fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005100:	2400      	movs	r4, #0
 8005102:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005106:	4622      	mov	r2, r4
 8005108:	462b      	mov	r3, r5
 800510a:	f7fb fa75 	bl	80005f8 <__aeabi_dmul>
 800510e:	bd70      	pop	{r4, r5, r6, pc}

08005110 <_strtod_l>:
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	461f      	mov	r7, r3
 8005116:	b0a1      	sub	sp, #132	; 0x84
 8005118:	2300      	movs	r3, #0
 800511a:	4681      	mov	r9, r0
 800511c:	4638      	mov	r0, r7
 800511e:	460e      	mov	r6, r1
 8005120:	9217      	str	r2, [sp, #92]	; 0x5c
 8005122:	931c      	str	r3, [sp, #112]	; 0x70
 8005124:	f002 fa88 	bl	8007638 <__localeconv_l>
 8005128:	4680      	mov	r8, r0
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	f7fb f850 	bl	80001d0 <strlen>
 8005130:	f04f 0a00 	mov.w	sl, #0
 8005134:	4604      	mov	r4, r0
 8005136:	f04f 0b00 	mov.w	fp, #0
 800513a:	961b      	str	r6, [sp, #108]	; 0x6c
 800513c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	2a0d      	cmp	r2, #13
 8005142:	d832      	bhi.n	80051aa <_strtod_l+0x9a>
 8005144:	2a09      	cmp	r2, #9
 8005146:	d236      	bcs.n	80051b6 <_strtod_l+0xa6>
 8005148:	2a00      	cmp	r2, #0
 800514a:	d03e      	beq.n	80051ca <_strtod_l+0xba>
 800514c:	2300      	movs	r3, #0
 800514e:	930d      	str	r3, [sp, #52]	; 0x34
 8005150:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005152:	782b      	ldrb	r3, [r5, #0]
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	f040 80ac 	bne.w	80052b2 <_strtod_l+0x1a2>
 800515a:	786b      	ldrb	r3, [r5, #1]
 800515c:	2b58      	cmp	r3, #88	; 0x58
 800515e:	d001      	beq.n	8005164 <_strtod_l+0x54>
 8005160:	2b78      	cmp	r3, #120	; 0x78
 8005162:	d167      	bne.n	8005234 <_strtod_l+0x124>
 8005164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	ab1c      	add	r3, sp, #112	; 0x70
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	9702      	str	r7, [sp, #8]
 800516e:	ab1d      	add	r3, sp, #116	; 0x74
 8005170:	4a88      	ldr	r2, [pc, #544]	; (8005394 <_strtod_l+0x284>)
 8005172:	a91b      	add	r1, sp, #108	; 0x6c
 8005174:	4648      	mov	r0, r9
 8005176:	f001 ff76 	bl	8007066 <__gethex>
 800517a:	f010 0407 	ands.w	r4, r0, #7
 800517e:	4606      	mov	r6, r0
 8005180:	d005      	beq.n	800518e <_strtod_l+0x7e>
 8005182:	2c06      	cmp	r4, #6
 8005184:	d12b      	bne.n	80051de <_strtod_l+0xce>
 8005186:	3501      	adds	r5, #1
 8005188:	2300      	movs	r3, #0
 800518a:	951b      	str	r5, [sp, #108]	; 0x6c
 800518c:	930d      	str	r3, [sp, #52]	; 0x34
 800518e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 859a 	bne.w	8005cca <_strtod_l+0xbba>
 8005196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005198:	b1e3      	cbz	r3, 80051d4 <_strtod_l+0xc4>
 800519a:	4652      	mov	r2, sl
 800519c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80051a0:	ec43 2b10 	vmov	d0, r2, r3
 80051a4:	b021      	add	sp, #132	; 0x84
 80051a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051aa:	2a2b      	cmp	r2, #43	; 0x2b
 80051ac:	d015      	beq.n	80051da <_strtod_l+0xca>
 80051ae:	2a2d      	cmp	r2, #45	; 0x2d
 80051b0:	d004      	beq.n	80051bc <_strtod_l+0xac>
 80051b2:	2a20      	cmp	r2, #32
 80051b4:	d1ca      	bne.n	800514c <_strtod_l+0x3c>
 80051b6:	3301      	adds	r3, #1
 80051b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80051ba:	e7bf      	b.n	800513c <_strtod_l+0x2c>
 80051bc:	2201      	movs	r2, #1
 80051be:	920d      	str	r2, [sp, #52]	; 0x34
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1c2      	bne.n	8005150 <_strtod_l+0x40>
 80051ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 8579 	bne.w	8005cc6 <_strtod_l+0xbb6>
 80051d4:	4652      	mov	r2, sl
 80051d6:	465b      	mov	r3, fp
 80051d8:	e7e2      	b.n	80051a0 <_strtod_l+0x90>
 80051da:	2200      	movs	r2, #0
 80051dc:	e7ef      	b.n	80051be <_strtod_l+0xae>
 80051de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051e0:	b13a      	cbz	r2, 80051f2 <_strtod_l+0xe2>
 80051e2:	2135      	movs	r1, #53	; 0x35
 80051e4:	a81e      	add	r0, sp, #120	; 0x78
 80051e6:	f002 fe83 	bl	8007ef0 <__copybits>
 80051ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051ec:	4648      	mov	r0, r9
 80051ee:	f002 faf0 	bl	80077d2 <_Bfree>
 80051f2:	3c01      	subs	r4, #1
 80051f4:	2c04      	cmp	r4, #4
 80051f6:	d806      	bhi.n	8005206 <_strtod_l+0xf6>
 80051f8:	e8df f004 	tbb	[pc, r4]
 80051fc:	1714030a 	.word	0x1714030a
 8005200:	0a          	.byte	0x0a
 8005201:	00          	.byte	0x00
 8005202:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005206:	0730      	lsls	r0, r6, #28
 8005208:	d5c1      	bpl.n	800518e <_strtod_l+0x7e>
 800520a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800520e:	e7be      	b.n	800518e <_strtod_l+0x7e>
 8005210:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005214:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005216:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800521a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800521e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005222:	e7f0      	b.n	8005206 <_strtod_l+0xf6>
 8005224:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005398 <_strtod_l+0x288>
 8005228:	e7ed      	b.n	8005206 <_strtod_l+0xf6>
 800522a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800522e:	f04f 3aff 	mov.w	sl, #4294967295
 8005232:	e7e8      	b.n	8005206 <_strtod_l+0xf6>
 8005234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	921b      	str	r2, [sp, #108]	; 0x6c
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b30      	cmp	r3, #48	; 0x30
 800523e:	d0f9      	beq.n	8005234 <_strtod_l+0x124>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0a4      	beq.n	800518e <_strtod_l+0x7e>
 8005244:	2301      	movs	r3, #1
 8005246:	2500      	movs	r5, #0
 8005248:	9306      	str	r3, [sp, #24]
 800524a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800524c:	9308      	str	r3, [sp, #32]
 800524e:	9507      	str	r5, [sp, #28]
 8005250:	9505      	str	r5, [sp, #20]
 8005252:	220a      	movs	r2, #10
 8005254:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005256:	7807      	ldrb	r7, [r0, #0]
 8005258:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800525c:	b2d9      	uxtb	r1, r3
 800525e:	2909      	cmp	r1, #9
 8005260:	d929      	bls.n	80052b6 <_strtod_l+0x1a6>
 8005262:	4622      	mov	r2, r4
 8005264:	f8d8 1000 	ldr.w	r1, [r8]
 8005268:	f003 fded 	bl	8008e46 <strncmp>
 800526c:	2800      	cmp	r0, #0
 800526e:	d031      	beq.n	80052d4 <_strtod_l+0x1c4>
 8005270:	2000      	movs	r0, #0
 8005272:	9c05      	ldr	r4, [sp, #20]
 8005274:	9004      	str	r0, [sp, #16]
 8005276:	463b      	mov	r3, r7
 8005278:	4602      	mov	r2, r0
 800527a:	2b65      	cmp	r3, #101	; 0x65
 800527c:	d001      	beq.n	8005282 <_strtod_l+0x172>
 800527e:	2b45      	cmp	r3, #69	; 0x45
 8005280:	d114      	bne.n	80052ac <_strtod_l+0x19c>
 8005282:	b924      	cbnz	r4, 800528e <_strtod_l+0x17e>
 8005284:	b910      	cbnz	r0, 800528c <_strtod_l+0x17c>
 8005286:	9b06      	ldr	r3, [sp, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d09e      	beq.n	80051ca <_strtod_l+0xba>
 800528c:	2400      	movs	r4, #0
 800528e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005290:	1c73      	adds	r3, r6, #1
 8005292:	931b      	str	r3, [sp, #108]	; 0x6c
 8005294:	7873      	ldrb	r3, [r6, #1]
 8005296:	2b2b      	cmp	r3, #43	; 0x2b
 8005298:	d078      	beq.n	800538c <_strtod_l+0x27c>
 800529a:	2b2d      	cmp	r3, #45	; 0x2d
 800529c:	d070      	beq.n	8005380 <_strtod_l+0x270>
 800529e:	f04f 0c00 	mov.w	ip, #0
 80052a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80052a6:	2f09      	cmp	r7, #9
 80052a8:	d97c      	bls.n	80053a4 <_strtod_l+0x294>
 80052aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80052ac:	f04f 0e00 	mov.w	lr, #0
 80052b0:	e09a      	b.n	80053e8 <_strtod_l+0x2d8>
 80052b2:	2300      	movs	r3, #0
 80052b4:	e7c7      	b.n	8005246 <_strtod_l+0x136>
 80052b6:	9905      	ldr	r1, [sp, #20]
 80052b8:	2908      	cmp	r1, #8
 80052ba:	bfdd      	ittte	le
 80052bc:	9907      	ldrle	r1, [sp, #28]
 80052be:	fb02 3301 	mlale	r3, r2, r1, r3
 80052c2:	9307      	strle	r3, [sp, #28]
 80052c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80052c8:	9b05      	ldr	r3, [sp, #20]
 80052ca:	3001      	adds	r0, #1
 80052cc:	3301      	adds	r3, #1
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	901b      	str	r0, [sp, #108]	; 0x6c
 80052d2:	e7bf      	b.n	8005254 <_strtod_l+0x144>
 80052d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052d6:	191a      	adds	r2, r3, r4
 80052d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80052da:	9a05      	ldr	r2, [sp, #20]
 80052dc:	5d1b      	ldrb	r3, [r3, r4]
 80052de:	2a00      	cmp	r2, #0
 80052e0:	d037      	beq.n	8005352 <_strtod_l+0x242>
 80052e2:	9c05      	ldr	r4, [sp, #20]
 80052e4:	4602      	mov	r2, r0
 80052e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052ea:	2909      	cmp	r1, #9
 80052ec:	d913      	bls.n	8005316 <_strtod_l+0x206>
 80052ee:	2101      	movs	r1, #1
 80052f0:	9104      	str	r1, [sp, #16]
 80052f2:	e7c2      	b.n	800527a <_strtod_l+0x16a>
 80052f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	3001      	adds	r0, #1
 80052fe:	2b30      	cmp	r3, #48	; 0x30
 8005300:	d0f8      	beq.n	80052f4 <_strtod_l+0x1e4>
 8005302:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005306:	2a08      	cmp	r2, #8
 8005308:	f200 84e4 	bhi.w	8005cd4 <_strtod_l+0xbc4>
 800530c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800530e:	9208      	str	r2, [sp, #32]
 8005310:	4602      	mov	r2, r0
 8005312:	2000      	movs	r0, #0
 8005314:	4604      	mov	r4, r0
 8005316:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800531a:	f100 0101 	add.w	r1, r0, #1
 800531e:	d012      	beq.n	8005346 <_strtod_l+0x236>
 8005320:	440a      	add	r2, r1
 8005322:	eb00 0c04 	add.w	ip, r0, r4
 8005326:	4621      	mov	r1, r4
 8005328:	270a      	movs	r7, #10
 800532a:	458c      	cmp	ip, r1
 800532c:	d113      	bne.n	8005356 <_strtod_l+0x246>
 800532e:	1821      	adds	r1, r4, r0
 8005330:	2908      	cmp	r1, #8
 8005332:	f104 0401 	add.w	r4, r4, #1
 8005336:	4404      	add	r4, r0
 8005338:	dc19      	bgt.n	800536e <_strtod_l+0x25e>
 800533a:	9b07      	ldr	r3, [sp, #28]
 800533c:	210a      	movs	r1, #10
 800533e:	fb01 e303 	mla	r3, r1, r3, lr
 8005342:	9307      	str	r3, [sp, #28]
 8005344:	2100      	movs	r1, #0
 8005346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005348:	1c58      	adds	r0, r3, #1
 800534a:	901b      	str	r0, [sp, #108]	; 0x6c
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	4608      	mov	r0, r1
 8005350:	e7c9      	b.n	80052e6 <_strtod_l+0x1d6>
 8005352:	9805      	ldr	r0, [sp, #20]
 8005354:	e7d3      	b.n	80052fe <_strtod_l+0x1ee>
 8005356:	2908      	cmp	r1, #8
 8005358:	f101 0101 	add.w	r1, r1, #1
 800535c:	dc03      	bgt.n	8005366 <_strtod_l+0x256>
 800535e:	9b07      	ldr	r3, [sp, #28]
 8005360:	437b      	muls	r3, r7
 8005362:	9307      	str	r3, [sp, #28]
 8005364:	e7e1      	b.n	800532a <_strtod_l+0x21a>
 8005366:	2910      	cmp	r1, #16
 8005368:	bfd8      	it	le
 800536a:	437d      	mulle	r5, r7
 800536c:	e7dd      	b.n	800532a <_strtod_l+0x21a>
 800536e:	2c10      	cmp	r4, #16
 8005370:	bfdc      	itt	le
 8005372:	210a      	movle	r1, #10
 8005374:	fb01 e505 	mlale	r5, r1, r5, lr
 8005378:	e7e4      	b.n	8005344 <_strtod_l+0x234>
 800537a:	2301      	movs	r3, #1
 800537c:	9304      	str	r3, [sp, #16]
 800537e:	e781      	b.n	8005284 <_strtod_l+0x174>
 8005380:	f04f 0c01 	mov.w	ip, #1
 8005384:	1cb3      	adds	r3, r6, #2
 8005386:	931b      	str	r3, [sp, #108]	; 0x6c
 8005388:	78b3      	ldrb	r3, [r6, #2]
 800538a:	e78a      	b.n	80052a2 <_strtod_l+0x192>
 800538c:	f04f 0c00 	mov.w	ip, #0
 8005390:	e7f8      	b.n	8005384 <_strtod_l+0x274>
 8005392:	bf00      	nop
 8005394:	080094f0 	.word	0x080094f0
 8005398:	7ff00000 	.word	0x7ff00000
 800539c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800539e:	1c5f      	adds	r7, r3, #1
 80053a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d0f9      	beq.n	800539c <_strtod_l+0x28c>
 80053a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80053ac:	2f08      	cmp	r7, #8
 80053ae:	f63f af7d 	bhi.w	80052ac <_strtod_l+0x19c>
 80053b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053b8:	930a      	str	r3, [sp, #40]	; 0x28
 80053ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053bc:	1c5f      	adds	r7, r3, #1
 80053be:	971b      	str	r7, [sp, #108]	; 0x6c
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80053c6:	f1b8 0f09 	cmp.w	r8, #9
 80053ca:	d937      	bls.n	800543c <_strtod_l+0x32c>
 80053cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053ce:	1a7f      	subs	r7, r7, r1
 80053d0:	2f08      	cmp	r7, #8
 80053d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80053d6:	dc37      	bgt.n	8005448 <_strtod_l+0x338>
 80053d8:	45be      	cmp	lr, r7
 80053da:	bfa8      	it	ge
 80053dc:	46be      	movge	lr, r7
 80053de:	f1bc 0f00 	cmp.w	ip, #0
 80053e2:	d001      	beq.n	80053e8 <_strtod_l+0x2d8>
 80053e4:	f1ce 0e00 	rsb	lr, lr, #0
 80053e8:	2c00      	cmp	r4, #0
 80053ea:	d151      	bne.n	8005490 <_strtod_l+0x380>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	f47f aece 	bne.w	800518e <_strtod_l+0x7e>
 80053f2:	9a06      	ldr	r2, [sp, #24]
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	f47f aeca 	bne.w	800518e <_strtod_l+0x7e>
 80053fa:	9a04      	ldr	r2, [sp, #16]
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	f47f aee4 	bne.w	80051ca <_strtod_l+0xba>
 8005402:	2b4e      	cmp	r3, #78	; 0x4e
 8005404:	d027      	beq.n	8005456 <_strtod_l+0x346>
 8005406:	dc21      	bgt.n	800544c <_strtod_l+0x33c>
 8005408:	2b49      	cmp	r3, #73	; 0x49
 800540a:	f47f aede 	bne.w	80051ca <_strtod_l+0xba>
 800540e:	49a0      	ldr	r1, [pc, #640]	; (8005690 <_strtod_l+0x580>)
 8005410:	a81b      	add	r0, sp, #108	; 0x6c
 8005412:	f002 f85b 	bl	80074cc <__match>
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f aed7 	beq.w	80051ca <_strtod_l+0xba>
 800541c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800541e:	499d      	ldr	r1, [pc, #628]	; (8005694 <_strtod_l+0x584>)
 8005420:	3b01      	subs	r3, #1
 8005422:	a81b      	add	r0, sp, #108	; 0x6c
 8005424:	931b      	str	r3, [sp, #108]	; 0x6c
 8005426:	f002 f851 	bl	80074cc <__match>
 800542a:	b910      	cbnz	r0, 8005432 <_strtod_l+0x322>
 800542c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800542e:	3301      	adds	r3, #1
 8005430:	931b      	str	r3, [sp, #108]	; 0x6c
 8005432:	f8df b274 	ldr.w	fp, [pc, #628]	; 80056a8 <_strtod_l+0x598>
 8005436:	f04f 0a00 	mov.w	sl, #0
 800543a:	e6a8      	b.n	800518e <_strtod_l+0x7e>
 800543c:	210a      	movs	r1, #10
 800543e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005442:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005446:	e7b8      	b.n	80053ba <_strtod_l+0x2aa>
 8005448:	46be      	mov	lr, r7
 800544a:	e7c8      	b.n	80053de <_strtod_l+0x2ce>
 800544c:	2b69      	cmp	r3, #105	; 0x69
 800544e:	d0de      	beq.n	800540e <_strtod_l+0x2fe>
 8005450:	2b6e      	cmp	r3, #110	; 0x6e
 8005452:	f47f aeba 	bne.w	80051ca <_strtod_l+0xba>
 8005456:	4990      	ldr	r1, [pc, #576]	; (8005698 <_strtod_l+0x588>)
 8005458:	a81b      	add	r0, sp, #108	; 0x6c
 800545a:	f002 f837 	bl	80074cc <__match>
 800545e:	2800      	cmp	r0, #0
 8005460:	f43f aeb3 	beq.w	80051ca <_strtod_l+0xba>
 8005464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b28      	cmp	r3, #40	; 0x28
 800546a:	d10e      	bne.n	800548a <_strtod_l+0x37a>
 800546c:	aa1e      	add	r2, sp, #120	; 0x78
 800546e:	498b      	ldr	r1, [pc, #556]	; (800569c <_strtod_l+0x58c>)
 8005470:	a81b      	add	r0, sp, #108	; 0x6c
 8005472:	f002 f83f 	bl	80074f4 <__hexnan>
 8005476:	2805      	cmp	r0, #5
 8005478:	d107      	bne.n	800548a <_strtod_l+0x37a>
 800547a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800547c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005480:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005484:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005488:	e681      	b.n	800518e <_strtod_l+0x7e>
 800548a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80056b0 <_strtod_l+0x5a0>
 800548e:	e7d2      	b.n	8005436 <_strtod_l+0x326>
 8005490:	ebae 0302 	sub.w	r3, lr, r2
 8005494:	9306      	str	r3, [sp, #24]
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	9807      	ldr	r0, [sp, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf08      	it	eq
 800549e:	4623      	moveq	r3, r4
 80054a0:	2c10      	cmp	r4, #16
 80054a2:	9305      	str	r3, [sp, #20]
 80054a4:	46a0      	mov	r8, r4
 80054a6:	bfa8      	it	ge
 80054a8:	f04f 0810 	movge.w	r8, #16
 80054ac:	f7fb f82a 	bl	8000504 <__aeabi_ui2d>
 80054b0:	2c09      	cmp	r4, #9
 80054b2:	4682      	mov	sl, r0
 80054b4:	468b      	mov	fp, r1
 80054b6:	dc13      	bgt.n	80054e0 <_strtod_l+0x3d0>
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f43f ae67 	beq.w	800518e <_strtod_l+0x7e>
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	dd7a      	ble.n	80055ba <_strtod_l+0x4aa>
 80054c4:	2b16      	cmp	r3, #22
 80054c6:	dc61      	bgt.n	800558c <_strtod_l+0x47c>
 80054c8:	4a75      	ldr	r2, [pc, #468]	; (80056a0 <_strtod_l+0x590>)
 80054ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80054ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80054d2:	4652      	mov	r2, sl
 80054d4:	465b      	mov	r3, fp
 80054d6:	f7fb f88f 	bl	80005f8 <__aeabi_dmul>
 80054da:	4682      	mov	sl, r0
 80054dc:	468b      	mov	fp, r1
 80054de:	e656      	b.n	800518e <_strtod_l+0x7e>
 80054e0:	4b6f      	ldr	r3, [pc, #444]	; (80056a0 <_strtod_l+0x590>)
 80054e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054ea:	f7fb f885 	bl	80005f8 <__aeabi_dmul>
 80054ee:	4606      	mov	r6, r0
 80054f0:	4628      	mov	r0, r5
 80054f2:	460f      	mov	r7, r1
 80054f4:	f7fb f806 	bl	8000504 <__aeabi_ui2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	f7fa fec4 	bl	800028c <__adddf3>
 8005504:	2c0f      	cmp	r4, #15
 8005506:	4682      	mov	sl, r0
 8005508:	468b      	mov	fp, r1
 800550a:	ddd5      	ble.n	80054b8 <_strtod_l+0x3a8>
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	eba4 0808 	sub.w	r8, r4, r8
 8005512:	4498      	add	r8, r3
 8005514:	f1b8 0f00 	cmp.w	r8, #0
 8005518:	f340 8096 	ble.w	8005648 <_strtod_l+0x538>
 800551c:	f018 030f 	ands.w	r3, r8, #15
 8005520:	d00a      	beq.n	8005538 <_strtod_l+0x428>
 8005522:	495f      	ldr	r1, [pc, #380]	; (80056a0 <_strtod_l+0x590>)
 8005524:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005528:	4652      	mov	r2, sl
 800552a:	465b      	mov	r3, fp
 800552c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005530:	f7fb f862 	bl	80005f8 <__aeabi_dmul>
 8005534:	4682      	mov	sl, r0
 8005536:	468b      	mov	fp, r1
 8005538:	f038 080f 	bics.w	r8, r8, #15
 800553c:	d073      	beq.n	8005626 <_strtod_l+0x516>
 800553e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005542:	dd47      	ble.n	80055d4 <_strtod_l+0x4c4>
 8005544:	2400      	movs	r4, #0
 8005546:	46a0      	mov	r8, r4
 8005548:	9407      	str	r4, [sp, #28]
 800554a:	9405      	str	r4, [sp, #20]
 800554c:	2322      	movs	r3, #34	; 0x22
 800554e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80056a8 <_strtod_l+0x598>
 8005552:	f8c9 3000 	str.w	r3, [r9]
 8005556:	f04f 0a00 	mov.w	sl, #0
 800555a:	9b07      	ldr	r3, [sp, #28]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f43f ae16 	beq.w	800518e <_strtod_l+0x7e>
 8005562:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005564:	4648      	mov	r0, r9
 8005566:	f002 f934 	bl	80077d2 <_Bfree>
 800556a:	9905      	ldr	r1, [sp, #20]
 800556c:	4648      	mov	r0, r9
 800556e:	f002 f930 	bl	80077d2 <_Bfree>
 8005572:	4641      	mov	r1, r8
 8005574:	4648      	mov	r0, r9
 8005576:	f002 f92c 	bl	80077d2 <_Bfree>
 800557a:	9907      	ldr	r1, [sp, #28]
 800557c:	4648      	mov	r0, r9
 800557e:	f002 f928 	bl	80077d2 <_Bfree>
 8005582:	4621      	mov	r1, r4
 8005584:	4648      	mov	r0, r9
 8005586:	f002 f924 	bl	80077d2 <_Bfree>
 800558a:	e600      	b.n	800518e <_strtod_l+0x7e>
 800558c:	9a06      	ldr	r2, [sp, #24]
 800558e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005592:	4293      	cmp	r3, r2
 8005594:	dbba      	blt.n	800550c <_strtod_l+0x3fc>
 8005596:	4d42      	ldr	r5, [pc, #264]	; (80056a0 <_strtod_l+0x590>)
 8005598:	f1c4 040f 	rsb	r4, r4, #15
 800559c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80055a0:	4652      	mov	r2, sl
 80055a2:	465b      	mov	r3, fp
 80055a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a8:	f7fb f826 	bl	80005f8 <__aeabi_dmul>
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	1b1c      	subs	r4, r3, r4
 80055b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055b8:	e78d      	b.n	80054d6 <_strtod_l+0x3c6>
 80055ba:	f113 0f16 	cmn.w	r3, #22
 80055be:	dba5      	blt.n	800550c <_strtod_l+0x3fc>
 80055c0:	4a37      	ldr	r2, [pc, #220]	; (80056a0 <_strtod_l+0x590>)
 80055c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80055c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80055ca:	4650      	mov	r0, sl
 80055cc:	4659      	mov	r1, fp
 80055ce:	f7fb f93d 	bl	800084c <__aeabi_ddiv>
 80055d2:	e782      	b.n	80054da <_strtod_l+0x3ca>
 80055d4:	2300      	movs	r3, #0
 80055d6:	4e33      	ldr	r6, [pc, #204]	; (80056a4 <_strtod_l+0x594>)
 80055d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055dc:	4650      	mov	r0, sl
 80055de:	4659      	mov	r1, fp
 80055e0:	461d      	mov	r5, r3
 80055e2:	f1b8 0f01 	cmp.w	r8, #1
 80055e6:	dc21      	bgt.n	800562c <_strtod_l+0x51c>
 80055e8:	b10b      	cbz	r3, 80055ee <_strtod_l+0x4de>
 80055ea:	4682      	mov	sl, r0
 80055ec:	468b      	mov	fp, r1
 80055ee:	4b2d      	ldr	r3, [pc, #180]	; (80056a4 <_strtod_l+0x594>)
 80055f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80055f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80055f8:	4652      	mov	r2, sl
 80055fa:	465b      	mov	r3, fp
 80055fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005600:	f7fa fffa 	bl	80005f8 <__aeabi_dmul>
 8005604:	4b28      	ldr	r3, [pc, #160]	; (80056a8 <_strtod_l+0x598>)
 8005606:	460a      	mov	r2, r1
 8005608:	400b      	ands	r3, r1
 800560a:	4928      	ldr	r1, [pc, #160]	; (80056ac <_strtod_l+0x59c>)
 800560c:	428b      	cmp	r3, r1
 800560e:	4682      	mov	sl, r0
 8005610:	d898      	bhi.n	8005544 <_strtod_l+0x434>
 8005612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005616:	428b      	cmp	r3, r1
 8005618:	bf86      	itte	hi
 800561a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80056b4 <_strtod_l+0x5a4>
 800561e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005622:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005626:	2300      	movs	r3, #0
 8005628:	9304      	str	r3, [sp, #16]
 800562a:	e077      	b.n	800571c <_strtod_l+0x60c>
 800562c:	f018 0f01 	tst.w	r8, #1
 8005630:	d006      	beq.n	8005640 <_strtod_l+0x530>
 8005632:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa ffdd 	bl	80005f8 <__aeabi_dmul>
 800563e:	2301      	movs	r3, #1
 8005640:	3501      	adds	r5, #1
 8005642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005646:	e7cc      	b.n	80055e2 <_strtod_l+0x4d2>
 8005648:	d0ed      	beq.n	8005626 <_strtod_l+0x516>
 800564a:	f1c8 0800 	rsb	r8, r8, #0
 800564e:	f018 020f 	ands.w	r2, r8, #15
 8005652:	d00a      	beq.n	800566a <_strtod_l+0x55a>
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <_strtod_l+0x590>)
 8005656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800565a:	4650      	mov	r0, sl
 800565c:	4659      	mov	r1, fp
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fb f8f3 	bl	800084c <__aeabi_ddiv>
 8005666:	4682      	mov	sl, r0
 8005668:	468b      	mov	fp, r1
 800566a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800566e:	d0da      	beq.n	8005626 <_strtod_l+0x516>
 8005670:	f1b8 0f1f 	cmp.w	r8, #31
 8005674:	dd20      	ble.n	80056b8 <_strtod_l+0x5a8>
 8005676:	2400      	movs	r4, #0
 8005678:	46a0      	mov	r8, r4
 800567a:	9407      	str	r4, [sp, #28]
 800567c:	9405      	str	r4, [sp, #20]
 800567e:	2322      	movs	r3, #34	; 0x22
 8005680:	f04f 0a00 	mov.w	sl, #0
 8005684:	f04f 0b00 	mov.w	fp, #0
 8005688:	f8c9 3000 	str.w	r3, [r9]
 800568c:	e765      	b.n	800555a <_strtod_l+0x44a>
 800568e:	bf00      	nop
 8005690:	080094c1 	.word	0x080094c1
 8005694:	08009543 	.word	0x08009543
 8005698:	080094c9 	.word	0x080094c9
 800569c:	08009504 	.word	0x08009504
 80056a0:	080095e8 	.word	0x080095e8
 80056a4:	080095c0 	.word	0x080095c0
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	7ca00000 	.word	0x7ca00000
 80056b0:	fff80000 	.word	0xfff80000
 80056b4:	7fefffff 	.word	0x7fefffff
 80056b8:	f018 0310 	ands.w	r3, r8, #16
 80056bc:	bf18      	it	ne
 80056be:	236a      	movne	r3, #106	; 0x6a
 80056c0:	4da0      	ldr	r5, [pc, #640]	; (8005944 <_strtod_l+0x834>)
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	4650      	mov	r0, sl
 80056c6:	4659      	mov	r1, fp
 80056c8:	2300      	movs	r3, #0
 80056ca:	f1b8 0f00 	cmp.w	r8, #0
 80056ce:	f300 810a 	bgt.w	80058e6 <_strtod_l+0x7d6>
 80056d2:	b10b      	cbz	r3, 80056d8 <_strtod_l+0x5c8>
 80056d4:	4682      	mov	sl, r0
 80056d6:	468b      	mov	fp, r1
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	b1bb      	cbz	r3, 800570c <_strtod_l+0x5fc>
 80056dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80056e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	4659      	mov	r1, fp
 80056e8:	dd10      	ble.n	800570c <_strtod_l+0x5fc>
 80056ea:	2b1f      	cmp	r3, #31
 80056ec:	f340 8107 	ble.w	80058fe <_strtod_l+0x7ee>
 80056f0:	2b34      	cmp	r3, #52	; 0x34
 80056f2:	bfde      	ittt	le
 80056f4:	3b20      	suble	r3, #32
 80056f6:	f04f 32ff 	movle.w	r2, #4294967295
 80056fa:	fa02 f303 	lslle.w	r3, r2, r3
 80056fe:	f04f 0a00 	mov.w	sl, #0
 8005702:	bfcc      	ite	gt
 8005704:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005708:	ea03 0b01 	andle.w	fp, r3, r1
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4650      	mov	r0, sl
 8005712:	4659      	mov	r1, fp
 8005714:	f7fb f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005718:	2800      	cmp	r0, #0
 800571a:	d1ac      	bne.n	8005676 <_strtod_l+0x566>
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	9a05      	ldr	r2, [sp, #20]
 8005722:	9908      	ldr	r1, [sp, #32]
 8005724:	4623      	mov	r3, r4
 8005726:	4648      	mov	r0, r9
 8005728:	f002 f8a5 	bl	8007876 <__s2b>
 800572c:	9007      	str	r0, [sp, #28]
 800572e:	2800      	cmp	r0, #0
 8005730:	f43f af08 	beq.w	8005544 <_strtod_l+0x434>
 8005734:	9a06      	ldr	r2, [sp, #24]
 8005736:	9b06      	ldr	r3, [sp, #24]
 8005738:	2a00      	cmp	r2, #0
 800573a:	f1c3 0300 	rsb	r3, r3, #0
 800573e:	bfa8      	it	ge
 8005740:	2300      	movge	r3, #0
 8005742:	930e      	str	r3, [sp, #56]	; 0x38
 8005744:	2400      	movs	r4, #0
 8005746:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800574a:	9316      	str	r3, [sp, #88]	; 0x58
 800574c:	46a0      	mov	r8, r4
 800574e:	9b07      	ldr	r3, [sp, #28]
 8005750:	4648      	mov	r0, r9
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	f002 f809 	bl	800776a <_Balloc>
 8005758:	9005      	str	r0, [sp, #20]
 800575a:	2800      	cmp	r0, #0
 800575c:	f43f aef6 	beq.w	800554c <_strtod_l+0x43c>
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	3202      	adds	r2, #2
 8005766:	f103 010c 	add.w	r1, r3, #12
 800576a:	0092      	lsls	r2, r2, #2
 800576c:	300c      	adds	r0, #12
 800576e:	f001 fff1 	bl	8007754 <memcpy>
 8005772:	aa1e      	add	r2, sp, #120	; 0x78
 8005774:	a91d      	add	r1, sp, #116	; 0x74
 8005776:	ec4b ab10 	vmov	d0, sl, fp
 800577a:	4648      	mov	r0, r9
 800577c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005780:	f002 fb34 	bl	8007dec <__d2b>
 8005784:	901c      	str	r0, [sp, #112]	; 0x70
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f aee0 	beq.w	800554c <_strtod_l+0x43c>
 800578c:	2101      	movs	r1, #1
 800578e:	4648      	mov	r0, r9
 8005790:	f002 f8fd 	bl	800798e <__i2b>
 8005794:	4680      	mov	r8, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	f43f aed8 	beq.w	800554c <_strtod_l+0x43c>
 800579c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800579e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057a0:	2e00      	cmp	r6, #0
 80057a2:	bfab      	itete	ge
 80057a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80057a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80057aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80057ac:	bfac      	ite	ge
 80057ae:	18f7      	addge	r7, r6, r3
 80057b0:	1b9d      	sublt	r5, r3, r6
 80057b2:	9b04      	ldr	r3, [sp, #16]
 80057b4:	1af6      	subs	r6, r6, r3
 80057b6:	4416      	add	r6, r2
 80057b8:	4b63      	ldr	r3, [pc, #396]	; (8005948 <_strtod_l+0x838>)
 80057ba:	3e01      	subs	r6, #1
 80057bc:	429e      	cmp	r6, r3
 80057be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057c2:	f280 80af 	bge.w	8005924 <_strtod_l+0x814>
 80057c6:	1b9b      	subs	r3, r3, r6
 80057c8:	2b1f      	cmp	r3, #31
 80057ca:	eba2 0203 	sub.w	r2, r2, r3
 80057ce:	f04f 0101 	mov.w	r1, #1
 80057d2:	f300 809b 	bgt.w	800590c <_strtod_l+0x7fc>
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	930f      	str	r3, [sp, #60]	; 0x3c
 80057dc:	2300      	movs	r3, #0
 80057de:	930a      	str	r3, [sp, #40]	; 0x28
 80057e0:	18be      	adds	r6, r7, r2
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	42b7      	cmp	r7, r6
 80057e6:	4415      	add	r5, r2
 80057e8:	441d      	add	r5, r3
 80057ea:	463b      	mov	r3, r7
 80057ec:	bfa8      	it	ge
 80057ee:	4633      	movge	r3, r6
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	bfa8      	it	ge
 80057f4:	462b      	movge	r3, r5
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfc2      	ittt	gt
 80057fa:	1af6      	subgt	r6, r6, r3
 80057fc:	1aed      	subgt	r5, r5, r3
 80057fe:	1aff      	subgt	r7, r7, r3
 8005800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005802:	b1bb      	cbz	r3, 8005834 <_strtod_l+0x724>
 8005804:	4641      	mov	r1, r8
 8005806:	461a      	mov	r2, r3
 8005808:	4648      	mov	r0, r9
 800580a:	f002 f95f 	bl	8007acc <__pow5mult>
 800580e:	4680      	mov	r8, r0
 8005810:	2800      	cmp	r0, #0
 8005812:	f43f ae9b 	beq.w	800554c <_strtod_l+0x43c>
 8005816:	4601      	mov	r1, r0
 8005818:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800581a:	4648      	mov	r0, r9
 800581c:	f002 f8c0 	bl	80079a0 <__multiply>
 8005820:	900c      	str	r0, [sp, #48]	; 0x30
 8005822:	2800      	cmp	r0, #0
 8005824:	f43f ae92 	beq.w	800554c <_strtod_l+0x43c>
 8005828:	991c      	ldr	r1, [sp, #112]	; 0x70
 800582a:	4648      	mov	r0, r9
 800582c:	f001 ffd1 	bl	80077d2 <_Bfree>
 8005830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005832:	931c      	str	r3, [sp, #112]	; 0x70
 8005834:	2e00      	cmp	r6, #0
 8005836:	dc7a      	bgt.n	800592e <_strtod_l+0x81e>
 8005838:	9b06      	ldr	r3, [sp, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	dd08      	ble.n	8005850 <_strtod_l+0x740>
 800583e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005840:	9905      	ldr	r1, [sp, #20]
 8005842:	4648      	mov	r0, r9
 8005844:	f002 f942 	bl	8007acc <__pow5mult>
 8005848:	9005      	str	r0, [sp, #20]
 800584a:	2800      	cmp	r0, #0
 800584c:	f43f ae7e 	beq.w	800554c <_strtod_l+0x43c>
 8005850:	2d00      	cmp	r5, #0
 8005852:	dd08      	ble.n	8005866 <_strtod_l+0x756>
 8005854:	462a      	mov	r2, r5
 8005856:	9905      	ldr	r1, [sp, #20]
 8005858:	4648      	mov	r0, r9
 800585a:	f002 f985 	bl	8007b68 <__lshift>
 800585e:	9005      	str	r0, [sp, #20]
 8005860:	2800      	cmp	r0, #0
 8005862:	f43f ae73 	beq.w	800554c <_strtod_l+0x43c>
 8005866:	2f00      	cmp	r7, #0
 8005868:	dd08      	ble.n	800587c <_strtod_l+0x76c>
 800586a:	4641      	mov	r1, r8
 800586c:	463a      	mov	r2, r7
 800586e:	4648      	mov	r0, r9
 8005870:	f002 f97a 	bl	8007b68 <__lshift>
 8005874:	4680      	mov	r8, r0
 8005876:	2800      	cmp	r0, #0
 8005878:	f43f ae68 	beq.w	800554c <_strtod_l+0x43c>
 800587c:	9a05      	ldr	r2, [sp, #20]
 800587e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005880:	4648      	mov	r0, r9
 8005882:	f002 f9df 	bl	8007c44 <__mdiff>
 8005886:	4604      	mov	r4, r0
 8005888:	2800      	cmp	r0, #0
 800588a:	f43f ae5f 	beq.w	800554c <_strtod_l+0x43c>
 800588e:	68c3      	ldr	r3, [r0, #12]
 8005890:	930c      	str	r3, [sp, #48]	; 0x30
 8005892:	2300      	movs	r3, #0
 8005894:	60c3      	str	r3, [r0, #12]
 8005896:	4641      	mov	r1, r8
 8005898:	f002 f9ba 	bl	8007c10 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	da55      	bge.n	800594c <_strtod_l+0x83c>
 80058a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a2:	b9e3      	cbnz	r3, 80058de <_strtod_l+0x7ce>
 80058a4:	f1ba 0f00 	cmp.w	sl, #0
 80058a8:	d119      	bne.n	80058de <_strtod_l+0x7ce>
 80058aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058ae:	b9b3      	cbnz	r3, 80058de <_strtod_l+0x7ce>
 80058b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058b4:	0d1b      	lsrs	r3, r3, #20
 80058b6:	051b      	lsls	r3, r3, #20
 80058b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058bc:	d90f      	bls.n	80058de <_strtod_l+0x7ce>
 80058be:	6963      	ldr	r3, [r4, #20]
 80058c0:	b913      	cbnz	r3, 80058c8 <_strtod_l+0x7b8>
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	dd0a      	ble.n	80058de <_strtod_l+0x7ce>
 80058c8:	4621      	mov	r1, r4
 80058ca:	2201      	movs	r2, #1
 80058cc:	4648      	mov	r0, r9
 80058ce:	f002 f94b 	bl	8007b68 <__lshift>
 80058d2:	4641      	mov	r1, r8
 80058d4:	4604      	mov	r4, r0
 80058d6:	f002 f99b 	bl	8007c10 <__mcmp>
 80058da:	2800      	cmp	r0, #0
 80058dc:	dc67      	bgt.n	80059ae <_strtod_l+0x89e>
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d171      	bne.n	80059c8 <_strtod_l+0x8b8>
 80058e4:	e63d      	b.n	8005562 <_strtod_l+0x452>
 80058e6:	f018 0f01 	tst.w	r8, #1
 80058ea:	d004      	beq.n	80058f6 <_strtod_l+0x7e6>
 80058ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058f0:	f7fa fe82 	bl	80005f8 <__aeabi_dmul>
 80058f4:	2301      	movs	r3, #1
 80058f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058fa:	3508      	adds	r5, #8
 80058fc:	e6e5      	b.n	80056ca <_strtod_l+0x5ba>
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	ea03 0a0a 	and.w	sl, r3, sl
 800590a:	e6ff      	b.n	800570c <_strtod_l+0x5fc>
 800590c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005910:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005914:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005918:	36e2      	adds	r6, #226	; 0xe2
 800591a:	fa01 f306 	lsl.w	r3, r1, r6
 800591e:	930a      	str	r3, [sp, #40]	; 0x28
 8005920:	910f      	str	r1, [sp, #60]	; 0x3c
 8005922:	e75d      	b.n	80057e0 <_strtod_l+0x6d0>
 8005924:	2300      	movs	r3, #0
 8005926:	930a      	str	r3, [sp, #40]	; 0x28
 8005928:	2301      	movs	r3, #1
 800592a:	930f      	str	r3, [sp, #60]	; 0x3c
 800592c:	e758      	b.n	80057e0 <_strtod_l+0x6d0>
 800592e:	4632      	mov	r2, r6
 8005930:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005932:	4648      	mov	r0, r9
 8005934:	f002 f918 	bl	8007b68 <__lshift>
 8005938:	901c      	str	r0, [sp, #112]	; 0x70
 800593a:	2800      	cmp	r0, #0
 800593c:	f47f af7c 	bne.w	8005838 <_strtod_l+0x728>
 8005940:	e604      	b.n	800554c <_strtod_l+0x43c>
 8005942:	bf00      	nop
 8005944:	08009518 	.word	0x08009518
 8005948:	fffffc02 	.word	0xfffffc02
 800594c:	465d      	mov	r5, fp
 800594e:	f040 8086 	bne.w	8005a5e <_strtod_l+0x94e>
 8005952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005958:	b32a      	cbz	r2, 80059a6 <_strtod_l+0x896>
 800595a:	4aaf      	ldr	r2, [pc, #700]	; (8005c18 <_strtod_l+0xb08>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d153      	bne.n	8005a08 <_strtod_l+0x8f8>
 8005960:	9b04      	ldr	r3, [sp, #16]
 8005962:	4650      	mov	r0, sl
 8005964:	b1d3      	cbz	r3, 800599c <_strtod_l+0x88c>
 8005966:	4aad      	ldr	r2, [pc, #692]	; (8005c1c <_strtod_l+0xb0c>)
 8005968:	402a      	ands	r2, r5
 800596a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800596e:	f04f 31ff 	mov.w	r1, #4294967295
 8005972:	d816      	bhi.n	80059a2 <_strtod_l+0x892>
 8005974:	0d12      	lsrs	r2, r2, #20
 8005976:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	4298      	cmp	r0, r3
 8005980:	d142      	bne.n	8005a08 <_strtod_l+0x8f8>
 8005982:	4ba7      	ldr	r3, [pc, #668]	; (8005c20 <_strtod_l+0xb10>)
 8005984:	429d      	cmp	r5, r3
 8005986:	d102      	bne.n	800598e <_strtod_l+0x87e>
 8005988:	3001      	adds	r0, #1
 800598a:	f43f addf 	beq.w	800554c <_strtod_l+0x43c>
 800598e:	4ba3      	ldr	r3, [pc, #652]	; (8005c1c <_strtod_l+0xb0c>)
 8005990:	402b      	ands	r3, r5
 8005992:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005996:	f04f 0a00 	mov.w	sl, #0
 800599a:	e7a0      	b.n	80058de <_strtod_l+0x7ce>
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
 80059a0:	e7ed      	b.n	800597e <_strtod_l+0x86e>
 80059a2:	460b      	mov	r3, r1
 80059a4:	e7eb      	b.n	800597e <_strtod_l+0x86e>
 80059a6:	bb7b      	cbnz	r3, 8005a08 <_strtod_l+0x8f8>
 80059a8:	f1ba 0f00 	cmp.w	sl, #0
 80059ac:	d12c      	bne.n	8005a08 <_strtod_l+0x8f8>
 80059ae:	9904      	ldr	r1, [sp, #16]
 80059b0:	4a9a      	ldr	r2, [pc, #616]	; (8005c1c <_strtod_l+0xb0c>)
 80059b2:	465b      	mov	r3, fp
 80059b4:	b1f1      	cbz	r1, 80059f4 <_strtod_l+0x8e4>
 80059b6:	ea02 010b 	and.w	r1, r2, fp
 80059ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80059be:	dc19      	bgt.n	80059f4 <_strtod_l+0x8e4>
 80059c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059c4:	f77f ae5b 	ble.w	800567e <_strtod_l+0x56e>
 80059c8:	4a96      	ldr	r2, [pc, #600]	; (8005c24 <_strtod_l+0xb14>)
 80059ca:	2300      	movs	r3, #0
 80059cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80059d0:	4650      	mov	r0, sl
 80059d2:	4659      	mov	r1, fp
 80059d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80059d8:	f7fa fe0e 	bl	80005f8 <__aeabi_dmul>
 80059dc:	4682      	mov	sl, r0
 80059de:	468b      	mov	fp, r1
 80059e0:	2900      	cmp	r1, #0
 80059e2:	f47f adbe 	bne.w	8005562 <_strtod_l+0x452>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f47f adbb 	bne.w	8005562 <_strtod_l+0x452>
 80059ec:	2322      	movs	r3, #34	; 0x22
 80059ee:	f8c9 3000 	str.w	r3, [r9]
 80059f2:	e5b6      	b.n	8005562 <_strtod_l+0x452>
 80059f4:	4013      	ands	r3, r2
 80059f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80059fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80059fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a02:	f04f 3aff 	mov.w	sl, #4294967295
 8005a06:	e76a      	b.n	80058de <_strtod_l+0x7ce>
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	b193      	cbz	r3, 8005a32 <_strtod_l+0x922>
 8005a0c:	422b      	tst	r3, r5
 8005a0e:	f43f af66 	beq.w	80058de <_strtod_l+0x7ce>
 8005a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a14:	9a04      	ldr	r2, [sp, #16]
 8005a16:	4650      	mov	r0, sl
 8005a18:	4659      	mov	r1, fp
 8005a1a:	b173      	cbz	r3, 8005a3a <_strtod_l+0x92a>
 8005a1c:	f7ff fb5c 	bl	80050d8 <sulp>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a28:	f7fa fc30 	bl	800028c <__adddf3>
 8005a2c:	4682      	mov	sl, r0
 8005a2e:	468b      	mov	fp, r1
 8005a30:	e755      	b.n	80058de <_strtod_l+0x7ce>
 8005a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a34:	ea13 0f0a 	tst.w	r3, sl
 8005a38:	e7e9      	b.n	8005a0e <_strtod_l+0x8fe>
 8005a3a:	f7ff fb4d 	bl	80050d8 <sulp>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a46:	f7fa fc1f 	bl	8000288 <__aeabi_dsub>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4682      	mov	sl, r0
 8005a50:	468b      	mov	fp, r1
 8005a52:	f7fb f839 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f47f ae11 	bne.w	800567e <_strtod_l+0x56e>
 8005a5c:	e73f      	b.n	80058de <_strtod_l+0x7ce>
 8005a5e:	4641      	mov	r1, r8
 8005a60:	4620      	mov	r0, r4
 8005a62:	f002 fa12 	bl	8007e8a <__ratio>
 8005a66:	ec57 6b10 	vmov	r6, r7, d0
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a70:	ee10 0a10 	vmov	r0, s0
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fb f83b 	bl	8000af0 <__aeabi_dcmple>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d077      	beq.n	8005b6e <_strtod_l+0xa5e>
 8005a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d04a      	beq.n	8005b1a <_strtod_l+0xa0a>
 8005a84:	4b68      	ldr	r3, [pc, #416]	; (8005c28 <_strtod_l+0xb18>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a8c:	4f66      	ldr	r7, [pc, #408]	; (8005c28 <_strtod_l+0xb18>)
 8005a8e:	2600      	movs	r6, #0
 8005a90:	4b62      	ldr	r3, [pc, #392]	; (8005c1c <_strtod_l+0xb0c>)
 8005a92:	402b      	ands	r3, r5
 8005a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a98:	4b64      	ldr	r3, [pc, #400]	; (8005c2c <_strtod_l+0xb1c>)
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	f040 80ce 	bne.w	8005c3c <_strtod_l+0xb2c>
 8005aa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005aa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005aa8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005aac:	ec4b ab10 	vmov	d0, sl, fp
 8005ab0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005ab4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ab8:	f002 f922 	bl	8007d00 <__ulp>
 8005abc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ac0:	ec53 2b10 	vmov	r2, r3, d0
 8005ac4:	f7fa fd98 	bl	80005f8 <__aeabi_dmul>
 8005ac8:	4652      	mov	r2, sl
 8005aca:	465b      	mov	r3, fp
 8005acc:	f7fa fbde 	bl	800028c <__adddf3>
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4952      	ldr	r1, [pc, #328]	; (8005c1c <_strtod_l+0xb0c>)
 8005ad4:	4a56      	ldr	r2, [pc, #344]	; (8005c30 <_strtod_l+0xb20>)
 8005ad6:	4019      	ands	r1, r3
 8005ad8:	4291      	cmp	r1, r2
 8005ada:	4682      	mov	sl, r0
 8005adc:	d95b      	bls.n	8005b96 <_strtod_l+0xa86>
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <_strtod_l+0x9e0>
 8005ae8:	9b08      	ldr	r3, [sp, #32]
 8005aea:	3301      	adds	r3, #1
 8005aec:	f43f ad2e 	beq.w	800554c <_strtod_l+0x43c>
 8005af0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005c20 <_strtod_l+0xb10>
 8005af4:	f04f 3aff 	mov.w	sl, #4294967295
 8005af8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005afa:	4648      	mov	r0, r9
 8005afc:	f001 fe69 	bl	80077d2 <_Bfree>
 8005b00:	9905      	ldr	r1, [sp, #20]
 8005b02:	4648      	mov	r0, r9
 8005b04:	f001 fe65 	bl	80077d2 <_Bfree>
 8005b08:	4641      	mov	r1, r8
 8005b0a:	4648      	mov	r0, r9
 8005b0c:	f001 fe61 	bl	80077d2 <_Bfree>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4648      	mov	r0, r9
 8005b14:	f001 fe5d 	bl	80077d2 <_Bfree>
 8005b18:	e619      	b.n	800574e <_strtod_l+0x63e>
 8005b1a:	f1ba 0f00 	cmp.w	sl, #0
 8005b1e:	d11a      	bne.n	8005b56 <_strtod_l+0xa46>
 8005b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b24:	b9eb      	cbnz	r3, 8005b62 <_strtod_l+0xa52>
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <_strtod_l+0xb18>)
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa ffd5 	bl	8000adc <__aeabi_dcmplt>
 8005b32:	b9c8      	cbnz	r0, 8005b68 <_strtod_l+0xa58>
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b3e      	ldr	r3, [pc, #248]	; (8005c34 <_strtod_l+0xb24>)
 8005b3c:	f7fa fd5c 	bl	80005f8 <__aeabi_dmul>
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005b48:	9618      	str	r6, [sp, #96]	; 0x60
 8005b4a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005b50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b54:	e79c      	b.n	8005a90 <_strtod_l+0x980>
 8005b56:	f1ba 0f01 	cmp.w	sl, #1
 8005b5a:	d102      	bne.n	8005b62 <_strtod_l+0xa52>
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	f43f ad8e 	beq.w	800567e <_strtod_l+0x56e>
 8005b62:	2200      	movs	r2, #0
 8005b64:	4b34      	ldr	r3, [pc, #208]	; (8005c38 <_strtod_l+0xb28>)
 8005b66:	e78f      	b.n	8005a88 <_strtod_l+0x978>
 8005b68:	2600      	movs	r6, #0
 8005b6a:	4f32      	ldr	r7, [pc, #200]	; (8005c34 <_strtod_l+0xb24>)
 8005b6c:	e7ea      	b.n	8005b44 <_strtod_l+0xa34>
 8005b6e:	4b31      	ldr	r3, [pc, #196]	; (8005c34 <_strtod_l+0xb24>)
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	2200      	movs	r2, #0
 8005b76:	f7fa fd3f 	bl	80005f8 <__aeabi_dmul>
 8005b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	460f      	mov	r7, r1
 8005b80:	b933      	cbnz	r3, 8005b90 <_strtod_l+0xa80>
 8005b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b86:	9010      	str	r0, [sp, #64]	; 0x40
 8005b88:	9311      	str	r3, [sp, #68]	; 0x44
 8005b8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b8e:	e7df      	b.n	8005b50 <_strtod_l+0xa40>
 8005b90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005b94:	e7f9      	b.n	8005b8a <_strtod_l+0xa7a>
 8005b96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1ab      	bne.n	8005af8 <_strtod_l+0x9e8>
 8005ba0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ba4:	0d1b      	lsrs	r3, r3, #20
 8005ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba8:	051b      	lsls	r3, r3, #20
 8005baa:	429a      	cmp	r2, r3
 8005bac:	465d      	mov	r5, fp
 8005bae:	d1a3      	bne.n	8005af8 <_strtod_l+0x9e8>
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7fa ffd0 	bl	8000b58 <__aeabi_d2iz>
 8005bb8:	f7fa fcb4 	bl	8000524 <__aeabi_i2d>
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7fa fb60 	bl	8000288 <__aeabi_dsub>
 8005bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	b933      	cbnz	r3, 8005bde <_strtod_l+0xace>
 8005bd0:	f1ba 0f00 	cmp.w	sl, #0
 8005bd4:	d103      	bne.n	8005bde <_strtod_l+0xace>
 8005bd6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	d06d      	beq.n	8005cba <_strtod_l+0xbaa>
 8005bde:	a30a      	add	r3, pc, #40	; (adr r3, 8005c08 <_strtod_l+0xaf8>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa ff78 	bl	8000adc <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f47f acb8 	bne.w	8005562 <_strtod_l+0x452>
 8005bf2:	a307      	add	r3, pc, #28	; (adr r3, 8005c10 <_strtod_l+0xb00>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	f43f af79 	beq.w	8005af8 <_strtod_l+0x9e8>
 8005c06:	e4ac      	b.n	8005562 <_strtod_l+0x452>
 8005c08:	94a03595 	.word	0x94a03595
 8005c0c:	3fdfffff 	.word	0x3fdfffff
 8005c10:	35afe535 	.word	0x35afe535
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	000fffff 	.word	0x000fffff
 8005c1c:	7ff00000 	.word	0x7ff00000
 8005c20:	7fefffff 	.word	0x7fefffff
 8005c24:	39500000 	.word	0x39500000
 8005c28:	3ff00000 	.word	0x3ff00000
 8005c2c:	7fe00000 	.word	0x7fe00000
 8005c30:	7c9fffff 	.word	0x7c9fffff
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	bff00000 	.word	0xbff00000
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	b333      	cbz	r3, 8005c8e <_strtod_l+0xb7e>
 8005c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c46:	d822      	bhi.n	8005c8e <_strtod_l+0xb7e>
 8005c48:	a327      	add	r3, pc, #156	; (adr r3, 8005ce8 <_strtod_l+0xbd8>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa ff4d 	bl	8000af0 <__aeabi_dcmple>
 8005c56:	b1a0      	cbz	r0, 8005c82 <_strtod_l+0xb72>
 8005c58:	4639      	mov	r1, r7
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7fa ffa4 	bl	8000ba8 <__aeabi_d2uiz>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	bf08      	it	eq
 8005c64:	2001      	moveq	r0, #1
 8005c66:	f7fa fc4d 	bl	8000504 <__aeabi_ui2d>
 8005c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	460f      	mov	r7, r1
 8005c70:	bb03      	cbnz	r3, 8005cb4 <_strtod_l+0xba4>
 8005c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c76:	9012      	str	r0, [sp, #72]	; 0x48
 8005c78:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005c7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005c92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005c96:	f002 f833 	bl	8007d00 <__ulp>
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	ec53 2b10 	vmov	r2, r3, d0
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	f7fa fca9 	bl	80005f8 <__aeabi_dmul>
 8005ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005caa:	f7fa faef 	bl	800028c <__adddf3>
 8005cae:	4682      	mov	sl, r0
 8005cb0:	468b      	mov	fp, r1
 8005cb2:	e772      	b.n	8005b9a <_strtod_l+0xa8a>
 8005cb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005cb8:	e7df      	b.n	8005c7a <_strtod_l+0xb6a>
 8005cba:	a30d      	add	r3, pc, #52	; (adr r3, 8005cf0 <_strtod_l+0xbe0>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa ff0c 	bl	8000adc <__aeabi_dcmplt>
 8005cc4:	e79c      	b.n	8005c00 <_strtod_l+0xaf0>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8005cca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	f7ff ba61 	b.w	8005196 <_strtod_l+0x86>
 8005cd4:	2b65      	cmp	r3, #101	; 0x65
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f43f ab4e 	beq.w	800537a <_strtod_l+0x26a>
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	9104      	str	r1, [sp, #16]
 8005ce4:	f7ff bacb 	b.w	800527e <_strtod_l+0x16e>
 8005ce8:	ffc00000 	.word	0xffc00000
 8005cec:	41dfffff 	.word	0x41dfffff
 8005cf0:	94a03595 	.word	0x94a03595
 8005cf4:	3fcfffff 	.word	0x3fcfffff

08005cf8 <strtod>:
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <strtod+0x20>)
 8005cfa:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <strtod+0x24>)
 8005cfc:	b410      	push	{r4}
 8005cfe:	681c      	ldr	r4, [r3, #0]
 8005d00:	6a23      	ldr	r3, [r4, #32]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf08      	it	eq
 8005d06:	4613      	moveq	r3, r2
 8005d08:	460a      	mov	r2, r1
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d12:	f7ff b9fd 	b.w	8005110 <_strtod_l>
 8005d16:	bf00      	nop
 8005d18:	2000000c 	.word	0x2000000c
 8005d1c:	20000070 	.word	0x20000070

08005d20 <strtof>:
 8005d20:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8005d24:	4e24      	ldr	r6, [pc, #144]	; (8005db8 <strtof+0x98>)
 8005d26:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <strtof+0x9c>)
 8005d28:	6834      	ldr	r4, [r6, #0]
 8005d2a:	6a23      	ldr	r3, [r4, #32]
 8005d2c:	ed2d 8b02 	vpush	{d8}
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bf08      	it	eq
 8005d34:	4613      	moveq	r3, r2
 8005d36:	460a      	mov	r2, r1
 8005d38:	4601      	mov	r1, r0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff f9e8 	bl	8005110 <_strtod_l>
 8005d40:	ec55 4b10 	vmov	r4, r5, d0
 8005d44:	ee10 2a10 	vmov	r2, s0
 8005d48:	462b      	mov	r3, r5
 8005d4a:	ee10 0a10 	vmov	r0, s0
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa feec 	bl	8000b2c <__aeabi_dcmpun>
 8005d54:	b130      	cbz	r0, 8005d64 <strtof+0x44>
 8005d56:	ecbd 8b02 	vpop	{d8}
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8005d60:	f003 b828 	b.w	8008db4 <nanf>
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	f7fa ff3e 	bl	8000be8 <__aeabi_d2f>
 8005d6c:	ee08 0a10 	vmov	s16, r0
 8005d70:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005dc0 <strtof+0xa0>
 8005d74:	eeb0 7ac8 	vabs.f32	s14, s16
 8005d78:	eeb4 7a67 	vcmp.f32	s14, s15
 8005d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d80:	dd14      	ble.n	8005dac <strtof+0x8c>
 8005d82:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <strtof+0xa4>)
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4649      	mov	r1, r9
 8005d90:	f7fa fecc 	bl	8000b2c <__aeabi_dcmpun>
 8005d94:	b938      	cbnz	r0, 8005da6 <strtof+0x86>
 8005d96:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <strtof+0xa4>)
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4649      	mov	r1, r9
 8005da0:	f7fa fea6 	bl	8000af0 <__aeabi_dcmple>
 8005da4:	b110      	cbz	r0, 8005dac <strtof+0x8c>
 8005da6:	6833      	ldr	r3, [r6, #0]
 8005da8:	2222      	movs	r2, #34	; 0x22
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	eeb0 0a48 	vmov.f32	s0, s16
 8005db0:	ecbd 8b02 	vpop	{d8}
 8005db4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005db8:	2000000c 	.word	0x2000000c
 8005dbc:	20000070 	.word	0x20000070
 8005dc0:	7f7fffff 	.word	0x7f7fffff
 8005dc4:	7fefffff 	.word	0x7fefffff

08005dc8 <strtok>:
 8005dc8:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <strtok+0x50>)
 8005dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	681d      	ldr	r5, [r3, #0]
 8005dd0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	b9b4      	cbnz	r4, 8005e06 <strtok+0x3e>
 8005dd8:	2050      	movs	r0, #80	; 0x50
 8005dda:	f001 fca1 	bl	8007720 <malloc>
 8005dde:	65a8      	str	r0, [r5, #88]	; 0x58
 8005de0:	e9c0 4400 	strd	r4, r4, [r0]
 8005de4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005de8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005dec:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005df0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005df4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005df8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005dfc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005e00:	6184      	str	r4, [r0, #24]
 8005e02:	7704      	strb	r4, [r0, #28]
 8005e04:	6244      	str	r4, [r0, #36]	; 0x24
 8005e06:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	f000 b803 	b.w	8005e1c <__strtok_r>
 8005e16:	bf00      	nop
 8005e18:	2000000c 	.word	0x2000000c

08005e1c <__strtok_r>:
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	b918      	cbnz	r0, 8005e28 <__strtok_r+0xc>
 8005e20:	6810      	ldr	r0, [r2, #0]
 8005e22:	b908      	cbnz	r0, 8005e28 <__strtok_r+0xc>
 8005e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e26:	4620      	mov	r0, r4
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460f      	mov	r7, r1
 8005e2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005e30:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e34:	b91e      	cbnz	r6, 8005e3e <__strtok_r+0x22>
 8005e36:	b96d      	cbnz	r5, 8005e54 <__strtok_r+0x38>
 8005e38:	6015      	str	r5, [r2, #0]
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	e7f2      	b.n	8005e24 <__strtok_r+0x8>
 8005e3e:	42b5      	cmp	r5, r6
 8005e40:	d1f6      	bne.n	8005e30 <__strtok_r+0x14>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1ef      	bne.n	8005e26 <__strtok_r+0xa>
 8005e46:	6014      	str	r4, [r2, #0]
 8005e48:	7003      	strb	r3, [r0, #0]
 8005e4a:	e7eb      	b.n	8005e24 <__strtok_r+0x8>
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	e00d      	b.n	8005e6c <__strtok_r+0x50>
 8005e50:	b926      	cbnz	r6, 8005e5c <__strtok_r+0x40>
 8005e52:	461c      	mov	r4, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	460f      	mov	r7, r1
 8005e58:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005e5c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e60:	42b5      	cmp	r5, r6
 8005e62:	d1f5      	bne.n	8005e50 <__strtok_r+0x34>
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d0f1      	beq.n	8005e4c <__strtok_r+0x30>
 8005e68:	2100      	movs	r1, #0
 8005e6a:	7021      	strb	r1, [r4, #0]
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e7d9      	b.n	8005e24 <__strtok_r+0x8>

08005e70 <__swbuf_r>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	460e      	mov	r6, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	4605      	mov	r5, r0
 8005e78:	b118      	cbz	r0, 8005e82 <__swbuf_r+0x12>
 8005e7a:	6983      	ldr	r3, [r0, #24]
 8005e7c:	b90b      	cbnz	r3, 8005e82 <__swbuf_r+0x12>
 8005e7e:	f000 fffd 	bl	8006e7c <__sinit>
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <__swbuf_r+0x98>)
 8005e84:	429c      	cmp	r4, r3
 8005e86:	d12a      	bne.n	8005ede <__swbuf_r+0x6e>
 8005e88:	686c      	ldr	r4, [r5, #4]
 8005e8a:	69a3      	ldr	r3, [r4, #24]
 8005e8c:	60a3      	str	r3, [r4, #8]
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	071a      	lsls	r2, r3, #28
 8005e92:	d52e      	bpl.n	8005ef2 <__swbuf_r+0x82>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	b363      	cbz	r3, 8005ef2 <__swbuf_r+0x82>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	6820      	ldr	r0, [r4, #0]
 8005e9c:	1ac0      	subs	r0, r0, r3
 8005e9e:	6963      	ldr	r3, [r4, #20]
 8005ea0:	b2f6      	uxtb	r6, r6
 8005ea2:	4283      	cmp	r3, r0
 8005ea4:	4637      	mov	r7, r6
 8005ea6:	dc04      	bgt.n	8005eb2 <__swbuf_r+0x42>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 ff6a 	bl	8006d84 <_fflush_r>
 8005eb0:	bb28      	cbnz	r0, 8005efe <__swbuf_r+0x8e>
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60a3      	str	r3, [r4, #8]
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	701e      	strb	r6, [r3, #0]
 8005ec0:	6963      	ldr	r3, [r4, #20]
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	4283      	cmp	r3, r0
 8005ec6:	d004      	beq.n	8005ed2 <__swbuf_r+0x62>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	07db      	lsls	r3, r3, #31
 8005ecc:	d519      	bpl.n	8005f02 <__swbuf_r+0x92>
 8005ece:	2e0a      	cmp	r6, #10
 8005ed0:	d117      	bne.n	8005f02 <__swbuf_r+0x92>
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 ff55 	bl	8006d84 <_fflush_r>
 8005eda:	b190      	cbz	r0, 8005f02 <__swbuf_r+0x92>
 8005edc:	e00f      	b.n	8005efe <__swbuf_r+0x8e>
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <__swbuf_r+0x9c>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	d101      	bne.n	8005ee8 <__swbuf_r+0x78>
 8005ee4:	68ac      	ldr	r4, [r5, #8]
 8005ee6:	e7d0      	b.n	8005e8a <__swbuf_r+0x1a>
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <__swbuf_r+0xa0>)
 8005eea:	429c      	cmp	r4, r3
 8005eec:	bf08      	it	eq
 8005eee:	68ec      	ldreq	r4, [r5, #12]
 8005ef0:	e7cb      	b.n	8005e8a <__swbuf_r+0x1a>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f000 f80d 	bl	8005f14 <__swsetup_r>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0cc      	beq.n	8005e98 <__swbuf_r+0x28>
 8005efe:	f04f 37ff 	mov.w	r7, #4294967295
 8005f02:	4638      	mov	r0, r7
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	08009570 	.word	0x08009570
 8005f0c:	08009590 	.word	0x08009590
 8005f10:	08009550 	.word	0x08009550

08005f14 <__swsetup_r>:
 8005f14:	4b32      	ldr	r3, [pc, #200]	; (8005fe0 <__swsetup_r+0xcc>)
 8005f16:	b570      	push	{r4, r5, r6, lr}
 8005f18:	681d      	ldr	r5, [r3, #0]
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	b125      	cbz	r5, 8005f2a <__swsetup_r+0x16>
 8005f20:	69ab      	ldr	r3, [r5, #24]
 8005f22:	b913      	cbnz	r3, 8005f2a <__swsetup_r+0x16>
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 ffa9 	bl	8006e7c <__sinit>
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <__swsetup_r+0xd0>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	d10f      	bne.n	8005f50 <__swsetup_r+0x3c>
 8005f30:	686c      	ldr	r4, [r5, #4]
 8005f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	0715      	lsls	r5, r2, #28
 8005f3a:	d42c      	bmi.n	8005f96 <__swsetup_r+0x82>
 8005f3c:	06d0      	lsls	r0, r2, #27
 8005f3e:	d411      	bmi.n	8005f64 <__swsetup_r+0x50>
 8005f40:	2209      	movs	r2, #9
 8005f42:	6032      	str	r2, [r6, #0]
 8005f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	e03e      	b.n	8005fce <__swsetup_r+0xba>
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <__swsetup_r+0xd4>)
 8005f52:	429c      	cmp	r4, r3
 8005f54:	d101      	bne.n	8005f5a <__swsetup_r+0x46>
 8005f56:	68ac      	ldr	r4, [r5, #8]
 8005f58:	e7eb      	b.n	8005f32 <__swsetup_r+0x1e>
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <__swsetup_r+0xd8>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	bf08      	it	eq
 8005f60:	68ec      	ldreq	r4, [r5, #12]
 8005f62:	e7e6      	b.n	8005f32 <__swsetup_r+0x1e>
 8005f64:	0751      	lsls	r1, r2, #29
 8005f66:	d512      	bpl.n	8005f8e <__swsetup_r+0x7a>
 8005f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f6a:	b141      	cbz	r1, 8005f7e <__swsetup_r+0x6a>
 8005f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f70:	4299      	cmp	r1, r3
 8005f72:	d002      	beq.n	8005f7a <__swsetup_r+0x66>
 8005f74:	4630      	mov	r0, r6
 8005f76:	f002 f805 	bl	8007f84 <_free_r>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	2300      	movs	r3, #0
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f043 0308 	orr.w	r3, r3, #8
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	b94b      	cbnz	r3, 8005fae <__swsetup_r+0x9a>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa4:	d003      	beq.n	8005fae <__swsetup_r+0x9a>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f001 fb79 	bl	80076a0 <__smakebuf_r>
 8005fae:	89a2      	ldrh	r2, [r4, #12]
 8005fb0:	f012 0301 	ands.w	r3, r2, #1
 8005fb4:	d00c      	beq.n	8005fd0 <__swsetup_r+0xbc>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60a3      	str	r3, [r4, #8]
 8005fba:	6963      	ldr	r3, [r4, #20]
 8005fbc:	425b      	negs	r3, r3
 8005fbe:	61a3      	str	r3, [r4, #24]
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	b953      	cbnz	r3, 8005fda <__swsetup_r+0xc6>
 8005fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005fcc:	d1ba      	bne.n	8005f44 <__swsetup_r+0x30>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	0792      	lsls	r2, r2, #30
 8005fd2:	bf58      	it	pl
 8005fd4:	6963      	ldrpl	r3, [r4, #20]
 8005fd6:	60a3      	str	r3, [r4, #8]
 8005fd8:	e7f2      	b.n	8005fc0 <__swsetup_r+0xac>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e7f7      	b.n	8005fce <__swsetup_r+0xba>
 8005fde:	bf00      	nop
 8005fe0:	2000000c 	.word	0x2000000c
 8005fe4:	08009570 	.word	0x08009570
 8005fe8:	08009590 	.word	0x08009590
 8005fec:	08009550 	.word	0x08009550

08005ff0 <quorem>:
 8005ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	6903      	ldr	r3, [r0, #16]
 8005ff6:	690c      	ldr	r4, [r1, #16]
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	4680      	mov	r8, r0
 8005ffc:	f2c0 8082 	blt.w	8006104 <quorem+0x114>
 8006000:	3c01      	subs	r4, #1
 8006002:	f101 0714 	add.w	r7, r1, #20
 8006006:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800600a:	f100 0614 	add.w	r6, r0, #20
 800600e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006012:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006016:	eb06 030c 	add.w	r3, r6, ip
 800601a:	3501      	adds	r5, #1
 800601c:	eb07 090c 	add.w	r9, r7, ip
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	fbb0 f5f5 	udiv	r5, r0, r5
 8006026:	b395      	cbz	r5, 800608e <quorem+0x9e>
 8006028:	f04f 0a00 	mov.w	sl, #0
 800602c:	4638      	mov	r0, r7
 800602e:	46b6      	mov	lr, r6
 8006030:	46d3      	mov	fp, sl
 8006032:	f850 2b04 	ldr.w	r2, [r0], #4
 8006036:	b293      	uxth	r3, r2
 8006038:	fb05 a303 	mla	r3, r5, r3, sl
 800603c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006040:	b29b      	uxth	r3, r3
 8006042:	ebab 0303 	sub.w	r3, fp, r3
 8006046:	0c12      	lsrs	r2, r2, #16
 8006048:	f8de b000 	ldr.w	fp, [lr]
 800604c:	fb05 a202 	mla	r2, r5, r2, sl
 8006050:	fa13 f38b 	uxtah	r3, r3, fp
 8006054:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006058:	fa1f fb82 	uxth.w	fp, r2
 800605c:	f8de 2000 	ldr.w	r2, [lr]
 8006060:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800606e:	4581      	cmp	r9, r0
 8006070:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006074:	f84e 3b04 	str.w	r3, [lr], #4
 8006078:	d2db      	bcs.n	8006032 <quorem+0x42>
 800607a:	f856 300c 	ldr.w	r3, [r6, ip]
 800607e:	b933      	cbnz	r3, 800608e <quorem+0x9e>
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	3b04      	subs	r3, #4
 8006084:	429e      	cmp	r6, r3
 8006086:	461a      	mov	r2, r3
 8006088:	d330      	bcc.n	80060ec <quorem+0xfc>
 800608a:	f8c8 4010 	str.w	r4, [r8, #16]
 800608e:	4640      	mov	r0, r8
 8006090:	f001 fdbe 	bl	8007c10 <__mcmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	db25      	blt.n	80060e4 <quorem+0xf4>
 8006098:	3501      	adds	r5, #1
 800609a:	4630      	mov	r0, r6
 800609c:	f04f 0c00 	mov.w	ip, #0
 80060a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80060a4:	f8d0 e000 	ldr.w	lr, [r0]
 80060a8:	b293      	uxth	r3, r2
 80060aa:	ebac 0303 	sub.w	r3, ip, r3
 80060ae:	0c12      	lsrs	r2, r2, #16
 80060b0:	fa13 f38e 	uxtah	r3, r3, lr
 80060b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060bc:	b29b      	uxth	r3, r3
 80060be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c2:	45b9      	cmp	r9, r7
 80060c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060c8:	f840 3b04 	str.w	r3, [r0], #4
 80060cc:	d2e8      	bcs.n	80060a0 <quorem+0xb0>
 80060ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80060d6:	b92a      	cbnz	r2, 80060e4 <quorem+0xf4>
 80060d8:	3b04      	subs	r3, #4
 80060da:	429e      	cmp	r6, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	d30b      	bcc.n	80060f8 <quorem+0x108>
 80060e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80060e4:	4628      	mov	r0, r5
 80060e6:	b003      	add	sp, #12
 80060e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	3b04      	subs	r3, #4
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d1ca      	bne.n	800608a <quorem+0x9a>
 80060f4:	3c01      	subs	r4, #1
 80060f6:	e7c5      	b.n	8006084 <quorem+0x94>
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	3b04      	subs	r3, #4
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	d1ef      	bne.n	80060e0 <quorem+0xf0>
 8006100:	3c01      	subs	r4, #1
 8006102:	e7ea      	b.n	80060da <quorem+0xea>
 8006104:	2000      	movs	r0, #0
 8006106:	e7ee      	b.n	80060e6 <quorem+0xf6>

08006108 <_dtoa_r>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	ec57 6b10 	vmov	r6, r7, d0
 8006110:	b097      	sub	sp, #92	; 0x5c
 8006112:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006114:	9106      	str	r1, [sp, #24]
 8006116:	4604      	mov	r4, r0
 8006118:	920b      	str	r2, [sp, #44]	; 0x2c
 800611a:	9312      	str	r3, [sp, #72]	; 0x48
 800611c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006120:	e9cd 6700 	strd	r6, r7, [sp]
 8006124:	b93d      	cbnz	r5, 8006136 <_dtoa_r+0x2e>
 8006126:	2010      	movs	r0, #16
 8006128:	f001 fafa 	bl	8007720 <malloc>
 800612c:	6260      	str	r0, [r4, #36]	; 0x24
 800612e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006132:	6005      	str	r5, [r0, #0]
 8006134:	60c5      	str	r5, [r0, #12]
 8006136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	b151      	cbz	r1, 8006152 <_dtoa_r+0x4a>
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	604a      	str	r2, [r1, #4]
 8006140:	2301      	movs	r3, #1
 8006142:	4093      	lsls	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	4620      	mov	r0, r4
 8006148:	f001 fb43 	bl	80077d2 <_Bfree>
 800614c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	1e3b      	subs	r3, r7, #0
 8006154:	bfbb      	ittet	lt
 8006156:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800615a:	9301      	strlt	r3, [sp, #4]
 800615c:	2300      	movge	r3, #0
 800615e:	2201      	movlt	r2, #1
 8006160:	bfac      	ite	ge
 8006162:	f8c8 3000 	strge.w	r3, [r8]
 8006166:	f8c8 2000 	strlt.w	r2, [r8]
 800616a:	4baf      	ldr	r3, [pc, #700]	; (8006428 <_dtoa_r+0x320>)
 800616c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006170:	ea33 0308 	bics.w	r3, r3, r8
 8006174:	d114      	bne.n	80061a0 <_dtoa_r+0x98>
 8006176:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006178:	f242 730f 	movw	r3, #9999	; 0x270f
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	b923      	cbnz	r3, 800618c <_dtoa_r+0x84>
 8006182:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006186:	2800      	cmp	r0, #0
 8006188:	f000 8542 	beq.w	8006c10 <_dtoa_r+0xb08>
 800618c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800618e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800643c <_dtoa_r+0x334>
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8544 	beq.w	8006c20 <_dtoa_r+0xb18>
 8006198:	f10b 0303 	add.w	r3, fp, #3
 800619c:	f000 bd3e 	b.w	8006c1c <_dtoa_r+0xb14>
 80061a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2300      	movs	r3, #0
 80061a8:	4630      	mov	r0, r6
 80061aa:	4639      	mov	r1, r7
 80061ac:	f7fa fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80061b0:	4681      	mov	r9, r0
 80061b2:	b168      	cbz	r0, 80061d0 <_dtoa_r+0xc8>
 80061b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061b6:	2301      	movs	r3, #1
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8524 	beq.w	8006c0a <_dtoa_r+0xb02>
 80061c2:	4b9a      	ldr	r3, [pc, #616]	; (800642c <_dtoa_r+0x324>)
 80061c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	f000 bd28 	b.w	8006c20 <_dtoa_r+0xb18>
 80061d0:	aa14      	add	r2, sp, #80	; 0x50
 80061d2:	a915      	add	r1, sp, #84	; 0x54
 80061d4:	ec47 6b10 	vmov	d0, r6, r7
 80061d8:	4620      	mov	r0, r4
 80061da:	f001 fe07 	bl	8007dec <__d2b>
 80061de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80061e2:	9004      	str	r0, [sp, #16]
 80061e4:	2d00      	cmp	r5, #0
 80061e6:	d07c      	beq.n	80062e2 <_dtoa_r+0x1da>
 80061e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80061f0:	46b2      	mov	sl, r6
 80061f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80061f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80061fe:	2200      	movs	r2, #0
 8006200:	4b8b      	ldr	r3, [pc, #556]	; (8006430 <_dtoa_r+0x328>)
 8006202:	4650      	mov	r0, sl
 8006204:	4659      	mov	r1, fp
 8006206:	f7fa f83f 	bl	8000288 <__aeabi_dsub>
 800620a:	a381      	add	r3, pc, #516	; (adr r3, 8006410 <_dtoa_r+0x308>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f9f2 	bl	80005f8 <__aeabi_dmul>
 8006214:	a380      	add	r3, pc, #512	; (adr r3, 8006418 <_dtoa_r+0x310>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f7fa f837 	bl	800028c <__adddf3>
 800621e:	4606      	mov	r6, r0
 8006220:	4628      	mov	r0, r5
 8006222:	460f      	mov	r7, r1
 8006224:	f7fa f97e 	bl	8000524 <__aeabi_i2d>
 8006228:	a37d      	add	r3, pc, #500	; (adr r3, 8006420 <_dtoa_r+0x318>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa f9e3 	bl	80005f8 <__aeabi_dmul>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa f827 	bl	800028c <__adddf3>
 800623e:	4606      	mov	r6, r0
 8006240:	460f      	mov	r7, r1
 8006242:	f7fa fc89 	bl	8000b58 <__aeabi_d2iz>
 8006246:	2200      	movs	r2, #0
 8006248:	4682      	mov	sl, r0
 800624a:	2300      	movs	r3, #0
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	f7fa fc44 	bl	8000adc <__aeabi_dcmplt>
 8006254:	b148      	cbz	r0, 800626a <_dtoa_r+0x162>
 8006256:	4650      	mov	r0, sl
 8006258:	f7fa f964 	bl	8000524 <__aeabi_i2d>
 800625c:	4632      	mov	r2, r6
 800625e:	463b      	mov	r3, r7
 8006260:	f7fa fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006264:	b908      	cbnz	r0, 800626a <_dtoa_r+0x162>
 8006266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800626a:	f1ba 0f16 	cmp.w	sl, #22
 800626e:	d859      	bhi.n	8006324 <_dtoa_r+0x21c>
 8006270:	4970      	ldr	r1, [pc, #448]	; (8006434 <_dtoa_r+0x32c>)
 8006272:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006276:	e9dd 2300 	ldrd	r2, r3, [sp]
 800627a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800627e:	f7fa fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8006282:	2800      	cmp	r0, #0
 8006284:	d050      	beq.n	8006328 <_dtoa_r+0x220>
 8006286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800628a:	2300      	movs	r3, #0
 800628c:	930f      	str	r3, [sp, #60]	; 0x3c
 800628e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006290:	1b5d      	subs	r5, r3, r5
 8006292:	f1b5 0801 	subs.w	r8, r5, #1
 8006296:	bf49      	itett	mi
 8006298:	f1c5 0301 	rsbmi	r3, r5, #1
 800629c:	2300      	movpl	r3, #0
 800629e:	9305      	strmi	r3, [sp, #20]
 80062a0:	f04f 0800 	movmi.w	r8, #0
 80062a4:	bf58      	it	pl
 80062a6:	9305      	strpl	r3, [sp, #20]
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	db3e      	blt.n	800632c <_dtoa_r+0x224>
 80062ae:	2300      	movs	r3, #0
 80062b0:	44d0      	add	r8, sl
 80062b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062b6:	9307      	str	r3, [sp, #28]
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	2b09      	cmp	r3, #9
 80062bc:	f200 8090 	bhi.w	80063e0 <_dtoa_r+0x2d8>
 80062c0:	2b05      	cmp	r3, #5
 80062c2:	bfc4      	itt	gt
 80062c4:	3b04      	subgt	r3, #4
 80062c6:	9306      	strgt	r3, [sp, #24]
 80062c8:	9b06      	ldr	r3, [sp, #24]
 80062ca:	f1a3 0302 	sub.w	r3, r3, #2
 80062ce:	bfcc      	ite	gt
 80062d0:	2500      	movgt	r5, #0
 80062d2:	2501      	movle	r5, #1
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	f200 808f 	bhi.w	80063f8 <_dtoa_r+0x2f0>
 80062da:	e8df f003 	tbb	[pc, r3]
 80062de:	7f7d      	.short	0x7f7d
 80062e0:	7131      	.short	0x7131
 80062e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80062e6:	441d      	add	r5, r3
 80062e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062ec:	2820      	cmp	r0, #32
 80062ee:	dd13      	ble.n	8006318 <_dtoa_r+0x210>
 80062f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	fa08 f800 	lsl.w	r8, r8, r0
 80062fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062fe:	fa23 f000 	lsr.w	r0, r3, r0
 8006302:	ea48 0000 	orr.w	r0, r8, r0
 8006306:	f7fa f8fd 	bl	8000504 <__aeabi_ui2d>
 800630a:	2301      	movs	r3, #1
 800630c:	4682      	mov	sl, r0
 800630e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006312:	3d01      	subs	r5, #1
 8006314:	9313      	str	r3, [sp, #76]	; 0x4c
 8006316:	e772      	b.n	80061fe <_dtoa_r+0xf6>
 8006318:	9b00      	ldr	r3, [sp, #0]
 800631a:	f1c0 0020 	rsb	r0, r0, #32
 800631e:	fa03 f000 	lsl.w	r0, r3, r0
 8006322:	e7f0      	b.n	8006306 <_dtoa_r+0x1fe>
 8006324:	2301      	movs	r3, #1
 8006326:	e7b1      	b.n	800628c <_dtoa_r+0x184>
 8006328:	900f      	str	r0, [sp, #60]	; 0x3c
 800632a:	e7b0      	b.n	800628e <_dtoa_r+0x186>
 800632c:	9b05      	ldr	r3, [sp, #20]
 800632e:	eba3 030a 	sub.w	r3, r3, sl
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	f1ca 0300 	rsb	r3, sl, #0
 8006338:	9307      	str	r3, [sp, #28]
 800633a:	2300      	movs	r3, #0
 800633c:	930e      	str	r3, [sp, #56]	; 0x38
 800633e:	e7bb      	b.n	80062b8 <_dtoa_r+0x1b0>
 8006340:	2301      	movs	r3, #1
 8006342:	930a      	str	r3, [sp, #40]	; 0x28
 8006344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	dd59      	ble.n	80063fe <_dtoa_r+0x2f6>
 800634a:	9302      	str	r3, [sp, #8]
 800634c:	4699      	mov	r9, r3
 800634e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006350:	2200      	movs	r2, #0
 8006352:	6072      	str	r2, [r6, #4]
 8006354:	2204      	movs	r2, #4
 8006356:	f102 0014 	add.w	r0, r2, #20
 800635a:	4298      	cmp	r0, r3
 800635c:	6871      	ldr	r1, [r6, #4]
 800635e:	d953      	bls.n	8006408 <_dtoa_r+0x300>
 8006360:	4620      	mov	r0, r4
 8006362:	f001 fa02 	bl	800776a <_Balloc>
 8006366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006368:	6030      	str	r0, [r6, #0]
 800636a:	f1b9 0f0e 	cmp.w	r9, #14
 800636e:	f8d3 b000 	ldr.w	fp, [r3]
 8006372:	f200 80e6 	bhi.w	8006542 <_dtoa_r+0x43a>
 8006376:	2d00      	cmp	r5, #0
 8006378:	f000 80e3 	beq.w	8006542 <_dtoa_r+0x43a>
 800637c:	ed9d 7b00 	vldr	d7, [sp]
 8006380:	f1ba 0f00 	cmp.w	sl, #0
 8006384:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006388:	dd74      	ble.n	8006474 <_dtoa_r+0x36c>
 800638a:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <_dtoa_r+0x32c>)
 800638c:	f00a 030f 	and.w	r3, sl, #15
 8006390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006394:	ed93 7b00 	vldr	d7, [r3]
 8006398:	ea4f 162a 	mov.w	r6, sl, asr #4
 800639c:	06f0      	lsls	r0, r6, #27
 800639e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80063a2:	d565      	bpl.n	8006470 <_dtoa_r+0x368>
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <_dtoa_r+0x330>)
 80063a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063ae:	f7fa fa4d 	bl	800084c <__aeabi_ddiv>
 80063b2:	e9cd 0100 	strd	r0, r1, [sp]
 80063b6:	f006 060f 	and.w	r6, r6, #15
 80063ba:	2503      	movs	r5, #3
 80063bc:	4f1e      	ldr	r7, [pc, #120]	; (8006438 <_dtoa_r+0x330>)
 80063be:	e04c      	b.n	800645a <_dtoa_r+0x352>
 80063c0:	2301      	movs	r3, #1
 80063c2:	930a      	str	r3, [sp, #40]	; 0x28
 80063c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c6:	4453      	add	r3, sl
 80063c8:	f103 0901 	add.w	r9, r3, #1
 80063cc:	9302      	str	r3, [sp, #8]
 80063ce:	464b      	mov	r3, r9
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	bfb8      	it	lt
 80063d4:	2301      	movlt	r3, #1
 80063d6:	e7ba      	b.n	800634e <_dtoa_r+0x246>
 80063d8:	2300      	movs	r3, #0
 80063da:	e7b2      	b.n	8006342 <_dtoa_r+0x23a>
 80063dc:	2300      	movs	r3, #0
 80063de:	e7f0      	b.n	80063c2 <_dtoa_r+0x2ba>
 80063e0:	2501      	movs	r5, #1
 80063e2:	2300      	movs	r3, #0
 80063e4:	9306      	str	r3, [sp, #24]
 80063e6:	950a      	str	r5, [sp, #40]	; 0x28
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ec:	9302      	str	r3, [sp, #8]
 80063ee:	4699      	mov	r9, r3
 80063f0:	2200      	movs	r2, #0
 80063f2:	2312      	movs	r3, #18
 80063f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80063f6:	e7aa      	b.n	800634e <_dtoa_r+0x246>
 80063f8:	2301      	movs	r3, #1
 80063fa:	930a      	str	r3, [sp, #40]	; 0x28
 80063fc:	e7f4      	b.n	80063e8 <_dtoa_r+0x2e0>
 80063fe:	2301      	movs	r3, #1
 8006400:	9302      	str	r3, [sp, #8]
 8006402:	4699      	mov	r9, r3
 8006404:	461a      	mov	r2, r3
 8006406:	e7f5      	b.n	80063f4 <_dtoa_r+0x2ec>
 8006408:	3101      	adds	r1, #1
 800640a:	6071      	str	r1, [r6, #4]
 800640c:	0052      	lsls	r2, r2, #1
 800640e:	e7a2      	b.n	8006356 <_dtoa_r+0x24e>
 8006410:	636f4361 	.word	0x636f4361
 8006414:	3fd287a7 	.word	0x3fd287a7
 8006418:	8b60c8b3 	.word	0x8b60c8b3
 800641c:	3fc68a28 	.word	0x3fc68a28
 8006420:	509f79fb 	.word	0x509f79fb
 8006424:	3fd34413 	.word	0x3fd34413
 8006428:	7ff00000 	.word	0x7ff00000
 800642c:	080096e4 	.word	0x080096e4
 8006430:	3ff80000 	.word	0x3ff80000
 8006434:	080095e8 	.word	0x080095e8
 8006438:	080095c0 	.word	0x080095c0
 800643c:	08009549 	.word	0x08009549
 8006440:	07f1      	lsls	r1, r6, #31
 8006442:	d508      	bpl.n	8006456 <_dtoa_r+0x34e>
 8006444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644c:	f7fa f8d4 	bl	80005f8 <__aeabi_dmul>
 8006450:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006454:	3501      	adds	r5, #1
 8006456:	1076      	asrs	r6, r6, #1
 8006458:	3708      	adds	r7, #8
 800645a:	2e00      	cmp	r6, #0
 800645c:	d1f0      	bne.n	8006440 <_dtoa_r+0x338>
 800645e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006466:	f7fa f9f1 	bl	800084c <__aeabi_ddiv>
 800646a:	e9cd 0100 	strd	r0, r1, [sp]
 800646e:	e01a      	b.n	80064a6 <_dtoa_r+0x39e>
 8006470:	2502      	movs	r5, #2
 8006472:	e7a3      	b.n	80063bc <_dtoa_r+0x2b4>
 8006474:	f000 80a0 	beq.w	80065b8 <_dtoa_r+0x4b0>
 8006478:	f1ca 0600 	rsb	r6, sl, #0
 800647c:	4b9f      	ldr	r3, [pc, #636]	; (80066fc <_dtoa_r+0x5f4>)
 800647e:	4fa0      	ldr	r7, [pc, #640]	; (8006700 <_dtoa_r+0x5f8>)
 8006480:	f006 020f 	and.w	r2, r6, #15
 8006484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006490:	f7fa f8b2 	bl	80005f8 <__aeabi_dmul>
 8006494:	e9cd 0100 	strd	r0, r1, [sp]
 8006498:	1136      	asrs	r6, r6, #4
 800649a:	2300      	movs	r3, #0
 800649c:	2502      	movs	r5, #2
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d17f      	bne.n	80065a2 <_dtoa_r+0x49a>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e1      	bne.n	800646a <_dtoa_r+0x362>
 80064a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8087 	beq.w	80065bc <_dtoa_r+0x4b4>
 80064ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064b2:	2200      	movs	r2, #0
 80064b4:	4b93      	ldr	r3, [pc, #588]	; (8006704 <_dtoa_r+0x5fc>)
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa fb0f 	bl	8000adc <__aeabi_dcmplt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d07c      	beq.n	80065bc <_dtoa_r+0x4b4>
 80064c2:	f1b9 0f00 	cmp.w	r9, #0
 80064c6:	d079      	beq.n	80065bc <_dtoa_r+0x4b4>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dd35      	ble.n	800653a <_dtoa_r+0x432>
 80064ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064d2:	9308      	str	r3, [sp, #32]
 80064d4:	4639      	mov	r1, r7
 80064d6:	2200      	movs	r2, #0
 80064d8:	4b8b      	ldr	r3, [pc, #556]	; (8006708 <_dtoa_r+0x600>)
 80064da:	4630      	mov	r0, r6
 80064dc:	f7fa f88c 	bl	80005f8 <__aeabi_dmul>
 80064e0:	e9cd 0100 	strd	r0, r1, [sp]
 80064e4:	9f02      	ldr	r7, [sp, #8]
 80064e6:	3501      	adds	r5, #1
 80064e8:	4628      	mov	r0, r5
 80064ea:	f7fa f81b 	bl	8000524 <__aeabi_i2d>
 80064ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064f2:	f7fa f881 	bl	80005f8 <__aeabi_dmul>
 80064f6:	2200      	movs	r2, #0
 80064f8:	4b84      	ldr	r3, [pc, #528]	; (800670c <_dtoa_r+0x604>)
 80064fa:	f7f9 fec7 	bl	800028c <__adddf3>
 80064fe:	4605      	mov	r5, r0
 8006500:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006504:	2f00      	cmp	r7, #0
 8006506:	d15d      	bne.n	80065c4 <_dtoa_r+0x4bc>
 8006508:	2200      	movs	r2, #0
 800650a:	4b81      	ldr	r3, [pc, #516]	; (8006710 <_dtoa_r+0x608>)
 800650c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006510:	f7f9 feba 	bl	8000288 <__aeabi_dsub>
 8006514:	462a      	mov	r2, r5
 8006516:	4633      	mov	r3, r6
 8006518:	e9cd 0100 	strd	r0, r1, [sp]
 800651c:	f7fa fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8006520:	2800      	cmp	r0, #0
 8006522:	f040 8288 	bne.w	8006a36 <_dtoa_r+0x92e>
 8006526:	462a      	mov	r2, r5
 8006528:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800652c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006530:	f7fa fad4 	bl	8000adc <__aeabi_dcmplt>
 8006534:	2800      	cmp	r0, #0
 8006536:	f040 827c 	bne.w	8006a32 <_dtoa_r+0x92a>
 800653a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800653e:	e9cd 2300 	strd	r2, r3, [sp]
 8006542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006544:	2b00      	cmp	r3, #0
 8006546:	f2c0 8150 	blt.w	80067ea <_dtoa_r+0x6e2>
 800654a:	f1ba 0f0e 	cmp.w	sl, #14
 800654e:	f300 814c 	bgt.w	80067ea <_dtoa_r+0x6e2>
 8006552:	4b6a      	ldr	r3, [pc, #424]	; (80066fc <_dtoa_r+0x5f4>)
 8006554:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006558:	ed93 7b00 	vldr	d7, [r3]
 800655c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006564:	f280 80d8 	bge.w	8006718 <_dtoa_r+0x610>
 8006568:	f1b9 0f00 	cmp.w	r9, #0
 800656c:	f300 80d4 	bgt.w	8006718 <_dtoa_r+0x610>
 8006570:	f040 825e 	bne.w	8006a30 <_dtoa_r+0x928>
 8006574:	2200      	movs	r2, #0
 8006576:	4b66      	ldr	r3, [pc, #408]	; (8006710 <_dtoa_r+0x608>)
 8006578:	ec51 0b17 	vmov	r0, r1, d7
 800657c:	f7fa f83c 	bl	80005f8 <__aeabi_dmul>
 8006580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006584:	f7fa fabe 	bl	8000b04 <__aeabi_dcmpge>
 8006588:	464f      	mov	r7, r9
 800658a:	464e      	mov	r6, r9
 800658c:	2800      	cmp	r0, #0
 800658e:	f040 8234 	bne.w	80069fa <_dtoa_r+0x8f2>
 8006592:	2331      	movs	r3, #49	; 0x31
 8006594:	f10b 0501 	add.w	r5, fp, #1
 8006598:	f88b 3000 	strb.w	r3, [fp]
 800659c:	f10a 0a01 	add.w	sl, sl, #1
 80065a0:	e22f      	b.n	8006a02 <_dtoa_r+0x8fa>
 80065a2:	07f2      	lsls	r2, r6, #31
 80065a4:	d505      	bpl.n	80065b2 <_dtoa_r+0x4aa>
 80065a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065aa:	f7fa f825 	bl	80005f8 <__aeabi_dmul>
 80065ae:	3501      	adds	r5, #1
 80065b0:	2301      	movs	r3, #1
 80065b2:	1076      	asrs	r6, r6, #1
 80065b4:	3708      	adds	r7, #8
 80065b6:	e772      	b.n	800649e <_dtoa_r+0x396>
 80065b8:	2502      	movs	r5, #2
 80065ba:	e774      	b.n	80064a6 <_dtoa_r+0x39e>
 80065bc:	f8cd a020 	str.w	sl, [sp, #32]
 80065c0:	464f      	mov	r7, r9
 80065c2:	e791      	b.n	80064e8 <_dtoa_r+0x3e0>
 80065c4:	4b4d      	ldr	r3, [pc, #308]	; (80066fc <_dtoa_r+0x5f4>)
 80065c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d047      	beq.n	8006664 <_dtoa_r+0x55c>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	2000      	movs	r0, #0
 80065da:	494e      	ldr	r1, [pc, #312]	; (8006714 <_dtoa_r+0x60c>)
 80065dc:	f7fa f936 	bl	800084c <__aeabi_ddiv>
 80065e0:	462a      	mov	r2, r5
 80065e2:	4633      	mov	r3, r6
 80065e4:	f7f9 fe50 	bl	8000288 <__aeabi_dsub>
 80065e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065ec:	465d      	mov	r5, fp
 80065ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065f2:	f7fa fab1 	bl	8000b58 <__aeabi_d2iz>
 80065f6:	4606      	mov	r6, r0
 80065f8:	f7f9 ff94 	bl	8000524 <__aeabi_i2d>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006604:	f7f9 fe40 	bl	8000288 <__aeabi_dsub>
 8006608:	3630      	adds	r6, #48	; 0x30
 800660a:	f805 6b01 	strb.w	r6, [r5], #1
 800660e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006612:	e9cd 0100 	strd	r0, r1, [sp]
 8006616:	f7fa fa61 	bl	8000adc <__aeabi_dcmplt>
 800661a:	2800      	cmp	r0, #0
 800661c:	d163      	bne.n	80066e6 <_dtoa_r+0x5de>
 800661e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006622:	2000      	movs	r0, #0
 8006624:	4937      	ldr	r1, [pc, #220]	; (8006704 <_dtoa_r+0x5fc>)
 8006626:	f7f9 fe2f 	bl	8000288 <__aeabi_dsub>
 800662a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800662e:	f7fa fa55 	bl	8000adc <__aeabi_dcmplt>
 8006632:	2800      	cmp	r0, #0
 8006634:	f040 80b7 	bne.w	80067a6 <_dtoa_r+0x69e>
 8006638:	eba5 030b 	sub.w	r3, r5, fp
 800663c:	429f      	cmp	r7, r3
 800663e:	f77f af7c 	ble.w	800653a <_dtoa_r+0x432>
 8006642:	2200      	movs	r2, #0
 8006644:	4b30      	ldr	r3, [pc, #192]	; (8006708 <_dtoa_r+0x600>)
 8006646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800664a:	f7f9 ffd5 	bl	80005f8 <__aeabi_dmul>
 800664e:	2200      	movs	r2, #0
 8006650:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006654:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <_dtoa_r+0x600>)
 8006656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800665a:	f7f9 ffcd 	bl	80005f8 <__aeabi_dmul>
 800665e:	e9cd 0100 	strd	r0, r1, [sp]
 8006662:	e7c4      	b.n	80065ee <_dtoa_r+0x4e6>
 8006664:	462a      	mov	r2, r5
 8006666:	4633      	mov	r3, r6
 8006668:	f7f9 ffc6 	bl	80005f8 <__aeabi_dmul>
 800666c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006670:	eb0b 0507 	add.w	r5, fp, r7
 8006674:	465e      	mov	r6, fp
 8006676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800667a:	f7fa fa6d 	bl	8000b58 <__aeabi_d2iz>
 800667e:	4607      	mov	r7, r0
 8006680:	f7f9 ff50 	bl	8000524 <__aeabi_i2d>
 8006684:	3730      	adds	r7, #48	; 0x30
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800668e:	f7f9 fdfb 	bl	8000288 <__aeabi_dsub>
 8006692:	f806 7b01 	strb.w	r7, [r6], #1
 8006696:	42ae      	cmp	r6, r5
 8006698:	e9cd 0100 	strd	r0, r1, [sp]
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	d126      	bne.n	80066f0 <_dtoa_r+0x5e8>
 80066a2:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <_dtoa_r+0x60c>)
 80066a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066a8:	f7f9 fdf0 	bl	800028c <__adddf3>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066b4:	f7fa fa30 	bl	8000b18 <__aeabi_dcmpgt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d174      	bne.n	80067a6 <_dtoa_r+0x69e>
 80066bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066c0:	2000      	movs	r0, #0
 80066c2:	4914      	ldr	r1, [pc, #80]	; (8006714 <_dtoa_r+0x60c>)
 80066c4:	f7f9 fde0 	bl	8000288 <__aeabi_dsub>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066d0:	f7fa fa04 	bl	8000adc <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f43f af30 	beq.w	800653a <_dtoa_r+0x432>
 80066da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066de:	2b30      	cmp	r3, #48	; 0x30
 80066e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80066e4:	d002      	beq.n	80066ec <_dtoa_r+0x5e4>
 80066e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066ea:	e04a      	b.n	8006782 <_dtoa_r+0x67a>
 80066ec:	4615      	mov	r5, r2
 80066ee:	e7f4      	b.n	80066da <_dtoa_r+0x5d2>
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <_dtoa_r+0x600>)
 80066f2:	f7f9 ff81 	bl	80005f8 <__aeabi_dmul>
 80066f6:	e9cd 0100 	strd	r0, r1, [sp]
 80066fa:	e7bc      	b.n	8006676 <_dtoa_r+0x56e>
 80066fc:	080095e8 	.word	0x080095e8
 8006700:	080095c0 	.word	0x080095c0
 8006704:	3ff00000 	.word	0x3ff00000
 8006708:	40240000 	.word	0x40240000
 800670c:	401c0000 	.word	0x401c0000
 8006710:	40140000 	.word	0x40140000
 8006714:	3fe00000 	.word	0x3fe00000
 8006718:	e9dd 6700 	ldrd	r6, r7, [sp]
 800671c:	465d      	mov	r5, fp
 800671e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006722:	4630      	mov	r0, r6
 8006724:	4639      	mov	r1, r7
 8006726:	f7fa f891 	bl	800084c <__aeabi_ddiv>
 800672a:	f7fa fa15 	bl	8000b58 <__aeabi_d2iz>
 800672e:	4680      	mov	r8, r0
 8006730:	f7f9 fef8 	bl	8000524 <__aeabi_i2d>
 8006734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006738:	f7f9 ff5e 	bl	80005f8 <__aeabi_dmul>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006748:	f7f9 fd9e 	bl	8000288 <__aeabi_dsub>
 800674c:	f805 6b01 	strb.w	r6, [r5], #1
 8006750:	eba5 060b 	sub.w	r6, r5, fp
 8006754:	45b1      	cmp	r9, r6
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	d139      	bne.n	80067d0 <_dtoa_r+0x6c8>
 800675c:	f7f9 fd96 	bl	800028c <__adddf3>
 8006760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006764:	4606      	mov	r6, r0
 8006766:	460f      	mov	r7, r1
 8006768:	f7fa f9d6 	bl	8000b18 <__aeabi_dcmpgt>
 800676c:	b9c8      	cbnz	r0, 80067a2 <_dtoa_r+0x69a>
 800676e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006772:	4630      	mov	r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	f7fa f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800677a:	b110      	cbz	r0, 8006782 <_dtoa_r+0x67a>
 800677c:	f018 0f01 	tst.w	r8, #1
 8006780:	d10f      	bne.n	80067a2 <_dtoa_r+0x69a>
 8006782:	9904      	ldr	r1, [sp, #16]
 8006784:	4620      	mov	r0, r4
 8006786:	f001 f824 	bl	80077d2 <_Bfree>
 800678a:	2300      	movs	r3, #0
 800678c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800678e:	702b      	strb	r3, [r5, #0]
 8006790:	f10a 0301 	add.w	r3, sl, #1
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8241 	beq.w	8006c20 <_dtoa_r+0xb18>
 800679e:	601d      	str	r5, [r3, #0]
 80067a0:	e23e      	b.n	8006c20 <_dtoa_r+0xb18>
 80067a2:	f8cd a020 	str.w	sl, [sp, #32]
 80067a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067aa:	2a39      	cmp	r2, #57	; 0x39
 80067ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80067b0:	d108      	bne.n	80067c4 <_dtoa_r+0x6bc>
 80067b2:	459b      	cmp	fp, r3
 80067b4:	d10a      	bne.n	80067cc <_dtoa_r+0x6c4>
 80067b6:	9b08      	ldr	r3, [sp, #32]
 80067b8:	3301      	adds	r3, #1
 80067ba:	9308      	str	r3, [sp, #32]
 80067bc:	2330      	movs	r3, #48	; 0x30
 80067be:	f88b 3000 	strb.w	r3, [fp]
 80067c2:	465b      	mov	r3, fp
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	3201      	adds	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e78c      	b.n	80066e6 <_dtoa_r+0x5de>
 80067cc:	461d      	mov	r5, r3
 80067ce:	e7ea      	b.n	80067a6 <_dtoa_r+0x69e>
 80067d0:	2200      	movs	r2, #0
 80067d2:	4b9b      	ldr	r3, [pc, #620]	; (8006a40 <_dtoa_r+0x938>)
 80067d4:	f7f9 ff10 	bl	80005f8 <__aeabi_dmul>
 80067d8:	2200      	movs	r2, #0
 80067da:	2300      	movs	r3, #0
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	f7fa f972 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d09a      	beq.n	800671e <_dtoa_r+0x616>
 80067e8:	e7cb      	b.n	8006782 <_dtoa_r+0x67a>
 80067ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	f000 808b 	beq.w	8006908 <_dtoa_r+0x800>
 80067f2:	9a06      	ldr	r2, [sp, #24]
 80067f4:	2a01      	cmp	r2, #1
 80067f6:	dc6e      	bgt.n	80068d6 <_dtoa_r+0x7ce>
 80067f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d067      	beq.n	80068ce <_dtoa_r+0x7c6>
 80067fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006802:	9f07      	ldr	r7, [sp, #28]
 8006804:	9d05      	ldr	r5, [sp, #20]
 8006806:	9a05      	ldr	r2, [sp, #20]
 8006808:	2101      	movs	r1, #1
 800680a:	441a      	add	r2, r3
 800680c:	4620      	mov	r0, r4
 800680e:	9205      	str	r2, [sp, #20]
 8006810:	4498      	add	r8, r3
 8006812:	f001 f8bc 	bl	800798e <__i2b>
 8006816:	4606      	mov	r6, r0
 8006818:	2d00      	cmp	r5, #0
 800681a:	dd0c      	ble.n	8006836 <_dtoa_r+0x72e>
 800681c:	f1b8 0f00 	cmp.w	r8, #0
 8006820:	dd09      	ble.n	8006836 <_dtoa_r+0x72e>
 8006822:	4545      	cmp	r5, r8
 8006824:	9a05      	ldr	r2, [sp, #20]
 8006826:	462b      	mov	r3, r5
 8006828:	bfa8      	it	ge
 800682a:	4643      	movge	r3, r8
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	9205      	str	r2, [sp, #20]
 8006830:	1aed      	subs	r5, r5, r3
 8006832:	eba8 0803 	sub.w	r8, r8, r3
 8006836:	9b07      	ldr	r3, [sp, #28]
 8006838:	b1eb      	cbz	r3, 8006876 <_dtoa_r+0x76e>
 800683a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d067      	beq.n	8006910 <_dtoa_r+0x808>
 8006840:	b18f      	cbz	r7, 8006866 <_dtoa_r+0x75e>
 8006842:	4631      	mov	r1, r6
 8006844:	463a      	mov	r2, r7
 8006846:	4620      	mov	r0, r4
 8006848:	f001 f940 	bl	8007acc <__pow5mult>
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	4601      	mov	r1, r0
 8006850:	4606      	mov	r6, r0
 8006852:	4620      	mov	r0, r4
 8006854:	f001 f8a4 	bl	80079a0 <__multiply>
 8006858:	9904      	ldr	r1, [sp, #16]
 800685a:	9008      	str	r0, [sp, #32]
 800685c:	4620      	mov	r0, r4
 800685e:	f000 ffb8 	bl	80077d2 <_Bfree>
 8006862:	9b08      	ldr	r3, [sp, #32]
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	9b07      	ldr	r3, [sp, #28]
 8006868:	1bda      	subs	r2, r3, r7
 800686a:	d004      	beq.n	8006876 <_dtoa_r+0x76e>
 800686c:	9904      	ldr	r1, [sp, #16]
 800686e:	4620      	mov	r0, r4
 8006870:	f001 f92c 	bl	8007acc <__pow5mult>
 8006874:	9004      	str	r0, [sp, #16]
 8006876:	2101      	movs	r1, #1
 8006878:	4620      	mov	r0, r4
 800687a:	f001 f888 	bl	800798e <__i2b>
 800687e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006880:	4607      	mov	r7, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 81d0 	beq.w	8006c28 <_dtoa_r+0xb20>
 8006888:	461a      	mov	r2, r3
 800688a:	4601      	mov	r1, r0
 800688c:	4620      	mov	r0, r4
 800688e:	f001 f91d 	bl	8007acc <__pow5mult>
 8006892:	9b06      	ldr	r3, [sp, #24]
 8006894:	2b01      	cmp	r3, #1
 8006896:	4607      	mov	r7, r0
 8006898:	dc40      	bgt.n	800691c <_dtoa_r+0x814>
 800689a:	9b00      	ldr	r3, [sp, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d139      	bne.n	8006914 <_dtoa_r+0x80c>
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d136      	bne.n	8006918 <_dtoa_r+0x810>
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068b0:	0d1b      	lsrs	r3, r3, #20
 80068b2:	051b      	lsls	r3, r3, #20
 80068b4:	b12b      	cbz	r3, 80068c2 <_dtoa_r+0x7ba>
 80068b6:	9b05      	ldr	r3, [sp, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	9305      	str	r3, [sp, #20]
 80068bc:	f108 0801 	add.w	r8, r8, #1
 80068c0:	2301      	movs	r3, #1
 80068c2:	9307      	str	r3, [sp, #28]
 80068c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d12a      	bne.n	8006920 <_dtoa_r+0x818>
 80068ca:	2001      	movs	r0, #1
 80068cc:	e030      	b.n	8006930 <_dtoa_r+0x828>
 80068ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068d4:	e795      	b.n	8006802 <_dtoa_r+0x6fa>
 80068d6:	9b07      	ldr	r3, [sp, #28]
 80068d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80068dc:	42bb      	cmp	r3, r7
 80068de:	bfbf      	itttt	lt
 80068e0:	9b07      	ldrlt	r3, [sp, #28]
 80068e2:	9707      	strlt	r7, [sp, #28]
 80068e4:	1afa      	sublt	r2, r7, r3
 80068e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068e8:	bfbb      	ittet	lt
 80068ea:	189b      	addlt	r3, r3, r2
 80068ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068ee:	1bdf      	subge	r7, r3, r7
 80068f0:	2700      	movlt	r7, #0
 80068f2:	f1b9 0f00 	cmp.w	r9, #0
 80068f6:	bfb5      	itete	lt
 80068f8:	9b05      	ldrlt	r3, [sp, #20]
 80068fa:	9d05      	ldrge	r5, [sp, #20]
 80068fc:	eba3 0509 	sublt.w	r5, r3, r9
 8006900:	464b      	movge	r3, r9
 8006902:	bfb8      	it	lt
 8006904:	2300      	movlt	r3, #0
 8006906:	e77e      	b.n	8006806 <_dtoa_r+0x6fe>
 8006908:	9f07      	ldr	r7, [sp, #28]
 800690a:	9d05      	ldr	r5, [sp, #20]
 800690c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800690e:	e783      	b.n	8006818 <_dtoa_r+0x710>
 8006910:	9a07      	ldr	r2, [sp, #28]
 8006912:	e7ab      	b.n	800686c <_dtoa_r+0x764>
 8006914:	2300      	movs	r3, #0
 8006916:	e7d4      	b.n	80068c2 <_dtoa_r+0x7ba>
 8006918:	9b00      	ldr	r3, [sp, #0]
 800691a:	e7d2      	b.n	80068c2 <_dtoa_r+0x7ba>
 800691c:	2300      	movs	r3, #0
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006926:	6918      	ldr	r0, [r3, #16]
 8006928:	f000 ffe3 	bl	80078f2 <__hi0bits>
 800692c:	f1c0 0020 	rsb	r0, r0, #32
 8006930:	4440      	add	r0, r8
 8006932:	f010 001f 	ands.w	r0, r0, #31
 8006936:	d047      	beq.n	80069c8 <_dtoa_r+0x8c0>
 8006938:	f1c0 0320 	rsb	r3, r0, #32
 800693c:	2b04      	cmp	r3, #4
 800693e:	dd3b      	ble.n	80069b8 <_dtoa_r+0x8b0>
 8006940:	9b05      	ldr	r3, [sp, #20]
 8006942:	f1c0 001c 	rsb	r0, r0, #28
 8006946:	4403      	add	r3, r0
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	4405      	add	r5, r0
 800694c:	4480      	add	r8, r0
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dd05      	ble.n	8006960 <_dtoa_r+0x858>
 8006954:	461a      	mov	r2, r3
 8006956:	9904      	ldr	r1, [sp, #16]
 8006958:	4620      	mov	r0, r4
 800695a:	f001 f905 	bl	8007b68 <__lshift>
 800695e:	9004      	str	r0, [sp, #16]
 8006960:	f1b8 0f00 	cmp.w	r8, #0
 8006964:	dd05      	ble.n	8006972 <_dtoa_r+0x86a>
 8006966:	4639      	mov	r1, r7
 8006968:	4642      	mov	r2, r8
 800696a:	4620      	mov	r0, r4
 800696c:	f001 f8fc 	bl	8007b68 <__lshift>
 8006970:	4607      	mov	r7, r0
 8006972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006974:	b353      	cbz	r3, 80069cc <_dtoa_r+0x8c4>
 8006976:	4639      	mov	r1, r7
 8006978:	9804      	ldr	r0, [sp, #16]
 800697a:	f001 f949 	bl	8007c10 <__mcmp>
 800697e:	2800      	cmp	r0, #0
 8006980:	da24      	bge.n	80069cc <_dtoa_r+0x8c4>
 8006982:	2300      	movs	r3, #0
 8006984:	220a      	movs	r2, #10
 8006986:	9904      	ldr	r1, [sp, #16]
 8006988:	4620      	mov	r0, r4
 800698a:	f000 ff39 	bl	8007800 <__multadd>
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	9004      	str	r0, [sp, #16]
 8006992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 814d 	beq.w	8006c36 <_dtoa_r+0xb2e>
 800699c:	2300      	movs	r3, #0
 800699e:	4631      	mov	r1, r6
 80069a0:	220a      	movs	r2, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 ff2c 	bl	8007800 <__multadd>
 80069a8:	9b02      	ldr	r3, [sp, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	4606      	mov	r6, r0
 80069ae:	dc4f      	bgt.n	8006a50 <_dtoa_r+0x948>
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	dd4c      	ble.n	8006a50 <_dtoa_r+0x948>
 80069b6:	e011      	b.n	80069dc <_dtoa_r+0x8d4>
 80069b8:	d0c9      	beq.n	800694e <_dtoa_r+0x846>
 80069ba:	9a05      	ldr	r2, [sp, #20]
 80069bc:	331c      	adds	r3, #28
 80069be:	441a      	add	r2, r3
 80069c0:	9205      	str	r2, [sp, #20]
 80069c2:	441d      	add	r5, r3
 80069c4:	4498      	add	r8, r3
 80069c6:	e7c2      	b.n	800694e <_dtoa_r+0x846>
 80069c8:	4603      	mov	r3, r0
 80069ca:	e7f6      	b.n	80069ba <_dtoa_r+0x8b2>
 80069cc:	f1b9 0f00 	cmp.w	r9, #0
 80069d0:	dc38      	bgt.n	8006a44 <_dtoa_r+0x93c>
 80069d2:	9b06      	ldr	r3, [sp, #24]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	dd35      	ble.n	8006a44 <_dtoa_r+0x93c>
 80069d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	b963      	cbnz	r3, 80069fa <_dtoa_r+0x8f2>
 80069e0:	4639      	mov	r1, r7
 80069e2:	2205      	movs	r2, #5
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 ff0b 	bl	8007800 <__multadd>
 80069ea:	4601      	mov	r1, r0
 80069ec:	4607      	mov	r7, r0
 80069ee:	9804      	ldr	r0, [sp, #16]
 80069f0:	f001 f90e 	bl	8007c10 <__mcmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f73f adcc 	bgt.w	8006592 <_dtoa_r+0x48a>
 80069fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fc:	465d      	mov	r5, fp
 80069fe:	ea6f 0a03 	mvn.w	sl, r3
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	4639      	mov	r1, r7
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fee2 	bl	80077d2 <_Bfree>
 8006a0e:	2e00      	cmp	r6, #0
 8006a10:	f43f aeb7 	beq.w	8006782 <_dtoa_r+0x67a>
 8006a14:	f1b9 0f00 	cmp.w	r9, #0
 8006a18:	d005      	beq.n	8006a26 <_dtoa_r+0x91e>
 8006a1a:	45b1      	cmp	r9, r6
 8006a1c:	d003      	beq.n	8006a26 <_dtoa_r+0x91e>
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fed6 	bl	80077d2 <_Bfree>
 8006a26:	4631      	mov	r1, r6
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fed2 	bl	80077d2 <_Bfree>
 8006a2e:	e6a8      	b.n	8006782 <_dtoa_r+0x67a>
 8006a30:	2700      	movs	r7, #0
 8006a32:	463e      	mov	r6, r7
 8006a34:	e7e1      	b.n	80069fa <_dtoa_r+0x8f2>
 8006a36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a3a:	463e      	mov	r6, r7
 8006a3c:	e5a9      	b.n	8006592 <_dtoa_r+0x48a>
 8006a3e:	bf00      	nop
 8006a40:	40240000 	.word	0x40240000
 8006a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a46:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80fa 	beq.w	8006c44 <_dtoa_r+0xb3c>
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	dd05      	ble.n	8006a60 <_dtoa_r+0x958>
 8006a54:	4631      	mov	r1, r6
 8006a56:	462a      	mov	r2, r5
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f001 f885 	bl	8007b68 <__lshift>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	9b07      	ldr	r3, [sp, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d04c      	beq.n	8006b00 <_dtoa_r+0x9f8>
 8006a66:	6871      	ldr	r1, [r6, #4]
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fe7e 	bl	800776a <_Balloc>
 8006a6e:	6932      	ldr	r2, [r6, #16]
 8006a70:	3202      	adds	r2, #2
 8006a72:	4605      	mov	r5, r0
 8006a74:	0092      	lsls	r2, r2, #2
 8006a76:	f106 010c 	add.w	r1, r6, #12
 8006a7a:	300c      	adds	r0, #12
 8006a7c:	f000 fe6a 	bl	8007754 <memcpy>
 8006a80:	2201      	movs	r2, #1
 8006a82:	4629      	mov	r1, r5
 8006a84:	4620      	mov	r0, r4
 8006a86:	f001 f86f 	bl	8007b68 <__lshift>
 8006a8a:	9b00      	ldr	r3, [sp, #0]
 8006a8c:	f8cd b014 	str.w	fp, [sp, #20]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	46b1      	mov	r9, r6
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	4606      	mov	r6, r0
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	9804      	ldr	r0, [sp, #16]
 8006a9e:	f7ff faa7 	bl	8005ff0 <quorem>
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006aaa:	9804      	ldr	r0, [sp, #16]
 8006aac:	f001 f8b0 	bl	8007c10 <__mcmp>
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	9000      	str	r0, [sp, #0]
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f001 f8c4 	bl	8007c44 <__mdiff>
 8006abc:	68c3      	ldr	r3, [r0, #12]
 8006abe:	4602      	mov	r2, r0
 8006ac0:	bb03      	cbnz	r3, 8006b04 <_dtoa_r+0x9fc>
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	9008      	str	r0, [sp, #32]
 8006ac6:	9804      	ldr	r0, [sp, #16]
 8006ac8:	f001 f8a2 	bl	8007c10 <__mcmp>
 8006acc:	9a08      	ldr	r2, [sp, #32]
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	9308      	str	r3, [sp, #32]
 8006ad6:	f000 fe7c 	bl	80077d2 <_Bfree>
 8006ada:	9b08      	ldr	r3, [sp, #32]
 8006adc:	b9a3      	cbnz	r3, 8006b08 <_dtoa_r+0xa00>
 8006ade:	9a06      	ldr	r2, [sp, #24]
 8006ae0:	b992      	cbnz	r2, 8006b08 <_dtoa_r+0xa00>
 8006ae2:	9a07      	ldr	r2, [sp, #28]
 8006ae4:	b982      	cbnz	r2, 8006b08 <_dtoa_r+0xa00>
 8006ae6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aea:	d029      	beq.n	8006b40 <_dtoa_r+0xa38>
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dd01      	ble.n	8006af6 <_dtoa_r+0x9ee>
 8006af2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006af6:	9b05      	ldr	r3, [sp, #20]
 8006af8:	1c5d      	adds	r5, r3, #1
 8006afa:	f883 8000 	strb.w	r8, [r3]
 8006afe:	e782      	b.n	8006a06 <_dtoa_r+0x8fe>
 8006b00:	4630      	mov	r0, r6
 8006b02:	e7c2      	b.n	8006a8a <_dtoa_r+0x982>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e7e3      	b.n	8006ad0 <_dtoa_r+0x9c8>
 8006b08:	9a00      	ldr	r2, [sp, #0]
 8006b0a:	2a00      	cmp	r2, #0
 8006b0c:	db04      	blt.n	8006b18 <_dtoa_r+0xa10>
 8006b0e:	d125      	bne.n	8006b5c <_dtoa_r+0xa54>
 8006b10:	9a06      	ldr	r2, [sp, #24]
 8006b12:	bb1a      	cbnz	r2, 8006b5c <_dtoa_r+0xa54>
 8006b14:	9a07      	ldr	r2, [sp, #28]
 8006b16:	bb0a      	cbnz	r2, 8006b5c <_dtoa_r+0xa54>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	ddec      	ble.n	8006af6 <_dtoa_r+0x9ee>
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	9904      	ldr	r1, [sp, #16]
 8006b20:	4620      	mov	r0, r4
 8006b22:	f001 f821 	bl	8007b68 <__lshift>
 8006b26:	4639      	mov	r1, r7
 8006b28:	9004      	str	r0, [sp, #16]
 8006b2a:	f001 f871 	bl	8007c10 <__mcmp>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	dc03      	bgt.n	8006b3a <_dtoa_r+0xa32>
 8006b32:	d1e0      	bne.n	8006af6 <_dtoa_r+0x9ee>
 8006b34:	f018 0f01 	tst.w	r8, #1
 8006b38:	d0dd      	beq.n	8006af6 <_dtoa_r+0x9ee>
 8006b3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b3e:	d1d8      	bne.n	8006af2 <_dtoa_r+0x9ea>
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	9a05      	ldr	r2, [sp, #20]
 8006b44:	1c5d      	adds	r5, r3, #1
 8006b46:	2339      	movs	r3, #57	; 0x39
 8006b48:	7013      	strb	r3, [r2, #0]
 8006b4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b4e:	2b39      	cmp	r3, #57	; 0x39
 8006b50:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b54:	d04f      	beq.n	8006bf6 <_dtoa_r+0xaee>
 8006b56:	3301      	adds	r3, #1
 8006b58:	7013      	strb	r3, [r2, #0]
 8006b5a:	e754      	b.n	8006a06 <_dtoa_r+0x8fe>
 8006b5c:	9a05      	ldr	r2, [sp, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f102 0501 	add.w	r5, r2, #1
 8006b64:	dd06      	ble.n	8006b74 <_dtoa_r+0xa6c>
 8006b66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b6a:	d0e9      	beq.n	8006b40 <_dtoa_r+0xa38>
 8006b6c:	f108 0801 	add.w	r8, r8, #1
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	e7c2      	b.n	8006afa <_dtoa_r+0x9f2>
 8006b74:	9a02      	ldr	r2, [sp, #8]
 8006b76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b7a:	eba5 030b 	sub.w	r3, r5, fp
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d021      	beq.n	8006bc6 <_dtoa_r+0xabe>
 8006b82:	2300      	movs	r3, #0
 8006b84:	220a      	movs	r2, #10
 8006b86:	9904      	ldr	r1, [sp, #16]
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fe39 	bl	8007800 <__multadd>
 8006b8e:	45b1      	cmp	r9, r6
 8006b90:	9004      	str	r0, [sp, #16]
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	f04f 020a 	mov.w	r2, #10
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	d105      	bne.n	8006bac <_dtoa_r+0xaa4>
 8006ba0:	f000 fe2e 	bl	8007800 <__multadd>
 8006ba4:	4681      	mov	r9, r0
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	9505      	str	r5, [sp, #20]
 8006baa:	e776      	b.n	8006a9a <_dtoa_r+0x992>
 8006bac:	f000 fe28 	bl	8007800 <__multadd>
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4681      	mov	r9, r0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	220a      	movs	r2, #10
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fe21 	bl	8007800 <__multadd>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	e7f2      	b.n	8006ba8 <_dtoa_r+0xaa0>
 8006bc2:	f04f 0900 	mov.w	r9, #0
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	9904      	ldr	r1, [sp, #16]
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 ffcc 	bl	8007b68 <__lshift>
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	9004      	str	r0, [sp, #16]
 8006bd4:	f001 f81c 	bl	8007c10 <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dcb6      	bgt.n	8006b4a <_dtoa_r+0xa42>
 8006bdc:	d102      	bne.n	8006be4 <_dtoa_r+0xadc>
 8006bde:	f018 0f01 	tst.w	r8, #1
 8006be2:	d1b2      	bne.n	8006b4a <_dtoa_r+0xa42>
 8006be4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006be8:	2b30      	cmp	r3, #48	; 0x30
 8006bea:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bee:	f47f af0a 	bne.w	8006a06 <_dtoa_r+0x8fe>
 8006bf2:	4615      	mov	r5, r2
 8006bf4:	e7f6      	b.n	8006be4 <_dtoa_r+0xadc>
 8006bf6:	4593      	cmp	fp, r2
 8006bf8:	d105      	bne.n	8006c06 <_dtoa_r+0xafe>
 8006bfa:	2331      	movs	r3, #49	; 0x31
 8006bfc:	f10a 0a01 	add.w	sl, sl, #1
 8006c00:	f88b 3000 	strb.w	r3, [fp]
 8006c04:	e6ff      	b.n	8006a06 <_dtoa_r+0x8fe>
 8006c06:	4615      	mov	r5, r2
 8006c08:	e79f      	b.n	8006b4a <_dtoa_r+0xa42>
 8006c0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c70 <_dtoa_r+0xb68>
 8006c0e:	e007      	b.n	8006c20 <_dtoa_r+0xb18>
 8006c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c74 <_dtoa_r+0xb6c>
 8006c16:	b11b      	cbz	r3, 8006c20 <_dtoa_r+0xb18>
 8006c18:	f10b 0308 	add.w	r3, fp, #8
 8006c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	4658      	mov	r0, fp
 8006c22:	b017      	add	sp, #92	; 0x5c
 8006c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c28:	9b06      	ldr	r3, [sp, #24]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	f77f ae35 	ble.w	800689a <_dtoa_r+0x792>
 8006c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	e649      	b.n	80068ca <_dtoa_r+0x7c2>
 8006c36:	9b02      	ldr	r3, [sp, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dc03      	bgt.n	8006c44 <_dtoa_r+0xb3c>
 8006c3c:	9b06      	ldr	r3, [sp, #24]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	f73f aecc 	bgt.w	80069dc <_dtoa_r+0x8d4>
 8006c44:	465d      	mov	r5, fp
 8006c46:	4639      	mov	r1, r7
 8006c48:	9804      	ldr	r0, [sp, #16]
 8006c4a:	f7ff f9d1 	bl	8005ff0 <quorem>
 8006c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c52:	f805 8b01 	strb.w	r8, [r5], #1
 8006c56:	9a02      	ldr	r2, [sp, #8]
 8006c58:	eba5 030b 	sub.w	r3, r5, fp
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	ddb0      	ble.n	8006bc2 <_dtoa_r+0xaba>
 8006c60:	2300      	movs	r3, #0
 8006c62:	220a      	movs	r2, #10
 8006c64:	9904      	ldr	r1, [sp, #16]
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fdca 	bl	8007800 <__multadd>
 8006c6c:	9004      	str	r0, [sp, #16]
 8006c6e:	e7ea      	b.n	8006c46 <_dtoa_r+0xb3e>
 8006c70:	080096e3 	.word	0x080096e3
 8006c74:	08009540 	.word	0x08009540

08006c78 <__sflush_r>:
 8006c78:	898a      	ldrh	r2, [r1, #12]
 8006c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7e:	4605      	mov	r5, r0
 8006c80:	0710      	lsls	r0, r2, #28
 8006c82:	460c      	mov	r4, r1
 8006c84:	d458      	bmi.n	8006d38 <__sflush_r+0xc0>
 8006c86:	684b      	ldr	r3, [r1, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dc05      	bgt.n	8006c98 <__sflush_r+0x20>
 8006c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dc02      	bgt.n	8006c98 <__sflush_r+0x20>
 8006c92:	2000      	movs	r0, #0
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c9a:	2e00      	cmp	r6, #0
 8006c9c:	d0f9      	beq.n	8006c92 <__sflush_r+0x1a>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ca4:	682f      	ldr	r7, [r5, #0]
 8006ca6:	6a21      	ldr	r1, [r4, #32]
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	d032      	beq.n	8006d12 <__sflush_r+0x9a>
 8006cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	075a      	lsls	r2, r3, #29
 8006cb2:	d505      	bpl.n	8006cc0 <__sflush_r+0x48>
 8006cb4:	6863      	ldr	r3, [r4, #4]
 8006cb6:	1ac0      	subs	r0, r0, r3
 8006cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cba:	b10b      	cbz	r3, 8006cc0 <__sflush_r+0x48>
 8006cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cbe:	1ac0      	subs	r0, r0, r3
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc6:	6a21      	ldr	r1, [r4, #32]
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b0      	blx	r6
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	d106      	bne.n	8006ce0 <__sflush_r+0x68>
 8006cd2:	6829      	ldr	r1, [r5, #0]
 8006cd4:	291d      	cmp	r1, #29
 8006cd6:	d848      	bhi.n	8006d6a <__sflush_r+0xf2>
 8006cd8:	4a29      	ldr	r2, [pc, #164]	; (8006d80 <__sflush_r+0x108>)
 8006cda:	40ca      	lsrs	r2, r1
 8006cdc:	07d6      	lsls	r6, r2, #31
 8006cde:	d544      	bpl.n	8006d6a <__sflush_r+0xf2>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	6062      	str	r2, [r4, #4]
 8006ce4:	04d9      	lsls	r1, r3, #19
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	d504      	bpl.n	8006cf6 <__sflush_r+0x7e>
 8006cec:	1c42      	adds	r2, r0, #1
 8006cee:	d101      	bne.n	8006cf4 <__sflush_r+0x7c>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b903      	cbnz	r3, 8006cf6 <__sflush_r+0x7e>
 8006cf4:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf8:	602f      	str	r7, [r5, #0]
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	d0c9      	beq.n	8006c92 <__sflush_r+0x1a>
 8006cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d02:	4299      	cmp	r1, r3
 8006d04:	d002      	beq.n	8006d0c <__sflush_r+0x94>
 8006d06:	4628      	mov	r0, r5
 8006d08:	f001 f93c 	bl	8007f84 <_free_r>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d10:	e7c0      	b.n	8006c94 <__sflush_r+0x1c>
 8006d12:	2301      	movs	r3, #1
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b0      	blx	r6
 8006d18:	1c41      	adds	r1, r0, #1
 8006d1a:	d1c8      	bne.n	8006cae <__sflush_r+0x36>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0c5      	beq.n	8006cae <__sflush_r+0x36>
 8006d22:	2b1d      	cmp	r3, #29
 8006d24:	d001      	beq.n	8006d2a <__sflush_r+0xb2>
 8006d26:	2b16      	cmp	r3, #22
 8006d28:	d101      	bne.n	8006d2e <__sflush_r+0xb6>
 8006d2a:	602f      	str	r7, [r5, #0]
 8006d2c:	e7b1      	b.n	8006c92 <__sflush_r+0x1a>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d34:	81a3      	strh	r3, [r4, #12]
 8006d36:	e7ad      	b.n	8006c94 <__sflush_r+0x1c>
 8006d38:	690f      	ldr	r7, [r1, #16]
 8006d3a:	2f00      	cmp	r7, #0
 8006d3c:	d0a9      	beq.n	8006c92 <__sflush_r+0x1a>
 8006d3e:	0793      	lsls	r3, r2, #30
 8006d40:	680e      	ldr	r6, [r1, #0]
 8006d42:	bf08      	it	eq
 8006d44:	694b      	ldreq	r3, [r1, #20]
 8006d46:	600f      	str	r7, [r1, #0]
 8006d48:	bf18      	it	ne
 8006d4a:	2300      	movne	r3, #0
 8006d4c:	eba6 0807 	sub.w	r8, r6, r7
 8006d50:	608b      	str	r3, [r1, #8]
 8006d52:	f1b8 0f00 	cmp.w	r8, #0
 8006d56:	dd9c      	ble.n	8006c92 <__sflush_r+0x1a>
 8006d58:	4643      	mov	r3, r8
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	6a21      	ldr	r1, [r4, #32]
 8006d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b0      	blx	r6
 8006d64:	2800      	cmp	r0, #0
 8006d66:	dc06      	bgt.n	8006d76 <__sflush_r+0xfe>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e78e      	b.n	8006c94 <__sflush_r+0x1c>
 8006d76:	4407      	add	r7, r0
 8006d78:	eba8 0800 	sub.w	r8, r8, r0
 8006d7c:	e7e9      	b.n	8006d52 <__sflush_r+0xda>
 8006d7e:	bf00      	nop
 8006d80:	20400001 	.word	0x20400001

08006d84 <_fflush_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	690b      	ldr	r3, [r1, #16]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	b1db      	cbz	r3, 8006dc6 <_fflush_r+0x42>
 8006d8e:	b118      	cbz	r0, 8006d98 <_fflush_r+0x14>
 8006d90:	6983      	ldr	r3, [r0, #24]
 8006d92:	b90b      	cbnz	r3, 8006d98 <_fflush_r+0x14>
 8006d94:	f000 f872 	bl	8006e7c <__sinit>
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <_fflush_r+0x48>)
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	d109      	bne.n	8006db2 <_fflush_r+0x2e>
 8006d9e:	686c      	ldr	r4, [r5, #4]
 8006da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da4:	b17b      	cbz	r3, 8006dc6 <_fflush_r+0x42>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dae:	f7ff bf63 	b.w	8006c78 <__sflush_r>
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <_fflush_r+0x4c>)
 8006db4:	429c      	cmp	r4, r3
 8006db6:	d101      	bne.n	8006dbc <_fflush_r+0x38>
 8006db8:	68ac      	ldr	r4, [r5, #8]
 8006dba:	e7f1      	b.n	8006da0 <_fflush_r+0x1c>
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <_fflush_r+0x50>)
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	bf08      	it	eq
 8006dc2:	68ec      	ldreq	r4, [r5, #12]
 8006dc4:	e7ec      	b.n	8006da0 <_fflush_r+0x1c>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop
 8006dcc:	08009570 	.word	0x08009570
 8006dd0:	08009590 	.word	0x08009590
 8006dd4:	08009550 	.word	0x08009550

08006dd8 <fflush>:
 8006dd8:	4601      	mov	r1, r0
 8006dda:	b920      	cbnz	r0, 8006de6 <fflush+0xe>
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <fflush+0x18>)
 8006dde:	4905      	ldr	r1, [pc, #20]	; (8006df4 <fflush+0x1c>)
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f000 b8d3 	b.w	8006f8c <_fwalk_reent>
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <fflush+0x20>)
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f7ff bfcb 	b.w	8006d84 <_fflush_r>
 8006dee:	bf00      	nop
 8006df0:	080094b8 	.word	0x080094b8
 8006df4:	08006d85 	.word	0x08006d85
 8006df8:	2000000c 	.word	0x2000000c

08006dfc <std>:
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	e9c0 3300 	strd	r3, r3, [r0]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e12:	6183      	str	r3, [r0, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	2208      	movs	r2, #8
 8006e18:	305c      	adds	r0, #92	; 0x5c
 8006e1a:	f7fd fc31 	bl	8004680 <memset>
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <std+0x38>)
 8006e20:	6263      	str	r3, [r4, #36]	; 0x24
 8006e22:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <std+0x3c>)
 8006e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <std+0x40>)
 8006e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <std+0x44>)
 8006e2c:	6224      	str	r4, [r4, #32]
 8006e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	08008dc1 	.word	0x08008dc1
 8006e38:	08008de3 	.word	0x08008de3
 8006e3c:	08008e1b 	.word	0x08008e1b
 8006e40:	08008e3f 	.word	0x08008e3f

08006e44 <_cleanup_r>:
 8006e44:	4901      	ldr	r1, [pc, #4]	; (8006e4c <_cleanup_r+0x8>)
 8006e46:	f000 b8a1 	b.w	8006f8c <_fwalk_reent>
 8006e4a:	bf00      	nop
 8006e4c:	08006d85 	.word	0x08006d85

08006e50 <__sfmoreglue>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	1e4a      	subs	r2, r1, #1
 8006e54:	2568      	movs	r5, #104	; 0x68
 8006e56:	4355      	muls	r5, r2
 8006e58:	460e      	mov	r6, r1
 8006e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e5e:	f001 f8df 	bl	8008020 <_malloc_r>
 8006e62:	4604      	mov	r4, r0
 8006e64:	b140      	cbz	r0, 8006e78 <__sfmoreglue+0x28>
 8006e66:	2100      	movs	r1, #0
 8006e68:	e9c0 1600 	strd	r1, r6, [r0]
 8006e6c:	300c      	adds	r0, #12
 8006e6e:	60a0      	str	r0, [r4, #8]
 8006e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e74:	f7fd fc04 	bl	8004680 <memset>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}

08006e7c <__sinit>:
 8006e7c:	6983      	ldr	r3, [r0, #24]
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	bb33      	cbnz	r3, 8006ed2 <__sinit+0x56>
 8006e84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006e88:	6503      	str	r3, [r0, #80]	; 0x50
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <__sinit+0x58>)
 8006e8c:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <__sinit+0x5c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6282      	str	r2, [r0, #40]	; 0x28
 8006e92:	4298      	cmp	r0, r3
 8006e94:	bf04      	itt	eq
 8006e96:	2301      	moveq	r3, #1
 8006e98:	6183      	streq	r3, [r0, #24]
 8006e9a:	f000 f81f 	bl	8006edc <__sfp>
 8006e9e:	6060      	str	r0, [r4, #4]
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 f81b 	bl	8006edc <__sfp>
 8006ea6:	60a0      	str	r0, [r4, #8]
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 f817 	bl	8006edc <__sfp>
 8006eae:	2200      	movs	r2, #0
 8006eb0:	60e0      	str	r0, [r4, #12]
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	6860      	ldr	r0, [r4, #4]
 8006eb6:	f7ff ffa1 	bl	8006dfc <std>
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2109      	movs	r1, #9
 8006ebe:	68a0      	ldr	r0, [r4, #8]
 8006ec0:	f7ff ff9c 	bl	8006dfc <std>
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	2112      	movs	r1, #18
 8006ec8:	68e0      	ldr	r0, [r4, #12]
 8006eca:	f7ff ff97 	bl	8006dfc <std>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	61a3      	str	r3, [r4, #24]
 8006ed2:	bd10      	pop	{r4, pc}
 8006ed4:	080094b8 	.word	0x080094b8
 8006ed8:	08006e45 	.word	0x08006e45

08006edc <__sfp>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <__sfp+0x70>)
 8006ee0:	681e      	ldr	r6, [r3, #0]
 8006ee2:	69b3      	ldr	r3, [r6, #24]
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	b913      	cbnz	r3, 8006eee <__sfp+0x12>
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7ff ffc7 	bl	8006e7c <__sinit>
 8006eee:	3648      	adds	r6, #72	; 0x48
 8006ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	d503      	bpl.n	8006f00 <__sfp+0x24>
 8006ef8:	6833      	ldr	r3, [r6, #0]
 8006efa:	b133      	cbz	r3, 8006f0a <__sfp+0x2e>
 8006efc:	6836      	ldr	r6, [r6, #0]
 8006efe:	e7f7      	b.n	8006ef0 <__sfp+0x14>
 8006f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f04:	b16d      	cbz	r5, 8006f22 <__sfp+0x46>
 8006f06:	3468      	adds	r4, #104	; 0x68
 8006f08:	e7f4      	b.n	8006ef4 <__sfp+0x18>
 8006f0a:	2104      	movs	r1, #4
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff ff9f 	bl	8006e50 <__sfmoreglue>
 8006f12:	6030      	str	r0, [r6, #0]
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d1f1      	bne.n	8006efc <__sfp+0x20>
 8006f18:	230c      	movs	r3, #12
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	4620      	mov	r0, r4
 8006f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <__sfp+0x74>)
 8006f24:	6665      	str	r5, [r4, #100]	; 0x64
 8006f26:	e9c4 5500 	strd	r5, r5, [r4]
 8006f2a:	60a5      	str	r5, [r4, #8]
 8006f2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006f30:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006f34:	2208      	movs	r2, #8
 8006f36:	4629      	mov	r1, r5
 8006f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f3c:	f7fd fba0 	bl	8004680 <memset>
 8006f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f48:	e7e9      	b.n	8006f1e <__sfp+0x42>
 8006f4a:	bf00      	nop
 8006f4c:	080094b8 	.word	0x080094b8
 8006f50:	ffff0001 	.word	0xffff0001

08006f54 <_fwalk>:
 8006f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f58:	4688      	mov	r8, r1
 8006f5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f5e:	2600      	movs	r6, #0
 8006f60:	b914      	cbnz	r4, 8006f68 <_fwalk+0x14>
 8006f62:	4630      	mov	r0, r6
 8006f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f68:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006f6c:	3f01      	subs	r7, #1
 8006f6e:	d501      	bpl.n	8006f74 <_fwalk+0x20>
 8006f70:	6824      	ldr	r4, [r4, #0]
 8006f72:	e7f5      	b.n	8006f60 <_fwalk+0xc>
 8006f74:	89ab      	ldrh	r3, [r5, #12]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d906      	bls.n	8006f88 <_fwalk+0x34>
 8006f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	d002      	beq.n	8006f88 <_fwalk+0x34>
 8006f82:	4628      	mov	r0, r5
 8006f84:	47c0      	blx	r8
 8006f86:	4306      	orrs	r6, r0
 8006f88:	3568      	adds	r5, #104	; 0x68
 8006f8a:	e7ef      	b.n	8006f6c <_fwalk+0x18>

08006f8c <_fwalk_reent>:
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f98:	2600      	movs	r6, #0
 8006f9a:	b914      	cbnz	r4, 8006fa2 <_fwalk_reent+0x16>
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006fa6:	3f01      	subs	r7, #1
 8006fa8:	d501      	bpl.n	8006fae <_fwalk_reent+0x22>
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	e7f5      	b.n	8006f9a <_fwalk_reent+0xe>
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d907      	bls.n	8006fc4 <_fwalk_reent+0x38>
 8006fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	d003      	beq.n	8006fc4 <_fwalk_reent+0x38>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	47c8      	blx	r9
 8006fc2:	4306      	orrs	r6, r0
 8006fc4:	3568      	adds	r5, #104	; 0x68
 8006fc6:	e7ee      	b.n	8006fa6 <_fwalk_reent+0x1a>

08006fc8 <rshift>:
 8006fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fca:	6906      	ldr	r6, [r0, #16]
 8006fcc:	114b      	asrs	r3, r1, #5
 8006fce:	429e      	cmp	r6, r3
 8006fd0:	f100 0414 	add.w	r4, r0, #20
 8006fd4:	dd30      	ble.n	8007038 <rshift+0x70>
 8006fd6:	f011 011f 	ands.w	r1, r1, #31
 8006fda:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006fde:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006fe2:	d108      	bne.n	8006ff6 <rshift+0x2e>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	42b2      	cmp	r2, r6
 8006fe8:	460b      	mov	r3, r1
 8006fea:	d211      	bcs.n	8007010 <rshift+0x48>
 8006fec:	f852 3b04 	ldr.w	r3, [r2], #4
 8006ff0:	f841 3b04 	str.w	r3, [r1], #4
 8006ff4:	e7f7      	b.n	8006fe6 <rshift+0x1e>
 8006ff6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006ffa:	f1c1 0c20 	rsb	ip, r1, #32
 8006ffe:	40cd      	lsrs	r5, r1
 8007000:	3204      	adds	r2, #4
 8007002:	4623      	mov	r3, r4
 8007004:	42b2      	cmp	r2, r6
 8007006:	4617      	mov	r7, r2
 8007008:	d30c      	bcc.n	8007024 <rshift+0x5c>
 800700a:	601d      	str	r5, [r3, #0]
 800700c:	b105      	cbz	r5, 8007010 <rshift+0x48>
 800700e:	3304      	adds	r3, #4
 8007010:	1b1a      	subs	r2, r3, r4
 8007012:	42a3      	cmp	r3, r4
 8007014:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007018:	bf08      	it	eq
 800701a:	2300      	moveq	r3, #0
 800701c:	6102      	str	r2, [r0, #16]
 800701e:	bf08      	it	eq
 8007020:	6143      	streq	r3, [r0, #20]
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007024:	683f      	ldr	r7, [r7, #0]
 8007026:	fa07 f70c 	lsl.w	r7, r7, ip
 800702a:	433d      	orrs	r5, r7
 800702c:	f843 5b04 	str.w	r5, [r3], #4
 8007030:	f852 5b04 	ldr.w	r5, [r2], #4
 8007034:	40cd      	lsrs	r5, r1
 8007036:	e7e5      	b.n	8007004 <rshift+0x3c>
 8007038:	4623      	mov	r3, r4
 800703a:	e7e9      	b.n	8007010 <rshift+0x48>

0800703c <__hexdig_fun>:
 800703c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007040:	2b09      	cmp	r3, #9
 8007042:	d802      	bhi.n	800704a <__hexdig_fun+0xe>
 8007044:	3820      	subs	r0, #32
 8007046:	b2c0      	uxtb	r0, r0
 8007048:	4770      	bx	lr
 800704a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800704e:	2b05      	cmp	r3, #5
 8007050:	d801      	bhi.n	8007056 <__hexdig_fun+0x1a>
 8007052:	3847      	subs	r0, #71	; 0x47
 8007054:	e7f7      	b.n	8007046 <__hexdig_fun+0xa>
 8007056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800705a:	2b05      	cmp	r3, #5
 800705c:	d801      	bhi.n	8007062 <__hexdig_fun+0x26>
 800705e:	3827      	subs	r0, #39	; 0x27
 8007060:	e7f1      	b.n	8007046 <__hexdig_fun+0xa>
 8007062:	2000      	movs	r0, #0
 8007064:	4770      	bx	lr

08007066 <__gethex>:
 8007066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	b08b      	sub	sp, #44	; 0x2c
 800706c:	468a      	mov	sl, r1
 800706e:	9002      	str	r0, [sp, #8]
 8007070:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007072:	9306      	str	r3, [sp, #24]
 8007074:	4690      	mov	r8, r2
 8007076:	f000 fadf 	bl	8007638 <__localeconv_l>
 800707a:	6803      	ldr	r3, [r0, #0]
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 f8a6 	bl	80001d0 <strlen>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	9001      	str	r0, [sp, #4]
 8007088:	4403      	add	r3, r0
 800708a:	f04f 0b00 	mov.w	fp, #0
 800708e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007092:	9307      	str	r3, [sp, #28]
 8007094:	f8da 3000 	ldr.w	r3, [sl]
 8007098:	3302      	adds	r3, #2
 800709a:	461f      	mov	r7, r3
 800709c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80070a0:	2830      	cmp	r0, #48	; 0x30
 80070a2:	d06c      	beq.n	800717e <__gethex+0x118>
 80070a4:	f7ff ffca 	bl	800703c <__hexdig_fun>
 80070a8:	4604      	mov	r4, r0
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d16a      	bne.n	8007184 <__gethex+0x11e>
 80070ae:	9a01      	ldr	r2, [sp, #4]
 80070b0:	9903      	ldr	r1, [sp, #12]
 80070b2:	4638      	mov	r0, r7
 80070b4:	f001 fec7 	bl	8008e46 <strncmp>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d166      	bne.n	800718a <__gethex+0x124>
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	5cf8      	ldrb	r0, [r7, r3]
 80070c0:	18fe      	adds	r6, r7, r3
 80070c2:	f7ff ffbb 	bl	800703c <__hexdig_fun>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d062      	beq.n	8007190 <__gethex+0x12a>
 80070ca:	4633      	mov	r3, r6
 80070cc:	7818      	ldrb	r0, [r3, #0]
 80070ce:	2830      	cmp	r0, #48	; 0x30
 80070d0:	461f      	mov	r7, r3
 80070d2:	f103 0301 	add.w	r3, r3, #1
 80070d6:	d0f9      	beq.n	80070cc <__gethex+0x66>
 80070d8:	f7ff ffb0 	bl	800703c <__hexdig_fun>
 80070dc:	fab0 f580 	clz	r5, r0
 80070e0:	096d      	lsrs	r5, r5, #5
 80070e2:	4634      	mov	r4, r6
 80070e4:	f04f 0b01 	mov.w	fp, #1
 80070e8:	463a      	mov	r2, r7
 80070ea:	4616      	mov	r6, r2
 80070ec:	3201      	adds	r2, #1
 80070ee:	7830      	ldrb	r0, [r6, #0]
 80070f0:	f7ff ffa4 	bl	800703c <__hexdig_fun>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1f8      	bne.n	80070ea <__gethex+0x84>
 80070f8:	9a01      	ldr	r2, [sp, #4]
 80070fa:	9903      	ldr	r1, [sp, #12]
 80070fc:	4630      	mov	r0, r6
 80070fe:	f001 fea2 	bl	8008e46 <strncmp>
 8007102:	b950      	cbnz	r0, 800711a <__gethex+0xb4>
 8007104:	b954      	cbnz	r4, 800711c <__gethex+0xb6>
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	18f4      	adds	r4, r6, r3
 800710a:	4622      	mov	r2, r4
 800710c:	4616      	mov	r6, r2
 800710e:	3201      	adds	r2, #1
 8007110:	7830      	ldrb	r0, [r6, #0]
 8007112:	f7ff ff93 	bl	800703c <__hexdig_fun>
 8007116:	2800      	cmp	r0, #0
 8007118:	d1f8      	bne.n	800710c <__gethex+0xa6>
 800711a:	b10c      	cbz	r4, 8007120 <__gethex+0xba>
 800711c:	1ba4      	subs	r4, r4, r6
 800711e:	00a4      	lsls	r4, r4, #2
 8007120:	7833      	ldrb	r3, [r6, #0]
 8007122:	2b50      	cmp	r3, #80	; 0x50
 8007124:	d001      	beq.n	800712a <__gethex+0xc4>
 8007126:	2b70      	cmp	r3, #112	; 0x70
 8007128:	d140      	bne.n	80071ac <__gethex+0x146>
 800712a:	7873      	ldrb	r3, [r6, #1]
 800712c:	2b2b      	cmp	r3, #43	; 0x2b
 800712e:	d031      	beq.n	8007194 <__gethex+0x12e>
 8007130:	2b2d      	cmp	r3, #45	; 0x2d
 8007132:	d033      	beq.n	800719c <__gethex+0x136>
 8007134:	1c71      	adds	r1, r6, #1
 8007136:	f04f 0900 	mov.w	r9, #0
 800713a:	7808      	ldrb	r0, [r1, #0]
 800713c:	f7ff ff7e 	bl	800703c <__hexdig_fun>
 8007140:	1e43      	subs	r3, r0, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b18      	cmp	r3, #24
 8007146:	d831      	bhi.n	80071ac <__gethex+0x146>
 8007148:	f1a0 0210 	sub.w	r2, r0, #16
 800714c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007150:	f7ff ff74 	bl	800703c <__hexdig_fun>
 8007154:	1e43      	subs	r3, r0, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b18      	cmp	r3, #24
 800715a:	d922      	bls.n	80071a2 <__gethex+0x13c>
 800715c:	f1b9 0f00 	cmp.w	r9, #0
 8007160:	d000      	beq.n	8007164 <__gethex+0xfe>
 8007162:	4252      	negs	r2, r2
 8007164:	4414      	add	r4, r2
 8007166:	f8ca 1000 	str.w	r1, [sl]
 800716a:	b30d      	cbz	r5, 80071b0 <__gethex+0x14a>
 800716c:	f1bb 0f00 	cmp.w	fp, #0
 8007170:	bf0c      	ite	eq
 8007172:	2706      	moveq	r7, #6
 8007174:	2700      	movne	r7, #0
 8007176:	4638      	mov	r0, r7
 8007178:	b00b      	add	sp, #44	; 0x2c
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	f10b 0b01 	add.w	fp, fp, #1
 8007182:	e78a      	b.n	800709a <__gethex+0x34>
 8007184:	2500      	movs	r5, #0
 8007186:	462c      	mov	r4, r5
 8007188:	e7ae      	b.n	80070e8 <__gethex+0x82>
 800718a:	463e      	mov	r6, r7
 800718c:	2501      	movs	r5, #1
 800718e:	e7c7      	b.n	8007120 <__gethex+0xba>
 8007190:	4604      	mov	r4, r0
 8007192:	e7fb      	b.n	800718c <__gethex+0x126>
 8007194:	f04f 0900 	mov.w	r9, #0
 8007198:	1cb1      	adds	r1, r6, #2
 800719a:	e7ce      	b.n	800713a <__gethex+0xd4>
 800719c:	f04f 0901 	mov.w	r9, #1
 80071a0:	e7fa      	b.n	8007198 <__gethex+0x132>
 80071a2:	230a      	movs	r3, #10
 80071a4:	fb03 0202 	mla	r2, r3, r2, r0
 80071a8:	3a10      	subs	r2, #16
 80071aa:	e7cf      	b.n	800714c <__gethex+0xe6>
 80071ac:	4631      	mov	r1, r6
 80071ae:	e7da      	b.n	8007166 <__gethex+0x100>
 80071b0:	1bf3      	subs	r3, r6, r7
 80071b2:	3b01      	subs	r3, #1
 80071b4:	4629      	mov	r1, r5
 80071b6:	2b07      	cmp	r3, #7
 80071b8:	dc49      	bgt.n	800724e <__gethex+0x1e8>
 80071ba:	9802      	ldr	r0, [sp, #8]
 80071bc:	f000 fad5 	bl	800776a <_Balloc>
 80071c0:	9b01      	ldr	r3, [sp, #4]
 80071c2:	f100 0914 	add.w	r9, r0, #20
 80071c6:	f04f 0b00 	mov.w	fp, #0
 80071ca:	f1c3 0301 	rsb	r3, r3, #1
 80071ce:	4605      	mov	r5, r0
 80071d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80071d4:	46da      	mov	sl, fp
 80071d6:	9308      	str	r3, [sp, #32]
 80071d8:	42b7      	cmp	r7, r6
 80071da:	d33b      	bcc.n	8007254 <__gethex+0x1ee>
 80071dc:	9804      	ldr	r0, [sp, #16]
 80071de:	f840 ab04 	str.w	sl, [r0], #4
 80071e2:	eba0 0009 	sub.w	r0, r0, r9
 80071e6:	1080      	asrs	r0, r0, #2
 80071e8:	6128      	str	r0, [r5, #16]
 80071ea:	0147      	lsls	r7, r0, #5
 80071ec:	4650      	mov	r0, sl
 80071ee:	f000 fb80 	bl	80078f2 <__hi0bits>
 80071f2:	f8d8 6000 	ldr.w	r6, [r8]
 80071f6:	1a3f      	subs	r7, r7, r0
 80071f8:	42b7      	cmp	r7, r6
 80071fa:	dd64      	ble.n	80072c6 <__gethex+0x260>
 80071fc:	1bbf      	subs	r7, r7, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	4628      	mov	r0, r5
 8007202:	f000 fe8f 	bl	8007f24 <__any_on>
 8007206:	4682      	mov	sl, r0
 8007208:	b178      	cbz	r0, 800722a <__gethex+0x1c4>
 800720a:	1e7b      	subs	r3, r7, #1
 800720c:	1159      	asrs	r1, r3, #5
 800720e:	f003 021f 	and.w	r2, r3, #31
 8007212:	f04f 0a01 	mov.w	sl, #1
 8007216:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800721a:	fa0a f202 	lsl.w	r2, sl, r2
 800721e:	420a      	tst	r2, r1
 8007220:	d003      	beq.n	800722a <__gethex+0x1c4>
 8007222:	4553      	cmp	r3, sl
 8007224:	dc46      	bgt.n	80072b4 <__gethex+0x24e>
 8007226:	f04f 0a02 	mov.w	sl, #2
 800722a:	4639      	mov	r1, r7
 800722c:	4628      	mov	r0, r5
 800722e:	f7ff fecb 	bl	8006fc8 <rshift>
 8007232:	443c      	add	r4, r7
 8007234:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007238:	42a3      	cmp	r3, r4
 800723a:	da52      	bge.n	80072e2 <__gethex+0x27c>
 800723c:	4629      	mov	r1, r5
 800723e:	9802      	ldr	r0, [sp, #8]
 8007240:	f000 fac7 	bl	80077d2 <_Bfree>
 8007244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007246:	2300      	movs	r3, #0
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	27a3      	movs	r7, #163	; 0xa3
 800724c:	e793      	b.n	8007176 <__gethex+0x110>
 800724e:	3101      	adds	r1, #1
 8007250:	105b      	asrs	r3, r3, #1
 8007252:	e7b0      	b.n	80071b6 <__gethex+0x150>
 8007254:	1e73      	subs	r3, r6, #1
 8007256:	9305      	str	r3, [sp, #20]
 8007258:	9a07      	ldr	r2, [sp, #28]
 800725a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800725e:	4293      	cmp	r3, r2
 8007260:	d018      	beq.n	8007294 <__gethex+0x22e>
 8007262:	f1bb 0f20 	cmp.w	fp, #32
 8007266:	d107      	bne.n	8007278 <__gethex+0x212>
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	f8c3 a000 	str.w	sl, [r3]
 800726e:	3304      	adds	r3, #4
 8007270:	f04f 0a00 	mov.w	sl, #0
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	46d3      	mov	fp, sl
 8007278:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800727c:	f7ff fede 	bl	800703c <__hexdig_fun>
 8007280:	f000 000f 	and.w	r0, r0, #15
 8007284:	fa00 f00b 	lsl.w	r0, r0, fp
 8007288:	ea4a 0a00 	orr.w	sl, sl, r0
 800728c:	f10b 0b04 	add.w	fp, fp, #4
 8007290:	9b05      	ldr	r3, [sp, #20]
 8007292:	e00d      	b.n	80072b0 <__gethex+0x24a>
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	9a08      	ldr	r2, [sp, #32]
 8007298:	4413      	add	r3, r2
 800729a:	42bb      	cmp	r3, r7
 800729c:	d3e1      	bcc.n	8007262 <__gethex+0x1fc>
 800729e:	4618      	mov	r0, r3
 80072a0:	9a01      	ldr	r2, [sp, #4]
 80072a2:	9903      	ldr	r1, [sp, #12]
 80072a4:	9309      	str	r3, [sp, #36]	; 0x24
 80072a6:	f001 fdce 	bl	8008e46 <strncmp>
 80072aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1d8      	bne.n	8007262 <__gethex+0x1fc>
 80072b0:	461e      	mov	r6, r3
 80072b2:	e791      	b.n	80071d8 <__gethex+0x172>
 80072b4:	1eb9      	subs	r1, r7, #2
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 fe34 	bl	8007f24 <__any_on>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d0b2      	beq.n	8007226 <__gethex+0x1c0>
 80072c0:	f04f 0a03 	mov.w	sl, #3
 80072c4:	e7b1      	b.n	800722a <__gethex+0x1c4>
 80072c6:	da09      	bge.n	80072dc <__gethex+0x276>
 80072c8:	1bf7      	subs	r7, r6, r7
 80072ca:	4629      	mov	r1, r5
 80072cc:	463a      	mov	r2, r7
 80072ce:	9802      	ldr	r0, [sp, #8]
 80072d0:	f000 fc4a 	bl	8007b68 <__lshift>
 80072d4:	1be4      	subs	r4, r4, r7
 80072d6:	4605      	mov	r5, r0
 80072d8:	f100 0914 	add.w	r9, r0, #20
 80072dc:	f04f 0a00 	mov.w	sl, #0
 80072e0:	e7a8      	b.n	8007234 <__gethex+0x1ce>
 80072e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072e6:	42a0      	cmp	r0, r4
 80072e8:	dd6a      	ble.n	80073c0 <__gethex+0x35a>
 80072ea:	1b04      	subs	r4, r0, r4
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	dc2e      	bgt.n	800734e <__gethex+0x2e8>
 80072f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d022      	beq.n	800733e <__gethex+0x2d8>
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d024      	beq.n	8007346 <__gethex+0x2e0>
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d115      	bne.n	800732c <__gethex+0x2c6>
 8007300:	42a6      	cmp	r6, r4
 8007302:	d113      	bne.n	800732c <__gethex+0x2c6>
 8007304:	2e01      	cmp	r6, #1
 8007306:	dc0b      	bgt.n	8007320 <__gethex+0x2ba>
 8007308:	9a06      	ldr	r2, [sp, #24]
 800730a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	2301      	movs	r3, #1
 8007312:	612b      	str	r3, [r5, #16]
 8007314:	f8c9 3000 	str.w	r3, [r9]
 8007318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800731a:	2762      	movs	r7, #98	; 0x62
 800731c:	601d      	str	r5, [r3, #0]
 800731e:	e72a      	b.n	8007176 <__gethex+0x110>
 8007320:	1e71      	subs	r1, r6, #1
 8007322:	4628      	mov	r0, r5
 8007324:	f000 fdfe 	bl	8007f24 <__any_on>
 8007328:	2800      	cmp	r0, #0
 800732a:	d1ed      	bne.n	8007308 <__gethex+0x2a2>
 800732c:	4629      	mov	r1, r5
 800732e:	9802      	ldr	r0, [sp, #8]
 8007330:	f000 fa4f 	bl	80077d2 <_Bfree>
 8007334:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007336:	2300      	movs	r3, #0
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	2750      	movs	r7, #80	; 0x50
 800733c:	e71b      	b.n	8007176 <__gethex+0x110>
 800733e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0e1      	beq.n	8007308 <__gethex+0x2a2>
 8007344:	e7f2      	b.n	800732c <__gethex+0x2c6>
 8007346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1dd      	bne.n	8007308 <__gethex+0x2a2>
 800734c:	e7ee      	b.n	800732c <__gethex+0x2c6>
 800734e:	1e67      	subs	r7, r4, #1
 8007350:	f1ba 0f00 	cmp.w	sl, #0
 8007354:	d131      	bne.n	80073ba <__gethex+0x354>
 8007356:	b127      	cbz	r7, 8007362 <__gethex+0x2fc>
 8007358:	4639      	mov	r1, r7
 800735a:	4628      	mov	r0, r5
 800735c:	f000 fde2 	bl	8007f24 <__any_on>
 8007360:	4682      	mov	sl, r0
 8007362:	117a      	asrs	r2, r7, #5
 8007364:	2301      	movs	r3, #1
 8007366:	f007 071f 	and.w	r7, r7, #31
 800736a:	fa03 f707 	lsl.w	r7, r3, r7
 800736e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007372:	4621      	mov	r1, r4
 8007374:	421f      	tst	r7, r3
 8007376:	4628      	mov	r0, r5
 8007378:	bf18      	it	ne
 800737a:	f04a 0a02 	orrne.w	sl, sl, #2
 800737e:	1b36      	subs	r6, r6, r4
 8007380:	f7ff fe22 	bl	8006fc8 <rshift>
 8007384:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007388:	2702      	movs	r7, #2
 800738a:	f1ba 0f00 	cmp.w	sl, #0
 800738e:	d048      	beq.n	8007422 <__gethex+0x3bc>
 8007390:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d015      	beq.n	80073c4 <__gethex+0x35e>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d017      	beq.n	80073cc <__gethex+0x366>
 800739c:	2b01      	cmp	r3, #1
 800739e:	d109      	bne.n	80073b4 <__gethex+0x34e>
 80073a0:	f01a 0f02 	tst.w	sl, #2
 80073a4:	d006      	beq.n	80073b4 <__gethex+0x34e>
 80073a6:	f8d9 3000 	ldr.w	r3, [r9]
 80073aa:	ea4a 0a03 	orr.w	sl, sl, r3
 80073ae:	f01a 0f01 	tst.w	sl, #1
 80073b2:	d10e      	bne.n	80073d2 <__gethex+0x36c>
 80073b4:	f047 0710 	orr.w	r7, r7, #16
 80073b8:	e033      	b.n	8007422 <__gethex+0x3bc>
 80073ba:	f04f 0a01 	mov.w	sl, #1
 80073be:	e7d0      	b.n	8007362 <__gethex+0x2fc>
 80073c0:	2701      	movs	r7, #1
 80073c2:	e7e2      	b.n	800738a <__gethex+0x324>
 80073c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c6:	f1c3 0301 	rsb	r3, r3, #1
 80073ca:	9315      	str	r3, [sp, #84]	; 0x54
 80073cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <__gethex+0x34e>
 80073d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80073d6:	f105 0314 	add.w	r3, r5, #20
 80073da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80073de:	eb03 010a 	add.w	r1, r3, sl
 80073e2:	f04f 0c00 	mov.w	ip, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80073f0:	d01c      	beq.n	800742c <__gethex+0x3c6>
 80073f2:	3201      	adds	r2, #1
 80073f4:	6002      	str	r2, [r0, #0]
 80073f6:	2f02      	cmp	r7, #2
 80073f8:	f105 0314 	add.w	r3, r5, #20
 80073fc:	d138      	bne.n	8007470 <__gethex+0x40a>
 80073fe:	f8d8 2000 	ldr.w	r2, [r8]
 8007402:	3a01      	subs	r2, #1
 8007404:	42b2      	cmp	r2, r6
 8007406:	d10a      	bne.n	800741e <__gethex+0x3b8>
 8007408:	1171      	asrs	r1, r6, #5
 800740a:	2201      	movs	r2, #1
 800740c:	f006 061f 	and.w	r6, r6, #31
 8007410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007414:	fa02 f606 	lsl.w	r6, r2, r6
 8007418:	421e      	tst	r6, r3
 800741a:	bf18      	it	ne
 800741c:	4617      	movne	r7, r2
 800741e:	f047 0720 	orr.w	r7, r7, #32
 8007422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007424:	601d      	str	r5, [r3, #0]
 8007426:	9b06      	ldr	r3, [sp, #24]
 8007428:	601c      	str	r4, [r3, #0]
 800742a:	e6a4      	b.n	8007176 <__gethex+0x110>
 800742c:	4299      	cmp	r1, r3
 800742e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007432:	d8d8      	bhi.n	80073e6 <__gethex+0x380>
 8007434:	68ab      	ldr	r3, [r5, #8]
 8007436:	4599      	cmp	r9, r3
 8007438:	db12      	blt.n	8007460 <__gethex+0x3fa>
 800743a:	6869      	ldr	r1, [r5, #4]
 800743c:	9802      	ldr	r0, [sp, #8]
 800743e:	3101      	adds	r1, #1
 8007440:	f000 f993 	bl	800776a <_Balloc>
 8007444:	692a      	ldr	r2, [r5, #16]
 8007446:	3202      	adds	r2, #2
 8007448:	f105 010c 	add.w	r1, r5, #12
 800744c:	4683      	mov	fp, r0
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	300c      	adds	r0, #12
 8007452:	f000 f97f 	bl	8007754 <memcpy>
 8007456:	4629      	mov	r1, r5
 8007458:	9802      	ldr	r0, [sp, #8]
 800745a:	f000 f9ba 	bl	80077d2 <_Bfree>
 800745e:	465d      	mov	r5, fp
 8007460:	692b      	ldr	r3, [r5, #16]
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007468:	612a      	str	r2, [r5, #16]
 800746a:	2201      	movs	r2, #1
 800746c:	615a      	str	r2, [r3, #20]
 800746e:	e7c2      	b.n	80073f6 <__gethex+0x390>
 8007470:	692a      	ldr	r2, [r5, #16]
 8007472:	454a      	cmp	r2, r9
 8007474:	dd0b      	ble.n	800748e <__gethex+0x428>
 8007476:	2101      	movs	r1, #1
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff fda5 	bl	8006fc8 <rshift>
 800747e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007482:	3401      	adds	r4, #1
 8007484:	42a3      	cmp	r3, r4
 8007486:	f6ff aed9 	blt.w	800723c <__gethex+0x1d6>
 800748a:	2701      	movs	r7, #1
 800748c:	e7c7      	b.n	800741e <__gethex+0x3b8>
 800748e:	f016 061f 	ands.w	r6, r6, #31
 8007492:	d0fa      	beq.n	800748a <__gethex+0x424>
 8007494:	449a      	add	sl, r3
 8007496:	f1c6 0620 	rsb	r6, r6, #32
 800749a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800749e:	f000 fa28 	bl	80078f2 <__hi0bits>
 80074a2:	42b0      	cmp	r0, r6
 80074a4:	dbe7      	blt.n	8007476 <__gethex+0x410>
 80074a6:	e7f0      	b.n	800748a <__gethex+0x424>

080074a8 <L_shift>:
 80074a8:	f1c2 0208 	rsb	r2, r2, #8
 80074ac:	0092      	lsls	r2, r2, #2
 80074ae:	b570      	push	{r4, r5, r6, lr}
 80074b0:	f1c2 0620 	rsb	r6, r2, #32
 80074b4:	6843      	ldr	r3, [r0, #4]
 80074b6:	6804      	ldr	r4, [r0, #0]
 80074b8:	fa03 f506 	lsl.w	r5, r3, r6
 80074bc:	432c      	orrs	r4, r5
 80074be:	40d3      	lsrs	r3, r2
 80074c0:	6004      	str	r4, [r0, #0]
 80074c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80074c6:	4288      	cmp	r0, r1
 80074c8:	d3f4      	bcc.n	80074b4 <L_shift+0xc>
 80074ca:	bd70      	pop	{r4, r5, r6, pc}

080074cc <__match>:
 80074cc:	b530      	push	{r4, r5, lr}
 80074ce:	6803      	ldr	r3, [r0, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d6:	b914      	cbnz	r4, 80074de <__match+0x12>
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	2001      	movs	r0, #1
 80074dc:	bd30      	pop	{r4, r5, pc}
 80074de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80074e6:	2d19      	cmp	r5, #25
 80074e8:	bf98      	it	ls
 80074ea:	3220      	addls	r2, #32
 80074ec:	42a2      	cmp	r2, r4
 80074ee:	d0f0      	beq.n	80074d2 <__match+0x6>
 80074f0:	2000      	movs	r0, #0
 80074f2:	e7f3      	b.n	80074dc <__match+0x10>

080074f4 <__hexnan>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	680b      	ldr	r3, [r1, #0]
 80074fa:	6801      	ldr	r1, [r0, #0]
 80074fc:	115f      	asrs	r7, r3, #5
 80074fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007502:	f013 031f 	ands.w	r3, r3, #31
 8007506:	b087      	sub	sp, #28
 8007508:	bf18      	it	ne
 800750a:	3704      	addne	r7, #4
 800750c:	2500      	movs	r5, #0
 800750e:	1f3e      	subs	r6, r7, #4
 8007510:	4682      	mov	sl, r0
 8007512:	4690      	mov	r8, r2
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f847 5c04 	str.w	r5, [r7, #-4]
 800751a:	46b1      	mov	r9, r6
 800751c:	4634      	mov	r4, r6
 800751e:	9502      	str	r5, [sp, #8]
 8007520:	46ab      	mov	fp, r5
 8007522:	784a      	ldrb	r2, [r1, #1]
 8007524:	1c4b      	adds	r3, r1, #1
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	b342      	cbz	r2, 800757c <__hexnan+0x88>
 800752a:	4610      	mov	r0, r2
 800752c:	9105      	str	r1, [sp, #20]
 800752e:	9204      	str	r2, [sp, #16]
 8007530:	f7ff fd84 	bl	800703c <__hexdig_fun>
 8007534:	2800      	cmp	r0, #0
 8007536:	d143      	bne.n	80075c0 <__hexnan+0xcc>
 8007538:	9a04      	ldr	r2, [sp, #16]
 800753a:	9905      	ldr	r1, [sp, #20]
 800753c:	2a20      	cmp	r2, #32
 800753e:	d818      	bhi.n	8007572 <__hexnan+0x7e>
 8007540:	9b02      	ldr	r3, [sp, #8]
 8007542:	459b      	cmp	fp, r3
 8007544:	dd13      	ble.n	800756e <__hexnan+0x7a>
 8007546:	454c      	cmp	r4, r9
 8007548:	d206      	bcs.n	8007558 <__hexnan+0x64>
 800754a:	2d07      	cmp	r5, #7
 800754c:	dc04      	bgt.n	8007558 <__hexnan+0x64>
 800754e:	462a      	mov	r2, r5
 8007550:	4649      	mov	r1, r9
 8007552:	4620      	mov	r0, r4
 8007554:	f7ff ffa8 	bl	80074a8 <L_shift>
 8007558:	4544      	cmp	r4, r8
 800755a:	d944      	bls.n	80075e6 <__hexnan+0xf2>
 800755c:	2300      	movs	r3, #0
 800755e:	f1a4 0904 	sub.w	r9, r4, #4
 8007562:	f844 3c04 	str.w	r3, [r4, #-4]
 8007566:	f8cd b008 	str.w	fp, [sp, #8]
 800756a:	464c      	mov	r4, r9
 800756c:	461d      	mov	r5, r3
 800756e:	9903      	ldr	r1, [sp, #12]
 8007570:	e7d7      	b.n	8007522 <__hexnan+0x2e>
 8007572:	2a29      	cmp	r2, #41	; 0x29
 8007574:	d14a      	bne.n	800760c <__hexnan+0x118>
 8007576:	3102      	adds	r1, #2
 8007578:	f8ca 1000 	str.w	r1, [sl]
 800757c:	f1bb 0f00 	cmp.w	fp, #0
 8007580:	d044      	beq.n	800760c <__hexnan+0x118>
 8007582:	454c      	cmp	r4, r9
 8007584:	d206      	bcs.n	8007594 <__hexnan+0xa0>
 8007586:	2d07      	cmp	r5, #7
 8007588:	dc04      	bgt.n	8007594 <__hexnan+0xa0>
 800758a:	462a      	mov	r2, r5
 800758c:	4649      	mov	r1, r9
 800758e:	4620      	mov	r0, r4
 8007590:	f7ff ff8a 	bl	80074a8 <L_shift>
 8007594:	4544      	cmp	r4, r8
 8007596:	d928      	bls.n	80075ea <__hexnan+0xf6>
 8007598:	4643      	mov	r3, r8
 800759a:	f854 2b04 	ldr.w	r2, [r4], #4
 800759e:	f843 2b04 	str.w	r2, [r3], #4
 80075a2:	42a6      	cmp	r6, r4
 80075a4:	d2f9      	bcs.n	800759a <__hexnan+0xa6>
 80075a6:	2200      	movs	r2, #0
 80075a8:	f843 2b04 	str.w	r2, [r3], #4
 80075ac:	429e      	cmp	r6, r3
 80075ae:	d2fb      	bcs.n	80075a8 <__hexnan+0xb4>
 80075b0:	6833      	ldr	r3, [r6, #0]
 80075b2:	b91b      	cbnz	r3, 80075bc <__hexnan+0xc8>
 80075b4:	4546      	cmp	r6, r8
 80075b6:	d127      	bne.n	8007608 <__hexnan+0x114>
 80075b8:	2301      	movs	r3, #1
 80075ba:	6033      	str	r3, [r6, #0]
 80075bc:	2005      	movs	r0, #5
 80075be:	e026      	b.n	800760e <__hexnan+0x11a>
 80075c0:	3501      	adds	r5, #1
 80075c2:	2d08      	cmp	r5, #8
 80075c4:	f10b 0b01 	add.w	fp, fp, #1
 80075c8:	dd06      	ble.n	80075d8 <__hexnan+0xe4>
 80075ca:	4544      	cmp	r4, r8
 80075cc:	d9cf      	bls.n	800756e <__hexnan+0x7a>
 80075ce:	2300      	movs	r3, #0
 80075d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80075d4:	2501      	movs	r5, #1
 80075d6:	3c04      	subs	r4, #4
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	f000 000f 	and.w	r0, r0, #15
 80075de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	e7c3      	b.n	800756e <__hexnan+0x7a>
 80075e6:	2508      	movs	r5, #8
 80075e8:	e7c1      	b.n	800756e <__hexnan+0x7a>
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0df      	beq.n	80075b0 <__hexnan+0xbc>
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295
 80075f4:	f1c3 0320 	rsb	r3, r3, #32
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
 80075fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007600:	401a      	ands	r2, r3
 8007602:	f847 2c04 	str.w	r2, [r7, #-4]
 8007606:	e7d3      	b.n	80075b0 <__hexnan+0xbc>
 8007608:	3e04      	subs	r6, #4
 800760a:	e7d1      	b.n	80075b0 <__hexnan+0xbc>
 800760c:	2004      	movs	r0, #4
 800760e:	b007      	add	sp, #28
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007614 <__locale_ctype_ptr_l>:
 8007614:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007618:	4770      	bx	lr
	...

0800761c <__locale_ctype_ptr>:
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <__locale_ctype_ptr+0x14>)
 800761e:	4a05      	ldr	r2, [pc, #20]	; (8007634 <__locale_ctype_ptr+0x18>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	2b00      	cmp	r3, #0
 8007626:	bf08      	it	eq
 8007628:	4613      	moveq	r3, r2
 800762a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800762e:	4770      	bx	lr
 8007630:	2000000c 	.word	0x2000000c
 8007634:	20000070 	.word	0x20000070

08007638 <__localeconv_l>:
 8007638:	30f0      	adds	r0, #240	; 0xf0
 800763a:	4770      	bx	lr

0800763c <_localeconv_r>:
 800763c:	4b04      	ldr	r3, [pc, #16]	; (8007650 <_localeconv_r+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a18      	ldr	r0, [r3, #32]
 8007642:	4b04      	ldr	r3, [pc, #16]	; (8007654 <_localeconv_r+0x18>)
 8007644:	2800      	cmp	r0, #0
 8007646:	bf08      	it	eq
 8007648:	4618      	moveq	r0, r3
 800764a:	30f0      	adds	r0, #240	; 0xf0
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	2000000c 	.word	0x2000000c
 8007654:	20000070 	.word	0x20000070

08007658 <__swhatbuf_r>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	460e      	mov	r6, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2900      	cmp	r1, #0
 8007662:	b096      	sub	sp, #88	; 0x58
 8007664:	4614      	mov	r4, r2
 8007666:	461d      	mov	r5, r3
 8007668:	da07      	bge.n	800767a <__swhatbuf_r+0x22>
 800766a:	2300      	movs	r3, #0
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	89b3      	ldrh	r3, [r6, #12]
 8007670:	061a      	lsls	r2, r3, #24
 8007672:	d410      	bmi.n	8007696 <__swhatbuf_r+0x3e>
 8007674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007678:	e00e      	b.n	8007698 <__swhatbuf_r+0x40>
 800767a:	466a      	mov	r2, sp
 800767c:	f001 fdea 	bl	8009254 <_fstat_r>
 8007680:	2800      	cmp	r0, #0
 8007682:	dbf2      	blt.n	800766a <__swhatbuf_r+0x12>
 8007684:	9a01      	ldr	r2, [sp, #4]
 8007686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800768a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800768e:	425a      	negs	r2, r3
 8007690:	415a      	adcs	r2, r3
 8007692:	602a      	str	r2, [r5, #0]
 8007694:	e7ee      	b.n	8007674 <__swhatbuf_r+0x1c>
 8007696:	2340      	movs	r3, #64	; 0x40
 8007698:	2000      	movs	r0, #0
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	b016      	add	sp, #88	; 0x58
 800769e:	bd70      	pop	{r4, r5, r6, pc}

080076a0 <__smakebuf_r>:
 80076a0:	898b      	ldrh	r3, [r1, #12]
 80076a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a4:	079d      	lsls	r5, r3, #30
 80076a6:	4606      	mov	r6, r0
 80076a8:	460c      	mov	r4, r1
 80076aa:	d507      	bpl.n	80076bc <__smakebuf_r+0x1c>
 80076ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	2301      	movs	r3, #1
 80076b6:	6163      	str	r3, [r4, #20]
 80076b8:	b002      	add	sp, #8
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	ab01      	add	r3, sp, #4
 80076be:	466a      	mov	r2, sp
 80076c0:	f7ff ffca 	bl	8007658 <__swhatbuf_r>
 80076c4:	9900      	ldr	r1, [sp, #0]
 80076c6:	4605      	mov	r5, r0
 80076c8:	4630      	mov	r0, r6
 80076ca:	f000 fca9 	bl	8008020 <_malloc_r>
 80076ce:	b948      	cbnz	r0, 80076e4 <__smakebuf_r+0x44>
 80076d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d4ef      	bmi.n	80076b8 <__smakebuf_r+0x18>
 80076d8:	f023 0303 	bic.w	r3, r3, #3
 80076dc:	f043 0302 	orr.w	r3, r3, #2
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	e7e3      	b.n	80076ac <__smakebuf_r+0xc>
 80076e4:	4b0d      	ldr	r3, [pc, #52]	; (800771c <__smakebuf_r+0x7c>)
 80076e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	6163      	str	r3, [r4, #20]
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	6120      	str	r0, [r4, #16]
 80076fa:	b15b      	cbz	r3, 8007714 <__smakebuf_r+0x74>
 80076fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007700:	4630      	mov	r0, r6
 8007702:	f001 fdb9 	bl	8009278 <_isatty_r>
 8007706:	b128      	cbz	r0, 8007714 <__smakebuf_r+0x74>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	431d      	orrs	r5, r3
 8007718:	81a5      	strh	r5, [r4, #12]
 800771a:	e7cd      	b.n	80076b8 <__smakebuf_r+0x18>
 800771c:	08006e45 	.word	0x08006e45

08007720 <malloc>:
 8007720:	4b02      	ldr	r3, [pc, #8]	; (800772c <malloc+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f000 bc7b 	b.w	8008020 <_malloc_r>
 800772a:	bf00      	nop
 800772c:	2000000c 	.word	0x2000000c

08007730 <__ascii_mbtowc>:
 8007730:	b082      	sub	sp, #8
 8007732:	b901      	cbnz	r1, 8007736 <__ascii_mbtowc+0x6>
 8007734:	a901      	add	r1, sp, #4
 8007736:	b142      	cbz	r2, 800774a <__ascii_mbtowc+0x1a>
 8007738:	b14b      	cbz	r3, 800774e <__ascii_mbtowc+0x1e>
 800773a:	7813      	ldrb	r3, [r2, #0]
 800773c:	600b      	str	r3, [r1, #0]
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	1c10      	adds	r0, r2, #0
 8007742:	bf18      	it	ne
 8007744:	2001      	movne	r0, #1
 8007746:	b002      	add	sp, #8
 8007748:	4770      	bx	lr
 800774a:	4610      	mov	r0, r2
 800774c:	e7fb      	b.n	8007746 <__ascii_mbtowc+0x16>
 800774e:	f06f 0001 	mvn.w	r0, #1
 8007752:	e7f8      	b.n	8007746 <__ascii_mbtowc+0x16>

08007754 <memcpy>:
 8007754:	b510      	push	{r4, lr}
 8007756:	1e43      	subs	r3, r0, #1
 8007758:	440a      	add	r2, r1
 800775a:	4291      	cmp	r1, r2
 800775c:	d100      	bne.n	8007760 <memcpy+0xc>
 800775e:	bd10      	pop	{r4, pc}
 8007760:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007768:	e7f7      	b.n	800775a <memcpy+0x6>

0800776a <_Balloc>:
 800776a:	b570      	push	{r4, r5, r6, lr}
 800776c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800776e:	4604      	mov	r4, r0
 8007770:	460e      	mov	r6, r1
 8007772:	b93d      	cbnz	r5, 8007784 <_Balloc+0x1a>
 8007774:	2010      	movs	r0, #16
 8007776:	f7ff ffd3 	bl	8007720 <malloc>
 800777a:	6260      	str	r0, [r4, #36]	; 0x24
 800777c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007780:	6005      	str	r5, [r0, #0]
 8007782:	60c5      	str	r5, [r0, #12]
 8007784:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007786:	68eb      	ldr	r3, [r5, #12]
 8007788:	b183      	cbz	r3, 80077ac <_Balloc+0x42>
 800778a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007792:	b9b8      	cbnz	r0, 80077c4 <_Balloc+0x5a>
 8007794:	2101      	movs	r1, #1
 8007796:	fa01 f506 	lsl.w	r5, r1, r6
 800779a:	1d6a      	adds	r2, r5, #5
 800779c:	0092      	lsls	r2, r2, #2
 800779e:	4620      	mov	r0, r4
 80077a0:	f000 fbe1 	bl	8007f66 <_calloc_r>
 80077a4:	b160      	cbz	r0, 80077c0 <_Balloc+0x56>
 80077a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80077aa:	e00e      	b.n	80077ca <_Balloc+0x60>
 80077ac:	2221      	movs	r2, #33	; 0x21
 80077ae:	2104      	movs	r1, #4
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fbd8 	bl	8007f66 <_calloc_r>
 80077b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b8:	60e8      	str	r0, [r5, #12]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e4      	bne.n	800778a <_Balloc+0x20>
 80077c0:	2000      	movs	r0, #0
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	6802      	ldr	r2, [r0, #0]
 80077c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80077ca:	2300      	movs	r3, #0
 80077cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077d0:	e7f7      	b.n	80077c2 <_Balloc+0x58>

080077d2 <_Bfree>:
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80077d6:	4606      	mov	r6, r0
 80077d8:	460d      	mov	r5, r1
 80077da:	b93c      	cbnz	r4, 80077ec <_Bfree+0x1a>
 80077dc:	2010      	movs	r0, #16
 80077de:	f7ff ff9f 	bl	8007720 <malloc>
 80077e2:	6270      	str	r0, [r6, #36]	; 0x24
 80077e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077e8:	6004      	str	r4, [r0, #0]
 80077ea:	60c4      	str	r4, [r0, #12]
 80077ec:	b13d      	cbz	r5, 80077fe <_Bfree+0x2c>
 80077ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077f0:	686a      	ldr	r2, [r5, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077f8:	6029      	str	r1, [r5, #0]
 80077fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80077fe:	bd70      	pop	{r4, r5, r6, pc}

08007800 <__multadd>:
 8007800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007804:	690d      	ldr	r5, [r1, #16]
 8007806:	461f      	mov	r7, r3
 8007808:	4606      	mov	r6, r0
 800780a:	460c      	mov	r4, r1
 800780c:	f101 0c14 	add.w	ip, r1, #20
 8007810:	2300      	movs	r3, #0
 8007812:	f8dc 0000 	ldr.w	r0, [ip]
 8007816:	b281      	uxth	r1, r0
 8007818:	fb02 7101 	mla	r1, r2, r1, r7
 800781c:	0c0f      	lsrs	r7, r1, #16
 800781e:	0c00      	lsrs	r0, r0, #16
 8007820:	fb02 7000 	mla	r0, r2, r0, r7
 8007824:	b289      	uxth	r1, r1
 8007826:	3301      	adds	r3, #1
 8007828:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800782c:	429d      	cmp	r5, r3
 800782e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007832:	f84c 1b04 	str.w	r1, [ip], #4
 8007836:	dcec      	bgt.n	8007812 <__multadd+0x12>
 8007838:	b1d7      	cbz	r7, 8007870 <__multadd+0x70>
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	42ab      	cmp	r3, r5
 800783e:	dc12      	bgt.n	8007866 <__multadd+0x66>
 8007840:	6861      	ldr	r1, [r4, #4]
 8007842:	4630      	mov	r0, r6
 8007844:	3101      	adds	r1, #1
 8007846:	f7ff ff90 	bl	800776a <_Balloc>
 800784a:	6922      	ldr	r2, [r4, #16]
 800784c:	3202      	adds	r2, #2
 800784e:	f104 010c 	add.w	r1, r4, #12
 8007852:	4680      	mov	r8, r0
 8007854:	0092      	lsls	r2, r2, #2
 8007856:	300c      	adds	r0, #12
 8007858:	f7ff ff7c 	bl	8007754 <memcpy>
 800785c:	4621      	mov	r1, r4
 800785e:	4630      	mov	r0, r6
 8007860:	f7ff ffb7 	bl	80077d2 <_Bfree>
 8007864:	4644      	mov	r4, r8
 8007866:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800786a:	3501      	adds	r5, #1
 800786c:	615f      	str	r7, [r3, #20]
 800786e:	6125      	str	r5, [r4, #16]
 8007870:	4620      	mov	r0, r4
 8007872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007876 <__s2b>:
 8007876:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787a:	460c      	mov	r4, r1
 800787c:	4615      	mov	r5, r2
 800787e:	461f      	mov	r7, r3
 8007880:	2209      	movs	r2, #9
 8007882:	3308      	adds	r3, #8
 8007884:	4606      	mov	r6, r0
 8007886:	fb93 f3f2 	sdiv	r3, r3, r2
 800788a:	2100      	movs	r1, #0
 800788c:	2201      	movs	r2, #1
 800788e:	429a      	cmp	r2, r3
 8007890:	db20      	blt.n	80078d4 <__s2b+0x5e>
 8007892:	4630      	mov	r0, r6
 8007894:	f7ff ff69 	bl	800776a <_Balloc>
 8007898:	9b08      	ldr	r3, [sp, #32]
 800789a:	6143      	str	r3, [r0, #20]
 800789c:	2d09      	cmp	r5, #9
 800789e:	f04f 0301 	mov.w	r3, #1
 80078a2:	6103      	str	r3, [r0, #16]
 80078a4:	dd19      	ble.n	80078da <__s2b+0x64>
 80078a6:	f104 0809 	add.w	r8, r4, #9
 80078aa:	46c1      	mov	r9, r8
 80078ac:	442c      	add	r4, r5
 80078ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80078b2:	4601      	mov	r1, r0
 80078b4:	3b30      	subs	r3, #48	; 0x30
 80078b6:	220a      	movs	r2, #10
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff ffa1 	bl	8007800 <__multadd>
 80078be:	45a1      	cmp	r9, r4
 80078c0:	d1f5      	bne.n	80078ae <__s2b+0x38>
 80078c2:	eb08 0405 	add.w	r4, r8, r5
 80078c6:	3c08      	subs	r4, #8
 80078c8:	1b2d      	subs	r5, r5, r4
 80078ca:	1963      	adds	r3, r4, r5
 80078cc:	42bb      	cmp	r3, r7
 80078ce:	db07      	blt.n	80078e0 <__s2b+0x6a>
 80078d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d4:	0052      	lsls	r2, r2, #1
 80078d6:	3101      	adds	r1, #1
 80078d8:	e7d9      	b.n	800788e <__s2b+0x18>
 80078da:	340a      	adds	r4, #10
 80078dc:	2509      	movs	r5, #9
 80078de:	e7f3      	b.n	80078c8 <__s2b+0x52>
 80078e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078e4:	4601      	mov	r1, r0
 80078e6:	3b30      	subs	r3, #48	; 0x30
 80078e8:	220a      	movs	r2, #10
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff88 	bl	8007800 <__multadd>
 80078f0:	e7eb      	b.n	80078ca <__s2b+0x54>

080078f2 <__hi0bits>:
 80078f2:	0c02      	lsrs	r2, r0, #16
 80078f4:	0412      	lsls	r2, r2, #16
 80078f6:	4603      	mov	r3, r0
 80078f8:	b9b2      	cbnz	r2, 8007928 <__hi0bits+0x36>
 80078fa:	0403      	lsls	r3, r0, #16
 80078fc:	2010      	movs	r0, #16
 80078fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007902:	bf04      	itt	eq
 8007904:	021b      	lsleq	r3, r3, #8
 8007906:	3008      	addeq	r0, #8
 8007908:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800790c:	bf04      	itt	eq
 800790e:	011b      	lsleq	r3, r3, #4
 8007910:	3004      	addeq	r0, #4
 8007912:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007916:	bf04      	itt	eq
 8007918:	009b      	lsleq	r3, r3, #2
 800791a:	3002      	addeq	r0, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	db06      	blt.n	800792e <__hi0bits+0x3c>
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	d503      	bpl.n	800792c <__hi0bits+0x3a>
 8007924:	3001      	adds	r0, #1
 8007926:	4770      	bx	lr
 8007928:	2000      	movs	r0, #0
 800792a:	e7e8      	b.n	80078fe <__hi0bits+0xc>
 800792c:	2020      	movs	r0, #32
 800792e:	4770      	bx	lr

08007930 <__lo0bits>:
 8007930:	6803      	ldr	r3, [r0, #0]
 8007932:	f013 0207 	ands.w	r2, r3, #7
 8007936:	4601      	mov	r1, r0
 8007938:	d00b      	beq.n	8007952 <__lo0bits+0x22>
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d423      	bmi.n	8007986 <__lo0bits+0x56>
 800793e:	0798      	lsls	r0, r3, #30
 8007940:	bf49      	itett	mi
 8007942:	085b      	lsrmi	r3, r3, #1
 8007944:	089b      	lsrpl	r3, r3, #2
 8007946:	2001      	movmi	r0, #1
 8007948:	600b      	strmi	r3, [r1, #0]
 800794a:	bf5c      	itt	pl
 800794c:	600b      	strpl	r3, [r1, #0]
 800794e:	2002      	movpl	r0, #2
 8007950:	4770      	bx	lr
 8007952:	b298      	uxth	r0, r3
 8007954:	b9a8      	cbnz	r0, 8007982 <__lo0bits+0x52>
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	2010      	movs	r0, #16
 800795a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800795e:	bf04      	itt	eq
 8007960:	0a1b      	lsreq	r3, r3, #8
 8007962:	3008      	addeq	r0, #8
 8007964:	071a      	lsls	r2, r3, #28
 8007966:	bf04      	itt	eq
 8007968:	091b      	lsreq	r3, r3, #4
 800796a:	3004      	addeq	r0, #4
 800796c:	079a      	lsls	r2, r3, #30
 800796e:	bf04      	itt	eq
 8007970:	089b      	lsreq	r3, r3, #2
 8007972:	3002      	addeq	r0, #2
 8007974:	07da      	lsls	r2, r3, #31
 8007976:	d402      	bmi.n	800797e <__lo0bits+0x4e>
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	d006      	beq.n	800798a <__lo0bits+0x5a>
 800797c:	3001      	adds	r0, #1
 800797e:	600b      	str	r3, [r1, #0]
 8007980:	4770      	bx	lr
 8007982:	4610      	mov	r0, r2
 8007984:	e7e9      	b.n	800795a <__lo0bits+0x2a>
 8007986:	2000      	movs	r0, #0
 8007988:	4770      	bx	lr
 800798a:	2020      	movs	r0, #32
 800798c:	4770      	bx	lr

0800798e <__i2b>:
 800798e:	b510      	push	{r4, lr}
 8007990:	460c      	mov	r4, r1
 8007992:	2101      	movs	r1, #1
 8007994:	f7ff fee9 	bl	800776a <_Balloc>
 8007998:	2201      	movs	r2, #1
 800799a:	6144      	str	r4, [r0, #20]
 800799c:	6102      	str	r2, [r0, #16]
 800799e:	bd10      	pop	{r4, pc}

080079a0 <__multiply>:
 80079a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4614      	mov	r4, r2
 80079a6:	690a      	ldr	r2, [r1, #16]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	bfb8      	it	lt
 80079ae:	460b      	movlt	r3, r1
 80079b0:	4688      	mov	r8, r1
 80079b2:	bfbc      	itt	lt
 80079b4:	46a0      	movlt	r8, r4
 80079b6:	461c      	movlt	r4, r3
 80079b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80079c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079c8:	eb07 0609 	add.w	r6, r7, r9
 80079cc:	42b3      	cmp	r3, r6
 80079ce:	bfb8      	it	lt
 80079d0:	3101      	addlt	r1, #1
 80079d2:	f7ff feca 	bl	800776a <_Balloc>
 80079d6:	f100 0514 	add.w	r5, r0, #20
 80079da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80079de:	462b      	mov	r3, r5
 80079e0:	2200      	movs	r2, #0
 80079e2:	4573      	cmp	r3, lr
 80079e4:	d316      	bcc.n	8007a14 <__multiply+0x74>
 80079e6:	f104 0214 	add.w	r2, r4, #20
 80079ea:	f108 0114 	add.w	r1, r8, #20
 80079ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80079f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	9b00      	ldr	r3, [sp, #0]
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d80c      	bhi.n	8007a1a <__multiply+0x7a>
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	dd03      	ble.n	8007a0c <__multiply+0x6c>
 8007a04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d05d      	beq.n	8007ac8 <__multiply+0x128>
 8007a0c:	6106      	str	r6, [r0, #16]
 8007a0e:	b003      	add	sp, #12
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	f843 2b04 	str.w	r2, [r3], #4
 8007a18:	e7e3      	b.n	80079e2 <__multiply+0x42>
 8007a1a:	f8b2 b000 	ldrh.w	fp, [r2]
 8007a1e:	f1bb 0f00 	cmp.w	fp, #0
 8007a22:	d023      	beq.n	8007a6c <__multiply+0xcc>
 8007a24:	4689      	mov	r9, r1
 8007a26:	46ac      	mov	ip, r5
 8007a28:	f04f 0800 	mov.w	r8, #0
 8007a2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a30:	f8dc a000 	ldr.w	sl, [ip]
 8007a34:	b2a3      	uxth	r3, r4
 8007a36:	fa1f fa8a 	uxth.w	sl, sl
 8007a3a:	fb0b a303 	mla	r3, fp, r3, sl
 8007a3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a42:	f8dc 4000 	ldr.w	r4, [ip]
 8007a46:	4443      	add	r3, r8
 8007a48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a4c:	fb0b 840a 	mla	r4, fp, sl, r8
 8007a50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007a54:	46e2      	mov	sl, ip
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a5c:	454f      	cmp	r7, r9
 8007a5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a62:	f84a 3b04 	str.w	r3, [sl], #4
 8007a66:	d82b      	bhi.n	8007ac0 <__multiply+0x120>
 8007a68:	f8cc 8004 	str.w	r8, [ip, #4]
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007a72:	3204      	adds	r2, #4
 8007a74:	f1ba 0f00 	cmp.w	sl, #0
 8007a78:	d020      	beq.n	8007abc <__multiply+0x11c>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	4689      	mov	r9, r1
 8007a7e:	46a8      	mov	r8, r5
 8007a80:	f04f 0b00 	mov.w	fp, #0
 8007a84:	f8b9 c000 	ldrh.w	ip, [r9]
 8007a88:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007a8c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007a90:	445c      	add	r4, fp
 8007a92:	46c4      	mov	ip, r8
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007aa2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	fb0a b303 	mla	r3, sl, r3, fp
 8007aac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ab0:	454f      	cmp	r7, r9
 8007ab2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007ab6:	d805      	bhi.n	8007ac4 <__multiply+0x124>
 8007ab8:	f8c8 3004 	str.w	r3, [r8, #4]
 8007abc:	3504      	adds	r5, #4
 8007abe:	e79b      	b.n	80079f8 <__multiply+0x58>
 8007ac0:	46d4      	mov	ip, sl
 8007ac2:	e7b3      	b.n	8007a2c <__multiply+0x8c>
 8007ac4:	46e0      	mov	r8, ip
 8007ac6:	e7dd      	b.n	8007a84 <__multiply+0xe4>
 8007ac8:	3e01      	subs	r6, #1
 8007aca:	e799      	b.n	8007a00 <__multiply+0x60>

08007acc <__pow5mult>:
 8007acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	4615      	mov	r5, r2
 8007ad2:	f012 0203 	ands.w	r2, r2, #3
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460f      	mov	r7, r1
 8007ada:	d007      	beq.n	8007aec <__pow5mult+0x20>
 8007adc:	3a01      	subs	r2, #1
 8007ade:	4c21      	ldr	r4, [pc, #132]	; (8007b64 <__pow5mult+0x98>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ae6:	f7ff fe8b 	bl	8007800 <__multadd>
 8007aea:	4607      	mov	r7, r0
 8007aec:	10ad      	asrs	r5, r5, #2
 8007aee:	d035      	beq.n	8007b5c <__pow5mult+0x90>
 8007af0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007af2:	b93c      	cbnz	r4, 8007b04 <__pow5mult+0x38>
 8007af4:	2010      	movs	r0, #16
 8007af6:	f7ff fe13 	bl	8007720 <malloc>
 8007afa:	6270      	str	r0, [r6, #36]	; 0x24
 8007afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b00:	6004      	str	r4, [r0, #0]
 8007b02:	60c4      	str	r4, [r0, #12]
 8007b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b0c:	b94c      	cbnz	r4, 8007b22 <__pow5mult+0x56>
 8007b0e:	f240 2171 	movw	r1, #625	; 0x271
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ff3b 	bl	800798e <__i2b>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b1e:	4604      	mov	r4, r0
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	07eb      	lsls	r3, r5, #31
 8007b28:	d50a      	bpl.n	8007b40 <__pow5mult+0x74>
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ff36 	bl	80079a0 <__multiply>
 8007b34:	4639      	mov	r1, r7
 8007b36:	4681      	mov	r9, r0
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff fe4a 	bl	80077d2 <_Bfree>
 8007b3e:	464f      	mov	r7, r9
 8007b40:	106d      	asrs	r5, r5, #1
 8007b42:	d00b      	beq.n	8007b5c <__pow5mult+0x90>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	b938      	cbnz	r0, 8007b58 <__pow5mult+0x8c>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff ff27 	bl	80079a0 <__multiply>
 8007b52:	6020      	str	r0, [r4, #0]
 8007b54:	f8c0 8000 	str.w	r8, [r0]
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e7e4      	b.n	8007b26 <__pow5mult+0x5a>
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b62:	bf00      	nop
 8007b64:	080096b0 	.word	0x080096b0

08007b68 <__lshift>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6849      	ldr	r1, [r1, #4]
 8007b76:	eb0a 0903 	add.w	r9, sl, r3
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	4616      	mov	r6, r2
 8007b80:	f109 0501 	add.w	r5, r9, #1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	db32      	blt.n	8007bee <__lshift+0x86>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fdee 	bl	800776a <_Balloc>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4680      	mov	r8, r0
 8007b92:	f100 0114 	add.w	r1, r0, #20
 8007b96:	461a      	mov	r2, r3
 8007b98:	4553      	cmp	r3, sl
 8007b9a:	db2b      	blt.n	8007bf4 <__lshift+0x8c>
 8007b9c:	6920      	ldr	r0, [r4, #16]
 8007b9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ba2:	f104 0314 	add.w	r3, r4, #20
 8007ba6:	f016 021f 	ands.w	r2, r6, #31
 8007baa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bb2:	d025      	beq.n	8007c00 <__lshift+0x98>
 8007bb4:	f1c2 0e20 	rsb	lr, r2, #32
 8007bb8:	2000      	movs	r0, #0
 8007bba:	681e      	ldr	r6, [r3, #0]
 8007bbc:	468a      	mov	sl, r1
 8007bbe:	4096      	lsls	r6, r2
 8007bc0:	4330      	orrs	r0, r6
 8007bc2:	f84a 0b04 	str.w	r0, [sl], #4
 8007bc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8007bca:	459c      	cmp	ip, r3
 8007bcc:	fa20 f00e 	lsr.w	r0, r0, lr
 8007bd0:	d814      	bhi.n	8007bfc <__lshift+0x94>
 8007bd2:	6048      	str	r0, [r1, #4]
 8007bd4:	b108      	cbz	r0, 8007bda <__lshift+0x72>
 8007bd6:	f109 0502 	add.w	r5, r9, #2
 8007bda:	3d01      	subs	r5, #1
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f8c8 5010 	str.w	r5, [r8, #16]
 8007be2:	4621      	mov	r1, r4
 8007be4:	f7ff fdf5 	bl	80077d2 <_Bfree>
 8007be8:	4640      	mov	r0, r8
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	3101      	adds	r1, #1
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	e7c7      	b.n	8007b84 <__lshift+0x1c>
 8007bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	e7cd      	b.n	8007b98 <__lshift+0x30>
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	e7dc      	b.n	8007bba <__lshift+0x52>
 8007c00:	3904      	subs	r1, #4
 8007c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c06:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c0a:	459c      	cmp	ip, r3
 8007c0c:	d8f9      	bhi.n	8007c02 <__lshift+0x9a>
 8007c0e:	e7e4      	b.n	8007bda <__lshift+0x72>

08007c10 <__mcmp>:
 8007c10:	6903      	ldr	r3, [r0, #16]
 8007c12:	690a      	ldr	r2, [r1, #16]
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	b530      	push	{r4, r5, lr}
 8007c18:	d10c      	bne.n	8007c34 <__mcmp+0x24>
 8007c1a:	0092      	lsls	r2, r2, #2
 8007c1c:	3014      	adds	r0, #20
 8007c1e:	3114      	adds	r1, #20
 8007c20:	1884      	adds	r4, r0, r2
 8007c22:	4411      	add	r1, r2
 8007c24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c2c:	4295      	cmp	r5, r2
 8007c2e:	d003      	beq.n	8007c38 <__mcmp+0x28>
 8007c30:	d305      	bcc.n	8007c3e <__mcmp+0x2e>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4618      	mov	r0, r3
 8007c36:	bd30      	pop	{r4, r5, pc}
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d3f3      	bcc.n	8007c24 <__mcmp+0x14>
 8007c3c:	e7fa      	b.n	8007c34 <__mcmp+0x24>
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	e7f7      	b.n	8007c34 <__mcmp+0x24>

08007c44 <__mdiff>:
 8007c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	460d      	mov	r5, r1
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4628      	mov	r0, r5
 8007c50:	4614      	mov	r4, r2
 8007c52:	f7ff ffdd 	bl	8007c10 <__mcmp>
 8007c56:	1e06      	subs	r6, r0, #0
 8007c58:	d108      	bne.n	8007c6c <__mdiff+0x28>
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fd84 	bl	800776a <_Balloc>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	bfa4      	itt	ge
 8007c6e:	4623      	movge	r3, r4
 8007c70:	462c      	movge	r4, r5
 8007c72:	4638      	mov	r0, r7
 8007c74:	6861      	ldr	r1, [r4, #4]
 8007c76:	bfa6      	itte	ge
 8007c78:	461d      	movge	r5, r3
 8007c7a:	2600      	movge	r6, #0
 8007c7c:	2601      	movlt	r6, #1
 8007c7e:	f7ff fd74 	bl	800776a <_Balloc>
 8007c82:	692b      	ldr	r3, [r5, #16]
 8007c84:	60c6      	str	r6, [r0, #12]
 8007c86:	6926      	ldr	r6, [r4, #16]
 8007c88:	f105 0914 	add.w	r9, r5, #20
 8007c8c:	f104 0214 	add.w	r2, r4, #20
 8007c90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007c94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007c98:	f100 0514 	add.w	r5, r0, #20
 8007c9c:	f04f 0e00 	mov.w	lr, #0
 8007ca0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ca4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ca8:	fa1e f18a 	uxtah	r1, lr, sl
 8007cac:	b2a3      	uxth	r3, r4
 8007cae:	1ac9      	subs	r1, r1, r3
 8007cb0:	0c23      	lsrs	r3, r4, #16
 8007cb2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007cb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007cba:	b289      	uxth	r1, r1
 8007cbc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007cc0:	45c8      	cmp	r8, r9
 8007cc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007cc6:	4694      	mov	ip, r2
 8007cc8:	f845 3b04 	str.w	r3, [r5], #4
 8007ccc:	d8e8      	bhi.n	8007ca0 <__mdiff+0x5c>
 8007cce:	45bc      	cmp	ip, r7
 8007cd0:	d304      	bcc.n	8007cdc <__mdiff+0x98>
 8007cd2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007cd6:	b183      	cbz	r3, 8007cfa <__mdiff+0xb6>
 8007cd8:	6106      	str	r6, [r0, #16]
 8007cda:	e7c5      	b.n	8007c68 <__mdiff+0x24>
 8007cdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ce0:	fa1e f381 	uxtah	r3, lr, r1
 8007ce4:	141a      	asrs	r2, r3, #16
 8007ce6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007cf4:	f845 3b04 	str.w	r3, [r5], #4
 8007cf8:	e7e9      	b.n	8007cce <__mdiff+0x8a>
 8007cfa:	3e01      	subs	r6, #1
 8007cfc:	e7e9      	b.n	8007cd2 <__mdiff+0x8e>
	...

08007d00 <__ulp>:
 8007d00:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <__ulp+0x4c>)
 8007d02:	ee10 2a90 	vmov	r2, s1
 8007d06:	401a      	ands	r2, r3
 8007d08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd04      	ble.n	8007d1a <__ulp+0x1a>
 8007d10:	2000      	movs	r0, #0
 8007d12:	4619      	mov	r1, r3
 8007d14:	ec41 0b10 	vmov	d0, r0, r1
 8007d18:	4770      	bx	lr
 8007d1a:	425b      	negs	r3, r3
 8007d1c:	151b      	asrs	r3, r3, #20
 8007d1e:	2b13      	cmp	r3, #19
 8007d20:	f04f 0000 	mov.w	r0, #0
 8007d24:	f04f 0100 	mov.w	r1, #0
 8007d28:	dc04      	bgt.n	8007d34 <__ulp+0x34>
 8007d2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d2e:	fa42 f103 	asr.w	r1, r2, r3
 8007d32:	e7ef      	b.n	8007d14 <__ulp+0x14>
 8007d34:	3b14      	subs	r3, #20
 8007d36:	2b1e      	cmp	r3, #30
 8007d38:	f04f 0201 	mov.w	r2, #1
 8007d3c:	bfda      	itte	le
 8007d3e:	f1c3 031f 	rsble	r3, r3, #31
 8007d42:	fa02 f303 	lslle.w	r3, r2, r3
 8007d46:	4613      	movgt	r3, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	e7e3      	b.n	8007d14 <__ulp+0x14>
 8007d4c:	7ff00000 	.word	0x7ff00000

08007d50 <__b2d>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	6905      	ldr	r5, [r0, #16]
 8007d54:	f100 0714 	add.w	r7, r0, #20
 8007d58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007d5c:	1f2e      	subs	r6, r5, #4
 8007d5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7ff fdc5 	bl	80078f2 <__hi0bits>
 8007d68:	f1c0 0320 	rsb	r3, r0, #32
 8007d6c:	280a      	cmp	r0, #10
 8007d6e:	600b      	str	r3, [r1, #0]
 8007d70:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007de8 <__b2d+0x98>
 8007d74:	dc14      	bgt.n	8007da0 <__b2d+0x50>
 8007d76:	f1c0 0e0b 	rsb	lr, r0, #11
 8007d7a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007d7e:	42b7      	cmp	r7, r6
 8007d80:	ea41 030c 	orr.w	r3, r1, ip
 8007d84:	bf34      	ite	cc
 8007d86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007d8a:	2100      	movcs	r1, #0
 8007d8c:	3015      	adds	r0, #21
 8007d8e:	fa04 f000 	lsl.w	r0, r4, r0
 8007d92:	fa21 f10e 	lsr.w	r1, r1, lr
 8007d96:	ea40 0201 	orr.w	r2, r0, r1
 8007d9a:	ec43 2b10 	vmov	d0, r2, r3
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da0:	42b7      	cmp	r7, r6
 8007da2:	bf3a      	itte	cc
 8007da4:	f1a5 0608 	subcc.w	r6, r5, #8
 8007da8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007dac:	2100      	movcs	r1, #0
 8007dae:	380b      	subs	r0, #11
 8007db0:	d015      	beq.n	8007dde <__b2d+0x8e>
 8007db2:	4084      	lsls	r4, r0
 8007db4:	f1c0 0520 	rsb	r5, r0, #32
 8007db8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007dbc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007dc0:	42be      	cmp	r6, r7
 8007dc2:	fa21 fc05 	lsr.w	ip, r1, r5
 8007dc6:	ea44 030c 	orr.w	r3, r4, ip
 8007dca:	bf8c      	ite	hi
 8007dcc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007dd0:	2400      	movls	r4, #0
 8007dd2:	fa01 f000 	lsl.w	r0, r1, r0
 8007dd6:	40ec      	lsrs	r4, r5
 8007dd8:	ea40 0204 	orr.w	r2, r0, r4
 8007ddc:	e7dd      	b.n	8007d9a <__b2d+0x4a>
 8007dde:	ea44 030c 	orr.w	r3, r4, ip
 8007de2:	460a      	mov	r2, r1
 8007de4:	e7d9      	b.n	8007d9a <__b2d+0x4a>
 8007de6:	bf00      	nop
 8007de8:	3ff00000 	.word	0x3ff00000

08007dec <__d2b>:
 8007dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	460e      	mov	r6, r1
 8007df2:	2101      	movs	r1, #1
 8007df4:	ec59 8b10 	vmov	r8, r9, d0
 8007df8:	4615      	mov	r5, r2
 8007dfa:	f7ff fcb6 	bl	800776a <_Balloc>
 8007dfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e02:	4607      	mov	r7, r0
 8007e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e08:	bb34      	cbnz	r4, 8007e58 <__d2b+0x6c>
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	f1b8 0300 	subs.w	r3, r8, #0
 8007e10:	d027      	beq.n	8007e62 <__d2b+0x76>
 8007e12:	a802      	add	r0, sp, #8
 8007e14:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007e18:	f7ff fd8a 	bl	8007930 <__lo0bits>
 8007e1c:	9900      	ldr	r1, [sp, #0]
 8007e1e:	b1f0      	cbz	r0, 8007e5e <__d2b+0x72>
 8007e20:	9a01      	ldr	r2, [sp, #4]
 8007e22:	f1c0 0320 	rsb	r3, r0, #32
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	40c2      	lsrs	r2, r0
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	9201      	str	r2, [sp, #4]
 8007e32:	9b01      	ldr	r3, [sp, #4]
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2102      	movne	r1, #2
 8007e3c:	2101      	moveq	r1, #1
 8007e3e:	6139      	str	r1, [r7, #16]
 8007e40:	b1c4      	cbz	r4, 8007e74 <__d2b+0x88>
 8007e42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e46:	4404      	add	r4, r0
 8007e48:	6034      	str	r4, [r6, #0]
 8007e4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e4e:	6028      	str	r0, [r5, #0]
 8007e50:	4638      	mov	r0, r7
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e5c:	e7d5      	b.n	8007e0a <__d2b+0x1e>
 8007e5e:	6179      	str	r1, [r7, #20]
 8007e60:	e7e7      	b.n	8007e32 <__d2b+0x46>
 8007e62:	a801      	add	r0, sp, #4
 8007e64:	f7ff fd64 	bl	8007930 <__lo0bits>
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6139      	str	r1, [r7, #16]
 8007e70:	3020      	adds	r0, #32
 8007e72:	e7e5      	b.n	8007e40 <__d2b+0x54>
 8007e74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007e78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e7c:	6030      	str	r0, [r6, #0]
 8007e7e:	6918      	ldr	r0, [r3, #16]
 8007e80:	f7ff fd37 	bl	80078f2 <__hi0bits>
 8007e84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e88:	e7e1      	b.n	8007e4e <__d2b+0x62>

08007e8a <__ratio>:
 8007e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8e:	4688      	mov	r8, r1
 8007e90:	4669      	mov	r1, sp
 8007e92:	4681      	mov	r9, r0
 8007e94:	f7ff ff5c 	bl	8007d50 <__b2d>
 8007e98:	a901      	add	r1, sp, #4
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	ec57 6b10 	vmov	r6, r7, d0
 8007ea0:	f7ff ff56 	bl	8007d50 <__b2d>
 8007ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ea8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007eac:	eba3 0c02 	sub.w	ip, r3, r2
 8007eb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007eba:	ec5b ab10 	vmov	sl, fp, d0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfce      	itee	gt
 8007ec2:	463a      	movgt	r2, r7
 8007ec4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ec8:	465a      	movle	r2, fp
 8007eca:	4659      	mov	r1, fp
 8007ecc:	463d      	mov	r5, r7
 8007ece:	bfd4      	ite	le
 8007ed0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007ed4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007ed8:	4630      	mov	r0, r6
 8007eda:	ee10 2a10 	vmov	r2, s0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fcb3 	bl	800084c <__aeabi_ddiv>
 8007ee6:	ec41 0b10 	vmov	d0, r0, r1
 8007eea:	b003      	add	sp, #12
 8007eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ef0 <__copybits>:
 8007ef0:	3901      	subs	r1, #1
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	1149      	asrs	r1, r1, #5
 8007ef6:	6914      	ldr	r4, [r2, #16]
 8007ef8:	3101      	adds	r1, #1
 8007efa:	f102 0314 	add.w	r3, r2, #20
 8007efe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	4602      	mov	r2, r0
 8007f0a:	d303      	bcc.n	8007f14 <__copybits+0x24>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	428a      	cmp	r2, r1
 8007f10:	d305      	bcc.n	8007f1e <__copybits+0x2e>
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f18:	f840 2b04 	str.w	r2, [r0], #4
 8007f1c:	e7f3      	b.n	8007f06 <__copybits+0x16>
 8007f1e:	f842 3b04 	str.w	r3, [r2], #4
 8007f22:	e7f4      	b.n	8007f0e <__copybits+0x1e>

08007f24 <__any_on>:
 8007f24:	f100 0214 	add.w	r2, r0, #20
 8007f28:	6900      	ldr	r0, [r0, #16]
 8007f2a:	114b      	asrs	r3, r1, #5
 8007f2c:	4298      	cmp	r0, r3
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	db11      	blt.n	8007f56 <__any_on+0x32>
 8007f32:	dd0a      	ble.n	8007f4a <__any_on+0x26>
 8007f34:	f011 011f 	ands.w	r1, r1, #31
 8007f38:	d007      	beq.n	8007f4a <__any_on+0x26>
 8007f3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f3e:	fa24 f001 	lsr.w	r0, r4, r1
 8007f42:	fa00 f101 	lsl.w	r1, r0, r1
 8007f46:	428c      	cmp	r4, r1
 8007f48:	d10b      	bne.n	8007f62 <__any_on+0x3e>
 8007f4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d803      	bhi.n	8007f5a <__any_on+0x36>
 8007f52:	2000      	movs	r0, #0
 8007f54:	bd10      	pop	{r4, pc}
 8007f56:	4603      	mov	r3, r0
 8007f58:	e7f7      	b.n	8007f4a <__any_on+0x26>
 8007f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f5e:	2900      	cmp	r1, #0
 8007f60:	d0f5      	beq.n	8007f4e <__any_on+0x2a>
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7f6      	b.n	8007f54 <__any_on+0x30>

08007f66 <_calloc_r>:
 8007f66:	b538      	push	{r3, r4, r5, lr}
 8007f68:	fb02 f401 	mul.w	r4, r2, r1
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	f000 f857 	bl	8008020 <_malloc_r>
 8007f72:	4605      	mov	r5, r0
 8007f74:	b118      	cbz	r0, 8007f7e <_calloc_r+0x18>
 8007f76:	4622      	mov	r2, r4
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f7fc fb81 	bl	8004680 <memset>
 8007f7e:	4628      	mov	r0, r5
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
	...

08007f84 <_free_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4605      	mov	r5, r0
 8007f88:	2900      	cmp	r1, #0
 8007f8a:	d045      	beq.n	8008018 <_free_r+0x94>
 8007f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f90:	1f0c      	subs	r4, r1, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	bfb8      	it	lt
 8007f96:	18e4      	addlt	r4, r4, r3
 8007f98:	f001 f9a9 	bl	80092ee <__malloc_lock>
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	; (800801c <_free_r+0x98>)
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	b933      	cbnz	r3, 8007fb2 <_free_r+0x2e>
 8007fa4:	6063      	str	r3, [r4, #4]
 8007fa6:	6014      	str	r4, [r2, #0]
 8007fa8:	4628      	mov	r0, r5
 8007faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fae:	f001 b99f 	b.w	80092f0 <__malloc_unlock>
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	d90c      	bls.n	8007fd0 <_free_r+0x4c>
 8007fb6:	6821      	ldr	r1, [r4, #0]
 8007fb8:	1862      	adds	r2, r4, r1
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	bf04      	itt	eq
 8007fbe:	681a      	ldreq	r2, [r3, #0]
 8007fc0:	685b      	ldreq	r3, [r3, #4]
 8007fc2:	6063      	str	r3, [r4, #4]
 8007fc4:	bf04      	itt	eq
 8007fc6:	1852      	addeq	r2, r2, r1
 8007fc8:	6022      	streq	r2, [r4, #0]
 8007fca:	6004      	str	r4, [r0, #0]
 8007fcc:	e7ec      	b.n	8007fa8 <_free_r+0x24>
 8007fce:	4613      	mov	r3, r2
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	b10a      	cbz	r2, 8007fd8 <_free_r+0x54>
 8007fd4:	42a2      	cmp	r2, r4
 8007fd6:	d9fa      	bls.n	8007fce <_free_r+0x4a>
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	1858      	adds	r0, r3, r1
 8007fdc:	42a0      	cmp	r0, r4
 8007fde:	d10b      	bne.n	8007ff8 <_free_r+0x74>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	4401      	add	r1, r0
 8007fe4:	1858      	adds	r0, r3, r1
 8007fe6:	4282      	cmp	r2, r0
 8007fe8:	6019      	str	r1, [r3, #0]
 8007fea:	d1dd      	bne.n	8007fa8 <_free_r+0x24>
 8007fec:	6810      	ldr	r0, [r2, #0]
 8007fee:	6852      	ldr	r2, [r2, #4]
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	4401      	add	r1, r0
 8007ff4:	6019      	str	r1, [r3, #0]
 8007ff6:	e7d7      	b.n	8007fa8 <_free_r+0x24>
 8007ff8:	d902      	bls.n	8008000 <_free_r+0x7c>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	e7d3      	b.n	8007fa8 <_free_r+0x24>
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	1821      	adds	r1, r4, r0
 8008004:	428a      	cmp	r2, r1
 8008006:	bf04      	itt	eq
 8008008:	6811      	ldreq	r1, [r2, #0]
 800800a:	6852      	ldreq	r2, [r2, #4]
 800800c:	6062      	str	r2, [r4, #4]
 800800e:	bf04      	itt	eq
 8008010:	1809      	addeq	r1, r1, r0
 8008012:	6021      	streq	r1, [r4, #0]
 8008014:	605c      	str	r4, [r3, #4]
 8008016:	e7c7      	b.n	8007fa8 <_free_r+0x24>
 8008018:	bd38      	pop	{r3, r4, r5, pc}
 800801a:	bf00      	nop
 800801c:	200001fc 	.word	0x200001fc

08008020 <_malloc_r>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	1ccd      	adds	r5, r1, #3
 8008024:	f025 0503 	bic.w	r5, r5, #3
 8008028:	3508      	adds	r5, #8
 800802a:	2d0c      	cmp	r5, #12
 800802c:	bf38      	it	cc
 800802e:	250c      	movcc	r5, #12
 8008030:	2d00      	cmp	r5, #0
 8008032:	4606      	mov	r6, r0
 8008034:	db01      	blt.n	800803a <_malloc_r+0x1a>
 8008036:	42a9      	cmp	r1, r5
 8008038:	d903      	bls.n	8008042 <_malloc_r+0x22>
 800803a:	230c      	movs	r3, #12
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	2000      	movs	r0, #0
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	f001 f954 	bl	80092ee <__malloc_lock>
 8008046:	4a21      	ldr	r2, [pc, #132]	; (80080cc <_malloc_r+0xac>)
 8008048:	6814      	ldr	r4, [r2, #0]
 800804a:	4621      	mov	r1, r4
 800804c:	b991      	cbnz	r1, 8008074 <_malloc_r+0x54>
 800804e:	4c20      	ldr	r4, [pc, #128]	; (80080d0 <_malloc_r+0xb0>)
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	b91b      	cbnz	r3, 800805c <_malloc_r+0x3c>
 8008054:	4630      	mov	r0, r6
 8008056:	f000 fe6b 	bl	8008d30 <_sbrk_r>
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	4629      	mov	r1, r5
 800805e:	4630      	mov	r0, r6
 8008060:	f000 fe66 	bl	8008d30 <_sbrk_r>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d124      	bne.n	80080b2 <_malloc_r+0x92>
 8008068:	230c      	movs	r3, #12
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	4630      	mov	r0, r6
 800806e:	f001 f93f 	bl	80092f0 <__malloc_unlock>
 8008072:	e7e4      	b.n	800803e <_malloc_r+0x1e>
 8008074:	680b      	ldr	r3, [r1, #0]
 8008076:	1b5b      	subs	r3, r3, r5
 8008078:	d418      	bmi.n	80080ac <_malloc_r+0x8c>
 800807a:	2b0b      	cmp	r3, #11
 800807c:	d90f      	bls.n	800809e <_malloc_r+0x7e>
 800807e:	600b      	str	r3, [r1, #0]
 8008080:	50cd      	str	r5, [r1, r3]
 8008082:	18cc      	adds	r4, r1, r3
 8008084:	4630      	mov	r0, r6
 8008086:	f001 f933 	bl	80092f0 <__malloc_unlock>
 800808a:	f104 000b 	add.w	r0, r4, #11
 800808e:	1d23      	adds	r3, r4, #4
 8008090:	f020 0007 	bic.w	r0, r0, #7
 8008094:	1ac3      	subs	r3, r0, r3
 8008096:	d0d3      	beq.n	8008040 <_malloc_r+0x20>
 8008098:	425a      	negs	r2, r3
 800809a:	50e2      	str	r2, [r4, r3]
 800809c:	e7d0      	b.n	8008040 <_malloc_r+0x20>
 800809e:	428c      	cmp	r4, r1
 80080a0:	684b      	ldr	r3, [r1, #4]
 80080a2:	bf16      	itet	ne
 80080a4:	6063      	strne	r3, [r4, #4]
 80080a6:	6013      	streq	r3, [r2, #0]
 80080a8:	460c      	movne	r4, r1
 80080aa:	e7eb      	b.n	8008084 <_malloc_r+0x64>
 80080ac:	460c      	mov	r4, r1
 80080ae:	6849      	ldr	r1, [r1, #4]
 80080b0:	e7cc      	b.n	800804c <_malloc_r+0x2c>
 80080b2:	1cc4      	adds	r4, r0, #3
 80080b4:	f024 0403 	bic.w	r4, r4, #3
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d005      	beq.n	80080c8 <_malloc_r+0xa8>
 80080bc:	1a21      	subs	r1, r4, r0
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 fe36 	bl	8008d30 <_sbrk_r>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d0cf      	beq.n	8008068 <_malloc_r+0x48>
 80080c8:	6025      	str	r5, [r4, #0]
 80080ca:	e7db      	b.n	8008084 <_malloc_r+0x64>
 80080cc:	200001fc 	.word	0x200001fc
 80080d0:	20000200 	.word	0x20000200

080080d4 <__ssputs_r>:
 80080d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	688e      	ldr	r6, [r1, #8]
 80080da:	429e      	cmp	r6, r3
 80080dc:	4682      	mov	sl, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	4690      	mov	r8, r2
 80080e2:	4699      	mov	r9, r3
 80080e4:	d837      	bhi.n	8008156 <__ssputs_r+0x82>
 80080e6:	898a      	ldrh	r2, [r1, #12]
 80080e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080ec:	d031      	beq.n	8008152 <__ssputs_r+0x7e>
 80080ee:	6825      	ldr	r5, [r4, #0]
 80080f0:	6909      	ldr	r1, [r1, #16]
 80080f2:	1a6f      	subs	r7, r5, r1
 80080f4:	6965      	ldr	r5, [r4, #20]
 80080f6:	2302      	movs	r3, #2
 80080f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008100:	f109 0301 	add.w	r3, r9, #1
 8008104:	443b      	add	r3, r7
 8008106:	429d      	cmp	r5, r3
 8008108:	bf38      	it	cc
 800810a:	461d      	movcc	r5, r3
 800810c:	0553      	lsls	r3, r2, #21
 800810e:	d530      	bpl.n	8008172 <__ssputs_r+0x9e>
 8008110:	4629      	mov	r1, r5
 8008112:	f7ff ff85 	bl	8008020 <_malloc_r>
 8008116:	4606      	mov	r6, r0
 8008118:	b950      	cbnz	r0, 8008130 <__ssputs_r+0x5c>
 800811a:	230c      	movs	r3, #12
 800811c:	f8ca 3000 	str.w	r3, [sl]
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008130:	463a      	mov	r2, r7
 8008132:	6921      	ldr	r1, [r4, #16]
 8008134:	f7ff fb0e 	bl	8007754 <memcpy>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	6126      	str	r6, [r4, #16]
 8008146:	6165      	str	r5, [r4, #20]
 8008148:	443e      	add	r6, r7
 800814a:	1bed      	subs	r5, r5, r7
 800814c:	6026      	str	r6, [r4, #0]
 800814e:	60a5      	str	r5, [r4, #8]
 8008150:	464e      	mov	r6, r9
 8008152:	454e      	cmp	r6, r9
 8008154:	d900      	bls.n	8008158 <__ssputs_r+0x84>
 8008156:	464e      	mov	r6, r9
 8008158:	4632      	mov	r2, r6
 800815a:	4641      	mov	r1, r8
 800815c:	6820      	ldr	r0, [r4, #0]
 800815e:	f001 f8ad 	bl	80092bc <memmove>
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	1b9b      	subs	r3, r3, r6
 8008166:	60a3      	str	r3, [r4, #8]
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	441e      	add	r6, r3
 800816c:	6026      	str	r6, [r4, #0]
 800816e:	2000      	movs	r0, #0
 8008170:	e7dc      	b.n	800812c <__ssputs_r+0x58>
 8008172:	462a      	mov	r2, r5
 8008174:	f001 f8bd 	bl	80092f2 <_realloc_r>
 8008178:	4606      	mov	r6, r0
 800817a:	2800      	cmp	r0, #0
 800817c:	d1e2      	bne.n	8008144 <__ssputs_r+0x70>
 800817e:	6921      	ldr	r1, [r4, #16]
 8008180:	4650      	mov	r0, sl
 8008182:	f7ff feff 	bl	8007f84 <_free_r>
 8008186:	e7c8      	b.n	800811a <__ssputs_r+0x46>

08008188 <_svfiprintf_r>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	461d      	mov	r5, r3
 800818e:	898b      	ldrh	r3, [r1, #12]
 8008190:	061f      	lsls	r7, r3, #24
 8008192:	b09d      	sub	sp, #116	; 0x74
 8008194:	4680      	mov	r8, r0
 8008196:	460c      	mov	r4, r1
 8008198:	4616      	mov	r6, r2
 800819a:	d50f      	bpl.n	80081bc <_svfiprintf_r+0x34>
 800819c:	690b      	ldr	r3, [r1, #16]
 800819e:	b96b      	cbnz	r3, 80081bc <_svfiprintf_r+0x34>
 80081a0:	2140      	movs	r1, #64	; 0x40
 80081a2:	f7ff ff3d 	bl	8008020 <_malloc_r>
 80081a6:	6020      	str	r0, [r4, #0]
 80081a8:	6120      	str	r0, [r4, #16]
 80081aa:	b928      	cbnz	r0, 80081b8 <_svfiprintf_r+0x30>
 80081ac:	230c      	movs	r3, #12
 80081ae:	f8c8 3000 	str.w	r3, [r8]
 80081b2:	f04f 30ff 	mov.w	r0, #4294967295
 80081b6:	e0c8      	b.n	800834a <_svfiprintf_r+0x1c2>
 80081b8:	2340      	movs	r3, #64	; 0x40
 80081ba:	6163      	str	r3, [r4, #20]
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c6:	2330      	movs	r3, #48	; 0x30
 80081c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081cc:	9503      	str	r5, [sp, #12]
 80081ce:	f04f 0b01 	mov.w	fp, #1
 80081d2:	4637      	mov	r7, r6
 80081d4:	463d      	mov	r5, r7
 80081d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081da:	b10b      	cbz	r3, 80081e0 <_svfiprintf_r+0x58>
 80081dc:	2b25      	cmp	r3, #37	; 0x25
 80081de:	d13e      	bne.n	800825e <_svfiprintf_r+0xd6>
 80081e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80081e4:	d00b      	beq.n	80081fe <_svfiprintf_r+0x76>
 80081e6:	4653      	mov	r3, sl
 80081e8:	4632      	mov	r2, r6
 80081ea:	4621      	mov	r1, r4
 80081ec:	4640      	mov	r0, r8
 80081ee:	f7ff ff71 	bl	80080d4 <__ssputs_r>
 80081f2:	3001      	adds	r0, #1
 80081f4:	f000 80a4 	beq.w	8008340 <_svfiprintf_r+0x1b8>
 80081f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fa:	4453      	add	r3, sl
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
 80081fe:	783b      	ldrb	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 809d 	beq.w	8008340 <_svfiprintf_r+0x1b8>
 8008206:	2300      	movs	r3, #0
 8008208:	f04f 32ff 	mov.w	r2, #4294967295
 800820c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008218:	931a      	str	r3, [sp, #104]	; 0x68
 800821a:	462f      	mov	r7, r5
 800821c:	2205      	movs	r2, #5
 800821e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008222:	4850      	ldr	r0, [pc, #320]	; (8008364 <_svfiprintf_r+0x1dc>)
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	b9d0      	cbnz	r0, 8008262 <_svfiprintf_r+0xda>
 800822c:	06d9      	lsls	r1, r3, #27
 800822e:	bf44      	itt	mi
 8008230:	2220      	movmi	r2, #32
 8008232:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008236:	071a      	lsls	r2, r3, #28
 8008238:	bf44      	itt	mi
 800823a:	222b      	movmi	r2, #43	; 0x2b
 800823c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008240:	782a      	ldrb	r2, [r5, #0]
 8008242:	2a2a      	cmp	r2, #42	; 0x2a
 8008244:	d015      	beq.n	8008272 <_svfiprintf_r+0xea>
 8008246:	9a07      	ldr	r2, [sp, #28]
 8008248:	462f      	mov	r7, r5
 800824a:	2000      	movs	r0, #0
 800824c:	250a      	movs	r5, #10
 800824e:	4639      	mov	r1, r7
 8008250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008254:	3b30      	subs	r3, #48	; 0x30
 8008256:	2b09      	cmp	r3, #9
 8008258:	d94d      	bls.n	80082f6 <_svfiprintf_r+0x16e>
 800825a:	b1b8      	cbz	r0, 800828c <_svfiprintf_r+0x104>
 800825c:	e00f      	b.n	800827e <_svfiprintf_r+0xf6>
 800825e:	462f      	mov	r7, r5
 8008260:	e7b8      	b.n	80081d4 <_svfiprintf_r+0x4c>
 8008262:	4a40      	ldr	r2, [pc, #256]	; (8008364 <_svfiprintf_r+0x1dc>)
 8008264:	1a80      	subs	r0, r0, r2
 8008266:	fa0b f000 	lsl.w	r0, fp, r0
 800826a:	4318      	orrs	r0, r3
 800826c:	9004      	str	r0, [sp, #16]
 800826e:	463d      	mov	r5, r7
 8008270:	e7d3      	b.n	800821a <_svfiprintf_r+0x92>
 8008272:	9a03      	ldr	r2, [sp, #12]
 8008274:	1d11      	adds	r1, r2, #4
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	9103      	str	r1, [sp, #12]
 800827a:	2a00      	cmp	r2, #0
 800827c:	db01      	blt.n	8008282 <_svfiprintf_r+0xfa>
 800827e:	9207      	str	r2, [sp, #28]
 8008280:	e004      	b.n	800828c <_svfiprintf_r+0x104>
 8008282:	4252      	negs	r2, r2
 8008284:	f043 0302 	orr.w	r3, r3, #2
 8008288:	9207      	str	r2, [sp, #28]
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	783b      	ldrb	r3, [r7, #0]
 800828e:	2b2e      	cmp	r3, #46	; 0x2e
 8008290:	d10c      	bne.n	80082ac <_svfiprintf_r+0x124>
 8008292:	787b      	ldrb	r3, [r7, #1]
 8008294:	2b2a      	cmp	r3, #42	; 0x2a
 8008296:	d133      	bne.n	8008300 <_svfiprintf_r+0x178>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	1d1a      	adds	r2, r3, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	9203      	str	r2, [sp, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfb8      	it	lt
 80082a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082a8:	3702      	adds	r7, #2
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	4d2e      	ldr	r5, [pc, #184]	; (8008368 <_svfiprintf_r+0x1e0>)
 80082ae:	7839      	ldrb	r1, [r7, #0]
 80082b0:	2203      	movs	r2, #3
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7f7 ff94 	bl	80001e0 <memchr>
 80082b8:	b138      	cbz	r0, 80082ca <_svfiprintf_r+0x142>
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	1b40      	subs	r0, r0, r5
 80082be:	fa03 f000 	lsl.w	r0, r3, r0
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	4303      	orrs	r3, r0
 80082c6:	3701      	adds	r7, #1
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	7839      	ldrb	r1, [r7, #0]
 80082cc:	4827      	ldr	r0, [pc, #156]	; (800836c <_svfiprintf_r+0x1e4>)
 80082ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d2:	2206      	movs	r2, #6
 80082d4:	1c7e      	adds	r6, r7, #1
 80082d6:	f7f7 ff83 	bl	80001e0 <memchr>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d038      	beq.n	8008350 <_svfiprintf_r+0x1c8>
 80082de:	4b24      	ldr	r3, [pc, #144]	; (8008370 <_svfiprintf_r+0x1e8>)
 80082e0:	bb13      	cbnz	r3, 8008328 <_svfiprintf_r+0x1a0>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3307      	adds	r3, #7
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	3308      	adds	r3, #8
 80082ec:	9303      	str	r3, [sp, #12]
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	444b      	add	r3, r9
 80082f2:	9309      	str	r3, [sp, #36]	; 0x24
 80082f4:	e76d      	b.n	80081d2 <_svfiprintf_r+0x4a>
 80082f6:	fb05 3202 	mla	r2, r5, r2, r3
 80082fa:	2001      	movs	r0, #1
 80082fc:	460f      	mov	r7, r1
 80082fe:	e7a6      	b.n	800824e <_svfiprintf_r+0xc6>
 8008300:	2300      	movs	r3, #0
 8008302:	3701      	adds	r7, #1
 8008304:	9305      	str	r3, [sp, #20]
 8008306:	4619      	mov	r1, r3
 8008308:	250a      	movs	r5, #10
 800830a:	4638      	mov	r0, r7
 800830c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008310:	3a30      	subs	r2, #48	; 0x30
 8008312:	2a09      	cmp	r2, #9
 8008314:	d903      	bls.n	800831e <_svfiprintf_r+0x196>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0c8      	beq.n	80082ac <_svfiprintf_r+0x124>
 800831a:	9105      	str	r1, [sp, #20]
 800831c:	e7c6      	b.n	80082ac <_svfiprintf_r+0x124>
 800831e:	fb05 2101 	mla	r1, r5, r1, r2
 8008322:	2301      	movs	r3, #1
 8008324:	4607      	mov	r7, r0
 8008326:	e7f0      	b.n	800830a <_svfiprintf_r+0x182>
 8008328:	ab03      	add	r3, sp, #12
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4622      	mov	r2, r4
 800832e:	4b11      	ldr	r3, [pc, #68]	; (8008374 <_svfiprintf_r+0x1ec>)
 8008330:	a904      	add	r1, sp, #16
 8008332:	4640      	mov	r0, r8
 8008334:	f7fc fa40 	bl	80047b8 <_printf_float>
 8008338:	f1b0 3fff 	cmp.w	r0, #4294967295
 800833c:	4681      	mov	r9, r0
 800833e:	d1d6      	bne.n	80082ee <_svfiprintf_r+0x166>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	065b      	lsls	r3, r3, #25
 8008344:	f53f af35 	bmi.w	80081b2 <_svfiprintf_r+0x2a>
 8008348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800834a:	b01d      	add	sp, #116	; 0x74
 800834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008350:	ab03      	add	r3, sp, #12
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	4622      	mov	r2, r4
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <_svfiprintf_r+0x1ec>)
 8008358:	a904      	add	r1, sp, #16
 800835a:	4640      	mov	r0, r8
 800835c:	f7fc fce2 	bl	8004d24 <_printf_i>
 8008360:	e7ea      	b.n	8008338 <_svfiprintf_r+0x1b0>
 8008362:	bf00      	nop
 8008364:	080096bc 	.word	0x080096bc
 8008368:	080096c2 	.word	0x080096c2
 800836c:	080096c6 	.word	0x080096c6
 8008370:	080047b9 	.word	0x080047b9
 8008374:	080080d5 	.word	0x080080d5

08008378 <__sfputc_r>:
 8008378:	6893      	ldr	r3, [r2, #8]
 800837a:	3b01      	subs	r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	b410      	push	{r4}
 8008380:	6093      	str	r3, [r2, #8]
 8008382:	da08      	bge.n	8008396 <__sfputc_r+0x1e>
 8008384:	6994      	ldr	r4, [r2, #24]
 8008386:	42a3      	cmp	r3, r4
 8008388:	db01      	blt.n	800838e <__sfputc_r+0x16>
 800838a:	290a      	cmp	r1, #10
 800838c:	d103      	bne.n	8008396 <__sfputc_r+0x1e>
 800838e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008392:	f7fd bd6d 	b.w	8005e70 <__swbuf_r>
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	1c58      	adds	r0, r3, #1
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	7019      	strb	r1, [r3, #0]
 800839e:	4608      	mov	r0, r1
 80083a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <__sfputs_r>:
 80083a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	18d5      	adds	r5, r2, r3
 80083b0:	42ac      	cmp	r4, r5
 80083b2:	d101      	bne.n	80083b8 <__sfputs_r+0x12>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e007      	b.n	80083c8 <__sfputs_r+0x22>
 80083b8:	463a      	mov	r2, r7
 80083ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ffda 	bl	8008378 <__sfputc_r>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d1f3      	bne.n	80083b0 <__sfputs_r+0xa>
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083cc <_vfiprintf_r>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	b09d      	sub	sp, #116	; 0x74
 80083d4:	4617      	mov	r7, r2
 80083d6:	461d      	mov	r5, r3
 80083d8:	4606      	mov	r6, r0
 80083da:	b118      	cbz	r0, 80083e4 <_vfiprintf_r+0x18>
 80083dc:	6983      	ldr	r3, [r0, #24]
 80083de:	b90b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x18>
 80083e0:	f7fe fd4c 	bl	8006e7c <__sinit>
 80083e4:	4b7c      	ldr	r3, [pc, #496]	; (80085d8 <_vfiprintf_r+0x20c>)
 80083e6:	429c      	cmp	r4, r3
 80083e8:	d158      	bne.n	800849c <_vfiprintf_r+0xd0>
 80083ea:	6874      	ldr	r4, [r6, #4]
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	0718      	lsls	r0, r3, #28
 80083f0:	d55e      	bpl.n	80084b0 <_vfiprintf_r+0xe4>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05b      	beq.n	80084b0 <_vfiprintf_r+0xe4>
 80083f8:	2300      	movs	r3, #0
 80083fa:	9309      	str	r3, [sp, #36]	; 0x24
 80083fc:	2320      	movs	r3, #32
 80083fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008402:	2330      	movs	r3, #48	; 0x30
 8008404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008408:	9503      	str	r5, [sp, #12]
 800840a:	f04f 0b01 	mov.w	fp, #1
 800840e:	46b8      	mov	r8, r7
 8008410:	4645      	mov	r5, r8
 8008412:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008416:	b10b      	cbz	r3, 800841c <_vfiprintf_r+0x50>
 8008418:	2b25      	cmp	r3, #37	; 0x25
 800841a:	d154      	bne.n	80084c6 <_vfiprintf_r+0xfa>
 800841c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008420:	d00b      	beq.n	800843a <_vfiprintf_r+0x6e>
 8008422:	4653      	mov	r3, sl
 8008424:	463a      	mov	r2, r7
 8008426:	4621      	mov	r1, r4
 8008428:	4630      	mov	r0, r6
 800842a:	f7ff ffbc 	bl	80083a6 <__sfputs_r>
 800842e:	3001      	adds	r0, #1
 8008430:	f000 80c2 	beq.w	80085b8 <_vfiprintf_r+0x1ec>
 8008434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008436:	4453      	add	r3, sl
 8008438:	9309      	str	r3, [sp, #36]	; 0x24
 800843a:	f898 3000 	ldrb.w	r3, [r8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 80ba 	beq.w	80085b8 <_vfiprintf_r+0x1ec>
 8008444:	2300      	movs	r3, #0
 8008446:	f04f 32ff 	mov.w	r2, #4294967295
 800844a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008456:	931a      	str	r3, [sp, #104]	; 0x68
 8008458:	46a8      	mov	r8, r5
 800845a:	2205      	movs	r2, #5
 800845c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008460:	485e      	ldr	r0, [pc, #376]	; (80085dc <_vfiprintf_r+0x210>)
 8008462:	f7f7 febd 	bl	80001e0 <memchr>
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	bb78      	cbnz	r0, 80084ca <_vfiprintf_r+0xfe>
 800846a:	06d9      	lsls	r1, r3, #27
 800846c:	bf44      	itt	mi
 800846e:	2220      	movmi	r2, #32
 8008470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008474:	071a      	lsls	r2, r3, #28
 8008476:	bf44      	itt	mi
 8008478:	222b      	movmi	r2, #43	; 0x2b
 800847a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800847e:	782a      	ldrb	r2, [r5, #0]
 8008480:	2a2a      	cmp	r2, #42	; 0x2a
 8008482:	d02a      	beq.n	80084da <_vfiprintf_r+0x10e>
 8008484:	9a07      	ldr	r2, [sp, #28]
 8008486:	46a8      	mov	r8, r5
 8008488:	2000      	movs	r0, #0
 800848a:	250a      	movs	r5, #10
 800848c:	4641      	mov	r1, r8
 800848e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008492:	3b30      	subs	r3, #48	; 0x30
 8008494:	2b09      	cmp	r3, #9
 8008496:	d969      	bls.n	800856c <_vfiprintf_r+0x1a0>
 8008498:	b360      	cbz	r0, 80084f4 <_vfiprintf_r+0x128>
 800849a:	e024      	b.n	80084e6 <_vfiprintf_r+0x11a>
 800849c:	4b50      	ldr	r3, [pc, #320]	; (80085e0 <_vfiprintf_r+0x214>)
 800849e:	429c      	cmp	r4, r3
 80084a0:	d101      	bne.n	80084a6 <_vfiprintf_r+0xda>
 80084a2:	68b4      	ldr	r4, [r6, #8]
 80084a4:	e7a2      	b.n	80083ec <_vfiprintf_r+0x20>
 80084a6:	4b4f      	ldr	r3, [pc, #316]	; (80085e4 <_vfiprintf_r+0x218>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	bf08      	it	eq
 80084ac:	68f4      	ldreq	r4, [r6, #12]
 80084ae:	e79d      	b.n	80083ec <_vfiprintf_r+0x20>
 80084b0:	4621      	mov	r1, r4
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7fd fd2e 	bl	8005f14 <__swsetup_r>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d09d      	beq.n	80083f8 <_vfiprintf_r+0x2c>
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	b01d      	add	sp, #116	; 0x74
 80084c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c6:	46a8      	mov	r8, r5
 80084c8:	e7a2      	b.n	8008410 <_vfiprintf_r+0x44>
 80084ca:	4a44      	ldr	r2, [pc, #272]	; (80085dc <_vfiprintf_r+0x210>)
 80084cc:	1a80      	subs	r0, r0, r2
 80084ce:	fa0b f000 	lsl.w	r0, fp, r0
 80084d2:	4318      	orrs	r0, r3
 80084d4:	9004      	str	r0, [sp, #16]
 80084d6:	4645      	mov	r5, r8
 80084d8:	e7be      	b.n	8008458 <_vfiprintf_r+0x8c>
 80084da:	9a03      	ldr	r2, [sp, #12]
 80084dc:	1d11      	adds	r1, r2, #4
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	9103      	str	r1, [sp, #12]
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	db01      	blt.n	80084ea <_vfiprintf_r+0x11e>
 80084e6:	9207      	str	r2, [sp, #28]
 80084e8:	e004      	b.n	80084f4 <_vfiprintf_r+0x128>
 80084ea:	4252      	negs	r2, r2
 80084ec:	f043 0302 	orr.w	r3, r3, #2
 80084f0:	9207      	str	r2, [sp, #28]
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	f898 3000 	ldrb.w	r3, [r8]
 80084f8:	2b2e      	cmp	r3, #46	; 0x2e
 80084fa:	d10e      	bne.n	800851a <_vfiprintf_r+0x14e>
 80084fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008500:	2b2a      	cmp	r3, #42	; 0x2a
 8008502:	d138      	bne.n	8008576 <_vfiprintf_r+0x1aa>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	1d1a      	adds	r2, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	9203      	str	r2, [sp, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfb8      	it	lt
 8008510:	f04f 33ff 	movlt.w	r3, #4294967295
 8008514:	f108 0802 	add.w	r8, r8, #2
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	4d33      	ldr	r5, [pc, #204]	; (80085e8 <_vfiprintf_r+0x21c>)
 800851c:	f898 1000 	ldrb.w	r1, [r8]
 8008520:	2203      	movs	r2, #3
 8008522:	4628      	mov	r0, r5
 8008524:	f7f7 fe5c 	bl	80001e0 <memchr>
 8008528:	b140      	cbz	r0, 800853c <_vfiprintf_r+0x170>
 800852a:	2340      	movs	r3, #64	; 0x40
 800852c:	1b40      	subs	r0, r0, r5
 800852e:	fa03 f000 	lsl.w	r0, r3, r0
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	4303      	orrs	r3, r0
 8008536:	f108 0801 	add.w	r8, r8, #1
 800853a:	9304      	str	r3, [sp, #16]
 800853c:	f898 1000 	ldrb.w	r1, [r8]
 8008540:	482a      	ldr	r0, [pc, #168]	; (80085ec <_vfiprintf_r+0x220>)
 8008542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008546:	2206      	movs	r2, #6
 8008548:	f108 0701 	add.w	r7, r8, #1
 800854c:	f7f7 fe48 	bl	80001e0 <memchr>
 8008550:	2800      	cmp	r0, #0
 8008552:	d037      	beq.n	80085c4 <_vfiprintf_r+0x1f8>
 8008554:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <_vfiprintf_r+0x224>)
 8008556:	bb1b      	cbnz	r3, 80085a0 <_vfiprintf_r+0x1d4>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	3307      	adds	r3, #7
 800855c:	f023 0307 	bic.w	r3, r3, #7
 8008560:	3308      	adds	r3, #8
 8008562:	9303      	str	r3, [sp, #12]
 8008564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008566:	444b      	add	r3, r9
 8008568:	9309      	str	r3, [sp, #36]	; 0x24
 800856a:	e750      	b.n	800840e <_vfiprintf_r+0x42>
 800856c:	fb05 3202 	mla	r2, r5, r2, r3
 8008570:	2001      	movs	r0, #1
 8008572:	4688      	mov	r8, r1
 8008574:	e78a      	b.n	800848c <_vfiprintf_r+0xc0>
 8008576:	2300      	movs	r3, #0
 8008578:	f108 0801 	add.w	r8, r8, #1
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	4619      	mov	r1, r3
 8008580:	250a      	movs	r5, #10
 8008582:	4640      	mov	r0, r8
 8008584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008588:	3a30      	subs	r2, #48	; 0x30
 800858a:	2a09      	cmp	r2, #9
 800858c:	d903      	bls.n	8008596 <_vfiprintf_r+0x1ca>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0c3      	beq.n	800851a <_vfiprintf_r+0x14e>
 8008592:	9105      	str	r1, [sp, #20]
 8008594:	e7c1      	b.n	800851a <_vfiprintf_r+0x14e>
 8008596:	fb05 2101 	mla	r1, r5, r1, r2
 800859a:	2301      	movs	r3, #1
 800859c:	4680      	mov	r8, r0
 800859e:	e7f0      	b.n	8008582 <_vfiprintf_r+0x1b6>
 80085a0:	ab03      	add	r3, sp, #12
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4622      	mov	r2, r4
 80085a6:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <_vfiprintf_r+0x228>)
 80085a8:	a904      	add	r1, sp, #16
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7fc f904 	bl	80047b8 <_printf_float>
 80085b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085b4:	4681      	mov	r9, r0
 80085b6:	d1d5      	bne.n	8008564 <_vfiprintf_r+0x198>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	065b      	lsls	r3, r3, #25
 80085bc:	f53f af7e 	bmi.w	80084bc <_vfiprintf_r+0xf0>
 80085c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c2:	e77d      	b.n	80084c0 <_vfiprintf_r+0xf4>
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	4622      	mov	r2, r4
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <_vfiprintf_r+0x228>)
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	4630      	mov	r0, r6
 80085d0:	f7fc fba8 	bl	8004d24 <_printf_i>
 80085d4:	e7ec      	b.n	80085b0 <_vfiprintf_r+0x1e4>
 80085d6:	bf00      	nop
 80085d8:	08009570 	.word	0x08009570
 80085dc:	080096bc 	.word	0x080096bc
 80085e0:	08009590 	.word	0x08009590
 80085e4:	08009550 	.word	0x08009550
 80085e8:	080096c2 	.word	0x080096c2
 80085ec:	080096c6 	.word	0x080096c6
 80085f0:	080047b9 	.word	0x080047b9
 80085f4:	080083a7 	.word	0x080083a7

080085f8 <__svfiscanf_r>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008600:	460c      	mov	r4, r1
 8008602:	2100      	movs	r1, #0
 8008604:	9144      	str	r1, [sp, #272]	; 0x110
 8008606:	9145      	str	r1, [sp, #276]	; 0x114
 8008608:	499f      	ldr	r1, [pc, #636]	; (8008888 <__svfiscanf_r+0x290>)
 800860a:	91a0      	str	r1, [sp, #640]	; 0x280
 800860c:	f10d 0804 	add.w	r8, sp, #4
 8008610:	499e      	ldr	r1, [pc, #632]	; (800888c <__svfiscanf_r+0x294>)
 8008612:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008890 <__svfiscanf_r+0x298>
 8008616:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800861a:	4606      	mov	r6, r0
 800861c:	4692      	mov	sl, r2
 800861e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	270a      	movs	r7, #10
 8008624:	f89a 3000 	ldrb.w	r3, [sl]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 812a 	beq.w	8008882 <__svfiscanf_r+0x28a>
 800862e:	4655      	mov	r5, sl
 8008630:	f7fe fff4 	bl	800761c <__locale_ctype_ptr>
 8008634:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008638:	4458      	add	r0, fp
 800863a:	7843      	ldrb	r3, [r0, #1]
 800863c:	f013 0308 	ands.w	r3, r3, #8
 8008640:	d01c      	beq.n	800867c <__svfiscanf_r+0x84>
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd12      	ble.n	800866e <__svfiscanf_r+0x76>
 8008648:	f7fe ffe8 	bl	800761c <__locale_ctype_ptr>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	781a      	ldrb	r2, [r3, #0]
 8008650:	4410      	add	r0, r2
 8008652:	7842      	ldrb	r2, [r0, #1]
 8008654:	0712      	lsls	r2, r2, #28
 8008656:	d401      	bmi.n	800865c <__svfiscanf_r+0x64>
 8008658:	46aa      	mov	sl, r5
 800865a:	e7e3      	b.n	8008624 <__svfiscanf_r+0x2c>
 800865c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800865e:	3201      	adds	r2, #1
 8008660:	9245      	str	r2, [sp, #276]	; 0x114
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	3301      	adds	r3, #1
 8008666:	3a01      	subs	r2, #1
 8008668:	6062      	str	r2, [r4, #4]
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	e7e9      	b.n	8008642 <__svfiscanf_r+0x4a>
 800866e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008670:	4621      	mov	r1, r4
 8008672:	4630      	mov	r0, r6
 8008674:	4798      	blx	r3
 8008676:	2800      	cmp	r0, #0
 8008678:	d0e6      	beq.n	8008648 <__svfiscanf_r+0x50>
 800867a:	e7ed      	b.n	8008658 <__svfiscanf_r+0x60>
 800867c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008680:	f040 8082 	bne.w	8008788 <__svfiscanf_r+0x190>
 8008684:	9343      	str	r3, [sp, #268]	; 0x10c
 8008686:	9341      	str	r3, [sp, #260]	; 0x104
 8008688:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800868c:	2b2a      	cmp	r3, #42	; 0x2a
 800868e:	d103      	bne.n	8008698 <__svfiscanf_r+0xa0>
 8008690:	2310      	movs	r3, #16
 8008692:	9341      	str	r3, [sp, #260]	; 0x104
 8008694:	f10a 0502 	add.w	r5, sl, #2
 8008698:	46aa      	mov	sl, r5
 800869a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800869e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80086a2:	2a09      	cmp	r2, #9
 80086a4:	d922      	bls.n	80086ec <__svfiscanf_r+0xf4>
 80086a6:	2203      	movs	r2, #3
 80086a8:	4879      	ldr	r0, [pc, #484]	; (8008890 <__svfiscanf_r+0x298>)
 80086aa:	f7f7 fd99 	bl	80001e0 <memchr>
 80086ae:	b138      	cbz	r0, 80086c0 <__svfiscanf_r+0xc8>
 80086b0:	eba0 0309 	sub.w	r3, r0, r9
 80086b4:	2001      	movs	r0, #1
 80086b6:	4098      	lsls	r0, r3
 80086b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086ba:	4318      	orrs	r0, r3
 80086bc:	9041      	str	r0, [sp, #260]	; 0x104
 80086be:	46aa      	mov	sl, r5
 80086c0:	f89a 3000 	ldrb.w	r3, [sl]
 80086c4:	2b67      	cmp	r3, #103	; 0x67
 80086c6:	f10a 0501 	add.w	r5, sl, #1
 80086ca:	d82b      	bhi.n	8008724 <__svfiscanf_r+0x12c>
 80086cc:	2b65      	cmp	r3, #101	; 0x65
 80086ce:	f080 809f 	bcs.w	8008810 <__svfiscanf_r+0x218>
 80086d2:	2b47      	cmp	r3, #71	; 0x47
 80086d4:	d810      	bhi.n	80086f8 <__svfiscanf_r+0x100>
 80086d6:	2b45      	cmp	r3, #69	; 0x45
 80086d8:	f080 809a 	bcs.w	8008810 <__svfiscanf_r+0x218>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d06c      	beq.n	80087ba <__svfiscanf_r+0x1c2>
 80086e0:	2b25      	cmp	r3, #37	; 0x25
 80086e2:	d051      	beq.n	8008788 <__svfiscanf_r+0x190>
 80086e4:	2303      	movs	r3, #3
 80086e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80086e8:	9742      	str	r7, [sp, #264]	; 0x108
 80086ea:	e027      	b.n	800873c <__svfiscanf_r+0x144>
 80086ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80086ee:	fb07 1303 	mla	r3, r7, r3, r1
 80086f2:	3b30      	subs	r3, #48	; 0x30
 80086f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80086f6:	e7cf      	b.n	8008698 <__svfiscanf_r+0xa0>
 80086f8:	2b5b      	cmp	r3, #91	; 0x5b
 80086fa:	d06a      	beq.n	80087d2 <__svfiscanf_r+0x1da>
 80086fc:	d80c      	bhi.n	8008718 <__svfiscanf_r+0x120>
 80086fe:	2b58      	cmp	r3, #88	; 0x58
 8008700:	d1f0      	bne.n	80086e4 <__svfiscanf_r+0xec>
 8008702:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008708:	9241      	str	r2, [sp, #260]	; 0x104
 800870a:	2210      	movs	r2, #16
 800870c:	9242      	str	r2, [sp, #264]	; 0x108
 800870e:	2b6e      	cmp	r3, #110	; 0x6e
 8008710:	bf8c      	ite	hi
 8008712:	2304      	movhi	r3, #4
 8008714:	2303      	movls	r3, #3
 8008716:	e010      	b.n	800873a <__svfiscanf_r+0x142>
 8008718:	2b63      	cmp	r3, #99	; 0x63
 800871a:	d065      	beq.n	80087e8 <__svfiscanf_r+0x1f0>
 800871c:	2b64      	cmp	r3, #100	; 0x64
 800871e:	d1e1      	bne.n	80086e4 <__svfiscanf_r+0xec>
 8008720:	9742      	str	r7, [sp, #264]	; 0x108
 8008722:	e7f4      	b.n	800870e <__svfiscanf_r+0x116>
 8008724:	2b70      	cmp	r3, #112	; 0x70
 8008726:	d04b      	beq.n	80087c0 <__svfiscanf_r+0x1c8>
 8008728:	d826      	bhi.n	8008778 <__svfiscanf_r+0x180>
 800872a:	2b6e      	cmp	r3, #110	; 0x6e
 800872c:	d062      	beq.n	80087f4 <__svfiscanf_r+0x1fc>
 800872e:	d84c      	bhi.n	80087ca <__svfiscanf_r+0x1d2>
 8008730:	2b69      	cmp	r3, #105	; 0x69
 8008732:	d1d7      	bne.n	80086e4 <__svfiscanf_r+0xec>
 8008734:	2300      	movs	r3, #0
 8008736:	9342      	str	r3, [sp, #264]	; 0x108
 8008738:	2303      	movs	r3, #3
 800873a:	9347      	str	r3, [sp, #284]	; 0x11c
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	dd68      	ble.n	8008814 <__svfiscanf_r+0x21c>
 8008742:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008744:	0659      	lsls	r1, r3, #25
 8008746:	d407      	bmi.n	8008758 <__svfiscanf_r+0x160>
 8008748:	f7fe ff68 	bl	800761c <__locale_ctype_ptr>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	781a      	ldrb	r2, [r3, #0]
 8008750:	4410      	add	r0, r2
 8008752:	7842      	ldrb	r2, [r0, #1]
 8008754:	0712      	lsls	r2, r2, #28
 8008756:	d464      	bmi.n	8008822 <__svfiscanf_r+0x22a>
 8008758:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800875a:	2b02      	cmp	r3, #2
 800875c:	dc73      	bgt.n	8008846 <__svfiscanf_r+0x24e>
 800875e:	466b      	mov	r3, sp
 8008760:	4622      	mov	r2, r4
 8008762:	a941      	add	r1, sp, #260	; 0x104
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f8bf 	bl	80088e8 <_scanf_chars>
 800876a:	2801      	cmp	r0, #1
 800876c:	f000 8089 	beq.w	8008882 <__svfiscanf_r+0x28a>
 8008770:	2802      	cmp	r0, #2
 8008772:	f47f af71 	bne.w	8008658 <__svfiscanf_r+0x60>
 8008776:	e01d      	b.n	80087b4 <__svfiscanf_r+0x1bc>
 8008778:	2b75      	cmp	r3, #117	; 0x75
 800877a:	d0d1      	beq.n	8008720 <__svfiscanf_r+0x128>
 800877c:	2b78      	cmp	r3, #120	; 0x78
 800877e:	d0c0      	beq.n	8008702 <__svfiscanf_r+0x10a>
 8008780:	2b73      	cmp	r3, #115	; 0x73
 8008782:	d1af      	bne.n	80086e4 <__svfiscanf_r+0xec>
 8008784:	2302      	movs	r3, #2
 8008786:	e7d8      	b.n	800873a <__svfiscanf_r+0x142>
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd0c      	ble.n	80087a8 <__svfiscanf_r+0x1b0>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	455a      	cmp	r2, fp
 8008794:	d175      	bne.n	8008882 <__svfiscanf_r+0x28a>
 8008796:	3301      	adds	r3, #1
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800879e:	3a01      	subs	r2, #1
 80087a0:	3301      	adds	r3, #1
 80087a2:	6062      	str	r2, [r4, #4]
 80087a4:	9345      	str	r3, [sp, #276]	; 0x114
 80087a6:	e757      	b.n	8008658 <__svfiscanf_r+0x60>
 80087a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087aa:	4621      	mov	r1, r4
 80087ac:	4630      	mov	r0, r6
 80087ae:	4798      	blx	r3
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d0ec      	beq.n	800878e <__svfiscanf_r+0x196>
 80087b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d159      	bne.n	800886e <__svfiscanf_r+0x276>
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295
 80087be:	e05c      	b.n	800887a <__svfiscanf_r+0x282>
 80087c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80087c2:	f042 0220 	orr.w	r2, r2, #32
 80087c6:	9241      	str	r2, [sp, #260]	; 0x104
 80087c8:	e79b      	b.n	8008702 <__svfiscanf_r+0x10a>
 80087ca:	2308      	movs	r3, #8
 80087cc:	9342      	str	r3, [sp, #264]	; 0x108
 80087ce:	2304      	movs	r3, #4
 80087d0:	e7b3      	b.n	800873a <__svfiscanf_r+0x142>
 80087d2:	4629      	mov	r1, r5
 80087d4:	4640      	mov	r0, r8
 80087d6:	f000 fabb 	bl	8008d50 <__sccl>
 80087da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e0:	9341      	str	r3, [sp, #260]	; 0x104
 80087e2:	4605      	mov	r5, r0
 80087e4:	2301      	movs	r3, #1
 80087e6:	e7a8      	b.n	800873a <__svfiscanf_r+0x142>
 80087e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ee:	9341      	str	r3, [sp, #260]	; 0x104
 80087f0:	2300      	movs	r3, #0
 80087f2:	e7a2      	b.n	800873a <__svfiscanf_r+0x142>
 80087f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80087f6:	06c3      	lsls	r3, r0, #27
 80087f8:	f53f af2e 	bmi.w	8008658 <__svfiscanf_r+0x60>
 80087fc:	9b00      	ldr	r3, [sp, #0]
 80087fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008800:	1d19      	adds	r1, r3, #4
 8008802:	9100      	str	r1, [sp, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	07c0      	lsls	r0, r0, #31
 8008808:	bf4c      	ite	mi
 800880a:	801a      	strhmi	r2, [r3, #0]
 800880c:	601a      	strpl	r2, [r3, #0]
 800880e:	e723      	b.n	8008658 <__svfiscanf_r+0x60>
 8008810:	2305      	movs	r3, #5
 8008812:	e792      	b.n	800873a <__svfiscanf_r+0x142>
 8008814:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
 800881a:	4798      	blx	r3
 800881c:	2800      	cmp	r0, #0
 800881e:	d090      	beq.n	8008742 <__svfiscanf_r+0x14a>
 8008820:	e7c8      	b.n	80087b4 <__svfiscanf_r+0x1bc>
 8008822:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008824:	3201      	adds	r2, #1
 8008826:	9245      	str	r2, [sp, #276]	; 0x114
 8008828:	6862      	ldr	r2, [r4, #4]
 800882a:	3a01      	subs	r2, #1
 800882c:	2a00      	cmp	r2, #0
 800882e:	6062      	str	r2, [r4, #4]
 8008830:	dd02      	ble.n	8008838 <__svfiscanf_r+0x240>
 8008832:	3301      	adds	r3, #1
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	e787      	b.n	8008748 <__svfiscanf_r+0x150>
 8008838:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800883a:	4621      	mov	r1, r4
 800883c:	4630      	mov	r0, r6
 800883e:	4798      	blx	r3
 8008840:	2800      	cmp	r0, #0
 8008842:	d081      	beq.n	8008748 <__svfiscanf_r+0x150>
 8008844:	e7b6      	b.n	80087b4 <__svfiscanf_r+0x1bc>
 8008846:	2b04      	cmp	r3, #4
 8008848:	dc06      	bgt.n	8008858 <__svfiscanf_r+0x260>
 800884a:	466b      	mov	r3, sp
 800884c:	4622      	mov	r2, r4
 800884e:	a941      	add	r1, sp, #260	; 0x104
 8008850:	4630      	mov	r0, r6
 8008852:	f000 f8ad 	bl	80089b0 <_scanf_i>
 8008856:	e788      	b.n	800876a <__svfiscanf_r+0x172>
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <__svfiscanf_r+0x29c>)
 800885a:	2b00      	cmp	r3, #0
 800885c:	f43f aefc 	beq.w	8008658 <__svfiscanf_r+0x60>
 8008860:	466b      	mov	r3, sp
 8008862:	4622      	mov	r2, r4
 8008864:	a941      	add	r1, sp, #260	; 0x104
 8008866:	4630      	mov	r0, r6
 8008868:	f3af 8000 	nop.w
 800886c:	e77d      	b.n	800876a <__svfiscanf_r+0x172>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008874:	bf18      	it	ne
 8008876:	f04f 30ff 	movne.w	r0, #4294967295
 800887a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008884:	e7f9      	b.n	800887a <__svfiscanf_r+0x282>
 8008886:	bf00      	nop
 8008888:	08009111 	.word	0x08009111
 800888c:	08008c19 	.word	0x08008c19
 8008890:	080096c2 	.word	0x080096c2
 8008894:	00000000 	.word	0x00000000

08008898 <_vfiscanf_r>:
 8008898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889c:	460c      	mov	r4, r1
 800889e:	4616      	mov	r6, r2
 80088a0:	461f      	mov	r7, r3
 80088a2:	4605      	mov	r5, r0
 80088a4:	b118      	cbz	r0, 80088ae <_vfiscanf_r+0x16>
 80088a6:	6983      	ldr	r3, [r0, #24]
 80088a8:	b90b      	cbnz	r3, 80088ae <_vfiscanf_r+0x16>
 80088aa:	f7fe fae7 	bl	8006e7c <__sinit>
 80088ae:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <_vfiscanf_r+0x44>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	d108      	bne.n	80088c6 <_vfiscanf_r+0x2e>
 80088b4:	686c      	ldr	r4, [r5, #4]
 80088b6:	463b      	mov	r3, r7
 80088b8:	4632      	mov	r2, r6
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	f7ff be99 	b.w	80085f8 <__svfiscanf_r>
 80088c6:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <_vfiscanf_r+0x48>)
 80088c8:	429c      	cmp	r4, r3
 80088ca:	d101      	bne.n	80088d0 <_vfiscanf_r+0x38>
 80088cc:	68ac      	ldr	r4, [r5, #8]
 80088ce:	e7f2      	b.n	80088b6 <_vfiscanf_r+0x1e>
 80088d0:	4b04      	ldr	r3, [pc, #16]	; (80088e4 <_vfiscanf_r+0x4c>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	bf08      	it	eq
 80088d6:	68ec      	ldreq	r4, [r5, #12]
 80088d8:	e7ed      	b.n	80088b6 <_vfiscanf_r+0x1e>
 80088da:	bf00      	nop
 80088dc:	08009570 	.word	0x08009570
 80088e0:	08009590 	.word	0x08009590
 80088e4:	08009550 	.word	0x08009550

080088e8 <_scanf_chars>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	4615      	mov	r5, r2
 80088ee:	688a      	ldr	r2, [r1, #8]
 80088f0:	4680      	mov	r8, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b932      	cbnz	r2, 8008904 <_scanf_chars+0x1c>
 80088f6:	698a      	ldr	r2, [r1, #24]
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	bf14      	ite	ne
 80088fc:	f04f 32ff 	movne.w	r2, #4294967295
 8008900:	2201      	moveq	r2, #1
 8008902:	608a      	str	r2, [r1, #8]
 8008904:	6822      	ldr	r2, [r4, #0]
 8008906:	06d1      	lsls	r1, r2, #27
 8008908:	bf5f      	itttt	pl
 800890a:	681a      	ldrpl	r2, [r3, #0]
 800890c:	1d11      	addpl	r1, r2, #4
 800890e:	6019      	strpl	r1, [r3, #0]
 8008910:	6817      	ldrpl	r7, [r2, #0]
 8008912:	2600      	movs	r6, #0
 8008914:	69a3      	ldr	r3, [r4, #24]
 8008916:	b1db      	cbz	r3, 8008950 <_scanf_chars+0x68>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d107      	bne.n	800892c <_scanf_chars+0x44>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	6962      	ldr	r2, [r4, #20]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	5cd3      	ldrb	r3, [r2, r3]
 8008924:	b9a3      	cbnz	r3, 8008950 <_scanf_chars+0x68>
 8008926:	2e00      	cmp	r6, #0
 8008928:	d132      	bne.n	8008990 <_scanf_chars+0xa8>
 800892a:	e006      	b.n	800893a <_scanf_chars+0x52>
 800892c:	2b02      	cmp	r3, #2
 800892e:	d007      	beq.n	8008940 <_scanf_chars+0x58>
 8008930:	2e00      	cmp	r6, #0
 8008932:	d12d      	bne.n	8008990 <_scanf_chars+0xa8>
 8008934:	69a3      	ldr	r3, [r4, #24]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d12a      	bne.n	8008990 <_scanf_chars+0xa8>
 800893a:	2001      	movs	r0, #1
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	f7fe fe6c 	bl	800761c <__locale_ctype_ptr>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4418      	add	r0, r3
 800894a:	7843      	ldrb	r3, [r0, #1]
 800894c:	071b      	lsls	r3, r3, #28
 800894e:	d4ef      	bmi.n	8008930 <_scanf_chars+0x48>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	06da      	lsls	r2, r3, #27
 8008954:	bf5e      	ittt	pl
 8008956:	682b      	ldrpl	r3, [r5, #0]
 8008958:	781b      	ldrbpl	r3, [r3, #0]
 800895a:	703b      	strbpl	r3, [r7, #0]
 800895c:	682a      	ldr	r2, [r5, #0]
 800895e:	686b      	ldr	r3, [r5, #4]
 8008960:	f102 0201 	add.w	r2, r2, #1
 8008964:	602a      	str	r2, [r5, #0]
 8008966:	68a2      	ldr	r2, [r4, #8]
 8008968:	f103 33ff 	add.w	r3, r3, #4294967295
 800896c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008970:	606b      	str	r3, [r5, #4]
 8008972:	f106 0601 	add.w	r6, r6, #1
 8008976:	bf58      	it	pl
 8008978:	3701      	addpl	r7, #1
 800897a:	60a2      	str	r2, [r4, #8]
 800897c:	b142      	cbz	r2, 8008990 <_scanf_chars+0xa8>
 800897e:	2b00      	cmp	r3, #0
 8008980:	dcc8      	bgt.n	8008914 <_scanf_chars+0x2c>
 8008982:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008986:	4629      	mov	r1, r5
 8008988:	4640      	mov	r0, r8
 800898a:	4798      	blx	r3
 800898c:	2800      	cmp	r0, #0
 800898e:	d0c1      	beq.n	8008914 <_scanf_chars+0x2c>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	f013 0310 	ands.w	r3, r3, #16
 8008996:	d105      	bne.n	80089a4 <_scanf_chars+0xbc>
 8008998:	68e2      	ldr	r2, [r4, #12]
 800899a:	3201      	adds	r2, #1
 800899c:	60e2      	str	r2, [r4, #12]
 800899e:	69a2      	ldr	r2, [r4, #24]
 80089a0:	b102      	cbz	r2, 80089a4 <_scanf_chars+0xbc>
 80089a2:	703b      	strb	r3, [r7, #0]
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	441e      	add	r6, r3
 80089a8:	6126      	str	r6, [r4, #16]
 80089aa:	2000      	movs	r0, #0
 80089ac:	e7c6      	b.n	800893c <_scanf_chars+0x54>
	...

080089b0 <_scanf_i>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	469a      	mov	sl, r3
 80089b6:	4b74      	ldr	r3, [pc, #464]	; (8008b88 <_scanf_i+0x1d8>)
 80089b8:	460c      	mov	r4, r1
 80089ba:	4683      	mov	fp, r0
 80089bc:	4616      	mov	r6, r2
 80089be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089c2:	b087      	sub	sp, #28
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	68a7      	ldr	r7, [r4, #8]
 80089c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089cc:	4b6f      	ldr	r3, [pc, #444]	; (8008b8c <_scanf_i+0x1dc>)
 80089ce:	69a1      	ldr	r1, [r4, #24]
 80089d0:	4a6f      	ldr	r2, [pc, #444]	; (8008b90 <_scanf_i+0x1e0>)
 80089d2:	2903      	cmp	r1, #3
 80089d4:	bf08      	it	eq
 80089d6:	461a      	moveq	r2, r3
 80089d8:	1e7b      	subs	r3, r7, #1
 80089da:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80089de:	bf84      	itt	hi
 80089e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089e4:	60a3      	strhi	r3, [r4, #8]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	9200      	str	r2, [sp, #0]
 80089ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80089ee:	bf88      	it	hi
 80089f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089f4:	f104 091c 	add.w	r9, r4, #28
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bf8c      	ite	hi
 80089fc:	197f      	addhi	r7, r7, r5
 80089fe:	2700      	movls	r7, #0
 8008a00:	464b      	mov	r3, r9
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	6831      	ldr	r1, [r6, #0]
 8008a0a:	ab03      	add	r3, sp, #12
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008a12:	7809      	ldrb	r1, [r1, #0]
 8008a14:	f7f7 fbe4 	bl	80001e0 <memchr>
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	b330      	cbz	r0, 8008a6a <_scanf_i+0xba>
 8008a1c:	f1b8 0f01 	cmp.w	r8, #1
 8008a20:	d15a      	bne.n	8008ad8 <_scanf_i+0x128>
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	b92a      	cbnz	r2, 8008a32 <_scanf_i+0x82>
 8008a26:	6822      	ldr	r2, [r4, #0]
 8008a28:	2108      	movs	r1, #8
 8008a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a2e:	6061      	str	r1, [r4, #4]
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a38:	6022      	str	r2, [r4, #0]
 8008a3a:	68a2      	ldr	r2, [r4, #8]
 8008a3c:	1e51      	subs	r1, r2, #1
 8008a3e:	60a1      	str	r1, [r4, #8]
 8008a40:	b19a      	cbz	r2, 8008a6a <_scanf_i+0xba>
 8008a42:	6832      	ldr	r2, [r6, #0]
 8008a44:	1c51      	adds	r1, r2, #1
 8008a46:	6031      	str	r1, [r6, #0]
 8008a48:	7812      	ldrb	r2, [r2, #0]
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	1c5d      	adds	r5, r3, #1
 8008a4e:	6873      	ldr	r3, [r6, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	6073      	str	r3, [r6, #4]
 8008a56:	dc07      	bgt.n	8008a68 <_scanf_i+0xb8>
 8008a58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4658      	mov	r0, fp
 8008a60:	4798      	blx	r3
 8008a62:	2800      	cmp	r0, #0
 8008a64:	f040 8086 	bne.w	8008b74 <_scanf_i+0x1c4>
 8008a68:	462b      	mov	r3, r5
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	f1b8 0f03 	cmp.w	r8, #3
 8008a72:	d1c8      	bne.n	8008a06 <_scanf_i+0x56>
 8008a74:	6862      	ldr	r2, [r4, #4]
 8008a76:	b90a      	cbnz	r2, 8008a7c <_scanf_i+0xcc>
 8008a78:	220a      	movs	r2, #10
 8008a7a:	6062      	str	r2, [r4, #4]
 8008a7c:	6862      	ldr	r2, [r4, #4]
 8008a7e:	4945      	ldr	r1, [pc, #276]	; (8008b94 <_scanf_i+0x1e4>)
 8008a80:	6960      	ldr	r0, [r4, #20]
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	1a89      	subs	r1, r1, r2
 8008a86:	f000 f963 	bl	8008d50 <__sccl>
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	f04f 0800 	mov.w	r8, #0
 8008a90:	461d      	mov	r5, r3
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	6822      	ldr	r2, [r4, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d03a      	beq.n	8008b10 <_scanf_i+0x160>
 8008a9a:	6831      	ldr	r1, [r6, #0]
 8008a9c:	6960      	ldr	r0, [r4, #20]
 8008a9e:	f891 c000 	ldrb.w	ip, [r1]
 8008aa2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d032      	beq.n	8008b10 <_scanf_i+0x160>
 8008aaa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008aae:	d121      	bne.n	8008af4 <_scanf_i+0x144>
 8008ab0:	0510      	lsls	r0, r2, #20
 8008ab2:	d51f      	bpl.n	8008af4 <_scanf_i+0x144>
 8008ab4:	f108 0801 	add.w	r8, r8, #1
 8008ab8:	b117      	cbz	r7, 8008ac0 <_scanf_i+0x110>
 8008aba:	3301      	adds	r3, #1
 8008abc:	3f01      	subs	r7, #1
 8008abe:	60a3      	str	r3, [r4, #8]
 8008ac0:	6873      	ldr	r3, [r6, #4]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	6073      	str	r3, [r6, #4]
 8008ac8:	dd1b      	ble.n	8008b02 <_scanf_i+0x152>
 8008aca:	6833      	ldr	r3, [r6, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	6033      	str	r3, [r6, #0]
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	e7dc      	b.n	8008a92 <_scanf_i+0xe2>
 8008ad8:	f1b8 0f02 	cmp.w	r8, #2
 8008adc:	d1ad      	bne.n	8008a3a <_scanf_i+0x8a>
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008ae4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008ae8:	d1bf      	bne.n	8008a6a <_scanf_i+0xba>
 8008aea:	2110      	movs	r1, #16
 8008aec:	6061      	str	r1, [r4, #4]
 8008aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008af2:	e7a1      	b.n	8008a38 <_scanf_i+0x88>
 8008af4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	780b      	ldrb	r3, [r1, #0]
 8008afc:	702b      	strb	r3, [r5, #0]
 8008afe:	3501      	adds	r5, #1
 8008b00:	e7de      	b.n	8008ac0 <_scanf_i+0x110>
 8008b02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b06:	4631      	mov	r1, r6
 8008b08:	4658      	mov	r0, fp
 8008b0a:	4798      	blx	r3
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d0df      	beq.n	8008ad0 <_scanf_i+0x120>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	05d9      	lsls	r1, r3, #23
 8008b14:	d50c      	bpl.n	8008b30 <_scanf_i+0x180>
 8008b16:	454d      	cmp	r5, r9
 8008b18:	d908      	bls.n	8008b2c <_scanf_i+0x17c>
 8008b1a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b22:	4632      	mov	r2, r6
 8008b24:	4658      	mov	r0, fp
 8008b26:	4798      	blx	r3
 8008b28:	1e6f      	subs	r7, r5, #1
 8008b2a:	463d      	mov	r5, r7
 8008b2c:	454d      	cmp	r5, r9
 8008b2e:	d029      	beq.n	8008b84 <_scanf_i+0x1d4>
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	f012 0210 	ands.w	r2, r2, #16
 8008b36:	d113      	bne.n	8008b60 <_scanf_i+0x1b0>
 8008b38:	702a      	strb	r2, [r5, #0]
 8008b3a:	6863      	ldr	r3, [r4, #4]
 8008b3c:	9e00      	ldr	r6, [sp, #0]
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4658      	mov	r0, fp
 8008b42:	47b0      	blx	r6
 8008b44:	f8da 3000 	ldr.w	r3, [sl]
 8008b48:	6821      	ldr	r1, [r4, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	f8ca 2000 	str.w	r2, [sl]
 8008b50:	f011 0f20 	tst.w	r1, #32
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	d010      	beq.n	8008b7a <_scanf_i+0x1ca>
 8008b58:	6018      	str	r0, [r3, #0]
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60e3      	str	r3, [r4, #12]
 8008b60:	eba5 0509 	sub.w	r5, r5, r9
 8008b64:	44a8      	add	r8, r5
 8008b66:	6925      	ldr	r5, [r4, #16]
 8008b68:	4445      	add	r5, r8
 8008b6a:	6125      	str	r5, [r4, #16]
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	b007      	add	sp, #28
 8008b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b74:	f04f 0800 	mov.w	r8, #0
 8008b78:	e7ca      	b.n	8008b10 <_scanf_i+0x160>
 8008b7a:	07ca      	lsls	r2, r1, #31
 8008b7c:	bf4c      	ite	mi
 8008b7e:	8018      	strhmi	r0, [r3, #0]
 8008b80:	6018      	strpl	r0, [r3, #0]
 8008b82:	e7ea      	b.n	8008b5a <_scanf_i+0x1aa>
 8008b84:	2001      	movs	r0, #1
 8008b86:	e7f2      	b.n	8008b6e <_scanf_i+0x1be>
 8008b88:	08009464 	.word	0x08009464
 8008b8c:	08008f61 	.word	0x08008f61
 8008b90:	08009079 	.word	0x08009079
 8008b94:	080096dd 	.word	0x080096dd

08008b98 <_putc_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	b118      	cbz	r0, 8008baa <_putc_r+0x12>
 8008ba2:	6983      	ldr	r3, [r0, #24]
 8008ba4:	b90b      	cbnz	r3, 8008baa <_putc_r+0x12>
 8008ba6:	f7fe f969 	bl	8006e7c <__sinit>
 8008baa:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <_putc_r+0x60>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	d112      	bne.n	8008bd6 <_putc_r+0x3e>
 8008bb0:	6874      	ldr	r4, [r6, #4]
 8008bb2:	68a3      	ldr	r3, [r4, #8]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	60a3      	str	r3, [r4, #8]
 8008bba:	da16      	bge.n	8008bea <_putc_r+0x52>
 8008bbc:	69a2      	ldr	r2, [r4, #24]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	db02      	blt.n	8008bc8 <_putc_r+0x30>
 8008bc2:	b2eb      	uxtb	r3, r5
 8008bc4:	2b0a      	cmp	r3, #10
 8008bc6:	d110      	bne.n	8008bea <_putc_r+0x52>
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bd2:	f7fd b94d 	b.w	8005e70 <__swbuf_r>
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <_putc_r+0x64>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	d101      	bne.n	8008be0 <_putc_r+0x48>
 8008bdc:	68b4      	ldr	r4, [r6, #8]
 8008bde:	e7e8      	b.n	8008bb2 <_putc_r+0x1a>
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <_putc_r+0x68>)
 8008be2:	429c      	cmp	r4, r3
 8008be4:	bf08      	it	eq
 8008be6:	68f4      	ldreq	r4, [r6, #12]
 8008be8:	e7e3      	b.n	8008bb2 <_putc_r+0x1a>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	701d      	strb	r5, [r3, #0]
 8008bf2:	b2e8      	uxtb	r0, r5
 8008bf4:	bd70      	pop	{r4, r5, r6, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08009570 	.word	0x08009570
 8008bfc:	08009590 	.word	0x08009590
 8008c00:	08009550 	.word	0x08009550

08008c04 <lflush>:
 8008c04:	8983      	ldrh	r3, [r0, #12]
 8008c06:	f003 0309 	and.w	r3, r3, #9
 8008c0a:	2b09      	cmp	r3, #9
 8008c0c:	d101      	bne.n	8008c12 <lflush+0xe>
 8008c0e:	f7fe b8e3 	b.w	8006dd8 <fflush>
 8008c12:	2000      	movs	r0, #0
 8008c14:	4770      	bx	lr
	...

08008c18 <__srefill_r>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	b118      	cbz	r0, 8008c28 <__srefill_r+0x10>
 8008c20:	6983      	ldr	r3, [r0, #24]
 8008c22:	b90b      	cbnz	r3, 8008c28 <__srefill_r+0x10>
 8008c24:	f7fe f92a 	bl	8006e7c <__sinit>
 8008c28:	4b3c      	ldr	r3, [pc, #240]	; (8008d1c <__srefill_r+0x104>)
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	d10a      	bne.n	8008c44 <__srefill_r+0x2c>
 8008c2e:	686c      	ldr	r4, [r5, #4]
 8008c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c34:	2300      	movs	r3, #0
 8008c36:	6063      	str	r3, [r4, #4]
 8008c38:	b293      	uxth	r3, r2
 8008c3a:	069e      	lsls	r6, r3, #26
 8008c3c:	d50c      	bpl.n	8008c58 <__srefill_r+0x40>
 8008c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c42:	e067      	b.n	8008d14 <__srefill_r+0xfc>
 8008c44:	4b36      	ldr	r3, [pc, #216]	; (8008d20 <__srefill_r+0x108>)
 8008c46:	429c      	cmp	r4, r3
 8008c48:	d101      	bne.n	8008c4e <__srefill_r+0x36>
 8008c4a:	68ac      	ldr	r4, [r5, #8]
 8008c4c:	e7f0      	b.n	8008c30 <__srefill_r+0x18>
 8008c4e:	4b35      	ldr	r3, [pc, #212]	; (8008d24 <__srefill_r+0x10c>)
 8008c50:	429c      	cmp	r4, r3
 8008c52:	bf08      	it	eq
 8008c54:	68ec      	ldreq	r4, [r5, #12]
 8008c56:	e7eb      	b.n	8008c30 <__srefill_r+0x18>
 8008c58:	0758      	lsls	r0, r3, #29
 8008c5a:	d449      	bmi.n	8008cf0 <__srefill_r+0xd8>
 8008c5c:	06d9      	lsls	r1, r3, #27
 8008c5e:	d405      	bmi.n	8008c6c <__srefill_r+0x54>
 8008c60:	2309      	movs	r3, #9
 8008c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	81a2      	strh	r2, [r4, #12]
 8008c6a:	e7e8      	b.n	8008c3e <__srefill_r+0x26>
 8008c6c:	071a      	lsls	r2, r3, #28
 8008c6e:	d50b      	bpl.n	8008c88 <__srefill_r+0x70>
 8008c70:	4621      	mov	r1, r4
 8008c72:	4628      	mov	r0, r5
 8008c74:	f7fe f886 	bl	8006d84 <_fflush_r>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1e0      	bne.n	8008c3e <__srefill_r+0x26>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	60a0      	str	r0, [r4, #8]
 8008c80:	f023 0308 	bic.w	r3, r3, #8
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	61a0      	str	r0, [r4, #24]
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f043 0304 	orr.w	r3, r3, #4
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	b91b      	cbnz	r3, 8008c9c <__srefill_r+0x84>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f7fe fd02 	bl	80076a0 <__smakebuf_r>
 8008c9c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008ca0:	b2be      	uxth	r6, r7
 8008ca2:	07b3      	lsls	r3, r6, #30
 8008ca4:	d00f      	beq.n	8008cc6 <__srefill_r+0xae>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <__srefill_r+0x110>)
 8008cac:	491f      	ldr	r1, [pc, #124]	; (8008d2c <__srefill_r+0x114>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	f006 0609 	and.w	r6, r6, #9
 8008cb4:	f7fe f94e 	bl	8006f54 <_fwalk>
 8008cb8:	2e09      	cmp	r6, #9
 8008cba:	81a7      	strh	r7, [r4, #12]
 8008cbc:	d103      	bne.n	8008cc6 <__srefill_r+0xae>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7fd ffd9 	bl	8006c78 <__sflush_r>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	6022      	str	r2, [r4, #0]
 8008cca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ccc:	6963      	ldr	r3, [r4, #20]
 8008cce:	6a21      	ldr	r1, [r4, #32]
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b0      	blx	r6
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	6060      	str	r0, [r4, #4]
 8008cd8:	dc1d      	bgt.n	8008d16 <__srefill_r+0xfe>
 8008cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cde:	bf17      	itett	ne
 8008ce0:	2200      	movne	r2, #0
 8008ce2:	f043 0320 	orreq.w	r3, r3, #32
 8008ce6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008cea:	6062      	strne	r2, [r4, #4]
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	e7a6      	b.n	8008c3e <__srefill_r+0x26>
 8008cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	d0cc      	beq.n	8008c90 <__srefill_r+0x78>
 8008cf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d002      	beq.n	8008d04 <__srefill_r+0xec>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7ff f940 	bl	8007f84 <_free_r>
 8008d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	2000      	movs	r0, #0
 8008d0a:	6360      	str	r0, [r4, #52]	; 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0bf      	beq.n	8008c90 <__srefill_r+0x78>
 8008d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d16:	2000      	movs	r0, #0
 8008d18:	e7fc      	b.n	8008d14 <__srefill_r+0xfc>
 8008d1a:	bf00      	nop
 8008d1c:	08009570 	.word	0x08009570
 8008d20:	08009590 	.word	0x08009590
 8008d24:	08009550 	.word	0x08009550
 8008d28:	080094b8 	.word	0x080094b8
 8008d2c:	08008c05 	.word	0x08008c05

08008d30 <_sbrk_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4c06      	ldr	r4, [pc, #24]	; (8008d4c <_sbrk_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4605      	mov	r5, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	f7f9 f952 	bl	8001fe4 <_sbrk>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_sbrk_r+0x1a>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_sbrk_r+0x1a>
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20000288 	.word	0x20000288

08008d50 <__sccl>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	780b      	ldrb	r3, [r1, #0]
 8008d54:	2b5e      	cmp	r3, #94	; 0x5e
 8008d56:	bf13      	iteet	ne
 8008d58:	1c4a      	addne	r2, r1, #1
 8008d5a:	1c8a      	addeq	r2, r1, #2
 8008d5c:	784b      	ldrbeq	r3, [r1, #1]
 8008d5e:	2100      	movne	r1, #0
 8008d60:	bf08      	it	eq
 8008d62:	2101      	moveq	r1, #1
 8008d64:	1e44      	subs	r4, r0, #1
 8008d66:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008d6a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008d6e:	42ac      	cmp	r4, r5
 8008d70:	d1fb      	bne.n	8008d6a <__sccl+0x1a>
 8008d72:	b913      	cbnz	r3, 8008d7a <__sccl+0x2a>
 8008d74:	3a01      	subs	r2, #1
 8008d76:	4610      	mov	r0, r2
 8008d78:	bd70      	pop	{r4, r5, r6, pc}
 8008d7a:	f081 0401 	eor.w	r4, r1, #1
 8008d7e:	54c4      	strb	r4, [r0, r3]
 8008d80:	1c51      	adds	r1, r2, #1
 8008d82:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008d86:	2d2d      	cmp	r5, #45	; 0x2d
 8008d88:	f101 36ff 	add.w	r6, r1, #4294967295
 8008d8c:	460a      	mov	r2, r1
 8008d8e:	d006      	beq.n	8008d9e <__sccl+0x4e>
 8008d90:	2d5d      	cmp	r5, #93	; 0x5d
 8008d92:	d0f0      	beq.n	8008d76 <__sccl+0x26>
 8008d94:	b90d      	cbnz	r5, 8008d9a <__sccl+0x4a>
 8008d96:	4632      	mov	r2, r6
 8008d98:	e7ed      	b.n	8008d76 <__sccl+0x26>
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	e7ef      	b.n	8008d7e <__sccl+0x2e>
 8008d9e:	780e      	ldrb	r6, [r1, #0]
 8008da0:	2e5d      	cmp	r6, #93	; 0x5d
 8008da2:	d0fa      	beq.n	8008d9a <__sccl+0x4a>
 8008da4:	42b3      	cmp	r3, r6
 8008da6:	dcf8      	bgt.n	8008d9a <__sccl+0x4a>
 8008da8:	3301      	adds	r3, #1
 8008daa:	429e      	cmp	r6, r3
 8008dac:	54c4      	strb	r4, [r0, r3]
 8008dae:	dcfb      	bgt.n	8008da8 <__sccl+0x58>
 8008db0:	3102      	adds	r1, #2
 8008db2:	e7e6      	b.n	8008d82 <__sccl+0x32>

08008db4 <nanf>:
 8008db4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008dbc <nanf+0x8>
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	7fc00000 	.word	0x7fc00000

08008dc0 <__sread>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc8:	f000 faba 	bl	8009340 <_read_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	bfab      	itete	ge
 8008dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008dd4:	181b      	addge	r3, r3, r0
 8008dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dda:	bfac      	ite	ge
 8008ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dde:	81a3      	strhlt	r3, [r4, #12]
 8008de0:	bd10      	pop	{r4, pc}

08008de2 <__swrite>:
 8008de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	461f      	mov	r7, r3
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	05db      	lsls	r3, r3, #23
 8008dec:	4605      	mov	r5, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	4616      	mov	r6, r2
 8008df2:	d505      	bpl.n	8008e00 <__swrite+0x1e>
 8008df4:	2302      	movs	r3, #2
 8008df6:	2200      	movs	r2, #0
 8008df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfc:	f000 fa4c 	bl	8009298 <_lseek_r>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	4628      	mov	r0, r5
 8008e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	f000 b9fb 	b.w	8009210 <_write_r>

08008e1a <__sseek>:
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e22:	f000 fa39 	bl	8009298 <_lseek_r>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	bf15      	itete	ne
 8008e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e36:	81a3      	strheq	r3, [r4, #12]
 8008e38:	bf18      	it	ne
 8008e3a:	81a3      	strhne	r3, [r4, #12]
 8008e3c:	bd10      	pop	{r4, pc}

08008e3e <__sclose>:
 8008e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e42:	f000 b9f7 	b.w	8009234 <_close_r>

08008e46 <strncmp>:
 8008e46:	b510      	push	{r4, lr}
 8008e48:	b16a      	cbz	r2, 8008e66 <strncmp+0x20>
 8008e4a:	3901      	subs	r1, #1
 8008e4c:	1884      	adds	r4, r0, r2
 8008e4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d103      	bne.n	8008e62 <strncmp+0x1c>
 8008e5a:	42a0      	cmp	r0, r4
 8008e5c:	d001      	beq.n	8008e62 <strncmp+0x1c>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f5      	bne.n	8008e4e <strncmp+0x8>
 8008e62:	1a98      	subs	r0, r3, r2
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	4610      	mov	r0, r2
 8008e68:	e7fc      	b.n	8008e64 <strncmp+0x1e>

08008e6a <_strtol_l.isra.0>:
 8008e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4689      	mov	r9, r1
 8008e72:	4692      	mov	sl, r2
 8008e74:	461e      	mov	r6, r3
 8008e76:	460f      	mov	r7, r1
 8008e78:	463d      	mov	r5, r7
 8008e7a:	9808      	ldr	r0, [sp, #32]
 8008e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e80:	f7fe fbc8 	bl	8007614 <__locale_ctype_ptr_l>
 8008e84:	4420      	add	r0, r4
 8008e86:	7843      	ldrb	r3, [r0, #1]
 8008e88:	f013 0308 	ands.w	r3, r3, #8
 8008e8c:	d132      	bne.n	8008ef4 <_strtol_l.isra.0+0x8a>
 8008e8e:	2c2d      	cmp	r4, #45	; 0x2d
 8008e90:	d132      	bne.n	8008ef8 <_strtol_l.isra.0+0x8e>
 8008e92:	787c      	ldrb	r4, [r7, #1]
 8008e94:	1cbd      	adds	r5, r7, #2
 8008e96:	2201      	movs	r2, #1
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	d05d      	beq.n	8008f58 <_strtol_l.isra.0+0xee>
 8008e9c:	2e10      	cmp	r6, #16
 8008e9e:	d109      	bne.n	8008eb4 <_strtol_l.isra.0+0x4a>
 8008ea0:	2c30      	cmp	r4, #48	; 0x30
 8008ea2:	d107      	bne.n	8008eb4 <_strtol_l.isra.0+0x4a>
 8008ea4:	782b      	ldrb	r3, [r5, #0]
 8008ea6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008eaa:	2b58      	cmp	r3, #88	; 0x58
 8008eac:	d14f      	bne.n	8008f4e <_strtol_l.isra.0+0xe4>
 8008eae:	786c      	ldrb	r4, [r5, #1]
 8008eb0:	2610      	movs	r6, #16
 8008eb2:	3502      	adds	r5, #2
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	bf14      	ite	ne
 8008eb8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008ebc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008ec0:	2700      	movs	r7, #0
 8008ec2:	fbb1 fcf6 	udiv	ip, r1, r6
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008ecc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ed0:	2b09      	cmp	r3, #9
 8008ed2:	d817      	bhi.n	8008f04 <_strtol_l.isra.0+0x9a>
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	42a6      	cmp	r6, r4
 8008ed8:	dd23      	ble.n	8008f22 <_strtol_l.isra.0+0xb8>
 8008eda:	1c7b      	adds	r3, r7, #1
 8008edc:	d007      	beq.n	8008eee <_strtol_l.isra.0+0x84>
 8008ede:	4584      	cmp	ip, r0
 8008ee0:	d31c      	bcc.n	8008f1c <_strtol_l.isra.0+0xb2>
 8008ee2:	d101      	bne.n	8008ee8 <_strtol_l.isra.0+0x7e>
 8008ee4:	45a6      	cmp	lr, r4
 8008ee6:	db19      	blt.n	8008f1c <_strtol_l.isra.0+0xb2>
 8008ee8:	fb00 4006 	mla	r0, r0, r6, r4
 8008eec:	2701      	movs	r7, #1
 8008eee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ef2:	e7eb      	b.n	8008ecc <_strtol_l.isra.0+0x62>
 8008ef4:	462f      	mov	r7, r5
 8008ef6:	e7bf      	b.n	8008e78 <_strtol_l.isra.0+0xe>
 8008ef8:	2c2b      	cmp	r4, #43	; 0x2b
 8008efa:	bf04      	itt	eq
 8008efc:	1cbd      	addeq	r5, r7, #2
 8008efe:	787c      	ldrbeq	r4, [r7, #1]
 8008f00:	461a      	mov	r2, r3
 8008f02:	e7c9      	b.n	8008e98 <_strtol_l.isra.0+0x2e>
 8008f04:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008f08:	2b19      	cmp	r3, #25
 8008f0a:	d801      	bhi.n	8008f10 <_strtol_l.isra.0+0xa6>
 8008f0c:	3c37      	subs	r4, #55	; 0x37
 8008f0e:	e7e2      	b.n	8008ed6 <_strtol_l.isra.0+0x6c>
 8008f10:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008f14:	2b19      	cmp	r3, #25
 8008f16:	d804      	bhi.n	8008f22 <_strtol_l.isra.0+0xb8>
 8008f18:	3c57      	subs	r4, #87	; 0x57
 8008f1a:	e7dc      	b.n	8008ed6 <_strtol_l.isra.0+0x6c>
 8008f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f20:	e7e5      	b.n	8008eee <_strtol_l.isra.0+0x84>
 8008f22:	1c7b      	adds	r3, r7, #1
 8008f24:	d108      	bne.n	8008f38 <_strtol_l.isra.0+0xce>
 8008f26:	2322      	movs	r3, #34	; 0x22
 8008f28:	f8c8 3000 	str.w	r3, [r8]
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	f1ba 0f00 	cmp.w	sl, #0
 8008f32:	d107      	bne.n	8008f44 <_strtol_l.isra.0+0xda>
 8008f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f38:	b102      	cbz	r2, 8008f3c <_strtol_l.isra.0+0xd2>
 8008f3a:	4240      	negs	r0, r0
 8008f3c:	f1ba 0f00 	cmp.w	sl, #0
 8008f40:	d0f8      	beq.n	8008f34 <_strtol_l.isra.0+0xca>
 8008f42:	b10f      	cbz	r7, 8008f48 <_strtol_l.isra.0+0xde>
 8008f44:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f48:	f8ca 9000 	str.w	r9, [sl]
 8008f4c:	e7f2      	b.n	8008f34 <_strtol_l.isra.0+0xca>
 8008f4e:	2430      	movs	r4, #48	; 0x30
 8008f50:	2e00      	cmp	r6, #0
 8008f52:	d1af      	bne.n	8008eb4 <_strtol_l.isra.0+0x4a>
 8008f54:	2608      	movs	r6, #8
 8008f56:	e7ad      	b.n	8008eb4 <_strtol_l.isra.0+0x4a>
 8008f58:	2c30      	cmp	r4, #48	; 0x30
 8008f5a:	d0a3      	beq.n	8008ea4 <_strtol_l.isra.0+0x3a>
 8008f5c:	260a      	movs	r6, #10
 8008f5e:	e7a9      	b.n	8008eb4 <_strtol_l.isra.0+0x4a>

08008f60 <_strtol_r>:
 8008f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f62:	4c06      	ldr	r4, [pc, #24]	; (8008f7c <_strtol_r+0x1c>)
 8008f64:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_strtol_r+0x20>)
 8008f66:	6824      	ldr	r4, [r4, #0]
 8008f68:	6a24      	ldr	r4, [r4, #32]
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	bf08      	it	eq
 8008f6e:	462c      	moveq	r4, r5
 8008f70:	9400      	str	r4, [sp, #0]
 8008f72:	f7ff ff7a 	bl	8008e6a <_strtol_l.isra.0>
 8008f76:	b003      	add	sp, #12
 8008f78:	bd30      	pop	{r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	2000000c 	.word	0x2000000c
 8008f80:	20000070 	.word	0x20000070

08008f84 <_strtoul_l.isra.0>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	4680      	mov	r8, r0
 8008f8a:	4689      	mov	r9, r1
 8008f8c:	4692      	mov	sl, r2
 8008f8e:	461e      	mov	r6, r3
 8008f90:	460f      	mov	r7, r1
 8008f92:	463d      	mov	r5, r7
 8008f94:	9808      	ldr	r0, [sp, #32]
 8008f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f9a:	f7fe fb3b 	bl	8007614 <__locale_ctype_ptr_l>
 8008f9e:	4420      	add	r0, r4
 8008fa0:	7843      	ldrb	r3, [r0, #1]
 8008fa2:	f013 0308 	ands.w	r3, r3, #8
 8008fa6:	d130      	bne.n	800900a <_strtoul_l.isra.0+0x86>
 8008fa8:	2c2d      	cmp	r4, #45	; 0x2d
 8008faa:	d130      	bne.n	800900e <_strtoul_l.isra.0+0x8a>
 8008fac:	787c      	ldrb	r4, [r7, #1]
 8008fae:	1cbd      	adds	r5, r7, #2
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	2e00      	cmp	r6, #0
 8008fb4:	d05c      	beq.n	8009070 <_strtoul_l.isra.0+0xec>
 8008fb6:	2e10      	cmp	r6, #16
 8008fb8:	d109      	bne.n	8008fce <_strtoul_l.isra.0+0x4a>
 8008fba:	2c30      	cmp	r4, #48	; 0x30
 8008fbc:	d107      	bne.n	8008fce <_strtoul_l.isra.0+0x4a>
 8008fbe:	782b      	ldrb	r3, [r5, #0]
 8008fc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fc4:	2b58      	cmp	r3, #88	; 0x58
 8008fc6:	d14e      	bne.n	8009066 <_strtoul_l.isra.0+0xe2>
 8008fc8:	786c      	ldrb	r4, [r5, #1]
 8008fca:	2610      	movs	r6, #16
 8008fcc:	3502      	adds	r5, #2
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	fbb2 f2f6 	udiv	r2, r2, r6
 8008fd8:	fb06 fc02 	mul.w	ip, r6, r2
 8008fdc:	ea6f 0c0c 	mvn.w	ip, ip
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008fe6:	2f09      	cmp	r7, #9
 8008fe8:	d817      	bhi.n	800901a <_strtoul_l.isra.0+0x96>
 8008fea:	463c      	mov	r4, r7
 8008fec:	42a6      	cmp	r6, r4
 8008fee:	dd23      	ble.n	8009038 <_strtoul_l.isra.0+0xb4>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db1e      	blt.n	8009032 <_strtoul_l.isra.0+0xae>
 8008ff4:	4282      	cmp	r2, r0
 8008ff6:	d31c      	bcc.n	8009032 <_strtoul_l.isra.0+0xae>
 8008ff8:	d101      	bne.n	8008ffe <_strtoul_l.isra.0+0x7a>
 8008ffa:	45a4      	cmp	ip, r4
 8008ffc:	db19      	blt.n	8009032 <_strtoul_l.isra.0+0xae>
 8008ffe:	fb00 4006 	mla	r0, r0, r6, r4
 8009002:	2301      	movs	r3, #1
 8009004:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009008:	e7eb      	b.n	8008fe2 <_strtoul_l.isra.0+0x5e>
 800900a:	462f      	mov	r7, r5
 800900c:	e7c1      	b.n	8008f92 <_strtoul_l.isra.0+0xe>
 800900e:	2c2b      	cmp	r4, #43	; 0x2b
 8009010:	bf04      	itt	eq
 8009012:	1cbd      	addeq	r5, r7, #2
 8009014:	787c      	ldrbeq	r4, [r7, #1]
 8009016:	4619      	mov	r1, r3
 8009018:	e7cb      	b.n	8008fb2 <_strtoul_l.isra.0+0x2e>
 800901a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800901e:	2f19      	cmp	r7, #25
 8009020:	d801      	bhi.n	8009026 <_strtoul_l.isra.0+0xa2>
 8009022:	3c37      	subs	r4, #55	; 0x37
 8009024:	e7e2      	b.n	8008fec <_strtoul_l.isra.0+0x68>
 8009026:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800902a:	2f19      	cmp	r7, #25
 800902c:	d804      	bhi.n	8009038 <_strtoul_l.isra.0+0xb4>
 800902e:	3c57      	subs	r4, #87	; 0x57
 8009030:	e7dc      	b.n	8008fec <_strtoul_l.isra.0+0x68>
 8009032:	f04f 33ff 	mov.w	r3, #4294967295
 8009036:	e7e5      	b.n	8009004 <_strtoul_l.isra.0+0x80>
 8009038:	2b00      	cmp	r3, #0
 800903a:	da09      	bge.n	8009050 <_strtoul_l.isra.0+0xcc>
 800903c:	2322      	movs	r3, #34	; 0x22
 800903e:	f8c8 3000 	str.w	r3, [r8]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	f1ba 0f00 	cmp.w	sl, #0
 800904a:	d107      	bne.n	800905c <_strtoul_l.isra.0+0xd8>
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	b101      	cbz	r1, 8009054 <_strtoul_l.isra.0+0xd0>
 8009052:	4240      	negs	r0, r0
 8009054:	f1ba 0f00 	cmp.w	sl, #0
 8009058:	d0f8      	beq.n	800904c <_strtoul_l.isra.0+0xc8>
 800905a:	b10b      	cbz	r3, 8009060 <_strtoul_l.isra.0+0xdc>
 800905c:	f105 39ff 	add.w	r9, r5, #4294967295
 8009060:	f8ca 9000 	str.w	r9, [sl]
 8009064:	e7f2      	b.n	800904c <_strtoul_l.isra.0+0xc8>
 8009066:	2430      	movs	r4, #48	; 0x30
 8009068:	2e00      	cmp	r6, #0
 800906a:	d1b0      	bne.n	8008fce <_strtoul_l.isra.0+0x4a>
 800906c:	2608      	movs	r6, #8
 800906e:	e7ae      	b.n	8008fce <_strtoul_l.isra.0+0x4a>
 8009070:	2c30      	cmp	r4, #48	; 0x30
 8009072:	d0a4      	beq.n	8008fbe <_strtoul_l.isra.0+0x3a>
 8009074:	260a      	movs	r6, #10
 8009076:	e7aa      	b.n	8008fce <_strtoul_l.isra.0+0x4a>

08009078 <_strtoul_r>:
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	4c06      	ldr	r4, [pc, #24]	; (8009094 <_strtoul_r+0x1c>)
 800907c:	4d06      	ldr	r5, [pc, #24]	; (8009098 <_strtoul_r+0x20>)
 800907e:	6824      	ldr	r4, [r4, #0]
 8009080:	6a24      	ldr	r4, [r4, #32]
 8009082:	2c00      	cmp	r4, #0
 8009084:	bf08      	it	eq
 8009086:	462c      	moveq	r4, r5
 8009088:	9400      	str	r4, [sp, #0]
 800908a:	f7ff ff7b 	bl	8008f84 <_strtoul_l.isra.0>
 800908e:	b003      	add	sp, #12
 8009090:	bd30      	pop	{r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	2000000c 	.word	0x2000000c
 8009098:	20000070 	.word	0x20000070

0800909c <__submore>:
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	460c      	mov	r4, r1
 80090a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80090a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a8:	4299      	cmp	r1, r3
 80090aa:	d11d      	bne.n	80090e8 <__submore+0x4c>
 80090ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090b0:	f7fe ffb6 	bl	8008020 <_malloc_r>
 80090b4:	b918      	cbnz	r0, 80090be <__submore+0x22>
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80090c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80090c8:	6360      	str	r0, [r4, #52]	; 0x34
 80090ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80090ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80090d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80090d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80090da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80090de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	2000      	movs	r0, #0
 80090e6:	e7e8      	b.n	80090ba <__submore+0x1e>
 80090e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80090ea:	0077      	lsls	r7, r6, #1
 80090ec:	463a      	mov	r2, r7
 80090ee:	f000 f900 	bl	80092f2 <_realloc_r>
 80090f2:	4605      	mov	r5, r0
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d0de      	beq.n	80090b6 <__submore+0x1a>
 80090f8:	eb00 0806 	add.w	r8, r0, r6
 80090fc:	4601      	mov	r1, r0
 80090fe:	4632      	mov	r2, r6
 8009100:	4640      	mov	r0, r8
 8009102:	f7fe fb27 	bl	8007754 <memcpy>
 8009106:	f8c4 8000 	str.w	r8, [r4]
 800910a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800910e:	e7e9      	b.n	80090e4 <__submore+0x48>

08009110 <_ungetc_r>:
 8009110:	1c4b      	adds	r3, r1, #1
 8009112:	b570      	push	{r4, r5, r6, lr}
 8009114:	4606      	mov	r6, r0
 8009116:	460d      	mov	r5, r1
 8009118:	4614      	mov	r4, r2
 800911a:	d103      	bne.n	8009124 <_ungetc_r+0x14>
 800911c:	f04f 35ff 	mov.w	r5, #4294967295
 8009120:	4628      	mov	r0, r5
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	b118      	cbz	r0, 800912e <_ungetc_r+0x1e>
 8009126:	6983      	ldr	r3, [r0, #24]
 8009128:	b90b      	cbnz	r3, 800912e <_ungetc_r+0x1e>
 800912a:	f7fd fea7 	bl	8006e7c <__sinit>
 800912e:	4b2e      	ldr	r3, [pc, #184]	; (80091e8 <_ungetc_r+0xd8>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d12c      	bne.n	800918e <_ungetc_r+0x7e>
 8009134:	6874      	ldr	r4, [r6, #4]
 8009136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913a:	f023 0320 	bic.w	r3, r3, #32
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	b29b      	uxth	r3, r3
 8009142:	0759      	lsls	r1, r3, #29
 8009144:	d413      	bmi.n	800916e <_ungetc_r+0x5e>
 8009146:	06da      	lsls	r2, r3, #27
 8009148:	d5e8      	bpl.n	800911c <_ungetc_r+0xc>
 800914a:	071b      	lsls	r3, r3, #28
 800914c:	d50b      	bpl.n	8009166 <_ungetc_r+0x56>
 800914e:	4621      	mov	r1, r4
 8009150:	4630      	mov	r0, r6
 8009152:	f7fd fe17 	bl	8006d84 <_fflush_r>
 8009156:	2800      	cmp	r0, #0
 8009158:	d1e0      	bne.n	800911c <_ungetc_r+0xc>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	60a0      	str	r0, [r4, #8]
 800915e:	f023 0308 	bic.w	r3, r3, #8
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	61a0      	str	r0, [r4, #24]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f043 0304 	orr.w	r3, r3, #4
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009170:	6862      	ldr	r2, [r4, #4]
 8009172:	b2ed      	uxtb	r5, r5
 8009174:	b1e3      	cbz	r3, 80091b0 <_ungetc_r+0xa0>
 8009176:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009178:	4293      	cmp	r3, r2
 800917a:	dd12      	ble.n	80091a2 <_ungetc_r+0x92>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	1e5a      	subs	r2, r3, #1
 8009180:	6022      	str	r2, [r4, #0]
 8009182:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009186:	6863      	ldr	r3, [r4, #4]
 8009188:	3301      	adds	r3, #1
 800918a:	6063      	str	r3, [r4, #4]
 800918c:	e7c8      	b.n	8009120 <_ungetc_r+0x10>
 800918e:	4b17      	ldr	r3, [pc, #92]	; (80091ec <_ungetc_r+0xdc>)
 8009190:	429c      	cmp	r4, r3
 8009192:	d101      	bne.n	8009198 <_ungetc_r+0x88>
 8009194:	68b4      	ldr	r4, [r6, #8]
 8009196:	e7ce      	b.n	8009136 <_ungetc_r+0x26>
 8009198:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <_ungetc_r+0xe0>)
 800919a:	429c      	cmp	r4, r3
 800919c:	bf08      	it	eq
 800919e:	68f4      	ldreq	r4, [r6, #12]
 80091a0:	e7c9      	b.n	8009136 <_ungetc_r+0x26>
 80091a2:	4621      	mov	r1, r4
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff ff79 	bl	800909c <__submore>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d0e6      	beq.n	800917c <_ungetc_r+0x6c>
 80091ae:	e7b5      	b.n	800911c <_ungetc_r+0xc>
 80091b0:	6921      	ldr	r1, [r4, #16]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	b151      	cbz	r1, 80091cc <_ungetc_r+0xbc>
 80091b6:	4299      	cmp	r1, r3
 80091b8:	d208      	bcs.n	80091cc <_ungetc_r+0xbc>
 80091ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80091be:	42a9      	cmp	r1, r5
 80091c0:	d104      	bne.n	80091cc <_ungetc_r+0xbc>
 80091c2:	3b01      	subs	r3, #1
 80091c4:	3201      	adds	r2, #1
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	6062      	str	r2, [r4, #4]
 80091ca:	e7a9      	b.n	8009120 <_ungetc_r+0x10>
 80091cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80091d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d4:	6363      	str	r3, [r4, #52]	; 0x34
 80091d6:	2303      	movs	r3, #3
 80091d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80091da:	4623      	mov	r3, r4
 80091dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	2301      	movs	r3, #1
 80091e4:	e7d1      	b.n	800918a <_ungetc_r+0x7a>
 80091e6:	bf00      	nop
 80091e8:	08009570 	.word	0x08009570
 80091ec:	08009590 	.word	0x08009590
 80091f0:	08009550 	.word	0x08009550

080091f4 <__ascii_wctomb>:
 80091f4:	b149      	cbz	r1, 800920a <__ascii_wctomb+0x16>
 80091f6:	2aff      	cmp	r2, #255	; 0xff
 80091f8:	bf85      	ittet	hi
 80091fa:	238a      	movhi	r3, #138	; 0x8a
 80091fc:	6003      	strhi	r3, [r0, #0]
 80091fe:	700a      	strbls	r2, [r1, #0]
 8009200:	f04f 30ff 	movhi.w	r0, #4294967295
 8009204:	bf98      	it	ls
 8009206:	2001      	movls	r0, #1
 8009208:	4770      	bx	lr
 800920a:	4608      	mov	r0, r1
 800920c:	4770      	bx	lr
	...

08009210 <_write_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4c07      	ldr	r4, [pc, #28]	; (8009230 <_write_r+0x20>)
 8009214:	4605      	mov	r5, r0
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	2200      	movs	r2, #0
 800921c:	6022      	str	r2, [r4, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f7f8 fe8a 	bl	8001f38 <_write>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_write_r+0x1e>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	b103      	cbz	r3, 800922e <_write_r+0x1e>
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20000288 	.word	0x20000288

08009234 <_close_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4c06      	ldr	r4, [pc, #24]	; (8009250 <_close_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4605      	mov	r5, r0
 800923c:	4608      	mov	r0, r1
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	f7f8 fe9c 	bl	8001f7c <_close>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_close_r+0x1a>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	b103      	cbz	r3, 800924e <_close_r+0x1a>
 800924c:	602b      	str	r3, [r5, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000288 	.word	0x20000288

08009254 <_fstat_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4c07      	ldr	r4, [pc, #28]	; (8009274 <_fstat_r+0x20>)
 8009258:	2300      	movs	r3, #0
 800925a:	4605      	mov	r5, r0
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	f7f8 fe97 	bl	8001f94 <_fstat>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d102      	bne.n	8009270 <_fstat_r+0x1c>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	b103      	cbz	r3, 8009270 <_fstat_r+0x1c>
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	bd38      	pop	{r3, r4, r5, pc}
 8009272:	bf00      	nop
 8009274:	20000288 	.word	0x20000288

08009278 <_isatty_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4c06      	ldr	r4, [pc, #24]	; (8009294 <_isatty_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4605      	mov	r5, r0
 8009280:	4608      	mov	r0, r1
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	f7f8 fe96 	bl	8001fb4 <_isatty>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_isatty_r+0x1a>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	b103      	cbz	r3, 8009292 <_isatty_r+0x1a>
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000288 	.word	0x20000288

08009298 <_lseek_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4c07      	ldr	r4, [pc, #28]	; (80092b8 <_lseek_r+0x20>)
 800929c:	4605      	mov	r5, r0
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	6022      	str	r2, [r4, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7f8 fe8f 	bl	8001fca <_lseek>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_lseek_r+0x1e>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_lseek_r+0x1e>
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20000288 	.word	0x20000288

080092bc <memmove>:
 80092bc:	4288      	cmp	r0, r1
 80092be:	b510      	push	{r4, lr}
 80092c0:	eb01 0302 	add.w	r3, r1, r2
 80092c4:	d807      	bhi.n	80092d6 <memmove+0x1a>
 80092c6:	1e42      	subs	r2, r0, #1
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d00a      	beq.n	80092e2 <memmove+0x26>
 80092cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80092d4:	e7f8      	b.n	80092c8 <memmove+0xc>
 80092d6:	4283      	cmp	r3, r0
 80092d8:	d9f5      	bls.n	80092c6 <memmove+0xa>
 80092da:	1881      	adds	r1, r0, r2
 80092dc:	1ad2      	subs	r2, r2, r3
 80092de:	42d3      	cmn	r3, r2
 80092e0:	d100      	bne.n	80092e4 <memmove+0x28>
 80092e2:	bd10      	pop	{r4, pc}
 80092e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092ec:	e7f7      	b.n	80092de <memmove+0x22>

080092ee <__malloc_lock>:
 80092ee:	4770      	bx	lr

080092f0 <__malloc_unlock>:
 80092f0:	4770      	bx	lr

080092f2 <_realloc_r>:
 80092f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f4:	4607      	mov	r7, r0
 80092f6:	4614      	mov	r4, r2
 80092f8:	460e      	mov	r6, r1
 80092fa:	b921      	cbnz	r1, 8009306 <_realloc_r+0x14>
 80092fc:	4611      	mov	r1, r2
 80092fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009302:	f7fe be8d 	b.w	8008020 <_malloc_r>
 8009306:	b922      	cbnz	r2, 8009312 <_realloc_r+0x20>
 8009308:	f7fe fe3c 	bl	8007f84 <_free_r>
 800930c:	4625      	mov	r5, r4
 800930e:	4628      	mov	r0, r5
 8009310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009312:	f000 f827 	bl	8009364 <_malloc_usable_size_r>
 8009316:	42a0      	cmp	r0, r4
 8009318:	d20f      	bcs.n	800933a <_realloc_r+0x48>
 800931a:	4621      	mov	r1, r4
 800931c:	4638      	mov	r0, r7
 800931e:	f7fe fe7f 	bl	8008020 <_malloc_r>
 8009322:	4605      	mov	r5, r0
 8009324:	2800      	cmp	r0, #0
 8009326:	d0f2      	beq.n	800930e <_realloc_r+0x1c>
 8009328:	4631      	mov	r1, r6
 800932a:	4622      	mov	r2, r4
 800932c:	f7fe fa12 	bl	8007754 <memcpy>
 8009330:	4631      	mov	r1, r6
 8009332:	4638      	mov	r0, r7
 8009334:	f7fe fe26 	bl	8007f84 <_free_r>
 8009338:	e7e9      	b.n	800930e <_realloc_r+0x1c>
 800933a:	4635      	mov	r5, r6
 800933c:	e7e7      	b.n	800930e <_realloc_r+0x1c>
	...

08009340 <_read_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4c07      	ldr	r4, [pc, #28]	; (8009360 <_read_r+0x20>)
 8009344:	4605      	mov	r5, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	6022      	str	r2, [r4, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7f8 fdd4 	bl	8001efc <_read>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_read_r+0x1e>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	b103      	cbz	r3, 800935e <_read_r+0x1e>
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000288 	.word	0x20000288

08009364 <_malloc_usable_size_r>:
 8009364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009368:	1f18      	subs	r0, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfbc      	itt	lt
 800936e:	580b      	ldrlt	r3, [r1, r0]
 8009370:	18c0      	addlt	r0, r0, r3
 8009372:	4770      	bx	lr

08009374 <_init>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr

08009380 <_fini>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr
